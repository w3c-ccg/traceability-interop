{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9468c408-9c39-4926-a783-fabe9861f31f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ecdeb036-7efc-4766-8db2-de245d94fd75",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c53fd89b-160d-479e-ad6b-7dc1ea2d792b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fff362e6-7db4-4b5b-b674-aaf98a2dc986"
                }
              }
            ]
          },
          {
            "id": "8ba49900-23da-4bd6-babe-96299610e6be",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9522fc55-411e-4353-b663-04f90b2a8c27",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a8b0190f-8333-4359-b4e8-1bb9bd569df3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b3c57790-c62f-4fd8-8a94-3ebf57ad06b6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "28e39e37-5db2-4ade-8387-d8a9164cadb6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aceea981-f6ea-4312-afdf-b1bd0458f22e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "535a8788-3427-4ab3-bb67-64d9f6c08ad0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c322cf7-511d-48e8-8f99-b822a83800a7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "191574b1-33e1-4b4a-b2f8-dd44a461d9cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c0bd718-745d-48a5-9293-80f77a665a7a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94658e76-40fe-48e7-99cf-81e9b999985c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aaea4d31-9ce8-4743-9117-994b5692b14c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0aef932b-fb45-4c18-b75f-9aa3f60599ae",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a415e100-722e-40e5-aa9d-e904a20a4bf3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17004b9b-fa6b-4afc-933f-ed4c0c7381ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8044ddd2-14cb-46e9-9312-86a10619705d"
            }
          }
        ]
      },
      {
        "id": "68df4464-849c-4698-8339-fd275728604d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c0a5ed88-5082-4a91-86b7-52ab053e3056",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39dde3f8-c098-433f-82c5-996d3473f958",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b470e3ff-3601-4d2f-aba0-932b37dfe742",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15e3bec-7701-4539-bed0-8c78fd8e11b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e4f387b-30c6-4590-aebe-15786e4f659e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bff2977-e1b8-4d20-a18d-cc982ee8ce5b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec284fd-3e48-44d7-bf90-de98db64aae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00198377-3518-49d8-a412-741a3b3da101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04445b1f-6dce-4232-ac8e-8d0bd9b527c5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccd063e-5a53-4cf4-88ff-b90b60eebf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bfc1675-ecf8-4223-821d-df33eb472e4c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30c82de9-6e8c-4e69-9476-c546dc70f9ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4ae8fe7-e5c1-406a-8467-06bc471c0e03",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29aba463-3ba6-49a4-b170-efd737d6e00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2b42056-5525-4833-ad59-999b41dd3adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0effc1af-f903-4465-a6b4-4ec6896014f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da9c2cd8-7e40-465f-883e-3d58dc8ef091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee10f06-b178-4ca3-81b2-4d31131d0f2c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271773ea-f64e-4b23-9c50-12dbeeea363a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95ca6438-0b6b-42e0-9665-57a6dc826855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525d2b69-ae55-4147-9451-d8aa6f81598a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b1b3ee51-1a02-4828-b89b-fc731c41ef29"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "17ebf6f6-e7c2-4a97-a7a5-ca2ff8af1478",
            "name": "Positive Testing",
            "item": [
              {
                "id": "904c4352-e2cd-4c54-a529-ee243dc7eb01",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab66437e-61a6-4a2c-8ca7-bdf0f54ca61c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "16cf7ee4-d8dc-406d-8165-8660e06a8a58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "baff4aae-367d-488f-97d2-b4a71f1a1307",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "747a3b65-66ae-4fbe-ba1e-7812c26c8984"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aed81fab-d2ec-4214-9140-84f40f1e24b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9e8304f-03f5-4815-8119-d8103cd0e907"
            }
          }
        ]
      },
      {
        "id": "441e86ba-77ab-4d9d-b8a2-34468dd29d1e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bab28e7a-e83b-410e-9439-ca09f1e13e04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4a26e63-2ab1-4d0a-9572-05b2f5c1f2ac",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c1ed6e46-2fe6-4098-82be-fb92402b22b2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f600c41-14af-48af-a010-a307afe2fcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa5b320-85a9-449b-acae-8b81be64c826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7fd49f-5b7e-4c87-8ef9-1f0854233605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9a5aa84-f13b-48bb-856d-a0f06c40869a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9138167f-de4b-4334-9bde-6853c504ee2d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5688f61-9622-452b-86e7-4563b96c257d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22cb4aad-c167-4d70-aefb-040299355c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f2e1d7-c718-4e34-9ce1-14e99622456a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1050b4d-f1cf-45ad-8fb9-e3e9c186040e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11e235d-0a9c-4e04-85c9-46944202c6c8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5160a42-34a7-43ea-bdac-c1113d9b5ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9b9290-7f9e-40fd-904b-915dee81be72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c57b09-d0ee-4dd5-b3cc-9f53f5d3f7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb8f81ab-a27a-48d5-9198-2171fe81b362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00c58d2-fb15-47a8-8fb0-5139d5bbe1e5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e33963-ed24-410c-9604-76d0bd384ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ebea4a-37d9-4026-8d18-e943bff5ba16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d2188c-d670-45ea-a348-3b8884490f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79b5e4ac-aa5b-4c0a-a0bc-7c814c76ffb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f64f038-47df-4711-8c3b-1e7bb80bbf1d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c544188-f9fa-4d28-aa90-8752982b6459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e12899-1858-4ed3-8545-883f093fd8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b18a26-a4d5-4b66-a8ad-0ba0ca6f8d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "248bdff6-3c99-4dc2-a8bd-98207fd5ed30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896209a4-62e9-412d-99f7-a9fff3a7fc82",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee816346-2f08-48d8-9e23-20ad5920ad8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f547ec7-c868-411f-b1e9-b6c6da0f140a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d41067d-1cdb-4f25-b1f2-f815ddc8a3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4a8503a-9eac-4e80-a842-87961f1635a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc62842-eebd-40bd-b157-bb709d3e5666",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d280d3-dd3c-4dcd-afd1-c4cccf949338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2160b3d-a9a8-4474-90f2-6781b0226637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb1be6f-f479-4591-b815-02f68a8e23be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e624ace-1272-4ffd-926b-86ca36ec5703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebae948b-4c04-40f5-8c6c-09e50eb9f4dd",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ae4bcd-5d02-44fd-9db6-c94a774ea4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e44942-1761-4eff-b6c8-234f9c2f2a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7306f44-5b54-4221-839c-7ec01885aba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9fb8415-d664-4ef4-9d39-0263bee9870d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf57c37-fa54-4311-b4f6-a79609ac955f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda076ba-dcc1-41d5-8ce2-b636a48fb284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fee9d2-00de-4ed9-bdfb-beaed008789c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc0cb2a-c6a8-4d56-9652-d246fecea3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcdba76d-296e-49cf-90e2-92df365261dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405f025a-0d15-475c-b058-c309ea141854",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880ac495-1be6-4575-aaf0-4629b054b795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "452bbfa3-b39b-482f-b6e9-4c9a9a0c6cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c11f6f7-c613-4763-aae7-1554fbf64b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6c7d82f-229e-4f96-8e69-0689198d53e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005822a3-8c5e-45d0-a375-f02c7bb2ccc4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a5c992-39ad-45b9-b0ce-99cada0bc039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c7da58-bfab-4ac0-b4ce-a0ca6885e94b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ec14d6-ca36-497e-8447-fb8c11bf038c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12a25f8e-5ad3-497a-a8d3-94651ec11682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85aedb38-c0aa-45eb-8ec0-1d9fd6a7f663",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a10267-4174-4c92-a83a-7ccb822cc7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887f7000-0b18-4d50-8827-4a036626c2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ad1ad6-e20d-4af2-9d67-53638ca59b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "582fea9e-60b9-4e67-9340-e5205806cf36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bf04a2-f3a3-4643-ae7e-acd2b5ebd626",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9802e8a-2bfe-42e3-bcde-733b2a14b5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45351579-0002-462d-9fad-a952974003d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d57a4ef-0948-4481-8fd7-d5c52cd191a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddd7c13a-75aa-44de-aea9-86da5dcb1cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27422a33-e214-4ecc-9b3c-5ac580680d33",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369e271e-52cc-4953-90bb-c8d4f7b3d010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73cce260-ed08-49bd-a699-64a5cda574d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06f448e-a983-4853-b1a8-513ac9bb2831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f1107fc-b56e-472b-aae3-167e08b2a61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31a04b3-7490-48c3-b333-e695787937d7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba601ccb-2fb0-4ccb-a4fe-eaa2a3530ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17d0139-a179-4ce3-9464-9153c25b738f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b24acb3-b4ca-4028-959b-0538b067074b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c0d5b8f-4e89-4d7c-b968-3131748c8239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eb4359-ce7b-4015-a46a-7dbbc13fddd9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f55d33b-8e00-45d3-9878-d98662e15f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f68c06-d130-45e7-ba75-fa2a0ee4f891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9490f28d-2735-4137-9547-32a2a76dc699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f953b58-6737-491d-9fa9-4c10c51107e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1950b3-4936-44ad-8f58-0b256809d9b3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62fe85a-b912-4501-a154-25e31733c9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69bcee1-4a23-442f-b645-751493dddf3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8670ee0e-a996-41a8-b661-238438dd0e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7eb7825a-6b49-4702-a6f8-69f0f4c1e6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7064288e-37ee-46c1-950d-884e7527957d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2472eb6c-398d-4681-b0e8-d3deff8c4c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798d86b4-3444-4b88-bd0f-8b2ab0c98406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5281dab1-7c2e-40aa-9e9f-fcf18070fe5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b642b4aa-f069-4396-afec-6f01546d1c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879c6f33-0930-4976-8600-28f60553de9f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24152613-d8a8-4ad9-a87d-43dfb22ece9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8321e083-7bde-4d79-a18c-1b18c6bd9ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad7b1e7-1093-4b16-8c51-1dfb19cd8fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67574756-1172-4f5e-97be-d4fa40390d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57099b47-0a47-4da7-84c3-c02325436947",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3741a718-598d-41b1-b06b-e65763c343cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dad2dfb-f379-4d95-9c34-137c13e67c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfa9f5a-3ad2-45ec-bd3c-1e2baebaa227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb20292-de80-4afc-b4ab-c41c550cda23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc970e15-b922-4ef3-a3fc-36ee7df5c467",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ac839b-745b-4ef6-bd92-b269914857d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5990ade-af14-4814-9c9e-39d564a83a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffce02c-1a5c-4eb2-8e1e-30bb7537e0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a4b749-328c-4581-a6f7-9b4c4c67b4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f357d2-8808-4792-bf2f-92c473cf0c16",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b265b73f-9e4b-4268-9e91-e0c62f994cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9f9f0e-8d69-4568-a3f3-461a5954a086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fd5717-0ca2-4172-b2ab-bd00ddb0f645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe722456-3d00-4139-8cc2-c2aace499c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ea9f7a-043b-4065-acd1-323668a2576b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff0f178-bd83-4cb4-807f-ad93957e20c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af526ab0-e6a3-4601-bee0-b109fa1f3507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cca296-ff9e-4f05-a0f8-00f45f9225f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f05c872-4506-48d7-a71e-36eb575db1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa69f23-5356-45b5-b46e-389c98c8d3e1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a619ead-708d-45b1-9207-a2e4fb0025c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998f24d8-491c-4c62-aadf-4a464cbccb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846c7fa2-422b-445b-9f48-6fc7592d665c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f28dfb1-5042-46df-9a83-0a1f8872c9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2738309f-6cff-4b38-ab6b-0e46234329d9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb64377-26c7-44bd-95d5-488271d1668c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5bef4eb-649c-442e-a861-0c58c71ab30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8acd05c-0565-4f74-8839-8f755278877b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61c02312-7fb5-4400-b884-6327f19274f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b1ff94-6a8f-4692-acb7-c325fd6a21f1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be3cbb4-aa04-4994-80c5-8a25f82870d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b5e6e1-6bac-4906-9091-3872a92e23bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc419f7f-c6d4-4785-ae3e-1d80172e6f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "29bdd422-7640-4608-aa9a-65559f32f877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f00522c-e905-4ad8-b7a1-39d31727c581",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad59e119-59c1-4c12-94ff-861eef61e38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4124e82-5ad9-46d3-a3a4-92f17e9d175f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82162f40-aad6-471a-970d-eca7a54bf3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2799a377-0f3c-4cb3-b4d1-3745325cf645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb1e6b6-8b2a-4009-819a-6448dfa0fd89",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbed6a0-7d3b-4410-8b62-2678878fddc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8260849e-a1a8-44be-9b71-0eabcd351172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c34cab-d8c8-4872-9c34-c198215b2e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88fcc09c-1463-4536-9ad9-0459c26e67f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2525ffd7-2780-4af2-bc17-a294061bf9c6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492b2e86-e8f7-402c-b2d1-0ebd324fe233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100c9383-a21f-4bf3-9d30-acb24b2c1bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29bb6d30-30a7-42da-8ab1-a6ef5a4df0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e490de79-9af0-46df-95dc-76446dd090e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a667850-af6d-431d-b8ca-d8e190ed4fa6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e09bf62-8994-4504-a0ce-786e452e885e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8004d081-261e-4ce9-973a-ed92861583ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee51df58-bcc7-45a1-9c66-0504d68bb800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1df91074-9342-4b5d-81b1-21e2f2cb2067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6de4da-4a73-4d86-a860-f817edf00f44",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50a37a2-d612-46a1-84db-7d2932d589a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8268e2c3-e06b-458e-9cb1-9c92e583a961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70502fb6-c6c8-4a9a-a863-a935f453ed65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4842cf1-a602-415b-8b38-8fe635bc2566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ece11cd-7411-4b9c-aba3-1774aa39e093",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b86269-3676-426b-9f38-1530260d88a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61eeb7d7-5204-497e-ab63-bc0ad4d5eef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f4ca10-2bc2-4aa2-8648-595b7835d601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5078d3c-7f44-49bf-9a91-7670be6c6a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52165a5d-6393-451b-9900-0191a967df4e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19b19dd-148c-4745-a888-8dac73e21f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c4e2a2-6760-4e48-b8dd-3eccc05c771e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c1cade-aaa8-4a83-8e42-6896eb783019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07e78a3-9517-4c97-8f9d-87a186918c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a6ec9d-34cd-4a23-9c84-789ed9950ab5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b3c7ad-6119-4961-b0c6-ef0d8ce10225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1318679b-310a-48c5-9aef-2bbc37481094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accbe32d-6b9c-49db-adf4-dce6fbc9eb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7298c328-a6fb-4a91-a919-7f85a8cf58ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a733398-0609-4f09-a064-f13d7866af3e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9a6c9f-c37d-4691-be89-ed7e9169c4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1ae868-53fc-47ca-a7f8-73096c755add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884dbb41-7ef7-4301-9ec3-2881e273dc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "013303b1-36f5-4ed5-8a1c-8598573c00b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dae6d1a-a61c-494a-bc29-b696bea8f7fb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9224772a-7ea2-4e80-870d-1ceb4a62ef4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aeecae6c-6199-4dc3-9ade-2736551e442d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4e259f-64be-46ff-85c3-7cc010102b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0613c3-20a5-443b-aab7-e68679d68683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2aa6b03-6b05-4d1d-807f-6dba03dde81a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef17eb72-c254-4597-b2df-8c1c4a94604d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5869f96c-45c7-4ff0-bffc-0f0ae10219bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716af4e1-f758-43d5-a95f-3f25ada8acc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "370f2e39-6c6c-48a2-9dc8-b2d729762f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542e8f52-1366-4629-8cf1-a398c42eb9af",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a47cd8-7839-4a93-a033-68afa9ff5f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2877667-80a4-4ced-9ee1-eeef71737773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2595e5-9428-4fb8-8d87-370024f040f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3297e609-94fb-4342-a2b9-357c582a44f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981b238e-77c6-4634-a199-dec5b7597613",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe00291-f3d5-442a-ac3f-5c837ae34a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0111eeaf-2aa9-474d-8b80-319947c348a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041b2d79-d1e6-4ec8-8d74-e244bcba7804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8367467a-4e8a-4440-a6bc-d794ad76b2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86f4e19-13de-4b94-ab06-6ba051daff4e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63435868-42be-4c0e-b459-ee2dd85e2274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d759e5e-a8e3-4f6a-ba2e-ad242478b16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9cdfd9-ae9e-44e2-8336-f9f42cfdf230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "137deeff-2937-4165-9417-857c1e8b271e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c4000b-d905-465f-8dc3-ebd7056b7cb9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5abb86c-8157-4b67-9db4-fbb13aac04a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7fb84b8-d757-4689-a4dc-802f94b4aea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f5db18-6315-4d2d-9152-013a946bc0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c367f3-0654-4fbc-9cf2-da7699800051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2297da-18de-44d5-a005-b5ef85519147",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac62a48-bdc0-4bf2-bbb6-140c62f2950d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173be4ab-34f5-448d-8dda-864b3bf5a793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b51b717-42fe-4665-9580-85d7be56d9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d86ff9b3-91fa-4120-a6e0-8257b7fa9381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ac7931-39b7-4a00-aa9a-aa17eaa68c19",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3829ab-473b-4e29-b1e9-3f9452a5c6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8575f3f4-1505-43b1-baf9-a4ed5c9b751b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e24977-ad94-48c6-97f5-87cefa99865d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "78362916-648a-49cd-8961-ac2ed92a348a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed06eab-de31-4a4a-9753-b99488caa831",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0eb83b0-4fec-4040-9cac-95acad9c950a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d225b80f-77a2-4e9b-bda3-dc53327712fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243afc3d-ba61-4ee1-9f71-619071b97dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "09b5b25d-a25e-47b5-ada9-b00af8de819c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f153c2-70c5-42d6-9f8b-3764cfc8ec3a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df18101b-f30f-4f8c-bb47-1318565f284c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9341421a-6165-4dde-aab5-186624565513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e5d68c-3cd1-4011-ba75-4bc02ffba1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb52e1b-b94b-44c2-ae62-c0a3b02eb0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a87720-6325-47ea-b72f-07b1adaa7bec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cf2988-fcf0-4c1f-8fa6-0364c2156d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d157c266-f006-4417-b30e-8a2c298bdc85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a3c4d8-4cf5-4905-a96b-4f61f0821f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2005ce0b-64bd-496c-b40f-5c5928dd71bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c377153b-8cf7-4735-ab4e-d0a5c69d6399",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd08572-2e92-453a-8fde-b4a36da390e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6224f536-ce54-4c18-b4a3-f88aa83bfc8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5785c739-254e-495c-ad56-4447be52908a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55d35d24-94fb-4fde-a379-223dcfe4ca56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bace6c5-b256-4a8a-be6b-1a1a176c521d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff920856-9069-48b0-bb94-8a8c635078e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3185f2-8789-40cb-82a0-93d49ba278f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481b0c4e-4240-421b-9591-d6c0f1af5c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a76205b7-cb9d-4817-898d-53c8f082aa35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0671dce2-d0a9-4ffc-8934-810ed49d8291",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b204237-c2b9-418c-ba0c-07c1b6f6ef71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8252b1b8-b774-4998-998b-cd0e1f5ba83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13211a7e-d9ad-42c4-96ea-86fdfb988867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6787ed08-fd13-425c-8a02-38ff2eb0fe0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a1ce5c-57ae-41e5-99ec-5bf6e313ec66",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227fb368-af6a-49a6-a216-8e9424c84afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960bc94a-064b-458b-a98c-0f7245b75d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a41369-5883-48fe-a3b2-8a0334351197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b44b9710-4f11-4142-b73f-d18294c4da33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04a4193-fdac-48bb-a1a7-a6643d074278",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da62aa9c-e68a-4c17-9d1b-268430b5edf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251b9d80-df9d-4f43-8bb6-d49b47599b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55869a7d-bb18-4a56-a5de-2afa0d89e460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe0a68f7-f73e-4c17-905e-77a32b6f5c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d01069-dab0-434a-a087-2932e9d1bb21",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9152b757-392c-4717-8df3-026438015862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95153fe1-b6b8-4b7e-ba54-a719192a1dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb831628-cc34-4385-805c-4efcc0a24167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "761e9bb6-845a-4bcb-b616-6117a8d164cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d80554-a95d-4f2e-8613-75b00cc03cc5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccca7ff-56aa-424e-9d13-518973b69459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14050d84-6581-4ffa-86a2-10dd3136c1bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e425adc-d667-4c56-8cea-a8a84ff14faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1b3e8e-ea6a-4a7e-9612-c54fcc05dea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e329265-d9d5-48f6-acdc-70a4e0c88e21",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8eae46-b1bd-4673-807e-514e7d0bbe30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1c0e06-d613-43fd-8654-bd0ef83434e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c4611f-bb5a-4f19-a578-7ee3921c7c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea2d27f-b4d3-4f4c-b800-2652c11063e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08deb0d8-5981-4ec9-a6c9-c3ed0f8f4349",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84edd794-70fd-4974-899e-0af169d34a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1175e0-3579-44b2-86ab-471abe1bba5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ed3ebf-0898-4825-b693-3cb4ef36321f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51142402-a3a8-49e1-bd99-c22766f442b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955f99f1-a5d0-4f6f-a903-d31a5f945aa4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c84581f-fb88-40cf-88d6-02b25aec6c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed985630-c6d6-4994-87e8-0b0cf1057b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661c238c-d3dd-4057-bf04-fc9781fe9942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "21f588c6-2107-4b90-bef5-01a98f357842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0658f716-5235-46c4-ac07-17e1d0118b34",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db48352d-26bc-44d0-9683-fa4ae2b3d266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a04d1faf-839f-4f0c-a1b2-bd431ab38a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89440a54-6913-4894-bee5-7d37ceb53ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcc326af-6ed4-4660-b961-3eb8162abfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f138953-5a6d-4b5b-bd17-ea859c5bfed5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04c0fe8-7154-4d1b-bca7-ae7c9f64c7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e871322c-c017-4786-86fd-62b9871b2bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bba8fcd-8362-4b32-a77f-a4e4521c01a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "740dd2a1-6293-4e31-b934-96a0337c071e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f3b4fa-ed7d-47bf-8679-52a5025f3f3a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8c3c6a-c5bb-452e-abc5-39615e07d743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc48c9d-2788-4801-af23-a86bc2307ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85765525-87a1-4689-b7ec-af170f704e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3349e5d9-9768-4ef6-86f1-3f0ca41be66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dda6202-ea1b-42d3-9923-dea43d4980ff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4918145-8fbc-476d-9932-151ae075ccd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00743c6-519f-427c-b1e8-15926e9f4348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dded8f03-9552-4c23-9d59-ba8c6bb52b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a840e4-9cf2-4888-a926-ff4258604c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6359e521-bfda-4cff-951f-09577ccb001a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db0aa49-407d-42a5-9f1b-c03162ec1b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0200e9a-22cb-4647-a8bb-982baf656e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dca629c-56c6-4d5b-bc23-eb354caf7b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1c76a9-8c41-482e-ad0e-ad3a579568af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49d73fe-da5f-41c4-a0d0-38e2978746fe",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cd025e-94e9-4a61-a437-2f229ab7e095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767e2b21-42dc-4b8e-b635-6614a0d3762e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537e2e16-f22a-4fe4-a50d-8d0c57ff235c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "364b9de2-49f2-4ad2-94a5-bff022d483b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3192f2c9-b87e-4c8d-bac5-f7494f873b28",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c6bfb9-c17b-475c-aced-1e3eb0b6916f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51bd937-5eaa-4ab9-84f0-4de2901d7298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976ba38a-8d83-49fb-88f5-a47d286f551b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bdedb0-0bb4-42e5-b75b-c07c0c274a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4944139-4eb0-42d7-84df-3b39047ffeb1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557dad45-1c55-43b0-b6e1-fae8b1fb7105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2004681-a2ac-456f-9dc8-2820cd37f1dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5338e8-f670-47a8-9137-37be3b3f8720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fbaa8bc-a630-48f8-ba46-11dd01018aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ce1e8f-b649-4832-9c7c-052c104b3166",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea9f7a8-643f-4137-819d-40610f8b0b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6bc05b-4a17-42e7-b011-2e0152cd0ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081f9657-1315-41c1-8a66-f8cf4c4d7d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "792dd00c-ecc4-4c78-95b3-361e8e98cf85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb8b9f7-4d75-4923-bc69-60075544bb08",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5248653-528e-416e-96af-a8084cf7503d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac9b778-c65c-4357-913c-c0c724dea68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efd2715-1c34-406d-bd92-9eb685d1e61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08603959-6073-4f46-8a39-81bbc6abe847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012735d6-bc12-495b-9b7e-67e626f92b7a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313a7243-efae-4bbe-a8b3-7b05dee855b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f389f2-0a96-4771-819b-c326a3d304cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bbce2a-8a96-455e-97f7-dac0cf601ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8dd624-c71d-4b5b-a402-59e48cbb9837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dbc711-9111-478f-a131-d0bce3db99b1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6e888a-65d8-4ecc-ab70-505efd882f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43764b88-0de6-4977-908c-bfd084cc9f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdb57d6-e578-44d0-af5e-f99b1872c3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "163d9e78-c79d-46cb-8703-02666f86c1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b080e1d9-7f0b-43b0-9e7d-cac70fd365a1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b1b1b4-d204-4ea7-bf25-4b19184ad982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ffb336-6dae-48ec-af55-a18bdb3e5759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8594e99-2df1-41a2-8665-d077b6845443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdee551-3180-4918-9f8e-1d72f10644b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f08d38-5f46-4924-9aee-85e7a83d8d1f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40de83fa-b932-4a78-81eb-cab2f3406561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217f014b-9da1-4874-a82a-457486695652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2c925e-2ae7-4b00-8cea-b586d1529cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6183b7d8-6f34-417f-bbb8-d219a811d31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bae3237-dba9-41b9-b8b8-02334537440e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93da1e4-e013-421d-95be-ff632881e693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051dd7fd-ffbe-47e7-8aa6-c185adc01975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1b6559-6a4f-4819-b3d7-5c4a7e213ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e81a5841-3127-402a-9ac2-c5dcd4c834df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7d2d1f-acc8-4723-833c-83bb7c81f6ed",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aefe052-7a50-4f3d-8748-6e47de563a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9681807-f401-49ec-b83e-542d0d9468c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536a969d-711c-4282-b62d-2da9bd98fe5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07dc2cdf-5709-44a7-9b39-cde627923dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a3d81a-6c0b-486c-b74e-545464118557",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fa8c64-c209-46a5-9766-d92fc2def561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44cb839b-b13c-4859-9b0e-3e2b880c4540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15ec820-4f6a-4226-a98d-23a094bc4aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7b0f40-b426-46b6-8dac-221731b20ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c73636d-0b0a-4763-9648-dbe79594a046",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf9ffcf-1c87-40da-ab0e-e4d83ee5b567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ecadc8-a694-452a-b1d6-5ffa2bb7f0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f684430-70fd-448c-89e5-5bdd6d8a94dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "198fbd6f-69ac-4b6e-a063-adadc6c04222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0fd073-6ca5-4747-9f7e-e75328353ece",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57924dfc-93fc-4a0e-a0b6-8eff489ecf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd0f1d3-79cb-437f-981a-c427550c1a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f281744a-a926-4ebb-907b-0c55c3c6fac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0d9381-a854-4790-bb88-7ffe48e0357d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4da2c1d-34b9-4d52-bcdc-d0223e4cce71",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fa8afa-7b99-42fb-af81-7af8d74da012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a2971a-1363-44fa-bf1c-1f3e1038fff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5302b7d-ac5c-4f8c-abce-b03cfe775232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38f8ebb3-c49b-4430-bd33-95008eff6351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033c6baa-6223-4aed-9c10-a6475a77e354",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc43ad6-b5e0-41ec-9f8c-4631c6740a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba96f1d7-062f-45e0-9380-d1ee96c5befb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce2a974-3bf7-4147-ab84-3d33c31717bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2652c96e-f5bb-425d-8f30-bc0e60b155a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04840af5-9d6f-4cd9-b757-d87c7a1c70f6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8929b1b6-59d8-415b-bc91-a3edad84006f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab396f9c-3926-4649-98f1-2dfcaf6fb96b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b19c3dd-bf23-4c5c-9e17-9d61a547fdf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f083479c-a0e3-4730-bfbc-415bdc7bcf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1355a13-3dab-4404-82c9-6c35cb59c935",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30a69e5-dcfd-453f-93d1-b07602fe5ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18405580-9163-40cf-a68c-7b690d5aa0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a1d8c1-5b48-4b95-9fe2-1968cfbc984b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38a0a4d3-da74-4f7e-ae0b-7fa9b2ebd9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3c6135-caa8-4d43-827b-9670718a6749",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40766c5-4bba-4053-80cb-915b0cf9bf4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e25793-2ec2-40c4-bd21-1233c24dec19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cb8c7e-aa32-45df-8938-ad7a478a21d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "840faa7b-8657-4198-893e-409e0bcfcee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3393e845-544a-43a8-8cd9-fd2b0e214e95",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c35c51e-3d69-4758-8d22-822633078f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f1f6de-fd3e-4a0d-82d8-cd6eb55f020a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9b7066-2f54-4de6-8260-b02b553a8ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "50a8b57a-442e-4381-84cc-6510a3ae2e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3e5946-e4df-4396-b5f3-c69862a3aee1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6693ba4f-1e92-49ba-bfc8-ef402cdb7037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2056688d-1f06-43f5-a9e0-347ae012c426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33167124-895c-4861-a0d7-840b2252e1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf27d20e-33ec-4d6a-95b4-9a376082aa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e77f0e-eb88-43e9-99ef-5dd100dc3492",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1bb033-ac3e-423e-97ee-997a15393073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840d2a37-070e-428c-b0b8-67dc885bc118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07af1258-5bd1-405d-816c-cfb605337c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e578ea0-0a64-4384-9a31-7136f3834760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b87e3e6-3d8a-477d-8e37-c0de900f7d15",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c44112-1245-4f17-9742-d4546e1fc353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896f7668-9b4a-448a-9045-4a3324f51632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a2afda-f275-4c92-9764-906f1fcfa2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd504bd-51dd-4bc1-a611-87ce7fd75632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145115ad-9f6d-4ff6-8330-816903647701",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc12c0a-7ac7-4a24-bf48-a4ab4b680146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772076b7-5a20-4b60-a2fc-9e0de5efc96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07faeb2-c294-4e88-8c93-b522d077a2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65c0aa74-6af6-4984-b2c5-156a9ede9aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31976e29-ffbe-4f3f-9173-0a2fe84cba8e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb8074f-b678-4cad-99fd-6ebace11d245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e92ac8ea-2622-4f0f-beba-afa0c8bf93e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc185042-6062-4cb6-a821-269aba562f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "769ba2cf-2827-474e-b722-aa93037cd8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddae9d4b-396e-4d97-8536-2b5fd4d65951",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae7f52d-5e6f-463e-8972-74442130200c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b1c48d-744d-49f4-9aef-52e7a48c590e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f72fcb0-3dfc-47a8-93f5-850dd9868771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4983c8-5606-4262-93ba-ad77daaa21ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec531a0e-65ed-4750-a195-613e9e6db37c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6b96a9-b1b2-4cf9-9677-9f311b374d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc9d741-eb30-4ecc-89d7-420983562231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063b5dc9-1a6a-4a59-8a3b-1635e7a8df49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "941fb272-56b7-43b1-9e82-0d8cfac45e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0cab89-6135-48b9-9a1e-1960872100f7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a846218-e5e5-4200-bf25-35f00ade3ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f0a7d2-0210-468d-a70a-0801497e08e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4762da53-8145-419e-aa66-15e5cf4f7111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c09b430-593a-45de-a0e1-2378719c5a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278b5b7b-e50f-4a49-a19e-8c705cb98216",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f969ef8-e361-43c4-8aee-6ccac7ca00d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14200210-1ac0-4d1e-a174-e7870b3f4f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de065043-c86f-4b14-83e7-b9c359991561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "87fb8327-7d19-4e49-a1c0-0c885255ae37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2700c4cf-408d-4ecf-b8ef-e7bb4ea5d7ac",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a1064d-49c9-41b6-b80d-e98c047fcb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357109c4-0283-4d59-a411-d9e5c10992c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a724608e-47bb-4889-b7b9-6a2ec29e956f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4297692-428c-4a5e-b09d-cf0280938b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780f84da-a891-414d-a27a-07ad60c6ad28",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793bfa38-83e7-469d-9046-05bb9a450bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "458f1bc6-46ef-4fd1-ac2d-38633669b69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecac9090-a41a-4429-bc01-531a6e2bd3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8c63bd-b3d4-4123-af1f-01b61e4f98b2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3cc2b5d9-fc28-432a-9b51-731fb33d9db3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bad61744-8770-47a7-90fe-803a6666a888",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d182fd92-ae00-4d8a-a763-a539de5cbed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b858c32-b767-499c-8dbf-f4594126e474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1145e2-5638-46c4-b2fc-f2b5648bcac7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "067fbdda-1666-4669-8c8f-dde3276ce08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37cab20b-a074-4e46-8590-4fe2a4e58ab6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa89f42-37aa-4772-a6bd-fb6621d2729f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3be5ea7-46ef-4274-a97a-a6c5e4b0829b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9931d8ef-b7b7-40e5-a751-7de81271f25e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e771020a-f4da-4e7c-a19e-c8d1998347c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69b2dac5-6c8e-4bb8-be5f-673c4490f4f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "778238c5-c48e-46d5-b738-ef87080853c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6bf1ea9-39c3-4090-9a0d-620f6ecc871d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9f7d5dc-6b1d-43de-b217-b69a0f7391e3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1ef3d179-f843-4aa8-9bbf-06854b2c8cd2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "243393e0-2794-4f8f-ae74-5485407e0b0f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e8e5a44b-277c-4c98-adea-977f02795eda",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f47b8aff-bc00-4211-aebb-975ea017a51c"
                }
              }
            ]
          },
          {
            "id": "aff280ba-c143-472b-806a-be74c8d87768",
            "name": "Positive Testing",
            "item": [
              {
                "id": "48d83967-8b3f-4680-8128-b7d0ffeafe2c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d32d4414-0422-4590-9fb7-bc61ebc4b5b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e689141-3e90-4e57-9a4d-df3cbc682999"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddc9149c-8727-44aa-ae84-4775e4695249",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "afa955f0-1e37-46c3-9fe6-297a7e8322aa"
                    }
                  }
                ]
              },
              {
                "id": "9e484766-2be3-4e8a-8434-712ece9a1234",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b37bca3-8be8-4dc1-b03f-0ab492a9286c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21409e96-3707-497a-8a27-b5c783b90732"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e50bc162-50de-4bfd-8d89-4d85a9c2688c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e82efb4-11d6-433d-a6ce-8e65e71e74de"
                    }
                  }
                ]
              },
              {
                "id": "fa291396-4f2b-4756-a81f-698d8174e5ad",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "850a72e0-b049-4c43-86c5-36298d6146d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "22919e55-1940-4b76-892c-1bf274e53cba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "015769d0-e424-4828-bd2b-343c6436f607",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "13645941-1610-492d-bf0d-5e2c33e0e71d"
                    }
                  }
                ]
              },
              {
                "id": "cc39873c-fadc-4141-bcb8-113d46c1343f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57bc3828-b4e0-47a8-b52d-bfd16db041e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14d9fd72-0028-4a3a-b284-e18cf1741c16"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a92aebc2-5956-4282-a500-df6613b0c0fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a123582c-aa2c-47e1-8b6d-62e887678a9e"
                    }
                  }
                ]
              },
              {
                "id": "711e9b87-bfb0-4353-b3be-5c14fca61fb3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "224fa5a1-f392-4cf5-8ee2-69c0da2add81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bc74311-74da-4b20-8f51-1fd929761df7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c8b9af0-c1e0-4772-9e59-7570f3975f28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64695124-09d2-411c-a94a-fbac5f23649b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae878e36-1263-4092-a2dd-22255e6cb286",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d958d2ab-74ef-4783-9f9b-ee4c0fad1d47"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a553f678-50fe-429d-a9d9-b7c2b2dd735a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69c9889d-6261-49f4-8e0f-16e25e77dc4b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ffb62e9-d649-4922-ac3d-d5251b60fba2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "71e52275-2e69-4ca4-9f22-cd71dbd8f8eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef1c3610-9203-44da-85c0-b5c56585b4a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44b1e496-cba9-450d-bcb9-e6bf48bec280"
            }
          }
        ]
      },
      {
        "id": "29252aa3-76bb-4686-a236-8c698b4870d9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5eff4460-b77e-4d71-83f3-5d582a80c37a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9ddd818-1d9b-4762-8cad-873496f3e340",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "301f3323-4443-4ce2-8117-eb6bd51c8952",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530da5cf-702c-492b-845e-f66cb99dadf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d795318-3005-43d4-994d-3c66b85b426a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cc4931-67cf-45da-8429-fd5911c912dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "33f9bc52-c978-4468-9eea-183ecbf39287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce08270-c652-4101-9295-d7dd27cc8c37",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3487c25f-b6ed-4ac7-b266-a35a3625fba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80cde85-d8e2-46dd-966f-ad1e0699eb48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e081426-8143-425d-8d49-599852f55b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f59fa073-a803-488a-a789-2414886b5a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907c30ba-26cb-46cc-a67f-43dc0aa0a8b7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8872f0c-2e30-4440-9f4e-49f5465b6b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18fa469-c7da-40c7-b894-be268f0f90c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839ad8df-7e0a-4e42-a266-9d969d0a9ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ac82ee-3ac5-4d38-98af-8996068fbdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa91b75-564f-404c-ad21-6100e524934c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab969c57-78c9-4417-aa85-de5a5c22766e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea89f390-bb89-490b-b22b-712686c078e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b57316-35ea-40e8-953a-48f54c53eaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6797a2-da8a-46d2-872f-fda51a965477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d859fa-63d0-482d-acf9-e9daebd5d893",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ffcfd3-c34b-4091-a7ad-3080623a2019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07468ba9-8681-42b4-b576-376adddf1a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1a7188-ba3b-4807-bbf2-25290c700045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d89f26a8-3c74-46d9-9d42-03ffdcf5410f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca29d8be-75ee-47d8-b5bb-56b641224d0c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7822d89-20ae-48cb-8cff-d21a8bcc8282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c38cfa-8b62-4737-b8b9-830079326e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd2f56a-d1aa-47b9-bb89-95d220b0d8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c5d7ffa-2e49-423a-9160-37ff6a99c08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd217925-2244-4ba4-bbd5-c32d1d6f6999",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d11fa75-1b7f-4e7f-aac7-56ed3cdf9b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feecab02-3062-4bb9-b91f-c34d94014379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b766a00f-bf39-4dc6-b7ed-faa8e580d04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "348d3963-e0ae-49c5-8f47-66ca12d10c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69afacd0-ad86-4349-95a5-8b89661010a9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8343c29c-4ed5-48ed-9442-c370f0fa1c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3cbbc28-bf7c-436b-918e-130054513ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b037d94a-f28a-43df-b965-e1cd3abfa2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2c0248-681c-4684-98f8-8b63a6ad1e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9b4325-f4a4-4268-8af1-bdbeb9098d98",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7ed350-9234-4963-97ea-0262bad1e455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62656689-7676-4453-9dbd-28ec3a5a6982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bd780d-5931-400a-98dc-d8e9b36257ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf62bc1-775f-4923-9ffa-3927c8434410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0e5fe9-516d-4d5d-9441-7e7654778cee",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552f6503-df38-42e0-ab53-783b846d4759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7da499-1279-4c20-a9b1-4589dca04190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9b75d8-6a86-4717-95d1-1327fb95b6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54c67862-73af-4bd0-b92b-dca06414a922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6fd1b1-b6ad-4dfd-99b1-b1279d3ddd61",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2219e7-d48a-45b4-8a82-85b7eb2023f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7f3d75-67d6-49cf-a195-c80a636c2092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e21e39-a6ef-4dc6-b821-0527a06e9f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7a39c869-eb66-4650-9d8a-2c56e80ccfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a76b6fc-076e-4fde-8477-593d9bffc10f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c99bec-fe4e-4e68-8f57-7af290572e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0d25f3-9f08-4d44-bef0-c4788eaf9b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7868f74-ac2c-4bfd-b16a-d253382cc31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "458b0785-7ab6-4d32-aacd-9a6ec6b035be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407008ce-0588-4c38-9a01-cd4ffc23f445",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fc9c38-4eb1-465f-8e14-ad66b08d5d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0da3d1-cadb-4197-8731-4eee0acd0084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99472c3-f7e2-43a1-8c25-f1204fb1067b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "367e944c-42e9-4b8f-b01b-86f1b6e1b5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb952804-177e-4196-ace3-e821c20c044f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bbeee4-bd41-42ae-9612-d76ab8ea4a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d700e806-8d2e-46ee-a21c-8ad7120eb5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0029d751-a766-4862-9f0b-ef8df0a88f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5da0411f-25c5-4ba9-a1b7-732d992f57a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361b7030-8fb7-450f-831b-f88c3fc4c16d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80655ee-280c-4973-984c-22aae0bfb691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ffaa13-a725-43df-b01f-783daaaefe7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd10792-251a-438f-bae3-9ac3336199fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a92c823d-9420-41cf-9571-24dc8638f2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f76bb1c-3d52-4020-b50e-77c91ec298b2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7a2081-c215-43ad-b92a-d224abc4f3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200a5bca-9add-43a7-af16-7421f4a5a305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9845a76-1c2c-417a-8f6f-4c0f86d72f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d8dcb0f-d09f-4da6-a534-9f5b20efefd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d473da-be18-47e4-82f0-05d031fff8ca",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3147cf5f-908b-4126-83bc-97c629d4a6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d3bc9e-ec67-452d-8684-965471327d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159a9339-823d-4d50-9136-825bc99726fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d93b951d-139b-4b7e-a115-905c13262eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e62da3-1986-483a-9267-30c414578df7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b0a9f6-6790-4359-952a-4dd9007037de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c103ee84-98b8-438a-8a9e-785998cd4135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfffdab-b734-4ef5-aa21-fa3250228a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4553163b-6998-465c-9f6f-5f7996a35731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3e4490-189e-4a9a-8176-0530fba36c6c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9d67c1-5f39-46ec-8378-f70ee534e142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a593d77b-f158-429c-b087-9579211bd15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea931e8-6e19-45b4-b2bc-1f04c94f8215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "365e0e63-9b7d-4003-bfde-c67731593967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c43533-fceb-4675-b1f8-b9bb73131e1e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2503809-0c45-4e55-be75-64028e0c631c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c9ecd50-198e-41da-a731-1ae6376d9536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387b1c5e-36c2-4831-bf58-6847a08e4307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cec915e6-c713-4881-8eb8-72c476c2f6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aea9c85-27e7-47d4-a252-7e7df5789ebe",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edc2458-dd93-4961-866a-4494f1b28ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ecc652-c883-4c2e-ac02-8c2a32947b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc2d063-676f-4209-9a01-c3814504ece1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2dde9ac-8614-4ee8-a389-5eea0e3be1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e54341-c38a-421e-9cbd-d0392fa5a460",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc747a0b-9772-467a-b1e8-9f770e2aad92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37adf4b-28d3-4d7c-abd3-19eb03b2c00e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec4e415-1faf-4aa9-8058-18af35095ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e6b8152-4712-44e7-ad56-d004da539830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc1bc2d-4243-4e5e-92a8-95c3909bd8c9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e47054d-bfc6-4be9-a264-efefb7eeaf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1293e24-5036-4ad3-8c14-10eb07d2488c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ec1a4e-e3ad-4255-beda-bdb3af2a89cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43f7b8cf-0a2c-4f9d-ade4-21d1dbfc1fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d459f11f-7b99-4e1d-85ac-25fca210f3f3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71930d29-e7d2-4be0-8e47-05f86bfc0865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e86a2a2-e99c-4472-a76f-80cd545e1a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fac42a-e2d5-46d3-9082-e1a46c94b637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e982767-894b-4a3e-b76c-5c375191bad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2da168-cc74-4dc5-ae6d-ce3e9be545c5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386fbe34-6f66-4291-95eb-9f794e44f806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f9d96c-0af0-4b2a-922f-7cb0923ce087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2461a823-bdfe-4f1a-a6f3-7b80dddaef06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30b768b8-b291-4adc-819c-e20ea2c071f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdc6dd1-a598-47be-842f-61b337abd4ba",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd86323-9988-4960-949b-91cf6cba0988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3925de99-f337-4f21-951f-285de7bc3f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785c132d-9bf8-48d6-9167-bcc9bd782693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c79d7b65-7074-4508-8cb4-2efb5ec0ae18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd301dfd-c438-4788-90b9-c7ee4573dee4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26384ae-cbb9-475c-a2a2-16700bcc9d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "675c461f-8efa-4c25-9185-7a9bca45c4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a91df5-4f88-4315-b55c-4d42cd7f85de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5c407d-c9dd-4f73-b2a5-bdd56f135b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47948c0f-7a4f-4a35-a5f3-215e4b6a863c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e68d0d-e237-464c-af59-a5f3c010a1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5fe485-06ff-4315-aa9a-f3b25818edd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25d02d8-2052-4dc6-ac6a-b360dd9984e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ec23fd-988c-4d64-8a71-9f9c679140a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1401d432-10de-4f1b-9385-7c9b129003aa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8b5e14-cc7f-479e-a8ce-3dd4b9ebc22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973374cb-2280-4c97-a4a4-0e1f5a83ea1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccca99d-b969-413a-a5e9-c0a1c140f7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8c9e8e-0eb2-4e0e-874c-771de37c9a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dcdbbf-7cba-4ed2-9552-49b0158216d8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37f4785-63b3-4b04-884e-77784d400703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc76535-fe4a-46f3-b081-c9af8ebb3e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df20d0e5-70d5-4913-8e2e-bac234ad00ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3e528a-f3e7-4413-b34c-d6a7eca3f037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a611020-ee45-4df3-b100-6bfb9565a24d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3651ea9c-1520-47d2-b2d0-c9a9e1d51d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07964a4b-3ec5-42b6-ab72-71b1ad1b2088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c1e095-41a5-477f-a1aa-7a3f9c8fcb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c020fa6b-d340-490a-9648-2266cdc265b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c8f745-8e64-4ab6-b26c-6513976596f1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1929ed9e-7641-4759-9edb-0a27890eec76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dadca322-8e87-4ea3-8cb8-7c56d88aade2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af05b03-7ec2-444e-8be4-00d896f9498c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5de716b4-6067-4947-9362-bc0ec0f3e981"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bd2a4d55-fa75-4cf8-af73-da59ff7e286f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d944ccf-fe53-4db0-ac68-6bd336689ea0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a0e8d1-b591-4ee4-a1f0-8d664e0c7ef8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "673945d7-4662-4bf7-958b-579ab23e07bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a2d7a0-1a83-41bf-9bfa-e7ac0f5f761a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6027dc8-30b9-4f3e-a62e-03bb315bc6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7207a08-bff9-4f76-86ad-b1ee1316841f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f03d5f-bc17-4c6d-8537-7a9022a3b585",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "19d0aa0d-031d-485e-b35e-e3919583e9c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989e3564-e5ee-4d05-bfdc-786dcfff4a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "143b9dd4-1ae0-41a8-8deb-131088353592"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbc2f8f9-e910-484e-aca8-3252385133f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e176d76e-4f1e-4963-a8e7-3a4de459bf18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45a0d73a-20a6-4016-9048-3e974bc0aca3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5ad5428-ce07-4b76-a277-5817472c6c53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5974b0cf-0c9e-48c6-b316-8c557610a80b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8df8d3ae-cb53-4258-9814-dc2a66dcf81e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f971faf-6c58-4315-9cdd-d23c859f00db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38c22e34-b247-4b3d-81cc-9f03191c0d64"
            }
          }
        ]
      },
      {
        "id": "2c58c02e-7e7d-4862-a7de-c94ff5493db4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7861519a-af95-4451-a9a4-423300d9a66e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4e06271-5890-4a82-a19d-40b0483ccabb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f19ef5f5-02a5-4630-a8c2-7f15671f3990",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020646f5-837a-412d-bc01-5e05a939a5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e516a42-5fdf-47c0-ae4f-353b880c15e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c0b3d0-0f0d-4bb0-b19a-bb304a9bb1d6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a69c504-762f-4153-adfd-718bab9d512c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f84731-dc74-45ad-a40e-51283809e083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425a9c22-9a12-44a4-925b-e4bd18df2ae5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380a0d21-9cc5-41b5-88dd-bf63b0c70a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "525ff241-75f6-4391-87ab-651a10f6f3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5c6b5d-90ce-4e6a-92f3-314f7d06d5aa",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8942fb-956e-493e-b482-de85748cf422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97df9d7e-fd2b-415a-9d52-785ebb32eb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85587da-0ce2-488e-aaee-2a7e67723148",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1c4784-875e-4f24-8ac6-6962b759ad63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a43eee-c120-45ce-9d89-f143f7843b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa91cf3-0b4e-49e9-aab7-0659e44f8788",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0a13dd-0600-4890-83ba-750f9327d8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce09ec5-2c06-4018-8e69-5dd539fdd818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4bf408-aafb-4652-9fb7-acf6c73d3bab",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5405c3fe-f44d-4a29-a185-2953763276ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c774ed5-641a-4afb-8b2f-fdcfd2a1523f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a1e8f0-2184-438c-9be6-2a45e6876a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d76d8a-19fd-4dd0-b906-6bbd24b54458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9021ec56-299c-4a64-a0ca-a49beec23e90",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff21583-7d88-44a4-a816-37b9161ed358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2688c9f4-d818-42ef-bac7-c714c7be0247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c55b2e6-ba2a-4eef-8f97-c1a0714b0099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c38036d-90c9-4af5-bc33-0d21b329185c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d583c361-0513-4ce6-8806-108ff38f9802",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2898b4-bac2-4da5-b849-218d20b9b3d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ff19c9b-f104-4d8d-8416-684d830dee07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165ef5e6-ed9f-4dc5-b633-d1b2e40c5bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa1f504-a95f-4767-9969-dcb154c7091a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f968f5ee-e3f3-4501-9d5d-f487f0a08d8f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad35488f-7bac-4d02-a9fd-6c89a0a8ee52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d5fdd67-bc04-4b67-bdce-f78181343c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1adfd4-4e10-4932-a979-7ec864c8be59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bda740-2195-4195-b775-8ea6e6822d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aeda7e2-65d1-4770-b70d-da4cb80f7d35",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a35728-9994-4b72-91f1-41cf7ac9bbdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3ba4b2-ac09-4c36-903a-64764b2920a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878f5bff-350f-4363-b9da-edc8a008a3c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e992005-6e56-47b3-9c47-178c552f36a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c94c64f-269a-46f5-840e-d050b7783693",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804fecba-cce9-4b76-bddb-30292d7f65e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00bb1aa5-4cb8-4ec9-8f56-5d51e1e8e129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16313974-e46e-4fb9-9ff7-84b53962a3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fdbf267-37de-45e7-b84a-2ef3b0b130c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e118ea35-5a63-4bdd-92c6-a4aea31af3d9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c5e8f2-1457-4bdd-9a02-2905cb8c7e1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09751896-8fee-492a-b538-d52fc6ef2861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ece202-bebd-4566-bd3a-923bfcc40749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24289328-53f2-4806-a089-f589be8d2a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc94006c-f74b-4dde-b26a-bb5f44f957b8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890f72ec-92b5-48ff-8d3a-378ba4c823d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9843a082-edde-4252-83c3-f5b619b549b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed341203-44f8-4cd1-b051-fbea01e9728d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87ab20b-b3e6-46bd-8f60-94fa2a46eacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d737a2b-9983-4656-9762-eea743fc6e06",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c33aab8-bee7-4343-9fbe-fd0b033a4956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b292e5b-9e33-421d-8456-971167800cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5002119-4dc4-466f-bc63-e9f639abbce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2897d7ab-64bd-43e2-8dd7-ad2cbde0de67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35e06dd-2c09-4316-bfb6-247218d03116",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90f0593-941d-4352-a86b-68f67520c2c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b64457-620f-4f95-bac6-a0b49a9e1761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d569eec3-3a8e-493d-b087-f7404bd72fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b53cad0-7025-45dd-b143-c5d6077df1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de897aae-b88c-47b5-991a-f2e7aedbecd6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0668b5d-2e14-4417-a8cc-017d5fc4577d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b2dc1e-cfa9-4404-9af7-9292ae15872f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ba1e1c-934e-43bd-bbbb-d8cde2c4a077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb94719-c300-4490-81be-a4cb0e4cc0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0168d93b-4155-4ae0-876f-1d23433a8c58",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab6ddb3-63d6-42fb-8aec-3ae39db96488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b715c1-806d-4c07-84c1-4736ea413353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9b3ab6-6dfa-45dc-97c7-72dd3a9d6db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569ad989-9b87-477f-a35a-281eabd3bf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21dde7f-4189-41e4-8cc7-0296e5577c20",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bb38b1-9009-4b5d-aa58-62cf9bcefde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76afda8-8367-4a1c-90fc-c93e2326ca4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9f0cda-70b1-422e-aec4-a7ce2e4a4675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22827356-98aa-443f-bf40-9c0dd5e26844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1246ac8a-15e9-451e-8ba5-b279183c8a6c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa79b12-5eef-4c45-948d-18cb1485c731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb09973f-5b0f-404e-94fb-2b72fe2c64c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36ff085-4120-4e0b-b453-10fe7df6d02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcfa43a-ab5c-4e2a-87a2-09b01727595d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8781664f-8ccd-4a5e-818f-d2b45d9a7639",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4408e47-015d-47c4-8633-87fd4c35bf9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a56874-7db2-448b-8f77-d6888e5914a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb67366-edf4-42fa-baea-205207b2e87f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6f60f0-78f7-4ed3-95bf-b0f469b4fafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03063df1-2c05-45c8-95c9-448435edd018",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbbf703-df3f-4db5-ae61-a1b185b55afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9765342e-115d-4b32-a2ef-22d21a424a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb385cf-7f12-49c3-9802-ec18c0f57460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e09a0747-c6a3-4129-9c75-84bae1f8d463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c389a7-429e-406d-9fae-dd56f673db45",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdc7b4e-4c69-444c-a10b-1e789b647942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dee5637-32d3-4766-b045-a0b468f8c376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a96a49-e37d-4304-8015-e14af82a78ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5219c731-1087-4f36-9aa2-428615119b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aef9a7a-68e3-494f-81cd-42b847d98653",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017850ec-567d-4de7-b9f3-22753c70f95c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9ea628f-e42c-4a64-a695-d3b4ef0559e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356e8ab3-7e7c-445a-988c-2e11b92e4368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380defc4-02e9-4d05-b094-625c358bbbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7efdef3-d191-4a96-a92a-696fc9eded22",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9a7635-5f1f-4dc8-8363-7e9c9073f3bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5d4158b-9e46-42af-9666-682ad45c6bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c62d172-e51d-4ef7-82cb-f805fe7ac7aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d28d7fe-e732-4330-9ec7-8c77f499b213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68228c64-1bb8-4670-8f66-b12c46066a10",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04eed067-0179-4aca-a505-7e7720481661",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce154c3b-7894-4260-bba8-73e018eb10d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45d99f2-9af8-4527-99ba-08040b7f2fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9020975-449a-4ae3-8622-062332ba4b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fad558-655c-4fc6-a5ce-879b69161c43",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cde19b-a150-49c4-8c56-95aa338bf6f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bb6ff7d-c56d-4c46-bbf2-df2d878f47be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b66bc6f-8859-4743-a181-a2d02638a49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d6c425-83c8-45c0-8a2d-d4993bfe8b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353eb75f-8490-4a2e-bc66-0a804d4f3713",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbe3a22-848a-4c9a-89dc-e681878f6679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fa4737-4006-4884-82c0-1c0be537652c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c302e8-33d8-42ac-a84c-3dd78e47c235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae59600-e5df-4408-8903-6378d0863bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1cd0b2-ccee-45a0-966f-81bfcc7bd880",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79744ca-0936-43f5-9a24-195c730ab7b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b03e9ca0-d56c-4cea-baa6-950b052be403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59dcee86-6a29-4c54-9a49-6b11135f624e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40367c8-73cd-4b37-8ed3-4cbd048d3045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701fe28d-2682-49d9-961d-58a7bc6aaa63",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d2847a-5bfa-4837-9e86-f29d2e3fd860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "123fc7b4-7604-42d5-a238-ee2329feea71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cb8bb8-7be4-40bc-8329-adf64686ee16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171234d1-1c42-491f-891d-ada8feae859d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607dea37-9f54-40eb-ae80-f9f8cb3bed66",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244a79bc-1a97-42fd-ba57-0600f60811e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71c34061-b78d-45ad-a55f-3877d9c7c010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0228600b-4a55-476e-8eea-d6f65c23f87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec678dc7-66fe-4065-a29d-2edbbe5fd2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0a1b1f-07ce-4bec-813a-eadf2e70cda9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76514d23-8ef2-47e8-8d9c-0c1d6a4bba97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98fb70d2-fd5e-4bcd-8a19-37e4431eea8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a4c01d-fe17-4042-8edc-cb858377c52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceccaacb-5952-437a-93dd-334e33bf4fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e86c294-55d6-440a-8921-717f34f9a134",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79506f84-d605-44f9-9118-07a32ca13e52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "354b5d54-65e0-4d0c-a348-55946cfde74f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b4b552-d1f3-4623-a6b1-d71a91bf7638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8599ee92-8c2c-4f42-8e9c-a3482f7a543a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb08cf4a-95c9-4418-9e71-39ecace280b9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b6ea8b-d874-42ec-9181-f3438896184f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b64ff40-53fb-497f-ab03-4f3188cc7e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf41e3a-3c8e-420b-b4e5-f2d7fe7b1a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d25b4b-58b9-41a1-9a6f-0c77b1ec92bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9090c3-5f47-4b5f-bd5f-4d519aced483",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e833ec93-c2b0-428f-ae45-7ec28a6a8bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e690aacf-d941-4cef-a8d8-8277f96f29d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb75706-753c-4c0a-b69e-a7b8bd6bb16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc2dedd-193b-472e-b10a-29b532562f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11dadb30-ca34-4478-8110-88e9c7f7e346",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7b1188-661a-4361-9511-14690abc45aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69863b7-0e4b-404f-b708-d9733eeda0c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24870050-4cbd-4681-9b9b-b2f6c17a2af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc155d34-06b2-4604-a445-daed8a2c6b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35c0f51-ad5b-43ae-a4af-fab9fd6998ab",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2782cac2-8eda-45a7-86e0-d9e12568036e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70071ff3-6cbf-4b7e-8673-d73de97ca89f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9080ccf6-b880-4b8e-9d56-6e74bbb3851e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff2ea5e-253f-4358-92e4-8a02a40bb72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ac6e60-9b34-4835-8393-6af712186184",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900e09e9-596b-4156-add3-7f1692f624bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552a06a7-3a8f-48a1-9814-195e8ce3ac94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb39a7b7-7f84-41e7-85f3-a8873847c389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c819c8-5f8f-4af9-9068-b7a87073d7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8c089e-c346-4e28-805a-7e8f40a25397",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1922d7-dad7-442d-aa6a-0a41c399689f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fdf0ada-07f7-413c-aea4-f1605438b9f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa51e9e-4248-4ec3-903e-f6b3d800b929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbd3336-7392-4975-9df3-50e5947c9ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2631f515-3bfd-44b1-b6b9-10e4ad804dd1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bf543a-52ed-4062-97e8-8e6756a9c9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49aa82fe-e46b-4ec2-a480-f8f2d669d873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8145569-c492-49d0-8b00-bec02d26826d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8df4e747-3059-4655-b616-2803c259a4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8a4e2b-6241-4d07-adc9-031fbbf79f8d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e317b625-cc7b-4654-a951-506b819e8944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab37dd7-5ce9-4e94-b5f5-ba58267fb749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec974a7-37e6-4402-b28c-649160a31c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5b6374-3071-4d23-a735-993904a78149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85d2c7d-66be-429d-917d-21e5dafe141a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673c814b-c49b-4853-a861-223fe50c34fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02188425-942a-4a7b-b65f-bf8d112e105c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23842c88-2129-4243-a7a6-c917ec9c6ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61fa77b4-ecef-4ee0-8696-c5de329669f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed23abf-9fe4-4ea8-8ac7-f69ec4aa6312",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374eaa72-a323-4381-ab59-1fdb48c3b279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1975c070-a143-4a41-97e2-1548b86524f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22768739-1e61-4494-a3ac-19b5a1a2eda2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf182ac0-b57e-4a4c-bd9d-619ac945517e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee1eb90-28de-4534-a72c-c45ad06a681e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c35df2-67ff-4b98-9961-9ebe4ab923d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c0ebd9-0ca3-47e6-bc4e-390414baa1b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b2ae03-c72c-49f5-98a6-3f42e7454abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1786c2-07c1-49a3-8e4b-cf556a3f0860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e1b800-e458-48ff-be16-d74a7d3eea13",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8385a813-987f-44f6-a70f-c629f8e72d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a49905-e658-4abc-a1cf-d9a016aa54bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83913aa4-3d2a-49c7-8ac8-1392637ea540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6391fd61-d3dd-4957-acb7-496bb24fc999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c705533c-f1a2-44f5-a3d7-aeeab4f57f26",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10817a0c-5ea7-452a-8543-2e7863fe481f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92520968-7fdd-4a61-92d7-9789de25c584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0972a1-150b-4ffe-8d5f-8393d8ea0e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a7ef79-8f33-409c-a553-48508e632237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933d0042-ea40-44d4-ae65-343b4eac935d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a634ba5-0c1f-4aed-af1d-05a90bddfbfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65985b21-1341-4d9c-b421-c6d6a5cfc3cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1d4538-c378-4e74-a57c-4f2f2896dcb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a575fbf7-9f93-4110-bf89-bc8c12732cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298c4a3e-8854-4546-9494-0ae67cd23250",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c65062-afbd-494a-995f-36741f0cddd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f8b9c8-5371-40f0-9a2f-731090e3cc80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b5155d-397d-408f-90f9-cd8d6d5fc6f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a752f4-0adc-41de-86e0-bab91bfffc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c103a5d-88c8-4687-9dee-78b6a80139d5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924f6bdc-e64a-44d2-a966-2958c3f81a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6736de87-9a7e-43c8-88ee-3644878960e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c9f98c-9d45-4c52-a6f0-3b2559ea5b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8380020c-4628-4dfb-bea0-66d60b24a003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f926e9d-c0a4-462d-bb36-98c5deade3bb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0876045a-ce3a-42ca-8b0c-fde33e1595c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6913bf79-27bb-4ab7-9d63-93d79e7cda38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33368146-2219-4964-889c-981604d0ad9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1ba24b-72ce-42e4-8a5c-03280c1e1612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba8a25c-0e1c-4166-af1e-0879caabdf3a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c78d26-3c04-4de9-a9c4-d8b501fde63c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8443d193-a487-4797-876e-24625cf143b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008d3109-69f2-4d10-a3b5-7648ac2241c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16342c0f-4a64-4e80-8b7c-7996b7122d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5d1e5b-d973-45e7-9d62-e86d17958636",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060a6741-494c-45e6-b4ed-c22214ceb591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a45b57-aa4d-4987-9253-c4f78f101d30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b948fcab-c6a4-4bff-a6dc-03609829e8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca87a256-436e-4913-9614-3624076ce3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0812d79-edd4-4edb-9ea5-3e303b7de5be",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5fd43d-715c-4423-ada8-a6ef35072007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdcda03a-90dd-4f47-bbf9-84f773dc798d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de68e68-9621-4d69-bb58-ef6154696ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9d9c20-e457-4b98-bf10-c403d5c75c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b5c1e0-0905-4adf-92a4-7f23bad93c94",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c10f2b-bbf1-4571-bf2a-001dfe28e567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901a4721-c990-4f0e-89f9-5c8407bec1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9360010-5e7b-46e9-95d7-85345b4aece1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9408c138-7a68-488d-91b7-51228cd7f19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ebab89-0f54-43ed-a5f6-2d529c06a667",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f1d678-1a8f-44c9-ad86-7f3ec99bba1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae812a06-678f-4848-8c9d-b93ad80332b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ff4c47-d6f6-4eed-8cb8-04827ba4fa7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c3c658-d846-4034-9fa8-1f20f96da8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284d2785-3488-4e72-ac04-9b4c0d318637",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07882b85-3ce2-435b-b3eb-cf2a4280d149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10fda4d7-3a67-417e-a58d-3c0c4fffeeb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0c12b4-14af-4e58-a851-60f756acd948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7abaf605-eb5c-43cf-aa36-b5c5c9aaee25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041bf316-2c38-4894-81ec-258754e169f8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8e7574-1d93-46f9-98a7-458d1b63b606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e195c2-645f-442c-96b7-38653619a9f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be96f956-1d68-4858-b522-79c54a0e430f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48d5a0f-742a-42c8-82c3-6abcdf2b6356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa2577a-0336-4bb3-a366-ff58b2df97e0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b42a04-f022-4177-be0e-b0400ba1c055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e568c9ef-46cd-4dae-9584-3e5c4ceff2ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cfafd8-0402-45b3-94a6-b87d196e498a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66107cb7-e23b-4ee3-9e42-479649e09ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e653af75-3bc8-486c-8b0c-02a685aa7353",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c22920-3287-4b12-a3ae-d0d7f45aadb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9387c8-4392-4726-a0a9-11cc7f486143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd13862-614a-4631-93a3-344376c994ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22911a78-4fa3-4251-99e8-a66fcb9ba9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11952086-4475-4864-82c4-77de99988a38",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd01082-13e5-4690-9708-05ae2b21925d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec304e7-fafb-431b-91a2-2f10e15231c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1b2b9a-0abe-4f8b-811d-315862e81f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb966764-f561-4646-9796-7063034d3c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2ef4ef-ff40-4cee-bfb3-0f9fd2641638",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64230ae4-bfe0-4126-97c8-de15742148b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab340a1-b51e-4fdd-9fe2-9d57c857d658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffec8dc-297e-4409-8b27-4766f268091a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f74697a-792f-4653-9450-876f8f9cbfb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515cdca2-a6ed-4a36-999d-008563ecf9a6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f0acfe-67fd-4316-9318-f74f6d7233a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8abe09-f3ba-43d5-9cc7-f3a6de3afd12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b27ee8e-acaf-4b8c-9692-57987c803ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250df9a7-4ff9-4ba3-a828-a56505760347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4ac695-a500-478c-a535-8fb9bb5b8601",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2c4c86-c60c-4ee2-962b-f019a720e1f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f7f97d-6073-430b-9b49-2665872bc897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f04571f-29ee-42b4-b5d4-dbeb85bb5b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80fea5e5-f35b-464f-a2df-12a84cdbdf7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b82be7-059a-4d5b-834e-c2bae1813b2a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897301b1-cca0-4d83-9fee-9f3aa59a61b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cecfb6cd-b8b3-49b3-ae42-29a91adee7bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169abb12-a331-4933-b217-7275ecb20cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c9763c-a7d4-4735-a777-b7121f1c7582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519259f8-cee2-45f2-849c-f4c50d4560ef",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f80962-3976-4e6a-a8d2-8a91693727ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43aeece2-a55c-41b8-8dca-bacd4429bcd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a24ce2-5889-4331-aad3-5e1773ab5e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54338540-2eec-4bfe-9c35-e2b83f4c2622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c23a35-8eba-4334-b17e-17ed7db2c40b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d684dd-ab9c-47d4-b71a-2f735b164140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98f84541-d422-478c-b96f-c8a48cea0eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7166194-2763-4bee-8c43-872326135bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e29025a-259c-469d-9fb0-0d7c9f781a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a9a5e3-95a3-471d-af79-b65f3b31a373",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6735da1a-d234-44a6-a1bd-d363a5a946e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e1d2f3c-c1cd-45f1-a1fa-5f72770a1d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0db3d7-d8b6-42db-ba10-64e62e10b35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9cd0eda-228b-4eba-8121-93523e7aaa6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857796af-a7f6-4456-b758-9347d867e7ec",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c388c8c-d55b-4036-bf4d-a14de57cdad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a282a669-7a69-4812-8ecb-a6e36b874d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b489688-55d1-4257-ad5a-00bac1e97657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ffbbc2c-b4fe-4960-9c88-77cd4eaa09d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d0662f-3575-4cdf-998f-72011e4be906",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f766f2e1-cc2c-4fd1-a8c8-99d1ecf6921b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fbfc4c7-a5ce-4a54-8e08-2341e0cadaa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9676cd-7c62-4038-b802-93045d3bff94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a201aa2-e717-4086-a4ab-eb8ac4e78b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f245d460-4988-4979-a3f9-9c864634fcc7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf44c1e-8655-4114-9d77-76b634165b8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c8d09f-4fb0-4201-81e9-6b74f7cf5424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ceb2f5-3c4e-498a-a909-5e78cc7ccebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021aa536-fe5f-41ee-9130-dda46f7822ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb619ad7-3fbf-4e95-a60a-98e9a2813351",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd9760c-0e5f-4ee7-a54e-c3c71c1e2998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8527ca32-2775-4243-b382-c338a7a7fa86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3389bb25-05fa-445e-8165-7e0d2fbbf5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f23b49-c409-497a-b891-3aee221d5939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbea303-d57e-49ec-bd1f-f0b50711cf01",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c21062-4847-4704-8aa6-7fd5029f4b4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2136641-79b3-41d3-b6be-07391f3a320d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4983e61-d386-4369-aa4c-5110ed26dbcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe98bd8-2ee1-4e40-a9ad-14e69404dda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d547cc-b93c-4f9b-a7fe-a05388a37fac",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24aa920e-9b8b-43fe-9dfe-ecc0e4ddaf33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb562254-b5a1-41f2-b836-7520aa15a8cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e984caf2-f2c2-4b4b-9c27-c47e16df010f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db01c72d-1d4b-4966-8488-8a1351fcb476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3e5724-22f0-46fd-b534-0c3d67278705",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e93b73f-44d2-4fed-8999-23013b50f73c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15c23855-6518-4cb2-9501-e1611fd415a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a93b5f-7123-4819-abcb-ad5a42209a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4619355b-cae3-4de3-844a-97b5c197f9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2a671d-2b0c-478f-9d29-6862f0819980",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c217328c-ba6f-4898-a3eb-d2844d953df5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aaa7ba3-6bed-4f88-9999-2aa2524009ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b69075-276e-419c-8b3e-c4fe5e080065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55513c70-612d-4d59-9351-f1e5d99c0cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4095daa1-72ce-484d-87d4-7ccbad235669",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef69093d-ca75-49c0-a20d-de5dacf68f12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "434703b3-4dfa-49d2-a449-d54de586c224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd27635-cb42-45e9-a54a-6d9cd89fd8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c4bc1a-08e4-470c-90d5-535f935b5087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7f44f6-f4d7-4b15-9992-cd02dd64007a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c740ae06-3928-426a-ab66-752f62bf5a4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da271712-d771-4739-89c2-3ac0cff53754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "892f914d-7cc1-4860-8f60-829f934b8dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9251b36a-6788-44d4-a29e-292f0c4c647d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c0c979-4e34-4e0c-b54a-4505f602568d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9118c7f-3413-4877-8272-e5e6e3dc6f57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79f60dbc-583c-482d-9264-8b2cfff80ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1318d382-e539-4a86-bcf5-d6b1e0598101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea32762d-6e0d-4058-bbe9-abbde66b4261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b251c3c-c924-4146-9e60-ddb0d625ea1a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e03c1f5-ddc0-4c49-8216-a96ea3994df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a34a5561-3d84-40f2-866c-2dfa9dbb2397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1df099-7a88-458b-94da-3eaf007f5e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a756fd0-e220-415c-864f-797a6c8ded57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc8793c-2d3f-4a17-8b8d-f95f804cf71a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7542601-ffeb-4365-9dbb-2418e8a50243",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a095f44-ecea-447e-b36c-769b0bd46d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73b70ec-6c67-4b37-b91e-a7d565c000a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33466f58-cc80-4508-ba05-b042ba19dfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429c6bee-d623-478f-86ad-f2cc464a5941",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c521cbd2-3b0f-449a-8b6b-1cd4fed16122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "979c4cf7-3b3b-4cf8-97d2-ab7213bfde51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a511e76-c6fe-44d1-8631-216676565d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e4176d-ea7d-4887-a361-643deab133e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0830ada5-3425-45f9-8bb7-ef6bb7703ed2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e9f794-6915-4f2f-bc62-f9a48e61a72a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930cfc9b-34d9-4b26-9508-106b3bcea1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bb76cf-76bd-496a-8af0-a64e122d45d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d880f2-5658-481e-a616-0a8ac5437e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebb8224-9652-4cfa-897c-83d90f0d2cbb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9fdebd-4914-4ae1-bf48-2500c09e57b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c04300ee-0c2f-43ac-8c47-811d655e25fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb83d4c5-bd11-4cf7-8fc9-0df6766f5d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f6adbe-3d56-4505-8613-24def38173f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e94ce7-6c69-4b0c-90d5-39030fbd11a1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9139880-72d2-40b7-bf66-dc6c9ae67dd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0dde08a-6b0d-4a3d-ae05-6469a2043e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4a7333-20d4-4ddf-ac9f-94945f0f685c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5bde2b-19cc-4eba-910c-d422abedd259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda85ee3-0bbd-4b10-b810-46be4ca9fcbc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36563f1a-8151-47cc-a4e3-4eaf5b155889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "587f61dd-0c12-4430-95eb-988c679725be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "016ceaa4-efdb-42cf-9f3e-e3396d3d6867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c400a36c-5785-476e-94a8-21cbaf78b617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e385d2b7-1784-4dc8-b877-53ce281b14db",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3af538-280d-496d-af6a-7a2591b4f729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8942d94f-7fc7-4163-a174-1655a53eccdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "145cd9f2-104f-4f2d-be3d-bd32f07b04a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fcc6364-1871-470f-91aa-e43569c5c4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abeaacf-70f3-4573-bf26-25fbf7e15c57",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ef4caf-4ff0-48ff-b426-3ea947104b53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce2d45da-3777-41c6-b682-896409ae893a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "866b7515-3c42-4598-8ff0-7cc9c999c8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f119aab6-a47a-487f-9d57-355dbed397c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384a9cab-bbd6-47d5-9f91-8cd39af4ab39",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3007e38-18d0-4034-9e1f-9c31bfcddef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c264013-0f6f-4468-9fdf-caa1ed16ca1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9326899-a617-484a-93f5-048c79ce36b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a5332e-6b34-45c3-aeb2-db35ef0d605b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004fed63-803d-450c-b927-61d836b435b4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b6ab64-93bb-4219-b8b2-546657632172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fa2d85a-4d81-4e32-b9a3-85b753c3008a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc48bbed-3dab-48df-b7b6-f402e616d4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc358e4-bc34-4b69-bfd4-2ed417d3c6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773a9125-f477-4c7c-b4bb-08c5bb42adba",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931a1581-62db-4192-9063-5a8fc3191e6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6216c722-d289-47b7-8d2b-2f85ac8242e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf6c42a-44fe-4c39-b437-a3b5a024e10e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ad2399-ca07-414f-b278-f98d58f037b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92aa9263-101c-4dec-8f48-7e8df209cb48",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d604c4-1496-4b51-83fe-6175a018f1df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97943284-b6b7-4ee9-a488-5fbc8b391837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "856cb7ce-2ec3-4360-a06f-af2ed93ee5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f75afe-1924-4c72-b928-bfe968f021be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e48e175-5f80-4a12-b723-9ae9e1c6cecd",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92866db-f8ca-4dc0-b7c2-7843bd5d0163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8efa887-2b2d-46f4-a7b6-293993b6c2cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d5f3b8-9dc0-4d58-b6c0-1296a9aa52f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d31cb6-65fb-4e2b-a16c-c3cc5a69a396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac15e250-f7b4-44f3-82a4-38b1f5926def",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67eb226-2397-425b-9bd0-b8d236daff72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "122577c7-d1b3-47d9-bd80-e01f1d58a291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e1e699-dae9-420d-8f21-9cf260111cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c25f47-0810-4c73-8bff-2c5c635717cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53465ab1-d79e-4688-b6ea-e7196db40259",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a862572-05d4-42f6-8845-928539a07105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdc56542-224d-496e-9fe0-bdfdaac7ab42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7ceae2-e2ed-47b3-86f4-a7667b81b533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3dfe0c7-9265-48bb-ab42-7f7631c6e533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b32c17-a54e-437a-a241-b18998801b99",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5227eb8a-6ef0-4565-a11b-cbc26db454cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d20169a-dcb2-4990-9c17-50e489f5cc20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c89540b-5301-4507-8767-7684e7142cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ee7a8d-43e6-46a5-ae72-17787412753d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23dd5f9-c77c-442b-bd42-4e27a4ecc6f7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb37e43-126b-4aab-8cdf-2fde7b4821a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a554b8f-6f6a-4e7f-9f0d-4557246f8d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53492587-04b4-4a13-ad3c-c58d78c3c080",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18714de5-2e6e-4b76-acd5-7a2b1acf4c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fe2e2c-bcdb-4d39-8a87-0d40ca169746",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5ec11d-6879-4920-9884-0ad51773ecee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dce0370-1c42-466e-881f-248016a4a6df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc49f54-dcdc-4d93-9a80-372b9d31c347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254cb4a8-fe64-401c-b478-701d234aa178"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cacceab1-a2f9-4343-9397-14cc00ab3e1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2cefa74-5049-4bdd-aea8-5893627bcc47"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5849877a-0379-4348-a99d-ae99897ba060",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b50b3093-ffc4-4b0d-8d13-a72ef86da882"
                    }
                  }
                ]
              },
              {
                "id": "c09e1df9-f214-4299-a5fd-103ed73d05b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35336d01-2f42-4222-aad7-2aa50a5aa0a6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef3b994-1f3f-407f-bcab-08eb50d57b33",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9ca03b05-7221-4bef-809c-e4c626d4c9b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36529269-2f4e-4c9e-88aa-3f51f6455d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6edba65d-da64-4968-8892-988a1940a131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7710dd1-3fae-4e00-91ab-9a41dc9e2389",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5258c67-50e7-457f-a7ca-89d5845ab5b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5e375f66-0ddb-4316-b725-9b8eb12ab5f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae9dabd-b47e-47ae-b61a-34e84deac368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2bdc36e-f9d9-4e7b-9b3e-9893b0f8b0de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e0239ef-5e47-483d-aa36-820f242ecb1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0832fc90-48ec-4f50-b154-0111fa83ce37"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fed958a6-54a8-4389-a015-cc01b1396ca3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0c9e2e2-ae67-4bb6-8977-1413b3612e92"
                    }
                  }
                ]
              },
              {
                "id": "6a82830b-6763-4790-ae09-37859d8f2e5a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "979b1143-3e45-4b3d-87ef-f75ba61c5e9c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c89609-6dde-4a03-a737-bd36f0b15847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "58e1aa23-02bc-457d-9361-6c2057136bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d46ff3f-12d7-448a-9095-40e895f83f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1440bbf-cca1-48a1-8135-b486eb90216b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fde270f1-2f16-4fef-90db-fbc016ccc388",
            "name": "Positive Testing",
            "item": [
              {
                "id": "48d213c1-aaad-4ead-8f54-ad97c6d07b9a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "804f5866-e779-4260-8409-13ed2d5a9183",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b5d91f57-28ab-47ff-96f9-9d9e0b87f104"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3ff9a21-f26a-4651-8cda-b0dcf99a21c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efe0ec2f-92c1-45b5-aad0-e300f264132c"
                    }
                  }
                ]
              },
              {
                "id": "20b0aa68-7abc-4328-b80b-525d7b1d9d57",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09f653fe-2b4b-47c5-b73d-6c9f16351736",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b313f34b-0e58-41c4-a4f9-f8bb1667f0dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "908fc670-f874-45d1-a04b-d1861300e4b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2be6988a-77d7-4207-b047-d65626d1d942"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5da64cf8-3984-429c-b2b0-64b0b1bfb2ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9f65295a-2cc2-4e70-8ba4-2b1a971f96be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1a6ebb6-2bf1-4beb-9375-0c13dfc1ec25",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "544991ad-0237-48b0-8cd9-f6795eb6f246"
            }
          }
        ]
      },
      {
        "id": "3000afe9-dda5-418c-a2c7-693c31fe2324",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ce4f4225-931f-4777-95a1-9ded0381b058",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ae1569c-1f72-4ab9-b145-381717a6015b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3aaea343-a666-4360-822f-fe4c40c8c9e0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba1e496-f4bb-4ad8-a639-9e093ebcc4bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "de65ea74-b497-4709-a6c7-ad071b282ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b130898-3d02-425d-a824-24b4b38c1307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0ce6c55-2c05-4fbf-bd69-954ff15a40dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07af2c5-6263-443d-83d2-136b4c046c69",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca9d342-bc3f-4ccb-b4fd-1d59b3f60a9c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a056ceac-dd54-4fc2-90f6-c5edf4f105f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4391626a-59eb-4a5d-9298-8ea4acca870d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76f30291-b7d4-48b9-a8f0-1fa983b0bbac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d088069d-0b09-4b04-baab-3f7987c89e19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01dd3a3a-dfa9-45ae-ad85-403017f3a752"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a7572e9-0249-4b44-9dd3-f28dd7dc2bb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35a2f778-2b14-4bdc-b130-33f2577733ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1da5a0f9-20d2-4187-b988-abe8a4d67ca4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "87674762-2848-430e-b31e-36268cb63ad0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52a786a1-014d-4513-80d4-86f5c9020da9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f8fec99-2cab-4b93-8cec-38894eff46fd"
            }
          }
        ]
      },
      {
        "id": "683b6633-b00a-495b-bb0d-0efe4c004a1a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "10ad053f-ba47-4a4b-a16b-0e1e9184f280",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0684968-0172-49ea-bb68-19df939bcf49",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e5e87eb-366d-40f0-ae6a-ac5171d2e179",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429579cb-c362-49cd-8bf2-ff06a1d716da",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a98e24d8-bb12-4188-9736-bfae26713e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f627c576-d8e5-4485-bd0d-6f125fbcf44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3040761-0a6c-488e-9ca4-dbc80bec0f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345372df-2ca1-460b-9e65-a5b143ab6f97",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294731ea-1cad-4423-8c04-05623f70c8d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2c93e9cf-b57a-448e-b013-4971b733f710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d83c42-2afc-4ed2-baf6-07bc0f3354b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53c18b98-a59f-4ff0-88f9-c2e93c0484b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68cc9121-53e7-46e6-822d-47e36243189a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e747816e-35a0-4909-90af-5557d7dee423"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5e47393-3446-4219-a207-c7e035ceffbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4a0c495-6fbc-4e69-a334-6c2df83d0b54"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a975dfc3-0545-4101-b74c-ddd2ca0cb734",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f75f7852-8a37-471e-8fa6-effa0c55e7ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf4370e9-15ab-4782-bb6c-0d0b7ee5ce90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "333277af-8d49-4116-9274-77c3ae9fc427"
            }
          }
        ]
      },
      {
        "id": "c07c9a2d-1d08-4d5c-8335-3d13dbe69180",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b8a3d232-1624-4d0d-a35d-7e05d50414f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bd2359d-0ad0-42e5-8e07-3fd4ff6bdb80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c92b028e-8656-4a01-af6b-1be2e89d973a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d79389b-2b23-422b-8941-b4541109b813",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fda29a6d-7ae2-4d09-aeca-ac081c5b6d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137b85fa-b4c1-4863-bce0-0f26eb996e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8afd454-17de-48bd-ac32-8d1c2cbab151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70409fd9-db73-45d3-a198-50e12e971348",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9546c169-027f-4825-9826-910d13010a7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb6a165-6750-4de1-9147-9475396dda47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa41c8c-0277-4e39-a942-e4e4546b0aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5196224-8074-4fbc-a300-74f1d4e9bdc5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63cc64dd-f1f8-45b5-b255-2c6dd8d03ae4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d32f2db3-3aba-400a-9cfd-654f8c350b44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e7df708-b40d-4c2d-b493-a17da8152429",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42ea5aad-83fc-455a-86e0-95ac28e3a4d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d1d96f1-2308-488a-b024-498642669f97",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "15cc6c8a-3e8d-4b88-b5b6-4115c62d0ec3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "740d079b-9a4d-463d-917b-0e427cc83bc7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dbad826a-b921-4031-b14f-08dccde38e96"
            }
          }
        ]
      },
      {
        "id": "cc56eb27-e0e0-42d7-a85c-a1c1b5d12797",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ccd6803-0ed3-4496-89fb-bafce94c7d3b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b75960f9-c2f9-4dea-a7f4-e9a456db66b7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "818b5476-eb75-44cf-8da0-a4af452f576d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0427b470-7776-4e2b-b84f-12ac17e9c57e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd3d8c50-f461-4282-ba9e-bab5733bcf94",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 401,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 471
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 139.38340716001025,
      "responseMin": 19,
      "responseMax": 10348,
      "responseSd": 854.7064283369882,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678063316259,
      "completed": 1678063381538
    },
    "executions": [
      {
        "id": "ecdeb036-7efc-4766-8db2-de245d94fd75",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "89b94ced-68d4-4cc2-8cbf-30832ec97e7c",
          "httpRequestId": "608b06c5-a148-4ced-8384-b32c3b16ea63"
        },
        "item": {
          "id": "ecdeb036-7efc-4766-8db2-de245d94fd75",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0b8ad06d-759d-431b-b0de-4676cc16dab6",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 0
        }
      },
      {
        "id": "8ba49900-23da-4bd6-babe-96299610e6be",
        "cursor": {
          "ref": "3c2b05f7-e82f-4460-b834-cb5ef4a9f619",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d35dc3e5-019d-4a8f-8132-78a51fdaa132"
        },
        "item": {
          "id": "8ba49900-23da-4bd6-babe-96299610e6be",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "35f4c5be-8cdd-42cc-8a81-72876601b701",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "aceea981-f6ea-4312-afdf-b1bd0458f22e",
        "cursor": {
          "ref": "80293ce7-4616-42d6-a8d1-0c5e03454761",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "60780a30-cde9-465b-bd3a-f638bf2969b9"
        },
        "item": {
          "id": "aceea981-f6ea-4312-afdf-b1bd0458f22e",
          "name": "did_json"
        },
        "response": {
          "id": "19e1f6db-29bd-41ae-9083-be64c86bb55e",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b470e3ff-3601-4d2f-aba0-932b37dfe742",
        "cursor": {
          "ref": "e71e312d-abc4-4ce7-b5cc-6217abbc7917",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52dcde01-f542-4c49-808c-84fe67ea6b22"
        },
        "item": {
          "id": "b470e3ff-3601-4d2f-aba0-932b37dfe742",
          "name": "did:invalid"
        },
        "response": {
          "id": "f71843f6-aaac-4be2-8dfc-124f1a3d3861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b470e3ff-3601-4d2f-aba0-932b37dfe742",
        "cursor": {
          "ref": "e71e312d-abc4-4ce7-b5cc-6217abbc7917",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52dcde01-f542-4c49-808c-84fe67ea6b22"
        },
        "item": {
          "id": "b470e3ff-3601-4d2f-aba0-932b37dfe742",
          "name": "did:invalid"
        },
        "response": {
          "id": "f71843f6-aaac-4be2-8dfc-124f1a3d3861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bff2977-e1b8-4d20-a18d-cc982ee8ce5b",
        "cursor": {
          "ref": "f96d9fd1-a18c-4dfc-9b49-b1bae11a59b4",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2b368db1-689d-4248-9368-9a164a8cc227"
        },
        "item": {
          "id": "5bff2977-e1b8-4d20-a18d-cc982ee8ce5b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4a833ceb-c817-4170-97bd-926ad69f8659",
          "status": "Not Found",
          "code": 404,
          "responseTime": 219,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04445b1f-6dce-4232-ac8e-8d0bd9b527c5",
        "cursor": {
          "ref": "e7065d3e-5afc-4123-bb02-d845b0af17f8",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2ce12b51-1489-4994-9841-ab805c1c8388"
        },
        "item": {
          "id": "04445b1f-6dce-4232-ac8e-8d0bd9b527c5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6b74b742-622a-4b0f-b653-25159b6eda27",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ae8fe7-e5c1-406a-8467-06bc471c0e03",
        "cursor": {
          "ref": "2c0c7823-8a5f-4d6b-8454-ffd5077b65d3",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3d7aed6e-e8d5-4874-8d70-da705a6b9ef7"
        },
        "item": {
          "id": "e4ae8fe7-e5c1-406a-8467-06bc471c0e03",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "97cd236a-574f-4aec-b2bf-cf857d657b5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee10f06-b178-4ca3-81b2-4d31131d0f2c",
        "cursor": {
          "ref": "20a917d8-1124-457f-aca1-c9477dca221a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9dab6b37-9d93-4e11-a384-760768c952be"
        },
        "item": {
          "id": "fee10f06-b178-4ca3-81b2-4d31131d0f2c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5728c196-f4cc-4d63-9b9f-db8428f83b8c",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fee10f06-b178-4ca3-81b2-4d31131d0f2c",
        "cursor": {
          "ref": "20a917d8-1124-457f-aca1-c9477dca221a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9dab6b37-9d93-4e11-a384-760768c952be"
        },
        "item": {
          "id": "fee10f06-b178-4ca3-81b2-4d31131d0f2c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5728c196-f4cc-4d63-9b9f-db8428f83b8c",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "904c4352-e2cd-4c54-a529-ee243dc7eb01",
        "cursor": {
          "ref": "72a7869a-8618-4dc2-8257-4ced3f0ce47d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "af39de8e-bf6d-4486-a964-d645267ba133"
        },
        "item": {
          "id": "904c4352-e2cd-4c54-a529-ee243dc7eb01",
          "name": "identifiers"
        },
        "response": {
          "id": "5c0e9e0a-df47-4d78-a807-ad72862ef8a6",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ed6e46-2fe6-4098-82be-fb92402b22b2",
        "cursor": {
          "ref": "3902dece-406b-4187-be9b-cc65c4919637",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "68727f8f-189e-4b0b-b3af-27045df4fbd6"
        },
        "item": {
          "id": "c1ed6e46-2fe6-4098-82be-fb92402b22b2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "41f351b6-24d4-42cb-a1d3-9a70fcd93a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c1ed6e46-2fe6-4098-82be-fb92402b22b2",
        "cursor": {
          "ref": "3902dece-406b-4187-be9b-cc65c4919637",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "68727f8f-189e-4b0b-b3af-27045df4fbd6"
        },
        "item": {
          "id": "c1ed6e46-2fe6-4098-82be-fb92402b22b2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "41f351b6-24d4-42cb-a1d3-9a70fcd93a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "9138167f-de4b-4334-9bde-6853c504ee2d",
        "cursor": {
          "ref": "25d575f2-fa81-47dc-a68b-de9c89b9f93b",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2196b65d-1b56-4952-8386-0e08191344e0"
        },
        "item": {
          "id": "9138167f-de4b-4334-9bde-6853c504ee2d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ee12844d-09b2-48f5-9d50-8f75748320aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "f11e235d-0a9c-4e04-85c9-46944202c6c8",
        "cursor": {
          "ref": "7b600649-d31e-41bd-ac64-2ad585a1bd9f",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cb4b10c7-d8d1-4949-99f4-f2d6a00043f7"
        },
        "item": {
          "id": "f11e235d-0a9c-4e04-85c9-46944202c6c8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bc41553b-1bc7-4aa1-9288-c2e00a28d7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b00c58d2-fb15-47a8-8fb0-5139d5bbe1e5",
        "cursor": {
          "ref": "355c077a-0098-4b05-9574-d2cd88ed98a7",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9af0c475-0695-4538-ada5-18cd9c4ec2d8"
        },
        "item": {
          "id": "b00c58d2-fb15-47a8-8fb0-5139d5bbe1e5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9f48a168-a560-4857-901b-c7b1f19309ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "4f64f038-47df-4711-8c3b-1e7bb80bbf1d",
        "cursor": {
          "ref": "1b5f3084-8626-4d1f-bbe9-5324e2f99a8b",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3fd07e2f-99db-4f12-9412-545f1d6bec87"
        },
        "item": {
          "id": "4f64f038-47df-4711-8c3b-1e7bb80bbf1d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "76dfa168-c6a8-459d-9cfb-036c9797bef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "896209a4-62e9-412d-99f7-a9fff3a7fc82",
        "cursor": {
          "ref": "f4bc1614-0711-4ebe-b7e6-7e91244c5df9",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "62268882-410a-4a1e-8ea6-0fa1ccdd6058"
        },
        "item": {
          "id": "896209a4-62e9-412d-99f7-a9fff3a7fc82",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "85e33089-5acf-4582-aed3-bb3f7be58c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "7dc62842-eebd-40bd-b157-bb709d3e5666",
        "cursor": {
          "ref": "8d178153-3305-4a57-9d34-603a64c9665a",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2177975d-1718-4115-962e-e6dc5c156805"
        },
        "item": {
          "id": "7dc62842-eebd-40bd-b157-bb709d3e5666",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "64799d11-830f-4c48-8b81-88fd8dc694e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ebae948b-4c04-40f5-8c6c-09e50eb9f4dd",
        "cursor": {
          "ref": "ef06d789-07d6-43ae-b8e3-6a9f75d05a6c",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "97195fa1-1a93-4509-8af4-1cf81f3387d9"
        },
        "item": {
          "id": "ebae948b-4c04-40f5-8c6c-09e50eb9f4dd",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "599dad21-e648-41d3-8321-a9beac9a9460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ecf57c37-fa54-4311-b4f6-a79609ac955f",
        "cursor": {
          "ref": "9f3de9c9-4a90-4015-a7f6-3e8c2c472f59",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bfc41641-0826-4a5e-a6d0-92415c07c350"
        },
        "item": {
          "id": "ecf57c37-fa54-4311-b4f6-a79609ac955f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c3ba57cc-76fc-45a4-bc99-3351ed4765a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "405f025a-0d15-475c-b058-c309ea141854",
        "cursor": {
          "ref": "e55fc86f-973d-4be2-ab51-acda4d634ed0",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "91ce089d-5c28-4b1e-b0bf-bdba452fd2f1"
        },
        "item": {
          "id": "405f025a-0d15-475c-b058-c309ea141854",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d3d4dc36-09e9-4af6-b3e2-02948f5b2c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "005822a3-8c5e-45d0-a375-f02c7bb2ccc4",
        "cursor": {
          "ref": "86d9ab4c-8e6f-40b6-a7d9-d67ab33ac0f1",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b2743328-0bbc-4fed-8bdc-6d21b7959505"
        },
        "item": {
          "id": "005822a3-8c5e-45d0-a375-f02c7bb2ccc4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "324c6aba-7f4b-4c2e-9985-2b91dbe11c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "85aedb38-c0aa-45eb-8ec0-1d9fd6a7f663",
        "cursor": {
          "ref": "723c91db-a615-4f96-ad81-480eed2b6cc2",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "13739195-a77f-4112-879d-bcd88c7c1fee"
        },
        "item": {
          "id": "85aedb38-c0aa-45eb-8ec0-1d9fd6a7f663",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1352f462-9a58-43ca-85b3-67f8d2d0ed2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b4bf04a2-f3a3-4643-ae7e-acd2b5ebd626",
        "cursor": {
          "ref": "0f42154d-330d-49c9-a319-20837ed9eaa3",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5295c596-4782-4959-a689-02f264365854"
        },
        "item": {
          "id": "b4bf04a2-f3a3-4643-ae7e-acd2b5ebd626",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "319bf223-e54f-4919-a188-f6fb6ce4afef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "27422a33-e214-4ecc-9b3c-5ac580680d33",
        "cursor": {
          "ref": "4833cdfb-aad2-4e24-a777-e4d2a5de7e81",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e7d1951e-d0cf-4a46-8734-124204149405"
        },
        "item": {
          "id": "27422a33-e214-4ecc-9b3c-5ac580680d33",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7fc55ba5-0ffa-46f2-9aa1-180e20d6e5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e31a04b3-7490-48c3-b333-e695787937d7",
        "cursor": {
          "ref": "17f838f8-8a01-4dbd-8685-5281632aede1",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5ef4e16e-82d5-476b-837b-5d7554129f32"
        },
        "item": {
          "id": "e31a04b3-7490-48c3-b333-e695787937d7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "005dd761-b15d-4f86-9552-d234b33e229e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d3eb4359-ce7b-4015-a46a-7dbbc13fddd9",
        "cursor": {
          "ref": "01fd8c5e-224e-413a-80c0-591855780581",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6632ce45-d181-4474-a76c-0c4740f2e647"
        },
        "item": {
          "id": "d3eb4359-ce7b-4015-a46a-7dbbc13fddd9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "132eabd4-9a3d-4af2-a41a-1cf174fac331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "4e1950b3-4936-44ad-8f58-0b256809d9b3",
        "cursor": {
          "ref": "cc8d9438-acfa-4643-8476-58e67f0e5f17",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e9dec052-f5ca-49dc-bf45-83cb9c39a98e"
        },
        "item": {
          "id": "4e1950b3-4936-44ad-8f58-0b256809d9b3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4bd93aba-d9bd-4500-901f-b3d530f2d92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "7064288e-37ee-46c1-950d-884e7527957d",
        "cursor": {
          "ref": "2b78d630-9522-405c-8a18-b640291eb745",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "216d2d21-a6e5-4cac-bd0b-5b4cb37bccff"
        },
        "item": {
          "id": "7064288e-37ee-46c1-950d-884e7527957d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "472abc6a-fc35-4177-8849-66f84ff48bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "879c6f33-0930-4976-8600-28f60553de9f",
        "cursor": {
          "ref": "7f680139-51e7-4f46-8249-3a656793f62c",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9a8b646d-0855-4ec9-8791-f6deabd8b31f"
        },
        "item": {
          "id": "879c6f33-0930-4976-8600-28f60553de9f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "39e45cd0-0df7-469d-abaf-c9b4f7c99bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "57099b47-0a47-4da7-84c3-c02325436947",
        "cursor": {
          "ref": "5f8157a3-6c98-4c12-829b-a76da8a639e7",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "879ab177-5799-4e25-9430-b73b7bc5d50e"
        },
        "item": {
          "id": "57099b47-0a47-4da7-84c3-c02325436947",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "18b61e15-9190-436a-b5b4-ce5683c38cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "fc970e15-b922-4ef3-a3fc-36ee7df5c467",
        "cursor": {
          "ref": "45ff4fb9-2ee8-4304-aef0-283874d0f501",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1a17da21-3cf9-42f2-adeb-be1c2afbe4ba"
        },
        "item": {
          "id": "fc970e15-b922-4ef3-a3fc-36ee7df5c467",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ff2374a9-1c93-48ee-8c8a-9a7101d79c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "86f357d2-8808-4792-bf2f-92c473cf0c16",
        "cursor": {
          "ref": "f020c712-bf03-4d9f-88aa-c3ef5057ade4",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "59f772d2-0a1b-4d09-be4a-9854fcc96745"
        },
        "item": {
          "id": "86f357d2-8808-4792-bf2f-92c473cf0c16",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7fd3558f-d1ec-4614-a616-bdbc649825bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "b7ea9f7a-043b-4065-acd1-323668a2576b",
        "cursor": {
          "ref": "23996ee4-9238-4cb9-aa69-9ba74d5312ba",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b7b246b1-7b01-402a-85a6-42a00af9cb5d"
        },
        "item": {
          "id": "b7ea9f7a-043b-4065-acd1-323668a2576b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7903e9a1-ab3b-4615-8504-69f93dc0d14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5fa69f23-5356-45b5-b46e-389c98c8d3e1",
        "cursor": {
          "ref": "201d46d3-9d7a-4ce9-8d0e-4b28369d2406",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9a63384b-d31b-4154-bd61-e3b1b82f9362"
        },
        "item": {
          "id": "5fa69f23-5356-45b5-b46e-389c98c8d3e1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1a6701e6-707e-4baa-bfbd-5dc25c2439b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "2738309f-6cff-4b38-ab6b-0e46234329d9",
        "cursor": {
          "ref": "96ba7abf-b5ed-493f-9a44-8cd66c0daed1",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "addfb22e-3d7c-4e52-85fc-8cd224d8a2d1"
        },
        "item": {
          "id": "2738309f-6cff-4b38-ab6b-0e46234329d9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5853e2dc-972a-447a-81a3-cc1aa271b634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8128,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "37b1ff94-6a8f-4692-acb7-c325fd6a21f1",
        "cursor": {
          "ref": "f0b54c59-e501-42fe-945b-564e5187129e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6bf2b01d-caa2-4d79-85d1-4d9dbe84acd6"
        },
        "item": {
          "id": "37b1ff94-6a8f-4692-acb7-c325fd6a21f1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "718e97de-01aa-478d-942a-c3f5b79719ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10348,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "3f00522c-e905-4ad8-b7a1-39d31727c581",
        "cursor": {
          "ref": "5cc778bd-5494-4e91-b534-9a4d584f4c07",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fde1895b-432a-45c8-9234-43179d158193"
        },
        "item": {
          "id": "3f00522c-e905-4ad8-b7a1-39d31727c581",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0d24914c-8ef3-4a00-8080-9897cf40941d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7644,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "6eb1e6b6-8b2a-4009-819a-6448dfa0fd89",
        "cursor": {
          "ref": "e51ac7d2-5fd5-46ff-8ef8-1f60298c3dab",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "94d7df51-5a03-4925-8fa6-1c51372a26de"
        },
        "item": {
          "id": "6eb1e6b6-8b2a-4009-819a-6448dfa0fd89",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fd358f4d-69f2-4948-9037-fb87d35253b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7778,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "2525ffd7-2780-4af2-bc17-a294061bf9c6",
        "cursor": {
          "ref": "ecd4a35e-8919-4563-ae18-c6359c53fefd",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6d4efb87-2d7b-49f9-a258-a3081c442ba4"
        },
        "item": {
          "id": "2525ffd7-2780-4af2-bc17-a294061bf9c6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "428c0d19-51f3-4eca-b03d-ef4ac35d1129",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 1713,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "8a667850-af6d-431d-b8ca-d8e190ed4fa6",
        "cursor": {
          "ref": "4b508df0-858c-4810-aa5b-95960b5a8642",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3545ced2-9e8b-4ef0-918a-70dcadae10f5"
        },
        "item": {
          "id": "8a667850-af6d-431d-b8ca-d8e190ed4fa6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "452d12ee-b46f-4971-ba88-98e9c037f7e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ba6de4da-4a73-4d86-a860-f817edf00f44",
        "cursor": {
          "ref": "b0272055-ca80-48ab-b112-26ce4c3245a1",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7c83554e-305e-4b9e-8682-67d0b8c13616"
        },
        "item": {
          "id": "ba6de4da-4a73-4d86-a860-f817edf00f44",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "64e910b0-8eb7-479a-89bf-927ba0ac4478",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1ece11cd-7411-4b9c-aba3-1774aa39e093",
        "cursor": {
          "ref": "a0ce7c2c-1178-46da-a2b0-2de1df7ee3a0",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d3963db7-076f-46cc-8f1b-0854eb196c9a"
        },
        "item": {
          "id": "1ece11cd-7411-4b9c-aba3-1774aa39e093",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a0b4e793-1165-48ad-b079-7da0fcde8e40",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "52165a5d-6393-451b-9900-0191a967df4e",
        "cursor": {
          "ref": "e1bbac43-5322-4f98-9bd8-5c3c057d5a7b",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2e0f01e5-02ff-44fc-bd1e-e9142ad932df"
        },
        "item": {
          "id": "52165a5d-6393-451b-9900-0191a967df4e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3a2cfaae-1eaf-4b10-9763-aa3ac8d5d77c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "d9a6ec9d-34cd-4a23-9c84-789ed9950ab5",
        "cursor": {
          "ref": "9f5699d6-7665-4323-bd66-1c2b93172651",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5950dc69-073b-4056-88e2-53b26fd1d3bc"
        },
        "item": {
          "id": "d9a6ec9d-34cd-4a23-9c84-789ed9950ab5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "76cc6b60-bdb0-4cf6-af38-4562ddbeefa0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0a733398-0609-4f09-a064-f13d7866af3e",
        "cursor": {
          "ref": "e1d70abb-e0a5-46b3-87f0-f7a63d5eb4e9",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5e825bce-a2aa-45b8-aa38-a713c3f63d74"
        },
        "item": {
          "id": "0a733398-0609-4f09-a064-f13d7866af3e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c71357ec-5577-4d76-ba2c-bd6301c8bf36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7dae6d1a-a61c-494a-bc29-b696bea8f7fb",
        "cursor": {
          "ref": "8c4a0284-645d-404d-bf52-e3a805c852e8",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cdf80c08-bada-486d-80a6-b732cafc46b4"
        },
        "item": {
          "id": "7dae6d1a-a61c-494a-bc29-b696bea8f7fb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "43cca4e6-2c7e-4a24-9366-aea3c1c85ce3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f2aa6b03-6b05-4d1d-807f-6dba03dde81a",
        "cursor": {
          "ref": "38da5d29-2398-414e-87bc-c24b3c7efd07",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "191a95e1-1e07-4ec9-b7dd-b951fd46e5dd"
        },
        "item": {
          "id": "f2aa6b03-6b05-4d1d-807f-6dba03dde81a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "200cc740-de6d-4ab3-911d-6a4102f57678",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "542e8f52-1366-4629-8cf1-a398c42eb9af",
        "cursor": {
          "ref": "3f751c61-d46d-41a7-9270-7d4182b4ef21",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a659dcf1-b0ac-4867-863b-0c0c86613ca8"
        },
        "item": {
          "id": "542e8f52-1366-4629-8cf1-a398c42eb9af",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "64c2b78b-7d68-4b40-9ff6-bfa7dfd6f61a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "981b238e-77c6-4634-a199-dec5b7597613",
        "cursor": {
          "ref": "f99ab8a4-5997-4dc3-89a8-a83460f420b6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5b3bfdc5-dd0e-4377-a081-99475713f84a"
        },
        "item": {
          "id": "981b238e-77c6-4634-a199-dec5b7597613",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1ca208ca-0887-46e7-8712-4ac70101f719",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d86f4e19-13de-4b94-ab06-6ba051daff4e",
        "cursor": {
          "ref": "2e0e0de4-5e99-4e6d-977c-face9c90919c",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5bb19bee-f93d-4c33-a34b-2ff4586ec290"
        },
        "item": {
          "id": "d86f4e19-13de-4b94-ab06-6ba051daff4e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8a86e13a-ec4e-422f-aec2-85bad7f1fe3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "71c4000b-d905-465f-8dc3-ebd7056b7cb9",
        "cursor": {
          "ref": "903ae343-b6e7-4c0c-b15e-21a468890f20",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "48b506c4-bbc0-4b8b-9a86-d390c778e75e"
        },
        "item": {
          "id": "71c4000b-d905-465f-8dc3-ebd7056b7cb9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b446c1a3-f828-44ac-b684-cc140567cca7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "db2297da-18de-44d5-a005-b5ef85519147",
        "cursor": {
          "ref": "f238db54-dd14-42cf-8751-160aa5556f2f",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3824a928-9a61-4f58-bf6b-1a53f86e87da"
        },
        "item": {
          "id": "db2297da-18de-44d5-a005-b5ef85519147",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3791e638-6221-4938-8910-374adba83977",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f8ac7931-39b7-4a00-aa9a-aa17eaa68c19",
        "cursor": {
          "ref": "781f7022-c1b8-49c4-a15b-1e3718552b5c",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8be7b87a-5561-4630-8b33-45d6198d160f"
        },
        "item": {
          "id": "f8ac7931-39b7-4a00-aa9a-aa17eaa68c19",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "30b44684-c3f8-4eca-8de9-312e1ce87f65",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7ed06eab-de31-4a4a-9753-b99488caa831",
        "cursor": {
          "ref": "5af38aa4-dc67-49f3-9edd-c3803341172d",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "078ce078-4df8-4aba-8f86-ea48bce5418e"
        },
        "item": {
          "id": "7ed06eab-de31-4a4a-9753-b99488caa831",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2b39d2c6-d959-4910-bb4e-1e98ef47baad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "a9f153c2-70c5-42d6-9f8b-3764cfc8ec3a",
        "cursor": {
          "ref": "ea459d89-65bd-4fe6-98a2-0a2d5cbf9071",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "61f11011-393c-4814-b707-3bac9ed16eb4"
        },
        "item": {
          "id": "a9f153c2-70c5-42d6-9f8b-3764cfc8ec3a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9ca29762-4abc-4687-9e9e-ebdda2c60efb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c7a87720-6325-47ea-b72f-07b1adaa7bec",
        "cursor": {
          "ref": "b2cb6c34-cc73-4176-b7c5-b88577700d9f",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cc0e641d-481f-460f-b589-f71683f712d0"
        },
        "item": {
          "id": "c7a87720-6325-47ea-b72f-07b1adaa7bec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "508dff59-e4bb-4ecd-9952-f78a92378403",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 52,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "c377153b-8cf7-4735-ab4e-d0a5c69d6399",
        "cursor": {
          "ref": "7c435003-05ac-46fd-8965-440c5140be67",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "da3da3f4-6ecf-4a8b-b5ea-207a03868057"
        },
        "item": {
          "id": "c377153b-8cf7-4735-ab4e-d0a5c69d6399",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0aeec3ad-7a7b-44af-a51c-e23ef9f07a5e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "3bace6c5-b256-4a8a-be6b-1a1a176c521d",
        "cursor": {
          "ref": "f01f297d-aa93-41cb-a1d0-074d278111be",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5443cc7c-7afb-48e8-96e0-0f6107d21fdb"
        },
        "item": {
          "id": "3bace6c5-b256-4a8a-be6b-1a1a176c521d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a2907903-5616-438b-9993-e90757d3b9d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "0671dce2-d0a9-4ffc-8934-810ed49d8291",
        "cursor": {
          "ref": "79913a1c-1e3a-497c-962f-6af5e8b1d12c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9513b1f8-f4b6-46bf-bf84-01e970b8d3ff"
        },
        "item": {
          "id": "0671dce2-d0a9-4ffc-8934-810ed49d8291",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f4060afc-3f6f-4924-9f2c-463227942d5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "67a1ce5c-57ae-41e5-99ec-5bf6e313ec66",
        "cursor": {
          "ref": "a78582a1-4995-427c-9d97-02418d0778dc",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "131b6245-bcc6-4b92-ad75-08db89ec3a84"
        },
        "item": {
          "id": "67a1ce5c-57ae-41e5-99ec-5bf6e313ec66",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "33540460-8bcb-48f1-8bb3-31b382539b0a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "d04a4193-fdac-48bb-a1a7-a6643d074278",
        "cursor": {
          "ref": "d425cb32-061a-431f-aeae-749f838c0760",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8a584705-f087-4234-b018-bab39adeb3f2"
        },
        "item": {
          "id": "d04a4193-fdac-48bb-a1a7-a6643d074278",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4ad915e6-036f-45a4-a1fb-85fa7a7e5a11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "33d01069-dab0-434a-a087-2932e9d1bb21",
        "cursor": {
          "ref": "eab9edaa-a667-4e77-9420-58e3fedb8ae8",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b82fc5a2-adef-4e49-8f10-0682bacfad6d"
        },
        "item": {
          "id": "33d01069-dab0-434a-a087-2932e9d1bb21",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4d6ae7fe-a216-4644-803c-1cab7b53f955",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "55d80554-a95d-4f2e-8613-75b00cc03cc5",
        "cursor": {
          "ref": "c060e31a-41a3-42fb-aeed-b2ffab6a88ea",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0f3ec725-0017-46af-93c5-fd63382014ff"
        },
        "item": {
          "id": "55d80554-a95d-4f2e-8613-75b00cc03cc5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c7b6a497-f9ad-4a23-bfee-c28706af2d7e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "5e329265-d9d5-48f6-acdc-70a4e0c88e21",
        "cursor": {
          "ref": "c754fbbd-e627-4f46-be75-ae1077044235",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f63ebae4-d8a9-4d17-858c-3576870b1029"
        },
        "item": {
          "id": "5e329265-d9d5-48f6-acdc-70a4e0c88e21",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "756e68f8-f676-43e2-af73-12c0954fa938",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "08deb0d8-5981-4ec9-a6c9-c3ed0f8f4349",
        "cursor": {
          "ref": "f6a5fb15-1756-4e0c-9f14-1fb726bc874e",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e3768ddb-a543-4491-8aac-ace3aafae971"
        },
        "item": {
          "id": "08deb0d8-5981-4ec9-a6c9-c3ed0f8f4349",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c80d7052-6210-4c7e-b194-078564ef4073",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "955f99f1-a5d0-4f6f-a903-d31a5f945aa4",
        "cursor": {
          "ref": "617c6c49-986a-49fa-b9b2-859dc29ec330",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "58e08ba5-1430-4277-b3e7-86c8e6221fde"
        },
        "item": {
          "id": "955f99f1-a5d0-4f6f-a903-d31a5f945aa4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "df8f0afe-8014-40db-bbe3-fabfe4ea0895",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0658f716-5235-46c4-ac07-17e1d0118b34",
        "cursor": {
          "ref": "95a36bb0-b993-488f-9dd4-c12901202ec9",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c536a739-21ce-487d-b16d-489f9d4eeb2a"
        },
        "item": {
          "id": "0658f716-5235-46c4-ac07-17e1d0118b34",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f8d04cdc-2f0c-48a3-ba12-8f6f50bda6e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4f138953-5a6d-4b5b-bd17-ea859c5bfed5",
        "cursor": {
          "ref": "1197fe9c-1f55-4834-a18a-2b6221f970d4",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ef6cda7b-cbf0-4b2b-b58e-f4afdc789784"
        },
        "item": {
          "id": "4f138953-5a6d-4b5b-bd17-ea859c5bfed5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c0fa00dd-e5dc-4f3a-8b4f-6a5762d0d31a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "69f3b4fa-ed7d-47bf-8679-52a5025f3f3a",
        "cursor": {
          "ref": "5b5cd70f-efa2-44a6-a6de-1a5c5ff17510",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "befc842c-b535-4e20-b54d-c9817d5713c4"
        },
        "item": {
          "id": "69f3b4fa-ed7d-47bf-8679-52a5025f3f3a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cd5d0109-753a-49fb-9fc7-77d0f21396a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "7dda6202-ea1b-42d3-9923-dea43d4980ff",
        "cursor": {
          "ref": "e6f4dd2b-1adb-48d8-8cb8-818035754e9d",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "45457ee8-dbbb-440d-ba32-7cf82a482222"
        },
        "item": {
          "id": "7dda6202-ea1b-42d3-9923-dea43d4980ff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7b855e53-fc43-427d-bebb-b155e854483b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6359e521-bfda-4cff-951f-09577ccb001a",
        "cursor": {
          "ref": "f602b1f0-4988-4cdb-b8da-bb0b854bdeaa",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ee574527-f29e-4e2a-aaec-b2f187c8f1ff"
        },
        "item": {
          "id": "6359e521-bfda-4cff-951f-09577ccb001a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8b884dc9-b499-4ffa-a284-a08d024d962f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "c49d73fe-da5f-41c4-a0d0-38e2978746fe",
        "cursor": {
          "ref": "db151d0a-c401-4477-b700-55d5b87f0ab3",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3333eb75-39ea-4e98-b9bb-84523430d6e2"
        },
        "item": {
          "id": "c49d73fe-da5f-41c4-a0d0-38e2978746fe",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b231ea95-5f4f-4524-9296-1ac51801383d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "3192f2c9-b87e-4c8d-bac5-f7494f873b28",
        "cursor": {
          "ref": "fef77d0f-269b-4cdc-9e32-498a9f088154",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8205b1f0-05be-4aae-9b86-c381fa8a5a1d"
        },
        "item": {
          "id": "3192f2c9-b87e-4c8d-bac5-f7494f873b28",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f30b95d0-dc08-4ed7-8d60-61db60be47e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "e4944139-4eb0-42d7-84df-3b39047ffeb1",
        "cursor": {
          "ref": "25f432f9-de38-4a58-8ca5-3756a7f84631",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3b9b7f45-db70-449f-8d31-46fc30ae8c92"
        },
        "item": {
          "id": "e4944139-4eb0-42d7-84df-3b39047ffeb1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "20cd42d7-8756-4eaf-851a-6f39cdace707",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "67ce1e8f-b649-4832-9c7c-052c104b3166",
        "cursor": {
          "ref": "c86b72fb-243b-4fb5-9a70-c2b16e46b6cc",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9e86abef-dddb-4db6-a925-d9ef2afce2ae"
        },
        "item": {
          "id": "67ce1e8f-b649-4832-9c7c-052c104b3166",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "81ea3ea5-b34b-4fab-b9f2-7a8dae509dd0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "ebb8b9f7-4d75-4923-bc69-60075544bb08",
        "cursor": {
          "ref": "231e6c2b-53d0-40b6-b79e-93264be97534",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "21b6a82d-eff2-4f7d-8798-0659faa746ee"
        },
        "item": {
          "id": "ebb8b9f7-4d75-4923-bc69-60075544bb08",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "30ca081f-dbf2-4a11-9b02-cb23e993f59b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "012735d6-bc12-495b-9b7e-67e626f92b7a",
        "cursor": {
          "ref": "e40a91a5-d6fb-415e-99a9-7dd7141be44c",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8f552d33-ce0e-44bc-88ae-186f738d8b0e"
        },
        "item": {
          "id": "012735d6-bc12-495b-9b7e-67e626f92b7a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4c761b11-5048-4250-b6e4-a870fd76116d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "47dbc711-9111-478f-a131-d0bce3db99b1",
        "cursor": {
          "ref": "0390b3fc-39f4-4491-a3b0-b00708c2a83b",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bf1d6e52-4a71-45ed-b51f-b1fea9b76044"
        },
        "item": {
          "id": "47dbc711-9111-478f-a131-d0bce3db99b1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "46407703-db28-4bca-8200-836172703bc8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "b080e1d9-7f0b-43b0-9e7d-cac70fd365a1",
        "cursor": {
          "ref": "5db25527-6081-487b-b306-6efc31cc53ed",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f1895b7c-3fb8-44cb-9fdb-2e8579eff4f9"
        },
        "item": {
          "id": "b080e1d9-7f0b-43b0-9e7d-cac70fd365a1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c6e00aba-855d-4517-9345-d1cd969992b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "78f08d38-5f46-4924-9aee-85e7a83d8d1f",
        "cursor": {
          "ref": "c1c811b3-98e0-4d0b-b3e7-a2026e6b197f",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3c82d2e0-ed91-4304-a5c2-e11a678d7795"
        },
        "item": {
          "id": "78f08d38-5f46-4924-9aee-85e7a83d8d1f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "dece71a6-9c10-4122-a9c4-896a42436c64",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "3bae3237-dba9-41b9-b8b8-02334537440e",
        "cursor": {
          "ref": "c1b21999-476b-4211-b606-7c91dcc1f8b7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "944a33ef-6f31-4322-bf49-2ea6db6f5786"
        },
        "item": {
          "id": "3bae3237-dba9-41b9-b8b8-02334537440e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3088bb44-aa29-486a-b467-eac9f942f9bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "4c7d2d1f-acc8-4723-833c-83bb7c81f6ed",
        "cursor": {
          "ref": "82096713-245a-49b6-ba3f-e759bd939a16",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9585bee9-b586-4d18-9471-d12c1e962ed4"
        },
        "item": {
          "id": "4c7d2d1f-acc8-4723-833c-83bb7c81f6ed",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ea14b218-7f55-412d-a1ea-0cb797650e30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "c1a3d81a-6c0b-486c-b74e-545464118557",
        "cursor": {
          "ref": "e5d7265a-1451-40f7-bb3b-4694b3936d5b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "68e3b1bb-486e-4d01-9c96-c97a6b950a5d"
        },
        "item": {
          "id": "c1a3d81a-6c0b-486c-b74e-545464118557",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4e8dcb9f-6cc3-471b-ac5d-61ec221d1812",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "6c73636d-0b0a-4763-9648-dbe79594a046",
        "cursor": {
          "ref": "f51f3191-ff49-408e-ab0b-dc4a49e2e4bc",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "17d31dd0-ee09-495d-810d-47bce075bf21"
        },
        "item": {
          "id": "6c73636d-0b0a-4763-9648-dbe79594a046",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6b981d43-6a8b-4698-9f65-21a97b8b8406",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "8c0fd073-6ca5-4747-9f7e-e75328353ece",
        "cursor": {
          "ref": "fab82007-bf8f-4e95-bf09-b4426a6ec557",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "aa3a3f6f-69dd-4b9f-92ae-ade620354747"
        },
        "item": {
          "id": "8c0fd073-6ca5-4747-9f7e-e75328353ece",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cd768b85-42aa-439b-ac8b-b150e952f3cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "f4da2c1d-34b9-4d52-bcdc-d0223e4cce71",
        "cursor": {
          "ref": "afbe890d-7d19-4704-8569-7abb2b8cdb5d",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6fadfd3e-247d-41ff-a114-30b451fee8b5"
        },
        "item": {
          "id": "f4da2c1d-34b9-4d52-bcdc-d0223e4cce71",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e29573c2-0056-4696-a5b0-40e032bb727d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "033c6baa-6223-4aed-9c10-a6475a77e354",
        "cursor": {
          "ref": "2972dd0c-fbea-4015-9343-fb43c8589979",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e705f208-a6a6-41b1-acf4-ab3a0474d7f3"
        },
        "item": {
          "id": "033c6baa-6223-4aed-9c10-a6475a77e354",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c15f7564-6b3f-4f1c-b37a-de6c70f2ab1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "04840af5-9d6f-4cd9-b757-d87c7a1c70f6",
        "cursor": {
          "ref": "d3a3afc8-5baa-4463-9b51-449bbaa9f4f6",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "56a37d82-64fb-42ff-8c0b-03c7e3ed3ad5"
        },
        "item": {
          "id": "04840af5-9d6f-4cd9-b757-d87c7a1c70f6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ee980d65-56f1-43a4-b81b-46be3300e980",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "f1355a13-3dab-4404-82c9-6c35cb59c935",
        "cursor": {
          "ref": "3b3cd97c-2db2-4bd4-b5d5-cd86940cd145",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "07b57b42-823c-4c02-8921-3db660172115"
        },
        "item": {
          "id": "f1355a13-3dab-4404-82c9-6c35cb59c935",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "42d66287-9a75-4383-9d53-d5576c8bf6e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "ac3c6135-caa8-4d43-827b-9670718a6749",
        "cursor": {
          "ref": "fb371a44-a2bd-4179-9bc9-4b4ed003b20b",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3e3dee2e-36c3-4f8a-ae87-fc4d2a0b01e0"
        },
        "item": {
          "id": "ac3c6135-caa8-4d43-827b-9670718a6749",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "26b9fe83-9ac6-4908-b909-bfad98f69768",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "3393e845-544a-43a8-8cd9-fd2b0e214e95",
        "cursor": {
          "ref": "519238ba-4685-4461-a0c9-8389ef765782",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "30c5cdfd-ebca-467c-8226-7bf8057efdb4"
        },
        "item": {
          "id": "3393e845-544a-43a8-8cd9-fd2b0e214e95",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c36dcbbe-9f8e-4484-ba94-87f7b2abb3b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 49,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "ee3e5946-e4df-4396-b5f3-c69862a3aee1",
        "cursor": {
          "ref": "7a5095cb-b5ba-4142-95b7-4beb816ebd4a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "71d844a1-da8c-4df7-a8bc-433fe148b6e6"
        },
        "item": {
          "id": "ee3e5946-e4df-4396-b5f3-c69862a3aee1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1dc2f347-4fd0-4cdd-a799-a6bc8b3727ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "b8e77f0e-eb88-43e9-99ef-5dd100dc3492",
        "cursor": {
          "ref": "6b9c8c38-bfc4-44d8-a76a-f17adf03f3a7",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "dceccae0-8c35-4a5b-bc82-230a432ea161"
        },
        "item": {
          "id": "b8e77f0e-eb88-43e9-99ef-5dd100dc3492",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8cba1925-5c84-44cc-8653-7772ec841876",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "0b87e3e6-3d8a-477d-8e37-c0de900f7d15",
        "cursor": {
          "ref": "3df006c6-8ea4-4bde-a7f5-c1936132168c",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "aa47b81c-470b-43ea-8832-905401a611f0"
        },
        "item": {
          "id": "0b87e3e6-3d8a-477d-8e37-c0de900f7d15",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d91709a1-f2e7-4838-af27-6a9b2a3a1394",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "145115ad-9f6d-4ff6-8330-816903647701",
        "cursor": {
          "ref": "dc4db3f6-3c30-4ed3-b70f-fbae67db2b05",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "52bde486-b601-4ad5-9d4c-e3f9c6b0c95a"
        },
        "item": {
          "id": "145115ad-9f6d-4ff6-8330-816903647701",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "58469df5-acfc-4bdf-a9c0-4c09e6cb4104",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "31976e29-ffbe-4f3f-9173-0a2fe84cba8e",
        "cursor": {
          "ref": "3efd9808-a864-4171-9ba6-df032d60ed1e",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c1a82612-bf29-452a-bced-5a2437043528"
        },
        "item": {
          "id": "31976e29-ffbe-4f3f-9173-0a2fe84cba8e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0d7b0023-fb19-4eee-a807-c4a9f619c6e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "ddae9d4b-396e-4d97-8536-2b5fd4d65951",
        "cursor": {
          "ref": "eb99c5c6-cc77-4036-b83e-fdd9bf72e8a4",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0a450209-539c-4691-888f-3ea0137f7a6c"
        },
        "item": {
          "id": "ddae9d4b-396e-4d97-8536-2b5fd4d65951",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3aed765b-6e30-4987-affb-47eddec35103",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "ec531a0e-65ed-4750-a195-613e9e6db37c",
        "cursor": {
          "ref": "4fe16b9c-946b-4432-b5e9-0cef6eb13260",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9c609bb7-6815-4eaa-82e1-32b87b0f4524"
        },
        "item": {
          "id": "ec531a0e-65ed-4750-a195-613e9e6db37c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ce5f9be7-1c1b-4513-a26f-dbb51e473a00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "ae0cab89-6135-48b9-9a1e-1960872100f7",
        "cursor": {
          "ref": "fd91ee54-cb5d-4a3e-aca4-a55d052c42c2",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d84d41a5-5b93-4aac-85fb-84f15b4e0ba7"
        },
        "item": {
          "id": "ae0cab89-6135-48b9-9a1e-1960872100f7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b10d9274-abc8-48a0-947d-7e812fc5c018",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "278b5b7b-e50f-4a49-a19e-8c705cb98216",
        "cursor": {
          "ref": "2c0d4ecc-b13b-46f6-957d-b470ea15d07a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "79123dd2-3446-4e27-85f3-cb1552618b3d"
        },
        "item": {
          "id": "278b5b7b-e50f-4a49-a19e-8c705cb98216",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "dc8300cf-a74c-4a8f-a2a3-f728e7841da4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "2700c4cf-408d-4ecf-b8ef-e7bb4ea5d7ac",
        "cursor": {
          "ref": "0c1ca110-93d1-477d-9f4d-43cf286a57d7",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "24ff0522-4099-4b03-abcb-d38ac18c9c2d"
        },
        "item": {
          "id": "2700c4cf-408d-4ecf-b8ef-e7bb4ea5d7ac",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "767917e3-d39c-4f10-a40f-13fb58dc477a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "780f84da-a891-414d-a27a-07ad60c6ad28",
        "cursor": {
          "ref": "0b6fb82d-6914-46e0-bacd-f319fccc83c0",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "44116d8f-8b88-4700-8bd6-d26a45d8da99"
        },
        "item": {
          "id": "780f84da-a891-414d-a27a-07ad60c6ad28",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6a21b491-1be3-4a1c-b631-41db5cd547ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "bad61744-8770-47a7-90fe-803a6666a888",
        "cursor": {
          "ref": "b509c601-dfa4-4851-881a-fbd391fadd70",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5adb44cd-026c-49d8-a5dd-37de3cede586"
        },
        "item": {
          "id": "bad61744-8770-47a7-90fe-803a6666a888",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e37be729-077c-4e95-b634-1caa9258b7ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "37cab20b-a074-4e46-8590-4fe2a4e58ab6",
        "cursor": {
          "ref": "e6cf8873-92ce-4fac-ad3d-acd29d05c80a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1eb29a33-ebcc-464e-a344-2309da377e77"
        },
        "item": {
          "id": "37cab20b-a074-4e46-8590-4fe2a4e58ab6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f3ea2d88-43f1-422e-b312-d0d2a11d43cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "48d83967-8b3f-4680-8128-b7d0ffeafe2c",
        "cursor": {
          "ref": "357c0ff9-a839-45cd-a4db-f6a0827ffe13",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "acd697b3-a858-4a41-9a51-290133a8b52b"
        },
        "item": {
          "id": "48d83967-8b3f-4680-8128-b7d0ffeafe2c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f41ade60-f518-4dfe-bb75-0b3ab332e1cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:104)"
            }
          }
        ]
      },
      {
        "id": "9e484766-2be3-4e8a-8434-712ece9a1234",
        "cursor": {
          "ref": "bdbd2abe-b79d-4939-a66b-76686dbd1fc5",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "cba6f33d-c78c-4251-8bf7-436130ec228a"
        },
        "item": {
          "id": "9e484766-2be3-4e8a-8434-712ece9a1234",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8ef9852f-14c4-431d-96d5-99ddfa1e37e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:105)"
            }
          }
        ]
      },
      {
        "id": "fa291396-4f2b-4756-a81f-698d8174e5ad",
        "cursor": {
          "ref": "541f6890-9d31-4755-acdd-0ad98d84ec12",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "26dc856f-b266-45c3-a470-0adeb2a0d53f"
        },
        "item": {
          "id": "fa291396-4f2b-4756-a81f-698d8174e5ad",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a9580940-d1a6-4314-a9ba-126eda147ca2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          }
        ]
      },
      {
        "id": "cc39873c-fadc-4141-bcb8-113d46c1343f",
        "cursor": {
          "ref": "8886651c-6109-4b0c-9d81-17e4b3a85b8b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c715dd6d-d4dd-4891-9bc3-5aa7de5676aa"
        },
        "item": {
          "id": "cc39873c-fadc-4141-bcb8-113d46c1343f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "446900a7-32b6-42b7-825c-7b108eed373c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "711e9b87-bfb0-4353-b3be-5c14fca61fb3",
        "cursor": {
          "ref": "415d21c3-6e5b-4c99-a658-656b44e7b2f8",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0dc70de7-3253-476b-9671-8825bdf4835c"
        },
        "item": {
          "id": "711e9b87-bfb0-4353-b3be-5c14fca61fb3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "46126a19-8042-42ac-975d-8c4c5c8a4f1a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "301f3323-4443-4ce2-8117-eb6bd51c8952",
        "cursor": {
          "ref": "eb5f69e5-96df-49a9-938d-94ca29d6702e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "34520b89-5cf0-4e68-a9e7-d18562c5a247"
        },
        "item": {
          "id": "301f3323-4443-4ce2-8117-eb6bd51c8952",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6a3a28a1-b479-408a-9adf-62c620f78751",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "301f3323-4443-4ce2-8117-eb6bd51c8952",
        "cursor": {
          "ref": "eb5f69e5-96df-49a9-938d-94ca29d6702e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "34520b89-5cf0-4e68-a9e7-d18562c5a247"
        },
        "item": {
          "id": "301f3323-4443-4ce2-8117-eb6bd51c8952",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6a3a28a1-b479-408a-9adf-62c620f78751",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "fce08270-c652-4101-9295-d7dd27cc8c37",
        "cursor": {
          "ref": "0806d3b0-d1c2-4f33-b9bb-27b0912444b4",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "952d6bf1-7b8a-46b5-90da-31f53675a5fa"
        },
        "item": {
          "id": "fce08270-c652-4101-9295-d7dd27cc8c37",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "316ba907-b4cc-436d-bb69-1536ecc05259",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "fce08270-c652-4101-9295-d7dd27cc8c37",
        "cursor": {
          "ref": "0806d3b0-d1c2-4f33-b9bb-27b0912444b4",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "952d6bf1-7b8a-46b5-90da-31f53675a5fa"
        },
        "item": {
          "id": "fce08270-c652-4101-9295-d7dd27cc8c37",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "316ba907-b4cc-436d-bb69-1536ecc05259",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "907c30ba-26cb-46cc-a67f-43dc0aa0a8b7",
        "cursor": {
          "ref": "e7331af3-f3b0-49ab-aafb-f8292ca56f73",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "22bfc9ce-e0a7-4830-96aa-f3bd48e4672e"
        },
        "item": {
          "id": "907c30ba-26cb-46cc-a67f-43dc0aa0a8b7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ff234c46-8747-4534-9c1e-8627a8e863e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "907c30ba-26cb-46cc-a67f-43dc0aa0a8b7",
        "cursor": {
          "ref": "e7331af3-f3b0-49ab-aafb-f8292ca56f73",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "22bfc9ce-e0a7-4830-96aa-f3bd48e4672e"
        },
        "item": {
          "id": "907c30ba-26cb-46cc-a67f-43dc0aa0a8b7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ff234c46-8747-4534-9c1e-8627a8e863e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5fa91b75-564f-404c-ad21-6100e524934c",
        "cursor": {
          "ref": "ed995d77-46de-4dec-b7ae-50ca4ce526e7",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b3c69ff7-0b19-442e-8aae-d793bc330597"
        },
        "item": {
          "id": "5fa91b75-564f-404c-ad21-6100e524934c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "72a9451a-9867-427f-908d-58d91b50ef59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "5fa91b75-564f-404c-ad21-6100e524934c",
        "cursor": {
          "ref": "ed995d77-46de-4dec-b7ae-50ca4ce526e7",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b3c69ff7-0b19-442e-8aae-d793bc330597"
        },
        "item": {
          "id": "5fa91b75-564f-404c-ad21-6100e524934c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "72a9451a-9867-427f-908d-58d91b50ef59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "02d859fa-63d0-482d-acf9-e9daebd5d893",
        "cursor": {
          "ref": "6462422d-2c64-410d-a672-c870f8f94d2d",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "abe7a801-dfc1-47d6-a1aa-8e4955fe4d4a"
        },
        "item": {
          "id": "02d859fa-63d0-482d-acf9-e9daebd5d893",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e00d9e62-35cb-4d56-a556-96759ac92b96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "02d859fa-63d0-482d-acf9-e9daebd5d893",
        "cursor": {
          "ref": "6462422d-2c64-410d-a672-c870f8f94d2d",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "abe7a801-dfc1-47d6-a1aa-8e4955fe4d4a"
        },
        "item": {
          "id": "02d859fa-63d0-482d-acf9-e9daebd5d893",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e00d9e62-35cb-4d56-a556-96759ac92b96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ca29d8be-75ee-47d8-b5bb-56b641224d0c",
        "cursor": {
          "ref": "a6cfe9b2-3409-434a-b5f6-50da12bdb417",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b0aeac43-1670-48fb-b6c5-29e4e265b108"
        },
        "item": {
          "id": "ca29d8be-75ee-47d8-b5bb-56b641224d0c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "38fb7f96-5525-43fd-a629-9e27763368e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ca29d8be-75ee-47d8-b5bb-56b641224d0c",
        "cursor": {
          "ref": "a6cfe9b2-3409-434a-b5f6-50da12bdb417",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b0aeac43-1670-48fb-b6c5-29e4e265b108"
        },
        "item": {
          "id": "ca29d8be-75ee-47d8-b5bb-56b641224d0c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "38fb7f96-5525-43fd-a629-9e27763368e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "dd217925-2244-4ba4-bbd5-c32d1d6f6999",
        "cursor": {
          "ref": "5b3fe2ba-022f-4518-8548-d1759c97ffcc",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ab8b3072-5bd9-4019-b743-777f73973365"
        },
        "item": {
          "id": "dd217925-2244-4ba4-bbd5-c32d1d6f6999",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ab6cdceb-8a06-4c68-b8b8-471cec33404e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "dd217925-2244-4ba4-bbd5-c32d1d6f6999",
        "cursor": {
          "ref": "5b3fe2ba-022f-4518-8548-d1759c97ffcc",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ab8b3072-5bd9-4019-b743-777f73973365"
        },
        "item": {
          "id": "dd217925-2244-4ba4-bbd5-c32d1d6f6999",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ab6cdceb-8a06-4c68-b8b8-471cec33404e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "69afacd0-ad86-4349-95a5-8b89661010a9",
        "cursor": {
          "ref": "a22cf21c-62f8-4018-b851-7e53bc15f6b3",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "95c7dee4-fabc-465a-b228-ffe6f60f0974"
        },
        "item": {
          "id": "69afacd0-ad86-4349-95a5-8b89661010a9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "637b9590-afe7-4814-bdb1-e35d2428d5b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "69afacd0-ad86-4349-95a5-8b89661010a9",
        "cursor": {
          "ref": "a22cf21c-62f8-4018-b851-7e53bc15f6b3",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "95c7dee4-fabc-465a-b228-ffe6f60f0974"
        },
        "item": {
          "id": "69afacd0-ad86-4349-95a5-8b89661010a9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "637b9590-afe7-4814-bdb1-e35d2428d5b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "9c9b4325-f4a4-4268-8af1-bdbeb9098d98",
        "cursor": {
          "ref": "9ea747df-433e-45f3-9581-57f60773bf4b",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "847d4999-432d-40ba-9d47-5b351b7368fe"
        },
        "item": {
          "id": "9c9b4325-f4a4-4268-8af1-bdbeb9098d98",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e0a6e36f-2c08-4cb6-b489-b5f3cb117652",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9c9b4325-f4a4-4268-8af1-bdbeb9098d98",
        "cursor": {
          "ref": "9ea747df-433e-45f3-9581-57f60773bf4b",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "847d4999-432d-40ba-9d47-5b351b7368fe"
        },
        "item": {
          "id": "9c9b4325-f4a4-4268-8af1-bdbeb9098d98",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e0a6e36f-2c08-4cb6-b489-b5f3cb117652",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1e0e5fe9-516d-4d5d-9441-7e7654778cee",
        "cursor": {
          "ref": "6a8c5046-9734-44bd-b91f-d39ea70e8038",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "da541ed3-09da-4d62-9395-ce96619df5c4"
        },
        "item": {
          "id": "1e0e5fe9-516d-4d5d-9441-7e7654778cee",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c4e68a97-cd8c-4f17-8bac-71006abd4647",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "1e0e5fe9-516d-4d5d-9441-7e7654778cee",
        "cursor": {
          "ref": "6a8c5046-9734-44bd-b91f-d39ea70e8038",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "da541ed3-09da-4d62-9395-ce96619df5c4"
        },
        "item": {
          "id": "1e0e5fe9-516d-4d5d-9441-7e7654778cee",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c4e68a97-cd8c-4f17-8bac-71006abd4647",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "be6fd1b1-b6ad-4dfd-99b1-b1279d3ddd61",
        "cursor": {
          "ref": "449cb1f1-e399-44f5-bc93-aac318d5a268",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8503f2c6-1c57-4323-b24b-2fb69991aca3"
        },
        "item": {
          "id": "be6fd1b1-b6ad-4dfd-99b1-b1279d3ddd61",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "facd4905-c11a-4315-97cd-7e48d3ff0ffd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "be6fd1b1-b6ad-4dfd-99b1-b1279d3ddd61",
        "cursor": {
          "ref": "449cb1f1-e399-44f5-bc93-aac318d5a268",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8503f2c6-1c57-4323-b24b-2fb69991aca3"
        },
        "item": {
          "id": "be6fd1b1-b6ad-4dfd-99b1-b1279d3ddd61",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "facd4905-c11a-4315-97cd-7e48d3ff0ffd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "1a76b6fc-076e-4fde-8477-593d9bffc10f",
        "cursor": {
          "ref": "7419e20b-cddb-4bac-9733-fefb287c73fe",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6e6da97e-f765-41d7-aca5-653a2217a261"
        },
        "item": {
          "id": "1a76b6fc-076e-4fde-8477-593d9bffc10f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0092dd8f-832a-4914-89c0-fba5a3e704fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 50,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "1a76b6fc-076e-4fde-8477-593d9bffc10f",
        "cursor": {
          "ref": "7419e20b-cddb-4bac-9733-fefb287c73fe",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6e6da97e-f765-41d7-aca5-653a2217a261"
        },
        "item": {
          "id": "1a76b6fc-076e-4fde-8477-593d9bffc10f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0092dd8f-832a-4914-89c0-fba5a3e704fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 50,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "407008ce-0588-4c38-9a01-cd4ffc23f445",
        "cursor": {
          "ref": "ab661b88-8ace-49e7-aa29-5117d8f8d6b6",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e417dba6-7bb2-44ba-8bf8-c8171e96cd2f"
        },
        "item": {
          "id": "407008ce-0588-4c38-9a01-cd4ffc23f445",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ff12e284-824c-43f2-953b-743e769928c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "407008ce-0588-4c38-9a01-cd4ffc23f445",
        "cursor": {
          "ref": "ab661b88-8ace-49e7-aa29-5117d8f8d6b6",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e417dba6-7bb2-44ba-8bf8-c8171e96cd2f"
        },
        "item": {
          "id": "407008ce-0588-4c38-9a01-cd4ffc23f445",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ff12e284-824c-43f2-953b-743e769928c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "fb952804-177e-4196-ace3-e821c20c044f",
        "cursor": {
          "ref": "b767f197-a581-4be9-af2a-f8d9f4380474",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7803f406-bfc5-46cd-a973-50c40c78c144"
        },
        "item": {
          "id": "fb952804-177e-4196-ace3-e821c20c044f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ea19f256-9ad5-402c-9074-e6c1f18df06a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "fb952804-177e-4196-ace3-e821c20c044f",
        "cursor": {
          "ref": "b767f197-a581-4be9-af2a-f8d9f4380474",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7803f406-bfc5-46cd-a973-50c40c78c144"
        },
        "item": {
          "id": "fb952804-177e-4196-ace3-e821c20c044f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ea19f256-9ad5-402c-9074-e6c1f18df06a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "361b7030-8fb7-450f-831b-f88c3fc4c16d",
        "cursor": {
          "ref": "01a85c39-9a95-45f5-b1aa-9b91789c20dc",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "56dfc292-78a3-466e-8e44-0a927d31618a"
        },
        "item": {
          "id": "361b7030-8fb7-450f-831b-f88c3fc4c16d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "640d7bb9-0d14-4a46-8e3b-502889c167ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "361b7030-8fb7-450f-831b-f88c3fc4c16d",
        "cursor": {
          "ref": "01a85c39-9a95-45f5-b1aa-9b91789c20dc",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "56dfc292-78a3-466e-8e44-0a927d31618a"
        },
        "item": {
          "id": "361b7030-8fb7-450f-831b-f88c3fc4c16d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "640d7bb9-0d14-4a46-8e3b-502889c167ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "0f76bb1c-3d52-4020-b50e-77c91ec298b2",
        "cursor": {
          "ref": "a597433b-17db-48bf-a1ca-70cfef3a0bd5",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "511fefd1-1104-4990-80c3-6bb4f33c9d83"
        },
        "item": {
          "id": "0f76bb1c-3d52-4020-b50e-77c91ec298b2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d990f5e3-70f0-488d-890c-a13226ee285e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "0f76bb1c-3d52-4020-b50e-77c91ec298b2",
        "cursor": {
          "ref": "a597433b-17db-48bf-a1ca-70cfef3a0bd5",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "511fefd1-1104-4990-80c3-6bb4f33c9d83"
        },
        "item": {
          "id": "0f76bb1c-3d52-4020-b50e-77c91ec298b2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d990f5e3-70f0-488d-890c-a13226ee285e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d3d473da-be18-47e4-82f0-05d031fff8ca",
        "cursor": {
          "ref": "9c7473f5-d584-4f25-99ad-c4da0dfadc41",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "82a8aba4-488b-4033-8f3a-4dd6b833a456"
        },
        "item": {
          "id": "d3d473da-be18-47e4-82f0-05d031fff8ca",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "19c34551-30f5-4935-8ac1-c1c8a08c4dac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "d3d473da-be18-47e4-82f0-05d031fff8ca",
        "cursor": {
          "ref": "9c7473f5-d584-4f25-99ad-c4da0dfadc41",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "82a8aba4-488b-4033-8f3a-4dd6b833a456"
        },
        "item": {
          "id": "d3d473da-be18-47e4-82f0-05d031fff8ca",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "19c34551-30f5-4935-8ac1-c1c8a08c4dac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "23e62da3-1986-483a-9267-30c414578df7",
        "cursor": {
          "ref": "34ea757b-0ed6-4cab-9cdc-ce00f6760ce2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9864ba6a-24e1-4311-aa9d-843c5470f508"
        },
        "item": {
          "id": "23e62da3-1986-483a-9267-30c414578df7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "96dedabd-7b54-49aa-8681-f53dc3b32301",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "23e62da3-1986-483a-9267-30c414578df7",
        "cursor": {
          "ref": "34ea757b-0ed6-4cab-9cdc-ce00f6760ce2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9864ba6a-24e1-4311-aa9d-843c5470f508"
        },
        "item": {
          "id": "23e62da3-1986-483a-9267-30c414578df7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "96dedabd-7b54-49aa-8681-f53dc3b32301",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "af3e4490-189e-4a9a-8176-0530fba36c6c",
        "cursor": {
          "ref": "babddb18-0356-4e58-bbea-0a0fa731a223",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2551bc66-a812-4690-adc9-8b2c9f342cb9"
        },
        "item": {
          "id": "af3e4490-189e-4a9a-8176-0530fba36c6c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "66028bed-3c97-4758-a16d-f131b95fbc1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "af3e4490-189e-4a9a-8176-0530fba36c6c",
        "cursor": {
          "ref": "babddb18-0356-4e58-bbea-0a0fa731a223",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2551bc66-a812-4690-adc9-8b2c9f342cb9"
        },
        "item": {
          "id": "af3e4490-189e-4a9a-8176-0530fba36c6c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "66028bed-3c97-4758-a16d-f131b95fbc1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "56c43533-fceb-4675-b1f8-b9bb73131e1e",
        "cursor": {
          "ref": "9d422ce9-f557-49a3-8642-7170acc2989d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "11f8b238-5d40-4a0e-a6d4-126aaab41d67"
        },
        "item": {
          "id": "56c43533-fceb-4675-b1f8-b9bb73131e1e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3c5a0254-dd20-4008-81d3-f31f149831a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "56c43533-fceb-4675-b1f8-b9bb73131e1e",
        "cursor": {
          "ref": "9d422ce9-f557-49a3-8642-7170acc2989d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "11f8b238-5d40-4a0e-a6d4-126aaab41d67"
        },
        "item": {
          "id": "56c43533-fceb-4675-b1f8-b9bb73131e1e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3c5a0254-dd20-4008-81d3-f31f149831a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "2aea9c85-27e7-47d4-a252-7e7df5789ebe",
        "cursor": {
          "ref": "232fda0f-a10b-4a70-bcca-c5a0d96925cd",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4dc18564-50a4-435f-8185-0fb9978d626d"
        },
        "item": {
          "id": "2aea9c85-27e7-47d4-a252-7e7df5789ebe",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "538a43fb-173a-4030-8f64-b797cfc73ec0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "2aea9c85-27e7-47d4-a252-7e7df5789ebe",
        "cursor": {
          "ref": "232fda0f-a10b-4a70-bcca-c5a0d96925cd",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4dc18564-50a4-435f-8185-0fb9978d626d"
        },
        "item": {
          "id": "2aea9c85-27e7-47d4-a252-7e7df5789ebe",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "538a43fb-173a-4030-8f64-b797cfc73ec0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f6e54341-c38a-421e-9cbd-d0392fa5a460",
        "cursor": {
          "ref": "396d4c24-7404-40b0-a380-bd27981fa85a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "98da40d2-d76a-44aa-a869-074280c419aa"
        },
        "item": {
          "id": "f6e54341-c38a-421e-9cbd-d0392fa5a460",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c224a3e6-498c-4ffa-9bc9-810fdc194108",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f6e54341-c38a-421e-9cbd-d0392fa5a460",
        "cursor": {
          "ref": "396d4c24-7404-40b0-a380-bd27981fa85a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "98da40d2-d76a-44aa-a869-074280c419aa"
        },
        "item": {
          "id": "f6e54341-c38a-421e-9cbd-d0392fa5a460",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c224a3e6-498c-4ffa-9bc9-810fdc194108",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fbc1bc2d-4243-4e5e-92a8-95c3909bd8c9",
        "cursor": {
          "ref": "f76b6675-99a6-4408-be8f-4ea6036e7dee",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e85a6b7f-47e3-4bf8-9f57-f9dcd301b579"
        },
        "item": {
          "id": "fbc1bc2d-4243-4e5e-92a8-95c3909bd8c9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7a080f36-874b-4dea-acb9-73a205d9c2a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "fbc1bc2d-4243-4e5e-92a8-95c3909bd8c9",
        "cursor": {
          "ref": "f76b6675-99a6-4408-be8f-4ea6036e7dee",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e85a6b7f-47e3-4bf8-9f57-f9dcd301b579"
        },
        "item": {
          "id": "fbc1bc2d-4243-4e5e-92a8-95c3909bd8c9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7a080f36-874b-4dea-acb9-73a205d9c2a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d459f11f-7b99-4e1d-85ac-25fca210f3f3",
        "cursor": {
          "ref": "480725fd-4dcf-4fab-a44e-50ad95d7c708",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4e1d4c27-a484-490d-8037-5d734aecb21c"
        },
        "item": {
          "id": "d459f11f-7b99-4e1d-85ac-25fca210f3f3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cb34248b-df34-4026-abcd-021ce118ecdd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "d459f11f-7b99-4e1d-85ac-25fca210f3f3",
        "cursor": {
          "ref": "480725fd-4dcf-4fab-a44e-50ad95d7c708",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4e1d4c27-a484-490d-8037-5d734aecb21c"
        },
        "item": {
          "id": "d459f11f-7b99-4e1d-85ac-25fca210f3f3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cb34248b-df34-4026-abcd-021ce118ecdd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "0a2da168-cc74-4dc5-ae6d-ce3e9be545c5",
        "cursor": {
          "ref": "850659c4-427c-445a-a30d-50d7c55c2ca3",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9725d471-3be2-403e-b2a0-38ee24aa56e9"
        },
        "item": {
          "id": "0a2da168-cc74-4dc5-ae6d-ce3e9be545c5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "08f9420e-e0b7-419c-9fc6-3f58e9cc2ecf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0a2da168-cc74-4dc5-ae6d-ce3e9be545c5",
        "cursor": {
          "ref": "850659c4-427c-445a-a30d-50d7c55c2ca3",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9725d471-3be2-403e-b2a0-38ee24aa56e9"
        },
        "item": {
          "id": "0a2da168-cc74-4dc5-ae6d-ce3e9be545c5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "08f9420e-e0b7-419c-9fc6-3f58e9cc2ecf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "6cdc6dd1-a598-47be-842f-61b337abd4ba",
        "cursor": {
          "ref": "e8c4f8d6-674d-4e82-8cc0-ab158a334470",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "280c17f3-1c8b-445f-a9bb-c73d9fd63b82"
        },
        "item": {
          "id": "6cdc6dd1-a598-47be-842f-61b337abd4ba",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9ed8de25-e245-4e29-ab15-401f73397c28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "6cdc6dd1-a598-47be-842f-61b337abd4ba",
        "cursor": {
          "ref": "e8c4f8d6-674d-4e82-8cc0-ab158a334470",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "280c17f3-1c8b-445f-a9bb-c73d9fd63b82"
        },
        "item": {
          "id": "6cdc6dd1-a598-47be-842f-61b337abd4ba",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9ed8de25-e245-4e29-ab15-401f73397c28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "fd301dfd-c438-4788-90b9-c7ee4573dee4",
        "cursor": {
          "ref": "7a94fa75-0090-4df9-b5b7-f090a5e23793",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1a475571-b783-4f63-8e50-45f300d81bd0"
        },
        "item": {
          "id": "fd301dfd-c438-4788-90b9-c7ee4573dee4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "31305f9b-93b1-4484-8849-49303a1560ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "fd301dfd-c438-4788-90b9-c7ee4573dee4",
        "cursor": {
          "ref": "7a94fa75-0090-4df9-b5b7-f090a5e23793",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1a475571-b783-4f63-8e50-45f300d81bd0"
        },
        "item": {
          "id": "fd301dfd-c438-4788-90b9-c7ee4573dee4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "31305f9b-93b1-4484-8849-49303a1560ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "47948c0f-7a4f-4a35-a5f3-215e4b6a863c",
        "cursor": {
          "ref": "a315ad18-9624-4575-8c16-69a9ea27af85",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "46bdf31e-74d2-439d-bfca-cf63bd7655ca"
        },
        "item": {
          "id": "47948c0f-7a4f-4a35-a5f3-215e4b6a863c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "55d0a92d-981c-4e4d-b098-2243b4b8122e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "47948c0f-7a4f-4a35-a5f3-215e4b6a863c",
        "cursor": {
          "ref": "a315ad18-9624-4575-8c16-69a9ea27af85",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "46bdf31e-74d2-439d-bfca-cf63bd7655ca"
        },
        "item": {
          "id": "47948c0f-7a4f-4a35-a5f3-215e4b6a863c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "55d0a92d-981c-4e4d-b098-2243b4b8122e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1401d432-10de-4f1b-9385-7c9b129003aa",
        "cursor": {
          "ref": "17eb5934-79fd-4538-8151-e09fc59e2413",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7595e8bc-2c60-486d-9a93-1a7c51681580"
        },
        "item": {
          "id": "1401d432-10de-4f1b-9385-7c9b129003aa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2d42ab1a-5593-41d7-85be-807663def25a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1401d432-10de-4f1b-9385-7c9b129003aa",
        "cursor": {
          "ref": "17eb5934-79fd-4538-8151-e09fc59e2413",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7595e8bc-2c60-486d-9a93-1a7c51681580"
        },
        "item": {
          "id": "1401d432-10de-4f1b-9385-7c9b129003aa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2d42ab1a-5593-41d7-85be-807663def25a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "27dcdbbf-7cba-4ed2-9552-49b0158216d8",
        "cursor": {
          "ref": "130f9c3b-ddf9-4acf-805e-eac397b0358f",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f7246dfc-944f-4818-9a64-5f89248513b1"
        },
        "item": {
          "id": "27dcdbbf-7cba-4ed2-9552-49b0158216d8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bcc2fab9-cafb-4a39-955c-4b2b6fdc9eb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "27dcdbbf-7cba-4ed2-9552-49b0158216d8",
        "cursor": {
          "ref": "130f9c3b-ddf9-4acf-805e-eac397b0358f",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f7246dfc-944f-4818-9a64-5f89248513b1"
        },
        "item": {
          "id": "27dcdbbf-7cba-4ed2-9552-49b0158216d8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bcc2fab9-cafb-4a39-955c-4b2b6fdc9eb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "7a611020-ee45-4df3-b100-6bfb9565a24d",
        "cursor": {
          "ref": "a3f4389e-c181-4aff-870b-0b85012d7af4",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bc67a7a5-1e0d-40ab-bc10-99206451fc21"
        },
        "item": {
          "id": "7a611020-ee45-4df3-b100-6bfb9565a24d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2fb93c84-e36f-4323-82e1-c206e5833513",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "7a611020-ee45-4df3-b100-6bfb9565a24d",
        "cursor": {
          "ref": "a3f4389e-c181-4aff-870b-0b85012d7af4",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bc67a7a5-1e0d-40ab-bc10-99206451fc21"
        },
        "item": {
          "id": "7a611020-ee45-4df3-b100-6bfb9565a24d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2fb93c84-e36f-4323-82e1-c206e5833513",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "96c8f745-8e64-4ab6-b26c-6513976596f1",
        "cursor": {
          "ref": "68e42c1f-1df5-4ba9-9304-f726d3955d24",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e3766220-ca9f-46a9-a5f8-72fa4a911b71"
        },
        "item": {
          "id": "96c8f745-8e64-4ab6-b26c-6513976596f1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1fb84905-41cc-43bf-b37d-e993d769f719",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "96c8f745-8e64-4ab6-b26c-6513976596f1",
        "cursor": {
          "ref": "68e42c1f-1df5-4ba9-9304-f726d3955d24",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e3766220-ca9f-46a9-a5f8-72fa4a911b71"
        },
        "item": {
          "id": "96c8f745-8e64-4ab6-b26c-6513976596f1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1fb84905-41cc-43bf-b37d-e993d769f719",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1d944ccf-fe53-4db0-ac68-6bd336689ea0",
        "cursor": {
          "ref": "37ca1a4e-8f2c-4f29-b023-400a4dea02ea",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "536a15b7-406c-4339-9c7f-f61afe1e1867"
        },
        "item": {
          "id": "1d944ccf-fe53-4db0-ac68-6bd336689ea0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5184a4f5-8f48-4d12-9dfb-98d1d74e348d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1d944ccf-fe53-4db0-ac68-6bd336689ea0",
        "cursor": {
          "ref": "37ca1a4e-8f2c-4f29-b023-400a4dea02ea",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "536a15b7-406c-4339-9c7f-f61afe1e1867"
        },
        "item": {
          "id": "1d944ccf-fe53-4db0-ac68-6bd336689ea0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5184a4f5-8f48-4d12-9dfb-98d1d74e348d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e7207a08-bff9-4f76-86ad-b1ee1316841f",
        "cursor": {
          "ref": "24d6b9c7-433f-459a-a568-7650b224b59f",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8a14bc68-c4c8-4c82-a89a-bb9ac61eb5d6"
        },
        "item": {
          "id": "e7207a08-bff9-4f76-86ad-b1ee1316841f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "81fb7277-e727-4739-b56a-2b8f6153b230",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e7207a08-bff9-4f76-86ad-b1ee1316841f",
        "cursor": {
          "ref": "24d6b9c7-433f-459a-a568-7650b224b59f",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8a14bc68-c4c8-4c82-a89a-bb9ac61eb5d6"
        },
        "item": {
          "id": "e7207a08-bff9-4f76-86ad-b1ee1316841f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "81fb7277-e727-4739-b56a-2b8f6153b230",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f19ef5f5-02a5-4630-a8c2-7f15671f3990",
        "cursor": {
          "ref": "b412efdb-39d2-49af-b1bd-dbb38675519b",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "99821e06-d2be-4b0e-b075-b95023153ea9"
        },
        "item": {
          "id": "f19ef5f5-02a5-4630-a8c2-7f15671f3990",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "275f69b1-b307-475a-b0d2-b20824831211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "f19ef5f5-02a5-4630-a8c2-7f15671f3990",
        "cursor": {
          "ref": "b412efdb-39d2-49af-b1bd-dbb38675519b",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "99821e06-d2be-4b0e-b075-b95023153ea9"
        },
        "item": {
          "id": "f19ef5f5-02a5-4630-a8c2-7f15671f3990",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "275f69b1-b307-475a-b0d2-b20824831211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "c2c0b3d0-0f0d-4bb0-b19a-bb304a9bb1d6",
        "cursor": {
          "ref": "60277164-61e3-4d62-8244-f57f066d62bf",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "50799531-b33c-490e-a963-40b7128ce87a"
        },
        "item": {
          "id": "c2c0b3d0-0f0d-4bb0-b19a-bb304a9bb1d6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "81682a03-5ff7-43ed-8233-f6e3eda1865b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "c2c0b3d0-0f0d-4bb0-b19a-bb304a9bb1d6",
        "cursor": {
          "ref": "60277164-61e3-4d62-8244-f57f066d62bf",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "50799531-b33c-490e-a963-40b7128ce87a"
        },
        "item": {
          "id": "c2c0b3d0-0f0d-4bb0-b19a-bb304a9bb1d6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "81682a03-5ff7-43ed-8233-f6e3eda1865b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "425a9c22-9a12-44a4-925b-e4bd18df2ae5",
        "cursor": {
          "ref": "69739b4d-e83b-4826-aee9-bcab53f6af3d",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "23df8034-6302-4d54-a631-dc9efbcdce74"
        },
        "item": {
          "id": "425a9c22-9a12-44a4-925b-e4bd18df2ae5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2221ae0f-6073-4199-b7f9-b5a70c2ee41d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "425a9c22-9a12-44a4-925b-e4bd18df2ae5",
        "cursor": {
          "ref": "69739b4d-e83b-4826-aee9-bcab53f6af3d",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "23df8034-6302-4d54-a631-dc9efbcdce74"
        },
        "item": {
          "id": "425a9c22-9a12-44a4-925b-e4bd18df2ae5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2221ae0f-6073-4199-b7f9-b5a70c2ee41d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "1b5c6b5d-90ce-4e6a-92f3-314f7d06d5aa",
        "cursor": {
          "ref": "df676219-f29e-4ed7-b405-b07def8ae55b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "357e7184-f9d0-45f2-a829-9edef1532873"
        },
        "item": {
          "id": "1b5c6b5d-90ce-4e6a-92f3-314f7d06d5aa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "80c46c84-d0f1-49f0-bf4c-b96d5f040d17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "1b5c6b5d-90ce-4e6a-92f3-314f7d06d5aa",
        "cursor": {
          "ref": "df676219-f29e-4ed7-b405-b07def8ae55b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "357e7184-f9d0-45f2-a829-9edef1532873"
        },
        "item": {
          "id": "1b5c6b5d-90ce-4e6a-92f3-314f7d06d5aa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "80c46c84-d0f1-49f0-bf4c-b96d5f040d17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "c85587da-0ce2-488e-aaee-2a7e67723148",
        "cursor": {
          "ref": "d46cda93-dd4a-4438-90ab-53317799639b",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8d9cbe7c-3493-47fb-8a7e-47ac542b6a5d"
        },
        "item": {
          "id": "c85587da-0ce2-488e-aaee-2a7e67723148",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "30b46e6b-dd12-4880-878f-f5545a64a6be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "c85587da-0ce2-488e-aaee-2a7e67723148",
        "cursor": {
          "ref": "d46cda93-dd4a-4438-90ab-53317799639b",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8d9cbe7c-3493-47fb-8a7e-47ac542b6a5d"
        },
        "item": {
          "id": "c85587da-0ce2-488e-aaee-2a7e67723148",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "30b46e6b-dd12-4880-878f-f5545a64a6be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "3fa91cf3-0b4e-49e9-aab7-0659e44f8788",
        "cursor": {
          "ref": "60c00fa2-8e6b-43cf-a444-e240b2702fa4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cd47b433-79b2-455b-b672-ef85c5999eae"
        },
        "item": {
          "id": "3fa91cf3-0b4e-49e9-aab7-0659e44f8788",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "70708025-82cd-43b5-a0ee-70ffaaa7c2aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "3fa91cf3-0b4e-49e9-aab7-0659e44f8788",
        "cursor": {
          "ref": "60c00fa2-8e6b-43cf-a444-e240b2702fa4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cd47b433-79b2-455b-b672-ef85c5999eae"
        },
        "item": {
          "id": "3fa91cf3-0b4e-49e9-aab7-0659e44f8788",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "70708025-82cd-43b5-a0ee-70ffaaa7c2aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "fe4bf408-aafb-4652-9fb7-acf6c73d3bab",
        "cursor": {
          "ref": "df1b5521-c141-4b9a-8297-78f3c892f9cf",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a5efa655-9894-4b10-9d96-4819b2e6ac43"
        },
        "item": {
          "id": "fe4bf408-aafb-4652-9fb7-acf6c73d3bab",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bef2580c-1613-42a3-ae4f-b65ab2317a50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "fe4bf408-aafb-4652-9fb7-acf6c73d3bab",
        "cursor": {
          "ref": "df1b5521-c141-4b9a-8297-78f3c892f9cf",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a5efa655-9894-4b10-9d96-4819b2e6ac43"
        },
        "item": {
          "id": "fe4bf408-aafb-4652-9fb7-acf6c73d3bab",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bef2580c-1613-42a3-ae4f-b65ab2317a50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "9021ec56-299c-4a64-a0ca-a49beec23e90",
        "cursor": {
          "ref": "193bf644-afa1-4c98-bf5d-2980aaa88b20",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e95062ca-7bff-421b-a5cb-456813fc77e4"
        },
        "item": {
          "id": "9021ec56-299c-4a64-a0ca-a49beec23e90",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4f0ae4ef-a66f-4b80-bdae-ea05ea225ddc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "9021ec56-299c-4a64-a0ca-a49beec23e90",
        "cursor": {
          "ref": "193bf644-afa1-4c98-bf5d-2980aaa88b20",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e95062ca-7bff-421b-a5cb-456813fc77e4"
        },
        "item": {
          "id": "9021ec56-299c-4a64-a0ca-a49beec23e90",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4f0ae4ef-a66f-4b80-bdae-ea05ea225ddc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "d583c361-0513-4ce6-8806-108ff38f9802",
        "cursor": {
          "ref": "2e7f909b-8fb6-4885-a31f-d8c88ec67548",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d618c792-1c2e-4a0e-adc6-f5eb8a9a88cc"
        },
        "item": {
          "id": "d583c361-0513-4ce6-8806-108ff38f9802",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fdc36552-25a9-4d3c-8175-cab2ddf40f27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "d583c361-0513-4ce6-8806-108ff38f9802",
        "cursor": {
          "ref": "2e7f909b-8fb6-4885-a31f-d8c88ec67548",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d618c792-1c2e-4a0e-adc6-f5eb8a9a88cc"
        },
        "item": {
          "id": "d583c361-0513-4ce6-8806-108ff38f9802",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fdc36552-25a9-4d3c-8175-cab2ddf40f27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "f968f5ee-e3f3-4501-9d5d-f487f0a08d8f",
        "cursor": {
          "ref": "3f635f5f-8f79-4974-982e-af21761ea889",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b6f03b31-ca57-4888-8ce5-70fe56718658"
        },
        "item": {
          "id": "f968f5ee-e3f3-4501-9d5d-f487f0a08d8f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "72cde884-e8c6-4c28-97fc-aaca269683f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "f968f5ee-e3f3-4501-9d5d-f487f0a08d8f",
        "cursor": {
          "ref": "3f635f5f-8f79-4974-982e-af21761ea889",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b6f03b31-ca57-4888-8ce5-70fe56718658"
        },
        "item": {
          "id": "f968f5ee-e3f3-4501-9d5d-f487f0a08d8f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "72cde884-e8c6-4c28-97fc-aaca269683f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "1aeda7e2-65d1-4770-b70d-da4cb80f7d35",
        "cursor": {
          "ref": "ccbd683a-543d-4c1e-b28f-fbd2079cb2fa",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7fed285f-6250-4bb8-be62-ea4adc39b9b4"
        },
        "item": {
          "id": "1aeda7e2-65d1-4770-b70d-da4cb80f7d35",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "edc1eecb-95dc-414f-a30f-e45ec6847b27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "1aeda7e2-65d1-4770-b70d-da4cb80f7d35",
        "cursor": {
          "ref": "ccbd683a-543d-4c1e-b28f-fbd2079cb2fa",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7fed285f-6250-4bb8-be62-ea4adc39b9b4"
        },
        "item": {
          "id": "1aeda7e2-65d1-4770-b70d-da4cb80f7d35",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "edc1eecb-95dc-414f-a30f-e45ec6847b27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "1c94c64f-269a-46f5-840e-d050b7783693",
        "cursor": {
          "ref": "68b8f85f-5fff-4051-b74f-5ba663530668",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "72412233-43cb-4d14-ac40-a55a59567fa7"
        },
        "item": {
          "id": "1c94c64f-269a-46f5-840e-d050b7783693",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e74947aa-99a6-496d-ae1f-0b3bafa78a42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "1c94c64f-269a-46f5-840e-d050b7783693",
        "cursor": {
          "ref": "68b8f85f-5fff-4051-b74f-5ba663530668",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "72412233-43cb-4d14-ac40-a55a59567fa7"
        },
        "item": {
          "id": "1c94c64f-269a-46f5-840e-d050b7783693",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e74947aa-99a6-496d-ae1f-0b3bafa78a42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "e118ea35-5a63-4bdd-92c6-a4aea31af3d9",
        "cursor": {
          "ref": "fe525370-d2f8-456d-8efd-83f7fd1aa252",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3737c2e8-417a-4353-aa37-1d65da40acbe"
        },
        "item": {
          "id": "e118ea35-5a63-4bdd-92c6-a4aea31af3d9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "77f07980-b9b0-4c30-bb67-9655e9efd041",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e118ea35-5a63-4bdd-92c6-a4aea31af3d9",
        "cursor": {
          "ref": "fe525370-d2f8-456d-8efd-83f7fd1aa252",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3737c2e8-417a-4353-aa37-1d65da40acbe"
        },
        "item": {
          "id": "e118ea35-5a63-4bdd-92c6-a4aea31af3d9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "77f07980-b9b0-4c30-bb67-9655e9efd041",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "cc94006c-f74b-4dde-b26a-bb5f44f957b8",
        "cursor": {
          "ref": "7e7425c1-60c7-449f-aff7-262a325a50c7",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f5f8e78c-01a5-49d1-801b-97df2b653f43"
        },
        "item": {
          "id": "cc94006c-f74b-4dde-b26a-bb5f44f957b8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "292b34fe-a0bf-4221-ab22-ba24cabc7ec4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 54,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "cc94006c-f74b-4dde-b26a-bb5f44f957b8",
        "cursor": {
          "ref": "7e7425c1-60c7-449f-aff7-262a325a50c7",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f5f8e78c-01a5-49d1-801b-97df2b653f43"
        },
        "item": {
          "id": "cc94006c-f74b-4dde-b26a-bb5f44f957b8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "292b34fe-a0bf-4221-ab22-ba24cabc7ec4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 54,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "5d737a2b-9983-4656-9762-eea743fc6e06",
        "cursor": {
          "ref": "76c9ba8c-c7a7-4f54-985a-3f061eba49ac",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "94815e46-6d0d-478c-9185-6d62f2fdc955"
        },
        "item": {
          "id": "5d737a2b-9983-4656-9762-eea743fc6e06",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "07deae90-bdf5-4157-948a-f1501f4f6f6c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "5d737a2b-9983-4656-9762-eea743fc6e06",
        "cursor": {
          "ref": "76c9ba8c-c7a7-4f54-985a-3f061eba49ac",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "94815e46-6d0d-478c-9185-6d62f2fdc955"
        },
        "item": {
          "id": "5d737a2b-9983-4656-9762-eea743fc6e06",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "07deae90-bdf5-4157-948a-f1501f4f6f6c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "d35e06dd-2c09-4316-bfb6-247218d03116",
        "cursor": {
          "ref": "641abd3b-268a-4af6-a7c1-2ab1f621e520",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4f283b24-2088-4438-8da8-0ef38dd4686a"
        },
        "item": {
          "id": "d35e06dd-2c09-4316-bfb6-247218d03116",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "82bcec5d-7913-4267-ba70-31935cf43536",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d35e06dd-2c09-4316-bfb6-247218d03116",
        "cursor": {
          "ref": "641abd3b-268a-4af6-a7c1-2ab1f621e520",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4f283b24-2088-4438-8da8-0ef38dd4686a"
        },
        "item": {
          "id": "d35e06dd-2c09-4316-bfb6-247218d03116",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "82bcec5d-7913-4267-ba70-31935cf43536",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "de897aae-b88c-47b5-991a-f2e7aedbecd6",
        "cursor": {
          "ref": "26d65d62-88e7-47a9-a845-b6b1800a854c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d22e1d34-1525-4e1f-849e-05402a56650c"
        },
        "item": {
          "id": "de897aae-b88c-47b5-991a-f2e7aedbecd6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "701aa3c8-72c7-4048-96ad-9fa65041d0f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "de897aae-b88c-47b5-991a-f2e7aedbecd6",
        "cursor": {
          "ref": "26d65d62-88e7-47a9-a845-b6b1800a854c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d22e1d34-1525-4e1f-849e-05402a56650c"
        },
        "item": {
          "id": "de897aae-b88c-47b5-991a-f2e7aedbecd6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "701aa3c8-72c7-4048-96ad-9fa65041d0f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "0168d93b-4155-4ae0-876f-1d23433a8c58",
        "cursor": {
          "ref": "7103d929-f378-48b6-8f34-9606c8415fd2",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2b93365e-77a5-4806-8333-3b37a240efb2"
        },
        "item": {
          "id": "0168d93b-4155-4ae0-876f-1d23433a8c58",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c8e17c6b-7b8c-409b-8276-377acf1f2a93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "0168d93b-4155-4ae0-876f-1d23433a8c58",
        "cursor": {
          "ref": "7103d929-f378-48b6-8f34-9606c8415fd2",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2b93365e-77a5-4806-8333-3b37a240efb2"
        },
        "item": {
          "id": "0168d93b-4155-4ae0-876f-1d23433a8c58",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c8e17c6b-7b8c-409b-8276-377acf1f2a93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "f21dde7f-4189-41e4-8cc7-0296e5577c20",
        "cursor": {
          "ref": "d56b4c7b-a887-46a8-baa1-75ef02c39ad3",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "46392cb9-94bb-41d9-b04f-0cf77316098d"
        },
        "item": {
          "id": "f21dde7f-4189-41e4-8cc7-0296e5577c20",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9461de83-394b-434f-ba45-ea061664a9fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "f21dde7f-4189-41e4-8cc7-0296e5577c20",
        "cursor": {
          "ref": "d56b4c7b-a887-46a8-baa1-75ef02c39ad3",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "46392cb9-94bb-41d9-b04f-0cf77316098d"
        },
        "item": {
          "id": "f21dde7f-4189-41e4-8cc7-0296e5577c20",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9461de83-394b-434f-ba45-ea061664a9fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "1246ac8a-15e9-451e-8ba5-b279183c8a6c",
        "cursor": {
          "ref": "3f00d7bb-36bf-40bc-8051-7fcf2b4f85b8",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "98078aa4-9590-4e97-b62c-d8f0e140bb49"
        },
        "item": {
          "id": "1246ac8a-15e9-451e-8ba5-b279183c8a6c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4f370b34-a9bd-4aad-8304-91fc538bae79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "1246ac8a-15e9-451e-8ba5-b279183c8a6c",
        "cursor": {
          "ref": "3f00d7bb-36bf-40bc-8051-7fcf2b4f85b8",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "98078aa4-9590-4e97-b62c-d8f0e140bb49"
        },
        "item": {
          "id": "1246ac8a-15e9-451e-8ba5-b279183c8a6c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4f370b34-a9bd-4aad-8304-91fc538bae79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "8781664f-8ccd-4a5e-818f-d2b45d9a7639",
        "cursor": {
          "ref": "7e9761ad-a7cc-41be-b940-f661cdce79ed",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "344aa842-d07a-4409-82ea-9fbde7698af1"
        },
        "item": {
          "id": "8781664f-8ccd-4a5e-818f-d2b45d9a7639",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0155e1e5-1405-43c4-955d-22542fbb86b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "8781664f-8ccd-4a5e-818f-d2b45d9a7639",
        "cursor": {
          "ref": "7e9761ad-a7cc-41be-b940-f661cdce79ed",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "344aa842-d07a-4409-82ea-9fbde7698af1"
        },
        "item": {
          "id": "8781664f-8ccd-4a5e-818f-d2b45d9a7639",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0155e1e5-1405-43c4-955d-22542fbb86b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "03063df1-2c05-45c8-95c9-448435edd018",
        "cursor": {
          "ref": "ae79460c-01df-47ea-a9af-a46c8b666f21",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "461836b6-d130-40ec-b109-266d30366277"
        },
        "item": {
          "id": "03063df1-2c05-45c8-95c9-448435edd018",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1bcae0c5-dc26-44a4-98b8-65fecb41d7e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "03063df1-2c05-45c8-95c9-448435edd018",
        "cursor": {
          "ref": "ae79460c-01df-47ea-a9af-a46c8b666f21",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "461836b6-d130-40ec-b109-266d30366277"
        },
        "item": {
          "id": "03063df1-2c05-45c8-95c9-448435edd018",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1bcae0c5-dc26-44a4-98b8-65fecb41d7e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "a0c389a7-429e-406d-9fae-dd56f673db45",
        "cursor": {
          "ref": "4e3fa34c-5dda-4cdd-8a95-d195c0e25cec",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ba42f629-b995-483c-8515-f4cb24cf9203"
        },
        "item": {
          "id": "a0c389a7-429e-406d-9fae-dd56f673db45",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "14464a1c-f5df-4f61-b04a-f0312f52284f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "a0c389a7-429e-406d-9fae-dd56f673db45",
        "cursor": {
          "ref": "4e3fa34c-5dda-4cdd-8a95-d195c0e25cec",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ba42f629-b995-483c-8515-f4cb24cf9203"
        },
        "item": {
          "id": "a0c389a7-429e-406d-9fae-dd56f673db45",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "14464a1c-f5df-4f61-b04a-f0312f52284f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "0aef9a7a-68e3-494f-81cd-42b847d98653",
        "cursor": {
          "ref": "8c9e9e78-78b4-4c42-a0ae-efdbbb0605d6",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "87f95bcc-9bdc-4b62-9d95-f749f6db5105"
        },
        "item": {
          "id": "0aef9a7a-68e3-494f-81cd-42b847d98653",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cfa0e70b-1ed9-4161-8e53-43b276e75066",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "0aef9a7a-68e3-494f-81cd-42b847d98653",
        "cursor": {
          "ref": "8c9e9e78-78b4-4c42-a0ae-efdbbb0605d6",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "87f95bcc-9bdc-4b62-9d95-f749f6db5105"
        },
        "item": {
          "id": "0aef9a7a-68e3-494f-81cd-42b847d98653",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cfa0e70b-1ed9-4161-8e53-43b276e75066",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "b7efdef3-d191-4a96-a92a-696fc9eded22",
        "cursor": {
          "ref": "3a2919f8-b45b-4c09-80de-6aa3c4c3b45e",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1dbc7951-5339-409f-87cb-1862599659c8"
        },
        "item": {
          "id": "b7efdef3-d191-4a96-a92a-696fc9eded22",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e2862849-1d13-4a68-b7f5-77eb80308efa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "b7efdef3-d191-4a96-a92a-696fc9eded22",
        "cursor": {
          "ref": "3a2919f8-b45b-4c09-80de-6aa3c4c3b45e",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1dbc7951-5339-409f-87cb-1862599659c8"
        },
        "item": {
          "id": "b7efdef3-d191-4a96-a92a-696fc9eded22",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e2862849-1d13-4a68-b7f5-77eb80308efa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "68228c64-1bb8-4670-8f66-b12c46066a10",
        "cursor": {
          "ref": "cdfda696-d203-479b-aa6b-c455be49bdd8",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a19eab28-3867-453c-ae3d-2fd63d13c72f"
        },
        "item": {
          "id": "68228c64-1bb8-4670-8f66-b12c46066a10",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "41a6c970-a083-4191-a54d-a7e79abe52c8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "68228c64-1bb8-4670-8f66-b12c46066a10",
        "cursor": {
          "ref": "cdfda696-d203-479b-aa6b-c455be49bdd8",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a19eab28-3867-453c-ae3d-2fd63d13c72f"
        },
        "item": {
          "id": "68228c64-1bb8-4670-8f66-b12c46066a10",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "41a6c970-a083-4191-a54d-a7e79abe52c8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "b2fad558-655c-4fc6-a5ce-879b69161c43",
        "cursor": {
          "ref": "bbcb17c3-a5eb-49ea-bafb-4a94811b8de3",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a5dd4a9f-8d95-49a6-b4b6-fbaab312bed4"
        },
        "item": {
          "id": "b2fad558-655c-4fc6-a5ce-879b69161c43",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "df817453-de2e-471c-9825-4ab96b902316",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "b2fad558-655c-4fc6-a5ce-879b69161c43",
        "cursor": {
          "ref": "bbcb17c3-a5eb-49ea-bafb-4a94811b8de3",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a5dd4a9f-8d95-49a6-b4b6-fbaab312bed4"
        },
        "item": {
          "id": "b2fad558-655c-4fc6-a5ce-879b69161c43",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "df817453-de2e-471c-9825-4ab96b902316",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "353eb75f-8490-4a2e-bc66-0a804d4f3713",
        "cursor": {
          "ref": "a53846fe-4d46-428a-a6ba-a407b560c5a3",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e1cdf877-71cc-4072-b3b5-b1da667548f7"
        },
        "item": {
          "id": "353eb75f-8490-4a2e-bc66-0a804d4f3713",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a545da73-24a3-4f8c-9a17-cdf92ed14150",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "353eb75f-8490-4a2e-bc66-0a804d4f3713",
        "cursor": {
          "ref": "a53846fe-4d46-428a-a6ba-a407b560c5a3",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e1cdf877-71cc-4072-b3b5-b1da667548f7"
        },
        "item": {
          "id": "353eb75f-8490-4a2e-bc66-0a804d4f3713",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a545da73-24a3-4f8c-9a17-cdf92ed14150",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "0d1cd0b2-ccee-45a0-966f-81bfcc7bd880",
        "cursor": {
          "ref": "f491f4bb-0cac-4c70-ab79-2011f3bc37a3",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "334f62b8-f91d-4f4c-8401-4b32d8329d3c"
        },
        "item": {
          "id": "0d1cd0b2-ccee-45a0-966f-81bfcc7bd880",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cadeca5a-f02e-4bdd-8b47-0598c6dc519f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "0d1cd0b2-ccee-45a0-966f-81bfcc7bd880",
        "cursor": {
          "ref": "f491f4bb-0cac-4c70-ab79-2011f3bc37a3",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "334f62b8-f91d-4f4c-8401-4b32d8329d3c"
        },
        "item": {
          "id": "0d1cd0b2-ccee-45a0-966f-81bfcc7bd880",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cadeca5a-f02e-4bdd-8b47-0598c6dc519f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "701fe28d-2682-49d9-961d-58a7bc6aaa63",
        "cursor": {
          "ref": "a16a00e9-972a-40d4-85b3-6a4399471c6b",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6a0d3ce0-e857-495d-917a-04185a195759"
        },
        "item": {
          "id": "701fe28d-2682-49d9-961d-58a7bc6aaa63",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "af12013c-5486-40b9-a579-a0e3efa6b896",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "701fe28d-2682-49d9-961d-58a7bc6aaa63",
        "cursor": {
          "ref": "a16a00e9-972a-40d4-85b3-6a4399471c6b",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6a0d3ce0-e857-495d-917a-04185a195759"
        },
        "item": {
          "id": "701fe28d-2682-49d9-961d-58a7bc6aaa63",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "af12013c-5486-40b9-a579-a0e3efa6b896",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "607dea37-9f54-40eb-ae80-f9f8cb3bed66",
        "cursor": {
          "ref": "74716234-4845-449e-b671-a3284d47ce48",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "667345ed-baaf-4e36-9bc8-59ac2df24834"
        },
        "item": {
          "id": "607dea37-9f54-40eb-ae80-f9f8cb3bed66",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b08a931a-48c7-43e7-b4a8-0350c228188d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "607dea37-9f54-40eb-ae80-f9f8cb3bed66",
        "cursor": {
          "ref": "74716234-4845-449e-b671-a3284d47ce48",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "667345ed-baaf-4e36-9bc8-59ac2df24834"
        },
        "item": {
          "id": "607dea37-9f54-40eb-ae80-f9f8cb3bed66",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b08a931a-48c7-43e7-b4a8-0350c228188d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "8c0a1b1f-07ce-4bec-813a-eadf2e70cda9",
        "cursor": {
          "ref": "a4a1b4e4-0e9e-4998-8ae4-e904fc209e15",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8d99afcf-9fe5-4914-9ff8-6c1db2c7f63c"
        },
        "item": {
          "id": "8c0a1b1f-07ce-4bec-813a-eadf2e70cda9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ec733083-7074-43f8-b878-06d3014e4b9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "8c0a1b1f-07ce-4bec-813a-eadf2e70cda9",
        "cursor": {
          "ref": "a4a1b4e4-0e9e-4998-8ae4-e904fc209e15",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8d99afcf-9fe5-4914-9ff8-6c1db2c7f63c"
        },
        "item": {
          "id": "8c0a1b1f-07ce-4bec-813a-eadf2e70cda9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ec733083-7074-43f8-b878-06d3014e4b9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "5e86c294-55d6-440a-8921-717f34f9a134",
        "cursor": {
          "ref": "2e2a427e-89a2-41b6-bf9e-14488d6c7c78",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a6173f79-a1e2-4f62-9816-549ff89a9519"
        },
        "item": {
          "id": "5e86c294-55d6-440a-8921-717f34f9a134",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9f72796e-457d-4e8e-a587-8a519573dd99",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "5e86c294-55d6-440a-8921-717f34f9a134",
        "cursor": {
          "ref": "2e2a427e-89a2-41b6-bf9e-14488d6c7c78",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a6173f79-a1e2-4f62-9816-549ff89a9519"
        },
        "item": {
          "id": "5e86c294-55d6-440a-8921-717f34f9a134",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9f72796e-457d-4e8e-a587-8a519573dd99",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "eb08cf4a-95c9-4418-9e71-39ecace280b9",
        "cursor": {
          "ref": "415a7dc2-93af-4097-a368-83ab5562edc6",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "945dd9db-93da-41f4-89ce-542726707f7a"
        },
        "item": {
          "id": "eb08cf4a-95c9-4418-9e71-39ecace280b9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "237169c8-fd2d-4cd2-856c-8e0e15a9e347",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "eb08cf4a-95c9-4418-9e71-39ecace280b9",
        "cursor": {
          "ref": "415a7dc2-93af-4097-a368-83ab5562edc6",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "945dd9db-93da-41f4-89ce-542726707f7a"
        },
        "item": {
          "id": "eb08cf4a-95c9-4418-9e71-39ecace280b9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "237169c8-fd2d-4cd2-856c-8e0e15a9e347",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "cb9090c3-5f47-4b5f-bd5f-4d519aced483",
        "cursor": {
          "ref": "12761d90-7f48-4649-b18c-ddaec19053f3",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9685e97e-02a3-4cab-a602-28c97780af2e"
        },
        "item": {
          "id": "cb9090c3-5f47-4b5f-bd5f-4d519aced483",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "63fc8d8a-75f3-4acc-ae53-1988b4a2c820",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "cb9090c3-5f47-4b5f-bd5f-4d519aced483",
        "cursor": {
          "ref": "12761d90-7f48-4649-b18c-ddaec19053f3",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9685e97e-02a3-4cab-a602-28c97780af2e"
        },
        "item": {
          "id": "cb9090c3-5f47-4b5f-bd5f-4d519aced483",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "63fc8d8a-75f3-4acc-ae53-1988b4a2c820",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "11dadb30-ca34-4478-8110-88e9c7f7e346",
        "cursor": {
          "ref": "bd3f0bb4-bc86-4031-bdfb-e0570251705c",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0634250a-6ab9-4111-a165-9b176b24afdd"
        },
        "item": {
          "id": "11dadb30-ca34-4478-8110-88e9c7f7e346",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b5bdc057-3d47-44d1-a571-56aa6c190e58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "11dadb30-ca34-4478-8110-88e9c7f7e346",
        "cursor": {
          "ref": "bd3f0bb4-bc86-4031-bdfb-e0570251705c",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0634250a-6ab9-4111-a165-9b176b24afdd"
        },
        "item": {
          "id": "11dadb30-ca34-4478-8110-88e9c7f7e346",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b5bdc057-3d47-44d1-a571-56aa6c190e58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "f35c0f51-ad5b-43ae-a4af-fab9fd6998ab",
        "cursor": {
          "ref": "44c0adf2-3c33-44ae-b01b-6e64c6d4b822",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7be93c81-0e8c-47c8-be57-75597f95c861"
        },
        "item": {
          "id": "f35c0f51-ad5b-43ae-a4af-fab9fd6998ab",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "40ed837b-2565-492c-8d6e-82e50b8f03d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "f35c0f51-ad5b-43ae-a4af-fab9fd6998ab",
        "cursor": {
          "ref": "44c0adf2-3c33-44ae-b01b-6e64c6d4b822",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7be93c81-0e8c-47c8-be57-75597f95c861"
        },
        "item": {
          "id": "f35c0f51-ad5b-43ae-a4af-fab9fd6998ab",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "40ed837b-2565-492c-8d6e-82e50b8f03d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "05ac6e60-9b34-4835-8393-6af712186184",
        "cursor": {
          "ref": "9985d76c-928c-454d-8cfb-7858ec8ca43f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "dc79c8ed-6fe9-4f91-806a-4e21b3385b5e"
        },
        "item": {
          "id": "05ac6e60-9b34-4835-8393-6af712186184",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "437fe67a-1e50-4031-b9b0-4e3ac6de8f75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "05ac6e60-9b34-4835-8393-6af712186184",
        "cursor": {
          "ref": "9985d76c-928c-454d-8cfb-7858ec8ca43f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "dc79c8ed-6fe9-4f91-806a-4e21b3385b5e"
        },
        "item": {
          "id": "05ac6e60-9b34-4835-8393-6af712186184",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "437fe67a-1e50-4031-b9b0-4e3ac6de8f75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "4b8c089e-c346-4e28-805a-7e8f40a25397",
        "cursor": {
          "ref": "a70389a7-e0c7-41f3-9aa8-466da82c795d",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "16c422d8-0a79-4656-9395-23f93bdc750e"
        },
        "item": {
          "id": "4b8c089e-c346-4e28-805a-7e8f40a25397",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "743358f9-e572-496a-95d5-0ccec903267c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "4b8c089e-c346-4e28-805a-7e8f40a25397",
        "cursor": {
          "ref": "a70389a7-e0c7-41f3-9aa8-466da82c795d",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "16c422d8-0a79-4656-9395-23f93bdc750e"
        },
        "item": {
          "id": "4b8c089e-c346-4e28-805a-7e8f40a25397",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "743358f9-e572-496a-95d5-0ccec903267c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "2631f515-3bfd-44b1-b6b9-10e4ad804dd1",
        "cursor": {
          "ref": "aeef4728-d025-4596-aad8-f776f4629adb",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cff05493-fcb9-4f52-93ab-31033cea9b03"
        },
        "item": {
          "id": "2631f515-3bfd-44b1-b6b9-10e4ad804dd1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4983ffe7-1fff-4d5a-9c6a-cc4cb997f7a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "2631f515-3bfd-44b1-b6b9-10e4ad804dd1",
        "cursor": {
          "ref": "aeef4728-d025-4596-aad8-f776f4629adb",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cff05493-fcb9-4f52-93ab-31033cea9b03"
        },
        "item": {
          "id": "2631f515-3bfd-44b1-b6b9-10e4ad804dd1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4983ffe7-1fff-4d5a-9c6a-cc4cb997f7a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "aa8a4e2b-6241-4d07-adc9-031fbbf79f8d",
        "cursor": {
          "ref": "e773bf4f-8c2e-4eb6-bdb7-050adca96592",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c75554d7-9215-467d-88f6-686c4126fe5a"
        },
        "item": {
          "id": "aa8a4e2b-6241-4d07-adc9-031fbbf79f8d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "242f714c-fea4-44c7-b4f0-bc60176b651a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "aa8a4e2b-6241-4d07-adc9-031fbbf79f8d",
        "cursor": {
          "ref": "e773bf4f-8c2e-4eb6-bdb7-050adca96592",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c75554d7-9215-467d-88f6-686c4126fe5a"
        },
        "item": {
          "id": "aa8a4e2b-6241-4d07-adc9-031fbbf79f8d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "242f714c-fea4-44c7-b4f0-bc60176b651a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "c85d2c7d-66be-429d-917d-21e5dafe141a",
        "cursor": {
          "ref": "49382086-cc2d-4b4a-8174-52fcfd339751",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7818872c-d20f-491e-bf68-49fb05e49e09"
        },
        "item": {
          "id": "c85d2c7d-66be-429d-917d-21e5dafe141a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6f767fb0-3464-43aa-b917-bc45abdde120",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c85d2c7d-66be-429d-917d-21e5dafe141a",
        "cursor": {
          "ref": "49382086-cc2d-4b4a-8174-52fcfd339751",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7818872c-d20f-491e-bf68-49fb05e49e09"
        },
        "item": {
          "id": "c85d2c7d-66be-429d-917d-21e5dafe141a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6f767fb0-3464-43aa-b917-bc45abdde120",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "bed23abf-9fe4-4ea8-8ac7-f69ec4aa6312",
        "cursor": {
          "ref": "d4f55cb1-32cb-4aa2-bd16-53a73e09ee59",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "264cc691-8f31-4bbf-bdae-62031bd628dd"
        },
        "item": {
          "id": "bed23abf-9fe4-4ea8-8ac7-f69ec4aa6312",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d5895a1a-afe3-4b6b-a8f8-093f1af70b24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "bed23abf-9fe4-4ea8-8ac7-f69ec4aa6312",
        "cursor": {
          "ref": "d4f55cb1-32cb-4aa2-bd16-53a73e09ee59",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "264cc691-8f31-4bbf-bdae-62031bd628dd"
        },
        "item": {
          "id": "bed23abf-9fe4-4ea8-8ac7-f69ec4aa6312",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d5895a1a-afe3-4b6b-a8f8-093f1af70b24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0ee1eb90-28de-4534-a72c-c45ad06a681e",
        "cursor": {
          "ref": "7bed57b6-dfba-4e24-a3e5-63e29d02204f",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "561f1670-f55a-42b5-a2a2-4953f72a83e2"
        },
        "item": {
          "id": "0ee1eb90-28de-4534-a72c-c45ad06a681e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6da420e8-8b19-41d6-9f41-963ee7a189da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "0ee1eb90-28de-4534-a72c-c45ad06a681e",
        "cursor": {
          "ref": "7bed57b6-dfba-4e24-a3e5-63e29d02204f",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "561f1670-f55a-42b5-a2a2-4953f72a83e2"
        },
        "item": {
          "id": "0ee1eb90-28de-4534-a72c-c45ad06a681e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6da420e8-8b19-41d6-9f41-963ee7a189da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "a5e1b800-e458-48ff-be16-d74a7d3eea13",
        "cursor": {
          "ref": "efd70a51-174a-4603-8a74-f5ba0ac88cc8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e0acdba7-2b8d-4a2b-986a-619c69ab6dcf"
        },
        "item": {
          "id": "a5e1b800-e458-48ff-be16-d74a7d3eea13",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4d1abc3c-189b-49d7-b06e-1830ccfe805d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "a5e1b800-e458-48ff-be16-d74a7d3eea13",
        "cursor": {
          "ref": "efd70a51-174a-4603-8a74-f5ba0ac88cc8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e0acdba7-2b8d-4a2b-986a-619c69ab6dcf"
        },
        "item": {
          "id": "a5e1b800-e458-48ff-be16-d74a7d3eea13",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4d1abc3c-189b-49d7-b06e-1830ccfe805d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "c705533c-f1a2-44f5-a3d7-aeeab4f57f26",
        "cursor": {
          "ref": "94c7fa80-b515-462e-987c-50c3a1b13369",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "291542fd-8901-4da9-b165-9dad493972a5"
        },
        "item": {
          "id": "c705533c-f1a2-44f5-a3d7-aeeab4f57f26",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fd703a47-3788-4a60-96a4-28da06a36377",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "c705533c-f1a2-44f5-a3d7-aeeab4f57f26",
        "cursor": {
          "ref": "94c7fa80-b515-462e-987c-50c3a1b13369",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "291542fd-8901-4da9-b165-9dad493972a5"
        },
        "item": {
          "id": "c705533c-f1a2-44f5-a3d7-aeeab4f57f26",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fd703a47-3788-4a60-96a4-28da06a36377",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "933d0042-ea40-44d4-ae65-343b4eac935d",
        "cursor": {
          "ref": "d9aa246e-0bd7-4c8a-8c78-c9dd5dd5bdcd",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ee635f77-ffae-42f5-a21a-725f1f2744e5"
        },
        "item": {
          "id": "933d0042-ea40-44d4-ae65-343b4eac935d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a807d1bf-7016-49e2-aaed-39730bd9e2ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "933d0042-ea40-44d4-ae65-343b4eac935d",
        "cursor": {
          "ref": "d9aa246e-0bd7-4c8a-8c78-c9dd5dd5bdcd",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ee635f77-ffae-42f5-a21a-725f1f2744e5"
        },
        "item": {
          "id": "933d0042-ea40-44d4-ae65-343b4eac935d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a807d1bf-7016-49e2-aaed-39730bd9e2ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "298c4a3e-8854-4546-9494-0ae67cd23250",
        "cursor": {
          "ref": "e8140379-88e5-4086-88f0-019df9aa28c0",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fe602ea0-e991-409e-86e7-de392e9834a3"
        },
        "item": {
          "id": "298c4a3e-8854-4546-9494-0ae67cd23250",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f6a3530a-fb26-4bc6-ac21-7fa3527c70bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "298c4a3e-8854-4546-9494-0ae67cd23250",
        "cursor": {
          "ref": "e8140379-88e5-4086-88f0-019df9aa28c0",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fe602ea0-e991-409e-86e7-de392e9834a3"
        },
        "item": {
          "id": "298c4a3e-8854-4546-9494-0ae67cd23250",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f6a3530a-fb26-4bc6-ac21-7fa3527c70bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "0c103a5d-88c8-4687-9dee-78b6a80139d5",
        "cursor": {
          "ref": "8293b7fe-98a9-4a99-8ddd-12f631c91f45",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "efa0fd53-37b9-42e7-ac35-2e95fd715500"
        },
        "item": {
          "id": "0c103a5d-88c8-4687-9dee-78b6a80139d5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "59edfe4f-894f-4d6a-93b2-02bf18f8afff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "0c103a5d-88c8-4687-9dee-78b6a80139d5",
        "cursor": {
          "ref": "8293b7fe-98a9-4a99-8ddd-12f631c91f45",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "efa0fd53-37b9-42e7-ac35-2e95fd715500"
        },
        "item": {
          "id": "0c103a5d-88c8-4687-9dee-78b6a80139d5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "59edfe4f-894f-4d6a-93b2-02bf18f8afff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "6f926e9d-c0a4-462d-bb36-98c5deade3bb",
        "cursor": {
          "ref": "61d194d1-4539-4711-b55e-96d6b1c77eb2",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "44cbd029-c27d-4e2e-806d-e9b5de12d0fb"
        },
        "item": {
          "id": "6f926e9d-c0a4-462d-bb36-98c5deade3bb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d1f40c9a-462d-4284-a17c-153826558453",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "6f926e9d-c0a4-462d-bb36-98c5deade3bb",
        "cursor": {
          "ref": "61d194d1-4539-4711-b55e-96d6b1c77eb2",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "44cbd029-c27d-4e2e-806d-e9b5de12d0fb"
        },
        "item": {
          "id": "6f926e9d-c0a4-462d-bb36-98c5deade3bb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d1f40c9a-462d-4284-a17c-153826558453",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "4ba8a25c-0e1c-4166-af1e-0879caabdf3a",
        "cursor": {
          "ref": "2fb324c1-0519-4a0d-a56a-a432bfedec02",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b6d27745-4988-4fce-918e-70b1ac02425e"
        },
        "item": {
          "id": "4ba8a25c-0e1c-4166-af1e-0879caabdf3a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "57e0114a-2365-4c31-bf51-4f11a2ecebcc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "4ba8a25c-0e1c-4166-af1e-0879caabdf3a",
        "cursor": {
          "ref": "2fb324c1-0519-4a0d-a56a-a432bfedec02",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b6d27745-4988-4fce-918e-70b1ac02425e"
        },
        "item": {
          "id": "4ba8a25c-0e1c-4166-af1e-0879caabdf3a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "57e0114a-2365-4c31-bf51-4f11a2ecebcc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "ba5d1e5b-d973-45e7-9d62-e86d17958636",
        "cursor": {
          "ref": "4b5802d9-61d6-43d8-ad20-7b03ac12aa56",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6a444372-c6ca-4cbb-bff4-f1c1d80fcd38"
        },
        "item": {
          "id": "ba5d1e5b-d973-45e7-9d62-e86d17958636",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a08a53ee-16e7-4fd6-b4b7-121d9748e8ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "ba5d1e5b-d973-45e7-9d62-e86d17958636",
        "cursor": {
          "ref": "4b5802d9-61d6-43d8-ad20-7b03ac12aa56",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6a444372-c6ca-4cbb-bff4-f1c1d80fcd38"
        },
        "item": {
          "id": "ba5d1e5b-d973-45e7-9d62-e86d17958636",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a08a53ee-16e7-4fd6-b4b7-121d9748e8ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "e0812d79-edd4-4edb-9ea5-3e303b7de5be",
        "cursor": {
          "ref": "626a013c-d1d1-4d8e-8880-30d4873ccc6a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "531fea36-35c7-4087-8afd-8b548ece5ba9"
        },
        "item": {
          "id": "e0812d79-edd4-4edb-9ea5-3e303b7de5be",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6ff51f39-b0e3-47f2-9f01-27727488a7ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "e0812d79-edd4-4edb-9ea5-3e303b7de5be",
        "cursor": {
          "ref": "626a013c-d1d1-4d8e-8880-30d4873ccc6a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "531fea36-35c7-4087-8afd-8b548ece5ba9"
        },
        "item": {
          "id": "e0812d79-edd4-4edb-9ea5-3e303b7de5be",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6ff51f39-b0e3-47f2-9f01-27727488a7ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "85b5c1e0-0905-4adf-92a4-7f23bad93c94",
        "cursor": {
          "ref": "655439d3-5ffe-4eb4-a711-2f5983bd183f",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "556b1633-1846-4a2c-bcdb-c372288781de"
        },
        "item": {
          "id": "85b5c1e0-0905-4adf-92a4-7f23bad93c94",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6242db43-f875-41aa-bac2-c5839e13e99d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "85b5c1e0-0905-4adf-92a4-7f23bad93c94",
        "cursor": {
          "ref": "655439d3-5ffe-4eb4-a711-2f5983bd183f",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "556b1633-1846-4a2c-bcdb-c372288781de"
        },
        "item": {
          "id": "85b5c1e0-0905-4adf-92a4-7f23bad93c94",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6242db43-f875-41aa-bac2-c5839e13e99d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "e4ebab89-0f54-43ed-a5f6-2d529c06a667",
        "cursor": {
          "ref": "47f1b1a6-beb5-493b-a093-24e638ef9ac3",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "337ca2e6-eab9-4b3c-b08f-32a112bbb0db"
        },
        "item": {
          "id": "e4ebab89-0f54-43ed-a5f6-2d529c06a667",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "71c5656b-ccd0-4c12-9f36-9e28ecd3ee6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "e4ebab89-0f54-43ed-a5f6-2d529c06a667",
        "cursor": {
          "ref": "47f1b1a6-beb5-493b-a093-24e638ef9ac3",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "337ca2e6-eab9-4b3c-b08f-32a112bbb0db"
        },
        "item": {
          "id": "e4ebab89-0f54-43ed-a5f6-2d529c06a667",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "71c5656b-ccd0-4c12-9f36-9e28ecd3ee6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "284d2785-3488-4e72-ac04-9b4c0d318637",
        "cursor": {
          "ref": "5ff62c1b-8033-484d-b7dd-e8edf5b32c84",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "76760e21-2d0c-4f46-b5d7-7d482e7be4e6"
        },
        "item": {
          "id": "284d2785-3488-4e72-ac04-9b4c0d318637",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c236c97c-4320-4477-bbe4-9e3a15053253",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "284d2785-3488-4e72-ac04-9b4c0d318637",
        "cursor": {
          "ref": "5ff62c1b-8033-484d-b7dd-e8edf5b32c84",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "76760e21-2d0c-4f46-b5d7-7d482e7be4e6"
        },
        "item": {
          "id": "284d2785-3488-4e72-ac04-9b4c0d318637",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c236c97c-4320-4477-bbe4-9e3a15053253",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "041bf316-2c38-4894-81ec-258754e169f8",
        "cursor": {
          "ref": "4ae595b0-81c2-4b7f-a042-ba1d8ed75081",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ca912b7f-7f9f-48d3-8396-54f4931cb7df"
        },
        "item": {
          "id": "041bf316-2c38-4894-81ec-258754e169f8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "089e77ca-93bf-47dd-9512-dc48be867965",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "041bf316-2c38-4894-81ec-258754e169f8",
        "cursor": {
          "ref": "4ae595b0-81c2-4b7f-a042-ba1d8ed75081",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ca912b7f-7f9f-48d3-8396-54f4931cb7df"
        },
        "item": {
          "id": "041bf316-2c38-4894-81ec-258754e169f8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "089e77ca-93bf-47dd-9512-dc48be867965",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "daa2577a-0336-4bb3-a366-ff58b2df97e0",
        "cursor": {
          "ref": "2950855e-762a-4d36-8563-ff2752c7d1cf",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "936dddd8-9061-46f9-b45a-fc7130536324"
        },
        "item": {
          "id": "daa2577a-0336-4bb3-a366-ff58b2df97e0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0abe083e-8a88-4397-b933-d41cffa80738",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "daa2577a-0336-4bb3-a366-ff58b2df97e0",
        "cursor": {
          "ref": "2950855e-762a-4d36-8563-ff2752c7d1cf",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "936dddd8-9061-46f9-b45a-fc7130536324"
        },
        "item": {
          "id": "daa2577a-0336-4bb3-a366-ff58b2df97e0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0abe083e-8a88-4397-b933-d41cffa80738",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "e653af75-3bc8-486c-8b0c-02a685aa7353",
        "cursor": {
          "ref": "74ddfcfd-b9cb-49a9-8732-cacb48cfae9c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a7df1506-8380-4ea8-88dd-bad9579a807a"
        },
        "item": {
          "id": "e653af75-3bc8-486c-8b0c-02a685aa7353",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "eccbe6be-8ed0-4d92-a9af-6bff1a9a3947",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "e653af75-3bc8-486c-8b0c-02a685aa7353",
        "cursor": {
          "ref": "74ddfcfd-b9cb-49a9-8732-cacb48cfae9c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a7df1506-8380-4ea8-88dd-bad9579a807a"
        },
        "item": {
          "id": "e653af75-3bc8-486c-8b0c-02a685aa7353",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "eccbe6be-8ed0-4d92-a9af-6bff1a9a3947",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "11952086-4475-4864-82c4-77de99988a38",
        "cursor": {
          "ref": "00c60ef4-1412-44cb-bfc8-61c996c3c8ce",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "059129e6-6d31-472d-af9f-28a3adbfed27"
        },
        "item": {
          "id": "11952086-4475-4864-82c4-77de99988a38",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fec4ed23-c2b5-4578-bcfa-4fc1420ff5bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "11952086-4475-4864-82c4-77de99988a38",
        "cursor": {
          "ref": "00c60ef4-1412-44cb-bfc8-61c996c3c8ce",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "059129e6-6d31-472d-af9f-28a3adbfed27"
        },
        "item": {
          "id": "11952086-4475-4864-82c4-77de99988a38",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fec4ed23-c2b5-4578-bcfa-4fc1420ff5bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "5e2ef4ef-ff40-4cee-bfb3-0f9fd2641638",
        "cursor": {
          "ref": "c7d7e515-f38b-4aff-a111-b3d140cec5b8",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7250126a-f55c-4905-abf8-d56fc9d89bf5"
        },
        "item": {
          "id": "5e2ef4ef-ff40-4cee-bfb3-0f9fd2641638",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "07d355b3-7849-43f0-ba60-4f11b64a2ca9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "5e2ef4ef-ff40-4cee-bfb3-0f9fd2641638",
        "cursor": {
          "ref": "c7d7e515-f38b-4aff-a111-b3d140cec5b8",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7250126a-f55c-4905-abf8-d56fc9d89bf5"
        },
        "item": {
          "id": "5e2ef4ef-ff40-4cee-bfb3-0f9fd2641638",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "07d355b3-7849-43f0-ba60-4f11b64a2ca9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "515cdca2-a6ed-4a36-999d-008563ecf9a6",
        "cursor": {
          "ref": "766104bc-4eb5-4a31-8f62-638ecefffd5e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "03713a40-4e8f-42f5-a250-e32fd7344d83"
        },
        "item": {
          "id": "515cdca2-a6ed-4a36-999d-008563ecf9a6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f2101941-07bd-4d38-b39b-e4d760b55337",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "515cdca2-a6ed-4a36-999d-008563ecf9a6",
        "cursor": {
          "ref": "766104bc-4eb5-4a31-8f62-638ecefffd5e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "03713a40-4e8f-42f5-a250-e32fd7344d83"
        },
        "item": {
          "id": "515cdca2-a6ed-4a36-999d-008563ecf9a6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f2101941-07bd-4d38-b39b-e4d760b55337",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "5c4ac695-a500-478c-a535-8fb9bb5b8601",
        "cursor": {
          "ref": "ceae1866-e483-411f-8d2c-5110b201a607",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cb689153-5db5-431a-8d5a-c8a6972e191e"
        },
        "item": {
          "id": "5c4ac695-a500-478c-a535-8fb9bb5b8601",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "44f6feac-e621-4acd-a122-dc3a2eee2bbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "5c4ac695-a500-478c-a535-8fb9bb5b8601",
        "cursor": {
          "ref": "ceae1866-e483-411f-8d2c-5110b201a607",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cb689153-5db5-431a-8d5a-c8a6972e191e"
        },
        "item": {
          "id": "5c4ac695-a500-478c-a535-8fb9bb5b8601",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "44f6feac-e621-4acd-a122-dc3a2eee2bbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "11b82be7-059a-4d5b-834e-c2bae1813b2a",
        "cursor": {
          "ref": "fce7292a-cf99-4a4c-b713-021c1231a492",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "49ba656a-16f3-4ac7-b358-c8f66db316ce"
        },
        "item": {
          "id": "11b82be7-059a-4d5b-834e-c2bae1813b2a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8aa42999-7843-47a5-835f-65fd05a10fb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "11b82be7-059a-4d5b-834e-c2bae1813b2a",
        "cursor": {
          "ref": "fce7292a-cf99-4a4c-b713-021c1231a492",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "49ba656a-16f3-4ac7-b358-c8f66db316ce"
        },
        "item": {
          "id": "11b82be7-059a-4d5b-834e-c2bae1813b2a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8aa42999-7843-47a5-835f-65fd05a10fb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "519259f8-cee2-45f2-849c-f4c50d4560ef",
        "cursor": {
          "ref": "8ba4d753-1454-4c48-88f5-56de77af15ae",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6ea7c1f9-f1bc-4f8c-aff5-ab4deaba6eb3"
        },
        "item": {
          "id": "519259f8-cee2-45f2-849c-f4c50d4560ef",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1a52c35d-a172-4eb5-baeb-0af91cdb493c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "519259f8-cee2-45f2-849c-f4c50d4560ef",
        "cursor": {
          "ref": "8ba4d753-1454-4c48-88f5-56de77af15ae",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6ea7c1f9-f1bc-4f8c-aff5-ab4deaba6eb3"
        },
        "item": {
          "id": "519259f8-cee2-45f2-849c-f4c50d4560ef",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1a52c35d-a172-4eb5-baeb-0af91cdb493c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b1c23a35-8eba-4334-b17e-17ed7db2c40b",
        "cursor": {
          "ref": "77108a58-3665-44eb-9cf8-cf2f1bc87f24",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7863bdf6-1bbc-4be2-8b9f-10d56de78cec"
        },
        "item": {
          "id": "b1c23a35-8eba-4334-b17e-17ed7db2c40b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1617bcd6-d5e1-44d7-a4e4-a13273a6e8be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "b1c23a35-8eba-4334-b17e-17ed7db2c40b",
        "cursor": {
          "ref": "77108a58-3665-44eb-9cf8-cf2f1bc87f24",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7863bdf6-1bbc-4be2-8b9f-10d56de78cec"
        },
        "item": {
          "id": "b1c23a35-8eba-4334-b17e-17ed7db2c40b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1617bcd6-d5e1-44d7-a4e4-a13273a6e8be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "b4a9a5e3-95a3-471d-af79-b65f3b31a373",
        "cursor": {
          "ref": "de850574-da81-446f-893d-48205b7094a9",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "30e7540c-cb2a-4faf-937c-b1549a1d3fe7"
        },
        "item": {
          "id": "b4a9a5e3-95a3-471d-af79-b65f3b31a373",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9a8bc343-7cc9-4f02-bd29-c26c1418a0ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "b4a9a5e3-95a3-471d-af79-b65f3b31a373",
        "cursor": {
          "ref": "de850574-da81-446f-893d-48205b7094a9",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "30e7540c-cb2a-4faf-937c-b1549a1d3fe7"
        },
        "item": {
          "id": "b4a9a5e3-95a3-471d-af79-b65f3b31a373",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9a8bc343-7cc9-4f02-bd29-c26c1418a0ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "857796af-a7f6-4456-b758-9347d867e7ec",
        "cursor": {
          "ref": "6d021855-c82a-40c6-90d2-bb4f9e7390e9",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "25f6a265-9c5c-4e84-a1c4-914398b020ac"
        },
        "item": {
          "id": "857796af-a7f6-4456-b758-9347d867e7ec",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8f54ba87-69f9-43cc-87be-fe4981023760",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "857796af-a7f6-4456-b758-9347d867e7ec",
        "cursor": {
          "ref": "6d021855-c82a-40c6-90d2-bb4f9e7390e9",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "25f6a265-9c5c-4e84-a1c4-914398b020ac"
        },
        "item": {
          "id": "857796af-a7f6-4456-b758-9347d867e7ec",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8f54ba87-69f9-43cc-87be-fe4981023760",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "f8d0662f-3575-4cdf-998f-72011e4be906",
        "cursor": {
          "ref": "2a931f03-146f-4674-9e2b-5e830c128cf3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "11117ca2-9ceb-4502-9b9b-643b6c941eb0"
        },
        "item": {
          "id": "f8d0662f-3575-4cdf-998f-72011e4be906",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c8289d5c-5f50-4e25-9ce1-0064882d75fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "f8d0662f-3575-4cdf-998f-72011e4be906",
        "cursor": {
          "ref": "2a931f03-146f-4674-9e2b-5e830c128cf3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "11117ca2-9ceb-4502-9b9b-643b6c941eb0"
        },
        "item": {
          "id": "f8d0662f-3575-4cdf-998f-72011e4be906",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c8289d5c-5f50-4e25-9ce1-0064882d75fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "f245d460-4988-4979-a3f9-9c864634fcc7",
        "cursor": {
          "ref": "2e01aa93-2c81-4b2b-a120-560ad078d8bb",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f7c664ea-08c4-4b24-9110-271ed0fbd34b"
        },
        "item": {
          "id": "f245d460-4988-4979-a3f9-9c864634fcc7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d5f2bb53-42fa-4d02-916f-4d6f64a30fc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "f245d460-4988-4979-a3f9-9c864634fcc7",
        "cursor": {
          "ref": "2e01aa93-2c81-4b2b-a120-560ad078d8bb",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f7c664ea-08c4-4b24-9110-271ed0fbd34b"
        },
        "item": {
          "id": "f245d460-4988-4979-a3f9-9c864634fcc7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d5f2bb53-42fa-4d02-916f-4d6f64a30fc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "bb619ad7-3fbf-4e95-a60a-98e9a2813351",
        "cursor": {
          "ref": "d7208df0-4d9b-4dfb-8375-174f7eacccf5",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "02a784ef-7c33-409e-9e8d-cb8a60382d17"
        },
        "item": {
          "id": "bb619ad7-3fbf-4e95-a60a-98e9a2813351",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a2bd2c49-9621-4e53-9865-c9f5bc77950d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "bb619ad7-3fbf-4e95-a60a-98e9a2813351",
        "cursor": {
          "ref": "d7208df0-4d9b-4dfb-8375-174f7eacccf5",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "02a784ef-7c33-409e-9e8d-cb8a60382d17"
        },
        "item": {
          "id": "bb619ad7-3fbf-4e95-a60a-98e9a2813351",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a2bd2c49-9621-4e53-9865-c9f5bc77950d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "1dbea303-d57e-49ec-bd1f-f0b50711cf01",
        "cursor": {
          "ref": "9635b2f7-5d13-49d9-86dd-34a2e32a04fc",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "81e0476f-200e-4a35-a2a8-25500d3ab069"
        },
        "item": {
          "id": "1dbea303-d57e-49ec-bd1f-f0b50711cf01",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a212a88b-a847-4d94-8ced-7bd656b544be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "1dbea303-d57e-49ec-bd1f-f0b50711cf01",
        "cursor": {
          "ref": "9635b2f7-5d13-49d9-86dd-34a2e32a04fc",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "81e0476f-200e-4a35-a2a8-25500d3ab069"
        },
        "item": {
          "id": "1dbea303-d57e-49ec-bd1f-f0b50711cf01",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a212a88b-a847-4d94-8ced-7bd656b544be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "75d547cc-b93c-4f9b-a7fe-a05388a37fac",
        "cursor": {
          "ref": "193c4bb1-b067-4af7-bb77-527b63d4c893",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "11cdfd57-da9f-439e-8b1f-c4fc6d9d0355"
        },
        "item": {
          "id": "75d547cc-b93c-4f9b-a7fe-a05388a37fac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "277c99a0-6f48-49b6-b97e-b0ea61ed0092",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "75d547cc-b93c-4f9b-a7fe-a05388a37fac",
        "cursor": {
          "ref": "193c4bb1-b067-4af7-bb77-527b63d4c893",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "11cdfd57-da9f-439e-8b1f-c4fc6d9d0355"
        },
        "item": {
          "id": "75d547cc-b93c-4f9b-a7fe-a05388a37fac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "277c99a0-6f48-49b6-b97e-b0ea61ed0092",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "cb3e5724-22f0-46fd-b534-0c3d67278705",
        "cursor": {
          "ref": "da2ebae5-d43e-45f7-bef1-e8d9ca8a8fac",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ff059dc3-937b-4e28-a1f5-73df95639567"
        },
        "item": {
          "id": "cb3e5724-22f0-46fd-b534-0c3d67278705",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "04f6a581-a25c-46fc-9201-46072b62a698",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cb3e5724-22f0-46fd-b534-0c3d67278705",
        "cursor": {
          "ref": "da2ebae5-d43e-45f7-bef1-e8d9ca8a8fac",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ff059dc3-937b-4e28-a1f5-73df95639567"
        },
        "item": {
          "id": "cb3e5724-22f0-46fd-b534-0c3d67278705",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "04f6a581-a25c-46fc-9201-46072b62a698",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ca2a671d-2b0c-478f-9d29-6862f0819980",
        "cursor": {
          "ref": "9842f11e-158c-47de-bdab-3467646c69de",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "cd285aad-b4cb-4ae2-a34c-f4432ed4917c"
        },
        "item": {
          "id": "ca2a671d-2b0c-478f-9d29-6862f0819980",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "61e89b55-8369-4761-9ac1-9ff364782ad9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ca2a671d-2b0c-478f-9d29-6862f0819980",
        "cursor": {
          "ref": "9842f11e-158c-47de-bdab-3467646c69de",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "cd285aad-b4cb-4ae2-a34c-f4432ed4917c"
        },
        "item": {
          "id": "ca2a671d-2b0c-478f-9d29-6862f0819980",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "61e89b55-8369-4761-9ac1-9ff364782ad9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "4095daa1-72ce-484d-87d4-7ccbad235669",
        "cursor": {
          "ref": "78da7a82-da46-488b-99bd-abc2ad47f41b",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0bbc43b4-2ffd-44fa-8379-a5feca1938fe"
        },
        "item": {
          "id": "4095daa1-72ce-484d-87d4-7ccbad235669",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5cc5ff75-c39a-436d-909b-a2cefe8b1d15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "4095daa1-72ce-484d-87d4-7ccbad235669",
        "cursor": {
          "ref": "78da7a82-da46-488b-99bd-abc2ad47f41b",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0bbc43b4-2ffd-44fa-8379-a5feca1938fe"
        },
        "item": {
          "id": "4095daa1-72ce-484d-87d4-7ccbad235669",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5cc5ff75-c39a-436d-909b-a2cefe8b1d15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "9e7f44f6-f4d7-4b15-9992-cd02dd64007a",
        "cursor": {
          "ref": "6ded1f01-b12e-4044-9b6b-c76efc3c1012",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5f7195df-ff69-4032-bfd5-5e1ce04b16fa"
        },
        "item": {
          "id": "9e7f44f6-f4d7-4b15-9992-cd02dd64007a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c3ef3264-77c1-4b37-8a93-bc071b5901d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "9e7f44f6-f4d7-4b15-9992-cd02dd64007a",
        "cursor": {
          "ref": "6ded1f01-b12e-4044-9b6b-c76efc3c1012",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5f7195df-ff69-4032-bfd5-5e1ce04b16fa"
        },
        "item": {
          "id": "9e7f44f6-f4d7-4b15-9992-cd02dd64007a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c3ef3264-77c1-4b37-8a93-bc071b5901d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "62c0c979-4e34-4e0c-b54a-4505f602568d",
        "cursor": {
          "ref": "70bc4665-cdda-4562-9c1b-7692c9fd6a6a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ab8d07df-499e-47eb-8c87-a255f660e7b7"
        },
        "item": {
          "id": "62c0c979-4e34-4e0c-b54a-4505f602568d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "68af1e1d-a54d-4b7d-b78a-4f256a4befd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "62c0c979-4e34-4e0c-b54a-4505f602568d",
        "cursor": {
          "ref": "70bc4665-cdda-4562-9c1b-7692c9fd6a6a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ab8d07df-499e-47eb-8c87-a255f660e7b7"
        },
        "item": {
          "id": "62c0c979-4e34-4e0c-b54a-4505f602568d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "68af1e1d-a54d-4b7d-b78a-4f256a4befd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9b251c3c-c924-4146-9e60-ddb0d625ea1a",
        "cursor": {
          "ref": "13b21222-bf07-40db-acec-024ca21d7587",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cf615ee4-31bf-4ce8-a86d-c0003ad12a6c"
        },
        "item": {
          "id": "9b251c3c-c924-4146-9e60-ddb0d625ea1a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "60fcb56e-898d-42a9-ae61-0c4c3f6b7769",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "9b251c3c-c924-4146-9e60-ddb0d625ea1a",
        "cursor": {
          "ref": "13b21222-bf07-40db-acec-024ca21d7587",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cf615ee4-31bf-4ce8-a86d-c0003ad12a6c"
        },
        "item": {
          "id": "9b251c3c-c924-4146-9e60-ddb0d625ea1a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "60fcb56e-898d-42a9-ae61-0c4c3f6b7769",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ebc8793c-2d3f-4a17-8b8d-f95f804cf71a",
        "cursor": {
          "ref": "3af0147d-9a7f-4507-8fd2-b0e938a9e085",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6c4b30b5-1cf5-4e2e-96e1-228a633c7c12"
        },
        "item": {
          "id": "ebc8793c-2d3f-4a17-8b8d-f95f804cf71a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e7ad1fc6-c303-47fd-9d57-7293f08ca845",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ebc8793c-2d3f-4a17-8b8d-f95f804cf71a",
        "cursor": {
          "ref": "3af0147d-9a7f-4507-8fd2-b0e938a9e085",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6c4b30b5-1cf5-4e2e-96e1-228a633c7c12"
        },
        "item": {
          "id": "ebc8793c-2d3f-4a17-8b8d-f95f804cf71a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e7ad1fc6-c303-47fd-9d57-7293f08ca845",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "429c6bee-d623-478f-86ad-f2cc464a5941",
        "cursor": {
          "ref": "ef135c49-27bd-40bc-8210-57498ceae6ef",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c1476046-9659-4a50-a1ee-0bc76bc625cb"
        },
        "item": {
          "id": "429c6bee-d623-478f-86ad-f2cc464a5941",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d9e908a3-f252-461b-a683-65ec1d2b20d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "429c6bee-d623-478f-86ad-f2cc464a5941",
        "cursor": {
          "ref": "ef135c49-27bd-40bc-8210-57498ceae6ef",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c1476046-9659-4a50-a1ee-0bc76bc625cb"
        },
        "item": {
          "id": "429c6bee-d623-478f-86ad-f2cc464a5941",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d9e908a3-f252-461b-a683-65ec1d2b20d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0830ada5-3425-45f9-8bb7-ef6bb7703ed2",
        "cursor": {
          "ref": "861feffa-02ed-4558-b6b5-f02d1d0fd248",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "98ab515e-7a56-4c78-9ac2-2f8e4350a9f4"
        },
        "item": {
          "id": "0830ada5-3425-45f9-8bb7-ef6bb7703ed2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0183055b-74b3-4d2d-a747-77a69722b88f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0830ada5-3425-45f9-8bb7-ef6bb7703ed2",
        "cursor": {
          "ref": "861feffa-02ed-4558-b6b5-f02d1d0fd248",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "98ab515e-7a56-4c78-9ac2-2f8e4350a9f4"
        },
        "item": {
          "id": "0830ada5-3425-45f9-8bb7-ef6bb7703ed2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0183055b-74b3-4d2d-a747-77a69722b88f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 47,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "2ebb8224-9652-4cfa-897c-83d90f0d2cbb",
        "cursor": {
          "ref": "89ad6896-ef74-4516-8127-4c3a97e3afd5",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a13f4cb3-e9c9-49d3-808c-688d314e53cc"
        },
        "item": {
          "id": "2ebb8224-9652-4cfa-897c-83d90f0d2cbb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2cd31b02-94c1-47e7-a196-4d5fb4d1c90f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "2ebb8224-9652-4cfa-897c-83d90f0d2cbb",
        "cursor": {
          "ref": "89ad6896-ef74-4516-8127-4c3a97e3afd5",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a13f4cb3-e9c9-49d3-808c-688d314e53cc"
        },
        "item": {
          "id": "2ebb8224-9652-4cfa-897c-83d90f0d2cbb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2cd31b02-94c1-47e7-a196-4d5fb4d1c90f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "07e94ce7-6c69-4b0c-90d5-39030fbd11a1",
        "cursor": {
          "ref": "39703a03-f66a-4aa3-9cd0-351021093d19",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "357a0719-d006-4f65-bdde-741b80acfbc9"
        },
        "item": {
          "id": "07e94ce7-6c69-4b0c-90d5-39030fbd11a1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9f20c6bd-aa01-41e4-abed-91cee8fd271a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "07e94ce7-6c69-4b0c-90d5-39030fbd11a1",
        "cursor": {
          "ref": "39703a03-f66a-4aa3-9cd0-351021093d19",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "357a0719-d006-4f65-bdde-741b80acfbc9"
        },
        "item": {
          "id": "07e94ce7-6c69-4b0c-90d5-39030fbd11a1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9f20c6bd-aa01-41e4-abed-91cee8fd271a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "cda85ee3-0bbd-4b10-b810-46be4ca9fcbc",
        "cursor": {
          "ref": "a7f2dd4d-13b1-487b-8657-0b8a727c2c7f",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d76f371e-a338-4870-8dc0-9d3c19a65ea9"
        },
        "item": {
          "id": "cda85ee3-0bbd-4b10-b810-46be4ca9fcbc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1e32238e-136e-48c8-92bd-e0d544bb8dd3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "cda85ee3-0bbd-4b10-b810-46be4ca9fcbc",
        "cursor": {
          "ref": "a7f2dd4d-13b1-487b-8657-0b8a727c2c7f",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d76f371e-a338-4870-8dc0-9d3c19a65ea9"
        },
        "item": {
          "id": "cda85ee3-0bbd-4b10-b810-46be4ca9fcbc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1e32238e-136e-48c8-92bd-e0d544bb8dd3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "e385d2b7-1784-4dc8-b877-53ce281b14db",
        "cursor": {
          "ref": "061472b0-a67c-43af-b75c-171de2eb5af3",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5fe86434-0fd1-46e3-919b-581bcc2173fe"
        },
        "item": {
          "id": "e385d2b7-1784-4dc8-b877-53ce281b14db",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1521434e-274e-4990-80b8-48427869aa63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "e385d2b7-1784-4dc8-b877-53ce281b14db",
        "cursor": {
          "ref": "061472b0-a67c-43af-b75c-171de2eb5af3",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5fe86434-0fd1-46e3-919b-581bcc2173fe"
        },
        "item": {
          "id": "e385d2b7-1784-4dc8-b877-53ce281b14db",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1521434e-274e-4990-80b8-48427869aa63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "3abeaacf-70f3-4573-bf26-25fbf7e15c57",
        "cursor": {
          "ref": "e6df9a41-234f-47e9-80d8-f4808c3e4b84",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ebbc6ca0-bfbe-4113-84bd-684c0cce15d4"
        },
        "item": {
          "id": "3abeaacf-70f3-4573-bf26-25fbf7e15c57",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c5c43678-4804-4e18-9dc6-b25fef14104c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "3abeaacf-70f3-4573-bf26-25fbf7e15c57",
        "cursor": {
          "ref": "e6df9a41-234f-47e9-80d8-f4808c3e4b84",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ebbc6ca0-bfbe-4113-84bd-684c0cce15d4"
        },
        "item": {
          "id": "3abeaacf-70f3-4573-bf26-25fbf7e15c57",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c5c43678-4804-4e18-9dc6-b25fef14104c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "384a9cab-bbd6-47d5-9f91-8cd39af4ab39",
        "cursor": {
          "ref": "12d34198-3439-455d-acb9-e8257152908f",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f2911338-89b5-477b-bb83-a80984961d3b"
        },
        "item": {
          "id": "384a9cab-bbd6-47d5-9f91-8cd39af4ab39",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a3ff35db-29d8-4db9-9d94-94768fe931c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "384a9cab-bbd6-47d5-9f91-8cd39af4ab39",
        "cursor": {
          "ref": "12d34198-3439-455d-acb9-e8257152908f",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f2911338-89b5-477b-bb83-a80984961d3b"
        },
        "item": {
          "id": "384a9cab-bbd6-47d5-9f91-8cd39af4ab39",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a3ff35db-29d8-4db9-9d94-94768fe931c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "004fed63-803d-450c-b927-61d836b435b4",
        "cursor": {
          "ref": "da641bbc-46df-43c0-a13d-d352e23c254f",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7273cc11-2f11-4c87-8f26-434f9164fbbb"
        },
        "item": {
          "id": "004fed63-803d-450c-b927-61d836b435b4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "590d1ac4-e42a-4c6a-b906-9e8ec16c3350",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "004fed63-803d-450c-b927-61d836b435b4",
        "cursor": {
          "ref": "da641bbc-46df-43c0-a13d-d352e23c254f",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7273cc11-2f11-4c87-8f26-434f9164fbbb"
        },
        "item": {
          "id": "004fed63-803d-450c-b927-61d836b435b4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "590d1ac4-e42a-4c6a-b906-9e8ec16c3350",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "773a9125-f477-4c7c-b4bb-08c5bb42adba",
        "cursor": {
          "ref": "4d62609b-6ede-4b26-8faa-3da4f13a0260",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "104fe3ff-e502-47ac-9505-6c90b8872ec7"
        },
        "item": {
          "id": "773a9125-f477-4c7c-b4bb-08c5bb42adba",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e43ed679-2f56-449e-8d36-40e4e538b3ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "773a9125-f477-4c7c-b4bb-08c5bb42adba",
        "cursor": {
          "ref": "4d62609b-6ede-4b26-8faa-3da4f13a0260",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "104fe3ff-e502-47ac-9505-6c90b8872ec7"
        },
        "item": {
          "id": "773a9125-f477-4c7c-b4bb-08c5bb42adba",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e43ed679-2f56-449e-8d36-40e4e538b3ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "92aa9263-101c-4dec-8f48-7e8df209cb48",
        "cursor": {
          "ref": "fb696979-a186-48d8-9125-17968a8f21a7",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4364e6bb-fbe3-4936-8557-ddd0cbd58a9f"
        },
        "item": {
          "id": "92aa9263-101c-4dec-8f48-7e8df209cb48",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c89bf0ea-67a5-42c8-8aaa-f738f53fef32",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "92aa9263-101c-4dec-8f48-7e8df209cb48",
        "cursor": {
          "ref": "fb696979-a186-48d8-9125-17968a8f21a7",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4364e6bb-fbe3-4936-8557-ddd0cbd58a9f"
        },
        "item": {
          "id": "92aa9263-101c-4dec-8f48-7e8df209cb48",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c89bf0ea-67a5-42c8-8aaa-f738f53fef32",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "9e48e175-5f80-4a12-b723-9ae9e1c6cecd",
        "cursor": {
          "ref": "93ceeb45-3f19-425a-93f0-613c72612650",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dadf9ede-af26-4726-b694-942d307d91c3"
        },
        "item": {
          "id": "9e48e175-5f80-4a12-b723-9ae9e1c6cecd",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "47078e38-cca0-4aa1-8ab5-d19ac573c35c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "9e48e175-5f80-4a12-b723-9ae9e1c6cecd",
        "cursor": {
          "ref": "93ceeb45-3f19-425a-93f0-613c72612650",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dadf9ede-af26-4726-b694-942d307d91c3"
        },
        "item": {
          "id": "9e48e175-5f80-4a12-b723-9ae9e1c6cecd",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "47078e38-cca0-4aa1-8ab5-d19ac573c35c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "ac15e250-f7b4-44f3-82a4-38b1f5926def",
        "cursor": {
          "ref": "84abca96-82fa-456f-a3c0-1f2b0da2eae9",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b0cd2073-311c-4ae7-a7c3-f253315f1db7"
        },
        "item": {
          "id": "ac15e250-f7b4-44f3-82a4-38b1f5926def",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "42b01198-b18e-440f-8341-0cf61a60de76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "ac15e250-f7b4-44f3-82a4-38b1f5926def",
        "cursor": {
          "ref": "84abca96-82fa-456f-a3c0-1f2b0da2eae9",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b0cd2073-311c-4ae7-a7c3-f253315f1db7"
        },
        "item": {
          "id": "ac15e250-f7b4-44f3-82a4-38b1f5926def",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "42b01198-b18e-440f-8341-0cf61a60de76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "53465ab1-d79e-4688-b6ea-e7196db40259",
        "cursor": {
          "ref": "32c4f8bb-7710-4395-8f69-6f42fa831070",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f6699783-ab31-4e59-884b-0698a24df550"
        },
        "item": {
          "id": "53465ab1-d79e-4688-b6ea-e7196db40259",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "260135b1-4b21-4721-a437-331995f687be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "53465ab1-d79e-4688-b6ea-e7196db40259",
        "cursor": {
          "ref": "32c4f8bb-7710-4395-8f69-6f42fa831070",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f6699783-ab31-4e59-884b-0698a24df550"
        },
        "item": {
          "id": "53465ab1-d79e-4688-b6ea-e7196db40259",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "260135b1-4b21-4721-a437-331995f687be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "41b32c17-a54e-437a-a241-b18998801b99",
        "cursor": {
          "ref": "52b32ce0-52c8-4bb0-a153-d55799e8efd0",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ba2c84ab-78a5-4fb7-b19c-74d927c9afb6"
        },
        "item": {
          "id": "41b32c17-a54e-437a-a241-b18998801b99",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cf9c3bb4-7f46-46b5-b927-7d2a2ec18be6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "41b32c17-a54e-437a-a241-b18998801b99",
        "cursor": {
          "ref": "52b32ce0-52c8-4bb0-a153-d55799e8efd0",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ba2c84ab-78a5-4fb7-b19c-74d927c9afb6"
        },
        "item": {
          "id": "41b32c17-a54e-437a-a241-b18998801b99",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cf9c3bb4-7f46-46b5-b927-7d2a2ec18be6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a23dd5f9-c77c-442b-bd42-4e27a4ecc6f7",
        "cursor": {
          "ref": "87343562-886d-4e26-9ccc-52a9bb9bc00b",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "44320fe1-680b-44ba-9ed1-fc6c75e4a237"
        },
        "item": {
          "id": "a23dd5f9-c77c-442b-bd42-4e27a4ecc6f7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b48aa113-df98-4f6c-967c-d046b80130d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a23dd5f9-c77c-442b-bd42-4e27a4ecc6f7",
        "cursor": {
          "ref": "87343562-886d-4e26-9ccc-52a9bb9bc00b",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "44320fe1-680b-44ba-9ed1-fc6c75e4a237"
        },
        "item": {
          "id": "a23dd5f9-c77c-442b-bd42-4e27a4ecc6f7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b48aa113-df98-4f6c-967c-d046b80130d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "97fe2e2c-bcdb-4d39-8a87-0d40ca169746",
        "cursor": {
          "ref": "afcad965-a029-4086-8ba0-ebe853ff4425",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "56e3e9d2-d3cf-4564-b960-294e867a61bb"
        },
        "item": {
          "id": "97fe2e2c-bcdb-4d39-8a87-0d40ca169746",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b27fccfc-6bf9-4f97-9a61-51be29b4a2e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "97fe2e2c-bcdb-4d39-8a87-0d40ca169746",
        "cursor": {
          "ref": "afcad965-a029-4086-8ba0-ebe853ff4425",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "56e3e9d2-d3cf-4564-b960-294e867a61bb"
        },
        "item": {
          "id": "97fe2e2c-bcdb-4d39-8a87-0d40ca169746",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b27fccfc-6bf9-4f97-9a61-51be29b4a2e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "35336d01-2f42-4222-aad7-2aa50a5aa0a6",
        "cursor": {
          "ref": "d42ba062-8eba-4f5b-b166-e112551f14d1",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "944cd2dc-1069-4dc1-94b2-64a0aadfe630"
        },
        "item": {
          "id": "35336d01-2f42-4222-aad7-2aa50a5aa0a6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cc4020b6-02b0-43cd-880f-557114801291",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "35336d01-2f42-4222-aad7-2aa50a5aa0a6",
        "cursor": {
          "ref": "d42ba062-8eba-4f5b-b166-e112551f14d1",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "944cd2dc-1069-4dc1-94b2-64a0aadfe630"
        },
        "item": {
          "id": "35336d01-2f42-4222-aad7-2aa50a5aa0a6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cc4020b6-02b0-43cd-880f-557114801291",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f7710dd1-3fae-4e00-91ab-9a41dc9e2389",
        "cursor": {
          "ref": "79d0afe9-cb28-40b5-ba57-f789fc0df9ee",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "40c6dad5-1605-4440-bc92-118daf3eec72"
        },
        "item": {
          "id": "f7710dd1-3fae-4e00-91ab-9a41dc9e2389",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "297717ff-6ed7-4c9c-b68d-706143a3f84b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f7710dd1-3fae-4e00-91ab-9a41dc9e2389",
        "cursor": {
          "ref": "79d0afe9-cb28-40b5-ba57-f789fc0df9ee",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "40c6dad5-1605-4440-bc92-118daf3eec72"
        },
        "item": {
          "id": "f7710dd1-3fae-4e00-91ab-9a41dc9e2389",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "297717ff-6ed7-4c9c-b68d-706143a3f84b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "979b1143-3e45-4b3d-87ef-f75ba61c5e9c",
        "cursor": {
          "ref": "dfe2bae3-d890-4cbf-a713-58ed8daaf8bd",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8f0aa90b-55fd-439a-bb2b-82d3a149f7af"
        },
        "item": {
          "id": "979b1143-3e45-4b3d-87ef-f75ba61c5e9c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "38df5417-2263-4281-8261-796ce03a640f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "979b1143-3e45-4b3d-87ef-f75ba61c5e9c",
        "cursor": {
          "ref": "dfe2bae3-d890-4cbf-a713-58ed8daaf8bd",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8f0aa90b-55fd-439a-bb2b-82d3a149f7af"
        },
        "item": {
          "id": "979b1143-3e45-4b3d-87ef-f75ba61c5e9c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "38df5417-2263-4281-8261-796ce03a640f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "48d213c1-aaad-4ead-8f54-ad97c6d07b9a",
        "cursor": {
          "ref": "263f4b77-1178-4014-a03d-24a331fabcb3",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e7ca6d80-f55d-42c0-aa75-c7faf8f3908c"
        },
        "item": {
          "id": "48d213c1-aaad-4ead-8f54-ad97c6d07b9a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "01ace25b-a5f7-4b1c-a3e2-ac2a3494fe99",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "48d213c1-aaad-4ead-8f54-ad97c6d07b9a",
        "cursor": {
          "ref": "263f4b77-1178-4014-a03d-24a331fabcb3",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e7ca6d80-f55d-42c0-aa75-c7faf8f3908c"
        },
        "item": {
          "id": "48d213c1-aaad-4ead-8f54-ad97c6d07b9a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "01ace25b-a5f7-4b1c-a3e2-ac2a3494fe99",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "20b0aa68-7abc-4328-b80b-525d7b1d9d57",
        "cursor": {
          "ref": "e4e44f1b-4031-41a0-bbc8-5cb41c0032ae",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0b836efd-253e-464b-a192-e4c0aa652887"
        },
        "item": {
          "id": "20b0aa68-7abc-4328-b80b-525d7b1d9d57",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "90b63625-49fa-4917-a29a-ca9ce9e87ecf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "20b0aa68-7abc-4328-b80b-525d7b1d9d57",
        "cursor": {
          "ref": "e4e44f1b-4031-41a0-bbc8-5cb41c0032ae",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0b836efd-253e-464b-a192-e4c0aa652887"
        },
        "item": {
          "id": "20b0aa68-7abc-4328-b80b-525d7b1d9d57",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "90b63625-49fa-4917-a29a-ca9ce9e87ecf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "3aaea343-a666-4360-822f-fe4c40c8c9e0",
        "cursor": {
          "ref": "8a45f9b9-3039-4ef0-92c2-9e2d049f6517",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9c6811ee-f1fd-4ac1-a61d-493d95d68cdc"
        },
        "item": {
          "id": "3aaea343-a666-4360-822f-fe4c40c8c9e0",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "3aaea343-a666-4360-822f-fe4c40c8c9e0",
        "cursor": {
          "ref": "8a45f9b9-3039-4ef0-92c2-9e2d049f6517",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9c6811ee-f1fd-4ac1-a61d-493d95d68cdc"
        },
        "item": {
          "id": "3aaea343-a666-4360-822f-fe4c40c8c9e0",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "3aaea343-a666-4360-822f-fe4c40c8c9e0",
        "cursor": {
          "ref": "8a45f9b9-3039-4ef0-92c2-9e2d049f6517",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9c6811ee-f1fd-4ac1-a61d-493d95d68cdc"
        },
        "item": {
          "id": "3aaea343-a666-4360-822f-fe4c40c8c9e0",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "c07af2c5-6263-443d-83d2-136b4c046c69",
        "cursor": {
          "ref": "be7e6cc3-fd09-4f37-a5a3-7d4e44c793f6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f90c0426-6ef3-4c3a-8d83-85ae1e7a0070"
        },
        "item": {
          "id": "c07af2c5-6263-443d-83d2-136b4c046c69",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c07af2c5-6263-443d-83d2-136b4c046c69",
        "cursor": {
          "ref": "be7e6cc3-fd09-4f37-a5a3-7d4e44c793f6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f90c0426-6ef3-4c3a-8d83-85ae1e7a0070"
        },
        "item": {
          "id": "c07af2c5-6263-443d-83d2-136b4c046c69",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c07af2c5-6263-443d-83d2-136b4c046c69",
        "cursor": {
          "ref": "be7e6cc3-fd09-4f37-a5a3-7d4e44c793f6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f90c0426-6ef3-4c3a-8d83-85ae1e7a0070"
        },
        "item": {
          "id": "c07af2c5-6263-443d-83d2-136b4c046c69",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0e5e87eb-366d-40f0-ae6a-ac5171d2e179",
        "cursor": {
          "ref": "866d1417-7613-4429-8071-2c4d77efad62",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "37dc34af-e705-4978-8890-d66090559012"
        },
        "item": {
          "id": "0e5e87eb-366d-40f0-ae6a-ac5171d2e179",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "0e5e87eb-366d-40f0-ae6a-ac5171d2e179",
        "cursor": {
          "ref": "866d1417-7613-4429-8071-2c4d77efad62",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "37dc34af-e705-4978-8890-d66090559012"
        },
        "item": {
          "id": "0e5e87eb-366d-40f0-ae6a-ac5171d2e179",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "0e5e87eb-366d-40f0-ae6a-ac5171d2e179",
        "cursor": {
          "ref": "866d1417-7613-4429-8071-2c4d77efad62",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "37dc34af-e705-4978-8890-d66090559012"
        },
        "item": {
          "id": "0e5e87eb-366d-40f0-ae6a-ac5171d2e179",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "345372df-2ca1-460b-9e65-a5b143ab6f97",
        "cursor": {
          "ref": "c98045d1-6827-4007-a2bb-30dfff97a702",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2bd88470-73c9-4c31-90c5-0aa5f9bc717d"
        },
        "item": {
          "id": "345372df-2ca1-460b-9e65-a5b143ab6f97",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "345372df-2ca1-460b-9e65-a5b143ab6f97",
        "cursor": {
          "ref": "c98045d1-6827-4007-a2bb-30dfff97a702",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2bd88470-73c9-4c31-90c5-0aa5f9bc717d"
        },
        "item": {
          "id": "345372df-2ca1-460b-9e65-a5b143ab6f97",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "345372df-2ca1-460b-9e65-a5b143ab6f97",
        "cursor": {
          "ref": "c98045d1-6827-4007-a2bb-30dfff97a702",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2bd88470-73c9-4c31-90c5-0aa5f9bc717d"
        },
        "item": {
          "id": "345372df-2ca1-460b-9e65-a5b143ab6f97",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c92b028e-8656-4a01-af6b-1be2e89d973a",
        "cursor": {
          "ref": "41b9e0ad-5582-49a7-b966-2e0cf002b8b0",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "778fc4b6-d48e-4915-bd76-781e9b7a3cd4"
        },
        "item": {
          "id": "c92b028e-8656-4a01-af6b-1be2e89d973a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "c92b028e-8656-4a01-af6b-1be2e89d973a",
        "cursor": {
          "ref": "41b9e0ad-5582-49a7-b966-2e0cf002b8b0",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "778fc4b6-d48e-4915-bd76-781e9b7a3cd4"
        },
        "item": {
          "id": "c92b028e-8656-4a01-af6b-1be2e89d973a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "c92b028e-8656-4a01-af6b-1be2e89d973a",
        "cursor": {
          "ref": "41b9e0ad-5582-49a7-b966-2e0cf002b8b0",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "778fc4b6-d48e-4915-bd76-781e9b7a3cd4"
        },
        "item": {
          "id": "c92b028e-8656-4a01-af6b-1be2e89d973a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "70409fd9-db73-45d3-a198-50e12e971348",
        "cursor": {
          "ref": "6a1c7d7a-d96a-4646-8fa8-e4752addc69c",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "52a03c63-155c-4da2-87eb-41c47c398fbb"
        },
        "item": {
          "id": "70409fd9-db73-45d3-a198-50e12e971348",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "70409fd9-db73-45d3-a198-50e12e971348",
        "cursor": {
          "ref": "6a1c7d7a-d96a-4646-8fa8-e4752addc69c",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "52a03c63-155c-4da2-87eb-41c47c398fbb"
        },
        "item": {
          "id": "70409fd9-db73-45d3-a198-50e12e971348",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "70409fd9-db73-45d3-a198-50e12e971348",
        "cursor": {
          "ref": "6a1c7d7a-d96a-4646-8fa8-e4752addc69c",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "52a03c63-155c-4da2-87eb-41c47c398fbb"
        },
        "item": {
          "id": "70409fd9-db73-45d3-a198-50e12e971348",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}