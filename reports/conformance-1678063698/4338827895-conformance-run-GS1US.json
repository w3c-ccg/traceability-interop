{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5ac7a0cb-7c63-4135-9e71-3a7821ef7925",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a85d04ba-38b0-478d-80fd-9d8d6f3a3d47",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "59703253-7db7-4ab6-b350-82d5ed517271",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c58a31dd-533f-45db-9e3a-79faf085a9d5"
                }
              }
            ]
          },
          {
            "id": "0af27562-937a-498f-adcf-e663a8c2d5e0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1edca45d-c8bb-4d69-b586-3fd600a66098",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f5eb029e-20a2-45a1-a228-f28e80429cd6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7ca996b1-574c-4e71-bd7a-118a69dfaf44",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5c1fa703-b79a-4735-a549-292165ffebfa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa9ddfc3-ac8e-469e-a046-359b48a3de11",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fc4bb8a-ed6c-460a-b044-a989428c53f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb9b7a14-96f1-46f3-96f5-28955ba3a46f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3fe9c220-f575-492f-81d8-de509a9f720f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "daf0b444-365a-428b-b28d-65c847a4cf20"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c7506c4f-b679-45bd-bafe-8b2fad052762",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd443c70-f72f-4b8c-b1b2-fac30df68434"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d90a3ed-f0b6-4534-9ff5-feb086c6d49c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "eff22227-877f-4527-a163-7b6909b5a57a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8d5548a-03ba-46c6-880c-73b5c2555181",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4241e05f-6c37-4db6-9a31-b857f5c841a1"
            }
          }
        ]
      },
      {
        "id": "45de59af-b1b5-4ec3-9701-1e8677f39864",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1e13965d-2fcb-4cfa-ab4e-c9d7f530fe76",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5bef1122-65f6-4988-8d6f-21fa558b4274",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fc4d3eee-6cf1-46e7-9bf9-d7bcf3aedefc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c82d55a-aeae-47ef-9107-3f5f7cdbf1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcb9f559-ddd4-4bbc-bc1c-e0fcc279803a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023b94ed-a32e-4d27-b43d-3aa711ed687d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9824d5d6-98c6-49ba-8eaf-6f489a9ef975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05e1153a-7608-4ae1-a1a3-597c4d68b1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875f1ce9-6ce6-489a-ac99-4af7f0b6e4d8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f255e38-eed8-4975-85bc-3709eb29f131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cc349c2-4479-442b-92d6-8bbb35ceae46"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "175f48cf-419b-42d8-a26f-f58e0cb398f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d294c4c-9405-4b1c-9c75-59d13fba5a33",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4bab4a-cbab-42ca-88c2-b1d6424df3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d84c5229-3907-4f20-b261-181e5ef1c482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5095789-4728-4c1e-bfba-a92393ad19ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2bd99e-5664-4ad6-96df-efab593c7082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b135a28-3845-4e82-9591-cd935b702ee3",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44baac8b-1f66-483a-b597-20636fe9628a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b106673-1b01-46ab-8b7a-9a7d6c80a3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd985105-4722-48e8-b3f5-29ba57c9daa3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "16c4f56d-b94d-4333-b01a-46f369226a37"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "68a00808-33cd-4bab-927f-c4ddfe21f8ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f58dc0f0-4aff-43c2-9f79-2d1b71629c4d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee511669-b2c6-47c6-9700-8b32822bc13d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "972bcc3e-29d4-4c6b-b67a-7bf0c3f1412f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dbb50c5-1326-49f0-80a7-ec7e56662deb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2d5e4e1b-2931-49b0-a9f0-ed15766ba77b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcb43ac1-133f-434c-bebb-8b04b005a5d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d5ab41a-9ad8-4bba-93cc-cfbecaef92f3"
            }
          }
        ]
      },
      {
        "id": "c87dcd30-7cc7-40f9-9ab3-62ba883db670",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ba3ab0d5-4946-4330-9ae9-d53e5d48ee6e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3722e49-8cb9-40dd-b8c6-35651eea27ad",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7277e462-45be-441f-9c16-133524ff5afb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b3f704-ea50-4a54-a45b-beb209b22da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c93e26-ccb5-4c41-aed0-b31cce81ed6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbad02c7-3bd0-44de-934c-7630ce521560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1220d2c1-8ac8-4c48-a3c7-5aa3fbb443dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7420e2-4efa-49e7-9a41-87d99fa09fbc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d36b3ee-528b-41d4-9134-d3ae70d2d982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2579a0f-b09d-4091-b927-a781fedadf4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e04a062-fe2f-4d32-84a9-45e4e9c01905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "192939c6-6f07-4e30-876b-eace875d431f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0109c97-5585-4d48-a076-d27c2207d9dc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e1dc4f-10bb-4b48-9534-81d6638d87a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb2022f-6782-4c3d-a813-b46495225a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6ff0b3-db2c-4214-9a91-17094b8eb4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da94ba13-3b99-42ce-96ce-88234979d24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94308a8-6def-401f-89b1-7df2463d3134",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500381cc-6fde-4c0a-b090-533f97f7cc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259f6987-f564-4c06-9de8-03a0a77b4411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0cc010-a15e-4ed1-b69b-5d2ed6a7bcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3be4b6c-209d-46e1-a8d6-e269b7545374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906814f4-1d5c-4625-b737-e86a79f408b6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23da47d-5b03-4cee-a040-89eab8fb9120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8af666-e730-495e-954d-29890b48d173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98c4a76-ad72-4871-83c8-721ea347387f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0654779-70f0-4a06-835f-2f60c4dc835f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45a4e38-0a08-4f5a-88c5-eb1a44b22304",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae06b95f-f7fe-4234-90c5-e8b7bb7e69ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ce94fc-3d29-4e57-b038-a90b3ede9487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b56e96-b92c-4b70-8699-5963712a79c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4086599f-b6f3-49f6-abc7-aa3c53da12f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b37a39-2dc9-4dce-b0a3-76ed51490cee",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f1e34d-f607-4783-be6c-e0afdf66929f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89ae09b-9a80-47e5-a59d-6811bfb0982f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256a8552-4de6-404c-a964-536895942bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7cc1fc3-3973-4952-8b74-426819f3036b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab294673-e7e6-4847-b54c-f9810e6af663",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23475ce6-1c66-497f-868f-19fb9419f1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98198568-7737-4422-b0d7-f6f4bc3193d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfc9f55-c935-45f4-b111-4b14dd6e0229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62f8cf56-f56b-432a-bbff-3ab3838ed8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb96973-0252-492c-8c6c-361171271490",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22f4d89-aef4-4c75-b647-76d330e26fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1319672-0408-4cff-a4c6-083d3bc69e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde5b98b-b004-4aca-ac1c-5c0c7f331b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01d342eb-ee61-4dcb-aed4-2d1fa01e6e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ff4f13-1b37-4f52-be84-3b9890b79e16",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f953f7-2d65-4cdf-9406-040f2ab0cda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf1d7a1-566b-4bba-b2ab-fc2ddc6e61d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb45345-6a46-4f63-8b18-d5a2404c8116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb30dd7c-8448-44be-af1c-0ccb49ba44ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7690a6d8-452a-4c7c-9b40-812f83561bfe",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6a7807-b25b-417c-b377-efc49ad11610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68d3440-6e58-45ba-b621-5d7ed03b4e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12081d0e-7f55-4efa-9482-135bbbaf8d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e26dc883-b12c-4c50-89f0-bd092f27304d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff2e64b-78c4-42e7-bed9-019160336d1f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfaed7a-def1-4d17-a55c-873c720768cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7bdad33-63de-4137-ace0-5e89f69d7e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f2b845-06ff-447e-9cba-6d2f6246ee1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "391c4ccc-a328-4181-aebd-966c93851196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3e9b74-7c64-43b9-85cf-dad127994368",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82d91ac-90f4-4c10-96fb-b108d364c510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48dbda02-e8d1-4812-a08d-40fbc274490a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7703fc-9b26-43cf-80bc-c5fd9741934e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a0f30c7-9486-4714-9359-46f8fd01b98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0755268-aeaf-4a67-857c-85989f77c9a7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75aafeb0-5aaf-4794-9fe2-624aeb5faf48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3318a00a-4360-40ef-af19-6b597ceb2e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ddba2b-be2c-45fd-8f4d-90ed2bacd4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12b37d2a-2b86-4f5e-bff5-221ec1ed31d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e230f8-8263-4518-9072-ae1685724a23",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "904cd928-be8e-452d-8070-c641f62b187d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28eb0645-558a-4682-abb5-dac88b9dbf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354b34cf-06c9-44c2-ba8e-69c795d3bf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "287d0cb2-f3f8-4af6-9a01-0d914100d092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19921da4-1447-4d5d-bf31-dc5a54d03270",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da01f761-1757-43e7-954c-e311a826d661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48428dc-8286-4d7e-9b4f-4f605c9590b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed222b13-a194-49f7-a462-64f824ffe993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65700e7c-cb44-47e6-b99f-fd36339edf9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d20465-6c3e-4c69-bc32-9bce515cdc20",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77226b8-4e8f-4b91-b39c-7f3549318c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e06508a-7833-43d4-a4f6-b52d10e49d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ca5d14-b5e5-40ec-b71e-f0ac31cbe642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd00b155-9119-481e-83bc-d76bf9b5fde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b6a333-2060-49e8-933f-1d303376cb09",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4d94b6-16bf-4f3b-9654-aa65b7d94ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe16fadc-8c42-42e6-af38-a2c0cc506b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3465624-9dfd-4fce-b9b7-02dc33d656ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b30261d7-3c53-4121-988b-b49d6396b5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f842b14-a18f-492e-92e9-5b0f94b3de79",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e4a950-a451-4fe0-92a3-9318b957228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d35350-d804-4a80-a2ce-c9c56b478e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87f1efa-999e-479c-8821-241f9b54b336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9565e6c8-cd24-4395-999b-fba3e2392f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9fe847-d289-4f22-8c16-d58e73aa3592",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7b09c8-6331-4de1-a471-fc9c45457c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2f4bda-09cb-43cf-a592-e1f0350f398b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3c6e1a-ce88-4a50-9a26-0bced568dc1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29aa3c2a-a8ca-493f-9245-2e7b23f2928c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bf27b0-db72-4bee-9848-0294d987c24b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cbc767-70b7-409f-b093-fb68af56d5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ffa02d-39ff-4c6e-9a66-3144026f8c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6988fee7-f53d-4380-a77c-9251c6335d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c51d01d-812c-4bbd-91c1-426674b61b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b8df99-c1e8-4af7-8548-c21046264214",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4b5ade-a6b2-43ee-9114-3fa6631dbe3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c9c1b6-d1ac-4898-ace5-728226d65311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b77dfc-9a5b-49f2-84bc-d8cf16a19a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23181d61-1aa8-411d-a11a-b32224b8cc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5fd2aa-8274-461f-a234-cfffc90291b3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007f8e3f-391d-45e0-be6f-6c04302d70bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee1616e-77f0-4b76-8c9e-c058cdea99f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e798d8f4-d547-4494-8a97-9ba49d00c45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57f3f877-a9ae-4864-96d8-fdfda01fc108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f9bcee-7100-4287-aaf6-77da951f9a13",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65121def-28bd-4cab-a099-a6fa172af4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e22eb6-6e82-420e-b920-fe0233320bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e779b95-3d0b-48e9-ab2b-5dd8f984c3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "74fbc7bb-166c-42dd-84a5-2d510c413f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcff8b5-1764-41e4-b689-e0c906952f76",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5f8831-b106-4257-9b82-306662c671c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ae9454-a76d-47aa-9b04-c89515876ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79da920-d529-4e6a-9f98-e0c653b16c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bac351d-ac27-442c-82a6-a2139c9865ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88bbf23-7a4e-4cb0-8356-92c0e6ea5df9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "109d817d-4fe8-4bc2-a5e2-a636e972cc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa23c5de-c70e-48e3-b592-e33f7d46656d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5dbeb4f-2c3a-4c02-8ae9-72fee64e80f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "406ffae3-c6a3-45e6-97b7-af13fa69f787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652379dd-107f-4d81-b6ad-b653a8708985",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b20eed-9c50-46c5-97aa-6c4ff023ecc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1218fc-741f-4a80-bec8-e1c368bc8e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac305dcb-830b-4547-96ef-32794502279f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd416296-7091-455f-880d-617df649e022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb3a638-ef94-4a59-9c2a-497cc1c63e9e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575e75ed-3d83-4214-a938-3814444cad85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c441eb6-41ae-46e8-ba58-45630b272782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41d95ca-474b-4899-9932-7af05011433c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd8279c-fa76-482b-88e6-7c6d775720f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db0ccff-a57f-4982-9557-f7cf3699c8e6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2a84fc-c208-45ce-a4b3-657f1fce540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6420300-d735-42df-822a-567333063d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7686c0f7-2744-4263-bcb8-908b170078c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd979ff-c2ce-4747-8f6f-8d684fec9772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56057dc-b304-425f-8c71-b862b636cab8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd28d78-38ee-40e5-b46c-3827a8b522b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e4eccb-0542-49d9-9c29-d78c1f352100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db1315d-0c96-4dee-aaf5-7bc8f5335160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b3a30c-5ebe-4a85-b666-7fcabdbc1a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fe037e-87bb-4a62-8568-540d965c8955",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c042bb-face-4b46-891b-a4cc89492fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683a2a9c-e4ed-447e-8f99-f7dbed3fe23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3815549a-bdfb-47e4-a8ef-8d66a3e8ac0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c94488-f517-4140-b6c2-a09954c03134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f571240-86f5-4ad5-a846-09ad53ade0b6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee54cc3-a1dd-43d6-85f0-b5febd6229d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ff9a11-5e2c-4c76-b45f-6c86591b68e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2632cdd-cb3b-44a9-9f46-053b3bf3b42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e448af58-453e-46e0-806c-d899af2f6b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc4614b-fd47-443f-a3b3-598e9a3a6bb0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780e1182-f8d3-41bc-8ad9-c196896352b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381c7200-efd6-4f5f-96f0-c0a8541bb61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6160b22d-e8b9-405a-af3b-fac572b366ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa472537-8b72-4df1-b32d-4f68a3946ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a33c3c-e7bc-4d24-bd7d-20d3a5e4e1e2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90e50ba-9671-4811-ad63-094c76304fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00eee429-727f-40dd-9440-205dd45132ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb21c7e8-2145-4a3c-a84a-07a5a3db9961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6a0358-4fdd-435f-bddb-dda6805e001a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26568cef-0b65-4733-a06c-f88fa203b35b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2110517-0969-4e7a-8134-bbef5bf82156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08571273-a9f2-4923-b8e6-f0840057cb08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa825ca7-3aa1-4aa7-8436-dc9e39a1f8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0cab94f2-a76f-49ae-ae2d-5299c26a2b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974636db-75b0-4d3a-a56f-2dca0d70cbfa",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebeb7ccb-9abb-452d-b4b1-44eda8d45307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c5cf43c-ccfa-469c-81d3-cd269cff65ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2bf028-66a7-4258-9bad-4998403b739e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1769a3d3-7692-4a9d-a4c3-77f5effcadbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1527c0a3-2398-4b76-be2e-87cdd1181aba",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d540937c-bc92-48cc-a198-0068fdf83463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454504e9-6d94-4a95-aed4-1ffd6f076bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3faaab-a2f8-4f05-ab67-d2d6f902aab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b86399e-05af-4788-8f74-a4a9cfc0b34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c828a8f7-63ca-4e52-a3d3-bdcf74a468db",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c413f9df-2c5a-4060-a889-827541ecc691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d55530-c0ed-432c-8fef-e8520a988c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2a68ca-3240-4e90-8447-b99d6d8561d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb8c3953-2681-4a82-a7b1-ce2c5e6bc3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86be6fb-1179-4d7b-b2b2-394f2d0019a3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f448ab51-4b33-4dbe-a6a2-444610174860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512be036-2c3d-4497-9794-58040c0e38db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52262ac-947b-4ff7-baee-2af7925cdf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "515ac7d8-e51f-422b-a433-94357b6d4f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65b12fc-676e-455c-aa5d-2b3487dda1c8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d40e69-ac96-46d1-b075-8d702dce1056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44bb692b-e07a-41f8-82ec-dec76421200f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28fdd22-979c-45e6-aa2d-673458b41c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4397b704-e4ac-43aa-855f-bab49f6031ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db398bf-6448-4cf0-bb9e-3c981f55cf3e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b0f0ce-9cf6-41ff-82cd-3c79c98486ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832fc2f2-1ddb-4aa5-8d2a-cacbb8e3cf32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc725b8-3610-40d1-9093-7782c6eaf2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "23259318-0159-4afc-940b-fc97374d5eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb1dd30-96ac-4b6e-9e50-52316ec4a23a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45821f69-efa7-437f-8953-7367b3cf394a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5eaa34b-0f6d-4863-8c3f-c1b4b0f092bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d67104-1586-466a-975c-601be8a861a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "71d69873-277a-4a78-9190-d093e13e0cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71675db-c56a-4cea-a9de-b663cd86d828",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35147dfa-0fa6-4fb4-b2bd-3f95dbf8e41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c5d521-2b28-4274-a2f3-468d602d6261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee57a1a-befa-4798-a431-68489794c19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7279621-3fd9-4f7b-86fe-45aa09210d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd8df92-056c-4e35-a8fd-1496986bb272",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a73db8-963f-4457-af66-2a52516cc8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd71308b-042d-4a72-b409-46dae58d4f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dc0073-caef-498c-a6bd-f5c3d44a5ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "67484fcc-b033-4435-86f8-4f06cb9330ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e01e507-8b91-46a5-9f7f-ba5b722f584d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34a779d-6c9f-4710-b591-45aef15aa2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85d55eb-8cf5-4be8-bfea-4865422800bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a1607a-710d-4a4c-a0c4-b0d582908240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36f31e19-13bb-472e-9a72-2b2222fe1a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ee9ff0-f0e5-46ad-b23f-c4c214c13fbb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2646d5-d00c-42f1-926f-34f6975f19a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ae5c16-d0ed-488a-a932-ae170c552e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1312e881-6ed0-43cd-ad63-dbd642c34679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d0bab1-0f4d-45e1-9aa0-e8fe989aacf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c02d6bf-f97d-4378-a86e-12067af9e4ef",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d87cab9-1d67-4863-a22b-760e96249645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdfc249e-151e-4feb-a584-9a1eb68e319f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77db3604-f41d-43e6-983a-1fb34f4c14b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1598160-241a-4654-ba3f-530899f84f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6647c0-cc47-4c23-a1d0-c1ee87174369",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ad590f-f9dc-40a8-b28e-c3abcc63a08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ebdc9a-24c9-43a0-b95c-6e83ffe8a7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86000e37-276e-4abd-880c-05af329ba330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0efd221f-1f6f-449c-a562-25fbb2aba3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b88436-da6d-48ae-9fe7-528a1f0811df",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e0a184-2eaf-4550-b575-48cf79af6c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea94aa2-310c-4271-94f8-c08e3e3b706a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e161e546-6b1f-45c3-a82b-57b9a9f496a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb51e1b-12e5-4911-b6e4-078663936876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17127c2c-2b4d-4382-97b8-51f942be0dc6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cc1638-4b74-4fa3-8f65-f44cbd1f096d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ecd74f-a3e4-46f5-95fd-3073fd20daa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cda6726-d28d-469e-bf2b-cd6e6aa08f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54302a5d-a4e7-486b-b41b-bb14473b8ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040976b3-e3e9-43c0-8906-2849d71e7b50",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b7a82c-f251-4082-8fd1-eb6a1b61b70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d20feed-fe76-4a17-ba87-a576efa2ae1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fd10b6-716c-4916-83f5-962fe85e53c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4013de8-f7e4-4473-87a7-a5f1ba7283df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316ac269-6ce0-48f3-9ff3-6018ac46282e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149daf97-4243-45d1-a127-ec6d09e9eb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26c60b9-f448-411b-823d-e9d90095bc61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61726fbf-f24d-43e4-a801-dfe4324694c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad1bc4a-17af-4d68-b3ac-7faabed9350d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc1d2a0-fcff-4328-9298-649553de99ee",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a691a9-c914-47d9-9d7a-1abf3cb78f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14ec617-0209-4061-8ace-4dcffc7ca1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53bce48-c9a4-4cfc-8a28-26a7ddc70cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e03204c-f9ff-4882-9d7b-d683a1ef2ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6403268-8903-483a-83a2-efbf6eed8ff9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbd84f2-a767-4c4c-a20f-821ad1b197f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85958e63-5fc4-471d-abcb-140d0fd09637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e54e40-39e1-4b7d-9012-8f4d4851f5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2533e4f-81b6-4139-a4c4-f3502b5c353d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1df7f76-382e-4880-ac19-6f484b54c121",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87232d05-4975-46bb-9b38-e45f14da20eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c601e9b-87b1-47ad-985d-71cab160b258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07da6532-231d-4590-8fc2-10c34b028dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0e95af-99f1-44b7-b4d5-99baea452ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27a54f7-c8cf-4be0-8630-180fa8c0f8ce",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457e5448-6987-40ea-8974-de0ac4d7220b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87d3c94-10eb-4af7-8a31-dccbc9ba9350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984a548a-be6f-4567-b664-c252435d0c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e974dc0d-cc47-4aad-9534-2d923ad431e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33f4868-378f-4de9-9c2f-6c6990f4d12d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae75b92-e912-491e-8fd9-3c975ed7ebe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c534b903-a8fd-4311-a9a4-13ef2600fdcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a4b104-9711-4955-8614-e131da7a760f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f50a208-35d6-486a-a8f8-e4e69ec7c81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc227af-985f-4c40-9162-bb0a72fc7e3f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d35dda-bcd2-4b3b-a093-1f920c00943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cff29b-442c-46af-9c94-1e50538b57de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6295f1-f3e3-4a12-8f0c-c4db0a2d4828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f929bb23-8b64-4131-b2cf-084df5b06e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8d38a9-5b9e-41af-bad2-49598b586b14",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387171f6-de65-45f3-a079-580423b104bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c75bced-d79e-4c90-ab51-e8c28efca175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fdb33d-c71e-4707-80a8-d3aca0f53f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a73991b6-9bed-4c55-afa8-6442f92a2c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f60f740-8169-4a08-b678-8168e65fac11",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0649ab-8049-4607-89e3-1d495f701112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd88413-1d2c-434d-90af-3e58ca7dd190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171ed355-617c-483c-ba97-9688a8f1e025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3ad53f-7430-4b1f-b470-f0561dfbfe96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f358a279-4f76-44de-8204-3a8b44df8716",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b927fa-b25e-4680-a499-dd985cc4586b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11eb0642-c262-4a2a-a9d9-63792493b3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dee3094-562b-4932-9537-f436221d480c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5f6f67-88a9-4264-9faa-39d449c7dc44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f2f9b3-c1f5-4a0f-88f4-f74c764ea146",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c01de1-9bb9-4521-b4b8-db0c8921dc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c57a1f0-5216-45a9-87fc-07566ff98225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e52a42c-93bd-4cd6-b8c1-814fdb007099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "55fd4061-1508-4d65-8247-247171ac5085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951b1f8c-66b1-453a-8639-15bd507f5dd6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e3a10a-fa17-4454-b999-6734ace8de04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1599b944-cf43-4a20-bdec-d610687c2848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe47fb34-3698-4c83-9bf9-25b0c7feaa71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0504760-dad6-466d-bc30-86eb62e98d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a69baf1-f08a-47cd-81bf-95e571889140",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad16905e-571f-4306-9d2b-1a09c0b49562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386788ab-a09a-44b0-a4fe-c315e6880d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2c7901-845b-482a-88d9-c1f0bc4b6de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99777e6c-261d-4893-a81e-65245d7a0962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5130a795-de95-43c1-a34a-195b16dd20e9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25437a3b-a4fa-40b8-b818-730914df9e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae90d58e-20eb-457c-a89e-acd21e259d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32eb769b-5d90-4f4f-949a-a71afd787630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22b9c30d-4a00-463b-ab84-5bb64ae9394b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea7d6f5-2488-4ba3-ad2c-24d577465720",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5cd3c2-8250-4c30-b7c4-e2aef100c1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e1c627c-ce36-4333-996f-005391bd140b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1500b196-d3ef-4069-8dbc-f66c529b8784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "309fb15f-6c8a-4751-b400-30185ebc9f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a12d11a-2b99-40d0-bd05-00e9bcd6f18e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395e5b89-332c-418e-8c38-bd091a9adb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533dfd65-20ee-4f48-8e21-44f0db27f6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d8727e-be93-41b5-9511-f798ffdb0b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d21dc92-53b2-4d8e-a4df-0cc1600eb90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26066304-a788-405a-aebb-45dff38c5457",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291a0561-75bb-4b16-9442-8118327f68a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc36de6-1693-4b41-b1ce-4278d9e6633b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87df9da0-dc9f-4e22-b9c1-885ce7c7a075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aac650a-dff7-4723-802b-b0446ff834ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bda8a8-8389-4f53-95e2-e93859c77ed1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271cc44e-09d9-4ffb-9e35-e19121f27efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a11fb4-82b2-4179-81cc-19a3bf8cc88e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24994e11-7b4c-4b64-8b28-490d9d72aa03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "de0a2abc-082d-4ece-8661-ed9b18835ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6a512b-3dd7-476c-bf5d-0756672b3c11",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af2201a-03e5-4541-9d9e-0d672a3a0ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3ec744-63db-4268-a207-f576f44f32b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f569ee-aa5a-4a60-b817-62f2b817402d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f77a6211-2230-43b6-a9bf-78cb784f8904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d115ad-8284-43f9-b110-529fa2c86515",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aafafdd-21a6-4cee-9e1f-252f914dd19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4fde87-6571-4f00-aaa2-84486c29fa5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f954e32d-aeb1-4ed6-a140-536af0f900b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f352e2-5ac8-4196-b9d4-1a0d951d3961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4c54ce-41bd-4b68-a893-1120f2011cf2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9827cda9-af8e-4620-bcfd-5b54cdba6cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4baf3838-7537-45e5-bd73-0ad45ae63b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29008bee-ddf4-4a2b-ad9b-ad1f1e5eaa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8fd38cc-e656-4727-b368-5fb7b55e68f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50ddd2a-8727-4652-90b5-28eb67508976",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f838026d-88cb-41b7-9374-4501636fcb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72afd53-5dee-405c-a836-87115c6208c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692edfc7-c751-401f-8a03-c4680e2d23df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c9c1dc-e1ab-4f83-9504-955e47756c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76edaf40-49b2-435f-b19d-9382d31674f4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a2637b-f761-4168-9afa-10297829ffd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d4f326-2931-47ee-8e7f-9af0d1f3bbc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a8c722-3305-4a86-a1b9-7992a2f096d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a9361f0-68a3-4ad4-89c4-869449378656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6be5d0-705f-4548-a10f-7244ce3eee80",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5208029a-af32-4fdb-85dd-fa759aeb3e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eeb4568-da4c-4746-86b9-f86886f413e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cd1901-7dec-482d-b1ec-ad7bc98a7796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "90793761-bafb-4571-aa3a-3dd50935da22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd916b97-2491-4189-a63b-05f354f8036f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c635e4-75e4-4432-a0d5-6ddf7d6e0539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d87cf6-eef8-440d-840d-9b80647acf8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285cd74f-3314-472c-86f9-606743e6161f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df250249-ea04-45ca-9972-6d0e25ff9c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4517fdfb-0716-41de-8eb3-cde3f82ad3ca",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d368be-cba4-48d2-bf90-49edde1a3f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b3ab8a-eb42-4bbc-99be-b3a7529b7c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e05512-5829-428a-adca-85466ccf3029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7f8d90-9517-42fd-b1dd-99631c57f9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5076d9-00c3-47cc-a220-378eca154298",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d44808-eaab-47b0-8d7f-7a8462bb15aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba2657c-b521-4405-a820-5239a6038b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99f4134-4cc5-4969-b975-852134a91ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8652234f-9fc8-4c10-855e-78a2ab452cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7b6b89-84b6-4823-b3a1-bc12f3f23e29",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b1670d-c9bd-4e87-9fe4-15faa81d3d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4518827-b0cd-41aa-9908-a62508eba2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bda9164-f1da-4de1-b8a2-67a8d80e6b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d418d6d-c86f-4ce8-af8f-831ea6da630a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c726fef-19a5-4661-9e65-d9b7b78b6f7d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e48f872-bae3-4d8c-80c6-7b7b5c84182c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81da9621-0df5-4a13-b003-3963254bd64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14f335f-156c-4d6f-99b3-bdc645e98b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "036a2809-9989-4ce6-b898-1cf90bea1915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03063ad3-9d38-4d52-b78d-2d5f22ace064",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b8179a-817f-4430-a3a7-64060aaa8eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5da456b-a861-4b3b-bcd9-a6ba3c73325a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6351b872-980c-4581-86ac-960911525616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a012500-34c8-4458-8f5d-f9b64ff55bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e03b7d-1515-4137-9592-b62b278f3326",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b601b5-b390-45ad-8333-455c5b4a3927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87287d50-9684-4222-8bb9-39c8a5e78de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2c3881-d815-4532-b479-102c89325a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1caf83-e201-4795-b7b6-ec5560885136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd46f3e-74bc-486a-802c-8430d9c850db",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7f2e25-49bb-47fc-bf15-ac28c005162a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af6a36c-4a9f-47c6-a721-3c6f5b81a1bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb706ba-7c5a-4910-8b0d-2816ae3989bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ea10c6-36c5-40f7-8352-57d678243a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdef628e-e949-4493-a100-fe6f1cd9af49",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc81f36-581f-48bf-845d-0ed3256e7790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "828d277c-2087-4584-93fb-00e5dd78f7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f2ce2a-dee7-4cf7-9a57-042bfc2fb38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6fd1b3f-cb5b-4756-bd7d-39b2d45460bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3f79ca-6b6f-4c53-b5c1-2574894e4d68",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f63eb0-ccf2-4fa6-8d20-58e4ade852bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d3cd1e-7e6e-4ad9-9e4c-20f06071f246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ac3ea2-525b-48bf-8ad6-3a8c3db0e7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b26488eb-f856-4b2b-8065-ac757122fa7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f48ade8-8842-4824-b979-2938399177cd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8596ac-0d74-4d2a-ab5f-8115517eda04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749a500a-f86b-4cb4-9e32-eb7fef3d8983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af2753d-5977-4694-84aa-1215ede4a5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe235d7c-4f97-4fba-a8e8-a745fbee7eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18592dd1-eb6f-4bfd-9fbd-2f31e4001bf9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337b5021-6a34-439a-abcd-cdd5a210562f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23826dd0-e386-4ad3-b1b5-0aa94baa7c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a28e40b-86c1-4b2d-8b18-4c63f16a3ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "11c7f75b-0787-4dd8-b9f2-bf0d562eedcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc7bf86-9320-4c16-a4ab-9779530a1bae",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5a529a-73d9-4e68-addd-4c4caf2a465f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3017cc-3fc8-428b-a846-4bfa36a48023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fef43f-bbde-4bd6-a377-d715224d0f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7797ada0-4364-44f2-9716-483e02893170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67318fe4-94e1-48ce-9549-bde25d4420a7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c71eaf-87ea-475f-939a-0eff047b9162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ca5973-e4fe-48f1-a338-f1a38daa9a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08eac49a-d0f7-4d60-9ef7-683f78b82fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf204457-ce51-4613-8285-678724aa4f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2d2be6-1e81-46da-be25-f124f2a7524d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38ce35f-bb3a-45b6-a86b-58aab9827a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca765c61-ea17-435d-8f14-9ca4c80971d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1194cfbb-1a07-425f-80a9-f7e91f2f0cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8702430e-ac18-4636-8177-fcb937493d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027395e7-3532-491d-b3bf-f5c0f4bcdc63",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a235fca-f0c6-4d3b-8cee-ed359e06f95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4143e9f8-9024-4850-adb1-a49477123b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e4c230-febf-474d-a41c-f7d8116077e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "763e3bbe-9cfa-4a23-bea3-f7b630defcdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6554aa8-1bbe-4f89-bc91-ba705a57943b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68006b0-a0e8-4ffd-b282-aea3f37b82fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7c608e1f-5572-41b0-a6b5-883b1c663cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f181aa8-ddfd-4b1e-a077-924c5f9cafa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "66076af2-2a67-44e3-ba03-161430245c81"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a7944cd4-19f3-4951-93be-7d63c226d4fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f20caeb7-8219-4386-8808-2d6497f251a5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8219d247-cf4d-4179-b0ec-373e606f0f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04a29163-c7a5-41ef-82dd-f2bfc291a90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43290587-332f-4596-bec1-689c093555b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e7e6c43-c639-4a70-9d94-4c8303a8f46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767d43b1-0df5-478f-b0b3-a5494de38e8b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2978dcb5-eb52-4721-a7a2-b6542587801e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b28e8306-3695-4660-9832-e891fed42b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de975d49-25b6-4c70-a5d3-0d7c00321ed2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc6bd733-4c40-48d4-bfb0-1b9ba26c464a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f78c7c6-3433-45be-992c-48fb800e0c3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ddfa218-3596-4cd0-8012-8033abe76c65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4eb5e1f-6c83-4c0b-85c9-96e20964e6d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e68504fc-bf6e-4f32-b061-de152bc9f184"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70ce0bb3-c1a7-417e-9243-a76e373460a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8a44a0b-bb17-4137-8e8e-0f967f5fcbe6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9aa1857a-a98a-4232-a7c0-8b232e306f83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c262455-32ba-470a-90f3-16e40d2593e5"
                }
              }
            ]
          },
          {
            "id": "173f1adf-5a91-4c0b-bf03-ac227e8f44bd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e259d4e9-6efe-4b0c-ac02-f2fe00bd9a0c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51b2afc4-c18f-448a-9f2e-c6c31aadcba0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d817813-a216-4ebb-bd51-04f90463c034"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d346a8c3-322a-4311-b2b0-b8c760b52dc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8aa963c0-9b4c-4844-9753-a564b7752fbe"
                    }
                  }
                ]
              },
              {
                "id": "1ed259f7-5256-41e7-ad11-3700dd421e8e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e307a1a-5414-48fa-98b9-4096d53afa3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "276724af-9c22-4b48-8226-a2ab92874758"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3fbfea1-ff84-431d-b33e-3d2b5d6618e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6aee16ba-244a-44ec-83b0-4e073938173e"
                    }
                  }
                ]
              },
              {
                "id": "053c78ff-dd0e-4f85-8890-4f340f999015",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ade834a-f035-4d6d-bf59-c89763ea71c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2534049-1427-4aa4-adf2-564436b1889e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "605bf2fa-4058-4272-9293-a924b5f0fa5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f7c6c70b-f25d-412e-97ec-314eab80e164"
                    }
                  }
                ]
              },
              {
                "id": "55ff792f-9162-4faf-aee4-50eca995948c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa69ee86-8e36-468c-8e87-919de1e414be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac398026-7c95-46f7-89aa-f4ea26b86601"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4c18c53-09e8-4704-8399-7909ee348d72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "678be116-9cce-4fbe-8d8f-0fffa7d6b7ea"
                    }
                  }
                ]
              },
              {
                "id": "4311a08a-35b1-4eb4-a063-888c6449df04",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "293a94a0-4930-4a06-8083-ce87bdc4bf60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ffdd9147-1cce-4599-a815-0d882b56e49a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3084886b-4161-4342-96ba-ba8b6fd6a2ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3de00d02-be6f-467d-a5fd-df1aaf64bb60"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7bb82b1-a110-4ec0-bd0d-ea0d99afce49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "641f1832-a11e-4261-98a7-0ac5e8d13ff8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "78136a45-0676-45f0-889b-9ad0965d4969",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "de1e4a7b-d96d-4302-8f3a-1791e860e76c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d35ac512-999f-4f17-89cf-524733d0aee3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1398aa18-207f-473d-b27a-2728965856e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ac3f212-1c68-4fe3-a2a1-c975171116b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebf87b58-396f-488d-a9d1-e0fabbac540f"
            }
          }
        ]
      },
      {
        "id": "cbd8698c-542e-420b-924c-cfab337a4d65",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6f980c6c-ba9b-4260-b670-d2c92bb4aa01",
            "name": "Negative Testing",
            "item": [
              {
                "id": "afd726b3-cf0b-421a-8424-8884898b5a7b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c132aac7-684a-4238-8a8b-d09534b2aac3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb3acc6-00f9-4f04-b58c-94d3e54cb1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7e78b7-50e4-4766-beef-a1865b263540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c0b41f-b00c-4c30-ace4-69f4115522a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "09aafcdb-62df-49d0-bbda-ff71a3155910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5642f40a-7bba-40c5-a961-c7cc036fb783",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd11dbe0-13a5-4c1f-ab63-db4caaed4369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a27747-b03b-42a2-a66c-167a0b0cf3c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eeb93ee-4cd2-4044-ba22-4d60b48abb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "121b1800-60e9-4a95-9b28-800aa560df1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e25482-605f-4ba3-851f-a45b8946d369",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2e1890-e2d4-4293-9c9c-3d67fde09ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3852a36-ad13-4342-81f6-d2d318afc234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd3ead8-2f4b-43dd-bb0a-83ffb4662d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "358cbf18-a215-48c0-81e8-53756eb09230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639caec4-b79c-4d98-97a1-7c621f383af9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24089b8f-e013-4f4e-ba91-49f540170194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9485d36a-c011-4c6e-b1e3-03fff94af530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60865e49-fd98-4fbc-b28a-fc705ba3d401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d56910-1657-42c7-a245-50d263f88a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa1c891-8696-4908-b50a-63570daf0345",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3986fb35-4ffe-4793-b3f5-74336d6123bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92ff5a8-ccf3-438f-af63-5a6d58e9ea9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5cd46ec-5256-4b70-ace0-935aa3be9716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a79e16-b119-4bb3-80be-47a1bd9f9f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b351bc-6573-49ff-99db-e6ad1254d7f7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441f8761-45fb-4b55-80c9-cf3b841d78ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79fb24a8-9950-4cef-9c40-95d6671988ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10038659-ba73-43cb-95f1-78d31d30b687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f848f0b-ad1b-4890-bbc9-440e6e46f019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f76480a-7b30-4b67-a7cf-5655b667c37a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e98112d-e9ff-4627-bd8b-0da4e8ac86b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044fa1b9-b6e8-4cc5-9f1c-ee6d1621babe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10570d52-4baf-4603-8c2b-fbd4fccee7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2cf8b78-e200-41d0-9bbd-524f193a280f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4950694f-a1b8-4179-a3fc-7efcc19f99df",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b55eaf4-23d4-4f03-9133-0d7cb5ca40c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e36dedc-add7-4f82-8d52-5926e3fb0510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728f3727-14f9-4eee-a54f-4f429bec8cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f05b72bf-b1fa-4869-9083-6e1fb86968ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7ea0bd-081b-4b43-ae97-609a17d373a6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5406c7e-8d2b-42cd-84ef-e8a611f17278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f870d5a-072e-4ea2-aafb-c66c8bba6571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9e9482-72fc-4c66-9b22-43db0d23a238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33449af1-7f18-4e86-877e-36e89765d552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7903e5-c0ad-4cc3-a64a-c40c7b8ac8d0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38be9aaa-2d7a-4534-a4fe-5b5fc4fd66ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cadaab-404f-41af-98e0-eca4d8c18cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558f1f6d-2ce0-4043-b651-f2ff872b5c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb8d73a-50bc-4e15-90fe-375ff2315b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cb1ec9-1958-444e-8e1f-c777086d0b41",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "204efab6-b660-42e7-b1fb-ced7e128c802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80890796-f366-4ed3-9173-e1c326905e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852de796-684d-4c2b-8e6e-a4dbda15d569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "16a89c71-ea6b-49f3-9b37-9e25228498e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f55c9d-00a6-486f-b584-824af0a38f20",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dc4f5f-a8bb-4b29-a47b-92c93399c9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99b1053-22d0-4941-ad63-8d1bddb472fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f9a46e-14a7-4447-a696-cc05c6aac85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "995b4d72-a251-4899-91dc-fdeb1ce43efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e62fe4-403c-404c-bc01-35b22db3ef31",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bdc5b8-e67d-4808-b8c7-64752efa079b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2527d4c6-b329-4c62-b7ec-f74a7772dddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20978990-c45e-4f0e-9962-a89770edff6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56c3b3b1-8ec3-438e-914f-e581cf6a728d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af1e1aa-f4ef-4bcf-ba87-bd56d8d5b260",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbbd218-6474-474e-af7c-45b681971a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754ed3bd-0600-43ad-b117-ef041f3143b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b717506f-43ee-4056-9093-e393e58d9167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4fbba5-2998-4851-80bf-3b26f8543188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4abf310-2b8a-4caf-8c77-0237126e77fc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb3c2ce-4dbd-4685-b9d5-6d2a9a1dd90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4f64c6-7a53-415a-9e60-d5c6da0029f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d1fc4d-4a67-4ad8-9ce6-16399f688b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5617949c-fc73-4c34-9b79-8063468dedcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d24cf9-d2c0-4ace-b84d-3d8223bd409b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc4236c-7e64-4762-9087-5785a2dc0208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2867065a-a03d-4174-a4ca-6c6663068f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f3e882-e189-471a-9bcf-a2688514e8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b015ad2-56c8-4f06-b60d-9a2edf263568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c79d0de-aa4c-4ca0-aedb-83d6f6c715b6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c315ee31-00d8-4d04-801d-9c2c3932f9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf0c396-feb4-4ae4-8f3b-d9f4775cef80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d0f6b1-b387-46ca-a20d-0bb966533050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "33111684-8e86-41e9-b8d1-72464477ebcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182d9f92-9690-4d28-bf2a-979341915d1f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ee9e26-aed4-4e0c-b1d3-5857780f75d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74609487-6dc0-4c20-b062-d624815513a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb1cab8-f426-4d30-bfe2-cac4bb01b75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8f1421-6527-4652-b4ca-47d51114ccbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66c0e57-28a1-4612-a960-644152f6d7bb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64d5c4d-47a8-4898-a6da-9acb8871e521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb963d2-765f-45b9-848b-d4c785e902a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd056e19-78d4-43f3-ae88-9d5a12949e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06c0c534-3eab-4ffe-913f-f76852e1eed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0016f00-e1e5-412f-8f32-cc19d54dfbf5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939f9600-c435-4af4-be8d-dc9a534e00e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a57738f7-9855-4864-a219-cba57ccf5b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3480333-29bf-4225-9134-4ae55b2a6029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3260ef95-0979-4e3a-b9d7-7d2cfa5254d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f173a3e-f84d-448d-b507-1546504f13a2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6929ccd3-381b-46bc-a433-0a66b28263a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02846352-c294-4217-9bfd-7f63908cb9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0389041-75da-4ee0-bd9e-402147724022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b8c0f9-0709-4dca-bd4c-07ead7e39208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56db7414-739f-4133-8e50-203391c6cab7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51859313-aefe-412f-8210-222b219404dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae1f116-50e7-434b-9925-6259cbf1f3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db567d89-e184-4c1b-bcee-a20fbbb9d9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe8e70a-9b91-4dd3-8cd6-c93480b19f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50a4f17-e088-4cdb-8fbb-0b21e7ac826d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8805c449-c5ed-4d30-a05a-ef6d7f17bd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d191f246-9edd-4399-b1d0-52e50a2b3065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a21488-a318-4170-bcee-36ed3488dcf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6213a71f-cc9b-4cbc-a2b8-a1d5623f4359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a818fbdc-1f25-4062-b106-15bee322d859",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83ec522-05c7-4242-a176-61ac49bf8d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e789e4e-897b-457a-8db8-ed6fefc55e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155421c2-4a53-4643-971d-dba78d44eae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44622716-c681-4da6-a295-cf564f42ddca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1a6397-c313-4220-a99c-b1d1162404c9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2223e9bf-0a39-4b17-bf19-986eb3c3f150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "634d8df6-c0e9-423f-a205-a3b52faf6e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad07a62-b67c-4c78-956e-9784d7f6c42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32b1fa91-2c1c-46b5-bcd7-bf4faf8be610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7930cbff-da5f-4015-94d6-7c024208bd4a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5980e937-5b89-46f4-8dcc-451fad032fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc937e5-afff-402a-b611-058a83a17bb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d59f01-c0a1-4828-bf84-7bba9687e036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6e4f02-a42c-4aa0-bcf7-764a6f56a46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bcd362-84eb-483d-907a-564edb7cefb4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534aeb60-02bf-49bb-b198-344b06ee7cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148a4430-0faa-411a-bcda-c06194bed1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8dcfbe-f374-4a13-8ed0-385878f43a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9ecc9c-bfb7-449c-bd20-6a6b8fe75b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e1b0e8-90eb-4fed-9d43-60810081436e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3db4e0d-a4c6-4740-8ac2-b035a43251b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1657a11a-4bb5-46bf-b438-0628154a25d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c12eed-240d-4082-b0e6-1200d14232f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b3a78d-9377-48ee-a74c-38e5d6f16880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f158d4-0d3e-41a5-a076-b8579a8beea9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95de638f-5e7a-45a8-b0b1-f57d74d404ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49376952-1fed-4eeb-a3ac-bed3f27a3a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f89063-9a51-47ab-97a4-472baa85d14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5746fa-7dce-48dc-993e-959e4b1f12dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d768629c-2a9e-4959-81d8-af25fd4c8eb2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c7b07e-692f-4adc-b0b8-7348c068d781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc56f87-b434-4ea4-888e-bc137bdfdd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8934d0c-7e07-4228-a6c3-b4b62fb6e7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "328b2922-593d-413d-97f5-6b2eff4552f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1faf1d-a260-4040-b5bc-8f672553e7e8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d575c332-c162-4114-8245-41eb3b1e2376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc9515d-c850-46c9-87fb-194ec9649ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c861254-6399-4a6b-82fe-8613cdca003c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "332bdb5e-a7dd-470f-a67e-e70ab70060a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b03018-0514-4f15-b358-3569897e0b1f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce0ec7a-cae7-4f5e-9142-2b863d4b2037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae284b7-13ad-4184-a1ad-4ee921eea652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698563c1-8147-4e39-a436-250c84d685fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53bd081a-9119-4253-a5ee-1728f8b17e1f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7463f9b0-e3bd-47e3-a439-3c358de95548",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b840199b-05a1-4840-b2a1-46f88ee593f1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdeb7c3-acde-498d-8f3a-d6b47dec7668",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "31190f01-69d0-412e-9a5f-c806cf45a3fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27a9a56-a3ab-480e-8258-d9ae4b419594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fbc0a64-a18b-45f9-9a42-0f2c1315a71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4c2707-c170-454b-b826-07f22133860f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ec3d3a-3a99-4270-b5c5-b32ead4c4164",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "edcf5db9-4ce7-4e9d-9a61-aeb44278d366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6427ba98-c055-411d-b4f0-2627c9e6fb70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b45cab8e-6a58-4bda-909a-ed0c69e9ea5b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "765fb337-f93f-4614-ab75-9268cdefd9a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "359574d6-286b-4b72-abf8-60aa917429e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fb12e02-f58b-43b8-a11d-0c85545d4529",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9102bd35-1be0-4da2-b65e-3b4cf4394180"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4319a26-0a14-465f-bf01-f60b78ed98fd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "70a95fce-2696-48f9-bb2e-503c905c1e18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3e4eb0f-d4df-4bce-84fb-3fb2cfae05a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11c84b86-6e27-4111-a7e8-02fab5b96e0b"
            }
          }
        ]
      },
      {
        "id": "01dc7fe5-3b68-4927-9b4a-939a2d81088a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cb3284f2-8cfb-4b73-b8b5-76c2d467ab30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00678c93-8091-4da4-86f4-2b85fea3da32",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7b29b967-1481-412e-93fa-a8067fd22287",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7e557b-82ed-459a-8760-92a8a4fd9275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f1699b-3e70-4fc2-829c-3e0055c34ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d13580-d70e-4f7e-a45a-78e53b38ae91",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd30f35-529c-43a6-b27a-c8efafaabea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4532be78-e9fe-416e-8d28-373bc583c76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8f2b39-016b-4531-8cb0-d0d908ad361a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500ffe4d-f47b-4817-b833-517edb0200c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f0919ab-cb44-4a0c-a70d-99ae343b5de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e73ec44-b12e-43b8-98b4-27870214c7e0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202dc164-d866-4cd8-8f0e-ef81366c1ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b395763-653d-4d1d-9a14-f45c06d3ba4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9bd671-064b-4bc2-8354-bb1c34273fdc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe9f0ca-ecc5-419d-ae50-a7410253ad53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc810eed-93fb-4fc3-bba3-f61e3d63092d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4352ccf-d60c-4787-a3eb-f4a8feb2c799",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19632a34-05b4-4822-ab40-614b2593ab7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3541a6b-a6aa-446f-9537-e833a9471a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bbf094-7aea-4000-bacc-7af766442f8d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f36d76-a69b-4571-8ba3-b50ae2b86297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ff7406-4fa5-4277-99b1-d3f9e14261b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75288fd9-8ba7-48a9-821e-c239ba34ef59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc048419-6ef2-4ce4-a302-57860c2fa154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cffa29-e4bb-40a3-a866-d3746c9bb6f9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24cc3dc7-61b6-4600-a5cd-555cded5b0bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de57b3b9-8153-4cdf-b768-ac69cf3029b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0c7217-ffc6-49f5-a774-50843ef709a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113ca88f-0368-4290-be6d-439a618837d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e470421-188e-43ac-a561-cb335087be60",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7ce364-f4a8-4c15-bf3e-bd65633ae8be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c1813dd-7eba-4eb7-a427-86e10ab7fb34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ada242-5021-4f39-97bd-14756776d25e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e7680d-b59d-4fb3-8872-f5d4bbb6b5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315d3485-d6a8-47ed-a218-77005528b0f0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf330de4-92a8-4be0-99c6-f6741a84e4ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fafd44f-10e4-493f-bc37-46b48421cbaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7582cc5-9892-4f44-9422-178812522258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569912bc-dadb-4f90-83f6-f9516a350ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66654963-dff0-4a96-9c9d-4725be060bab",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac8062b-19f6-4f9c-a09e-866f463f3df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4662de9-8638-42f6-9d45-66c1a3fb28c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2c5cce-7ef5-448c-87fc-a74045256de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3f5cbd-4c26-4107-af49-3ba8147faba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7a7cdb-aa95-4831-99ad-2183c570f09a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ac55d3-c4e8-4d30-a303-7468d868752b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0de7a1-a622-4c81-a910-1602a253aa02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23df3e18-e3d0-482a-b4a7-924eaa7d0cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36552a27-df7e-49a9-b725-8b3bee52738e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce0cc1d-9570-4d9f-bdd2-1c9d92794252",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc7e18a-ad25-46f4-b676-f171e0657c34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "315e7331-ae64-4ee2-b90f-9113cf64fe1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d64e51-304c-449c-98a8-29d6dd1801ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77d4d07-141d-46dd-81ef-225abd6b9f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b462174b-6afe-4ed0-8f65-0422c5050680",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482a32fe-41e6-436e-aad8-181ae03816b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e64b85df-13d4-499c-8db3-4652eaab43dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4c117f-f5dc-4b86-96bd-e21aa458ad0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33170512-b945-4add-ad6e-4b5bb267405e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a91758-0655-4902-bccc-15ac12668aa3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2cd80ff-3bea-4411-a11d-9c382de4382e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0d4eb6d-1017-4dc9-a54f-358124ba71d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc10fbe-0f25-492e-b8d6-f2677de7b884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c831f8af-97b4-456d-830b-0e21b9ba694e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337b95d2-a814-4a16-a75a-14661a4f7486",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec3b0a5-6efa-4db0-afa7-50050ca65338",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c8a3207-7097-4e7b-a2cd-416268f1cf50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f8cbe0-b5d5-473b-8be4-e6617347ae19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c97c53d-0b40-484b-ae20-d7d0910290a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6100c8f-5a95-48da-9485-05e24706f451",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3cfed8-9031-4b6e-951c-b8c220a8eba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d41665d3-d927-4f28-adb3-2232c9e5ee30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "977f5b7a-1506-4fe0-bd80-c8ccdd983cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d0eae92-08de-416f-97d9-09c8acb6a4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098828b3-7559-453d-b62d-4d13ed3bfab0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765678e4-e0f8-4be4-862d-154b20f8807f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa3a039-a896-4ec4-9e98-ee796c71fb3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9773939-e9bc-4293-9d2c-3b235018b83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52583a0f-5873-43fa-811b-ddbe6582a067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb86dc0b-d7bb-40ad-8054-827af18be013",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997faf8e-7c2c-4f0d-b102-3fbaa758f5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe9cfb6-41c4-4203-950f-5b474b268252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6858f9a9-320e-4967-8591-1a917e9690d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f875edcc-c18f-4708-a489-1bebb8fe9aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217cc264-0cd3-419b-9e5c-f0a2073b50b7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69209fb3-f7ee-4882-a7c7-f851de99a3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fd882b-7857-40a6-a145-887d10505548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8909dbef-282a-47c5-abdd-2d5248acc7a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "582265db-1de8-4991-8938-f316a685b4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a434d76-02b1-4e11-be6a-84ae31b6d1ef",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa1f9fd-f1b6-447e-b057-98f9d5232f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a914c3-657c-4fff-87c0-873360a1a399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee21dd9-059c-4e40-8a94-1e745a328b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a1b09a-deb9-45fa-8d9d-c66aef382ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ab22fa-66b1-4487-9861-6ead806fadde",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22bd613-f165-4814-85eb-3efe5fb1d466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c080fb-dcb3-41e9-a82a-569711171ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70289f6c-c147-4ccc-ab5e-f9a62b8edad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a73ecf9-35d0-4661-910d-a00e786b54de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af383c34-689d-41f8-8060-e678ba1aef09",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3616e50b-9bbf-406c-81d9-1d87c47195b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174991c6-4ec6-4155-a21c-e958a59ea9a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec315076-b7f0-4981-a45f-0c06b084e846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e01a11-bab6-48e1-a461-7e1cab35338a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d9e1af-9967-4b56-80ac-779968f3f0db",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329388ee-2faf-4ff8-ae0d-653bd896861c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c188a95-71b5-4499-8303-6906ac038d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccbebd0-4790-4a8b-88e5-3c9c76a5789d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dda7e6d-3502-4cf2-a6cd-31f623051090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ea7b70-1d58-4db2-94f9-646f34344423",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cab7da-f6f1-4bb0-bc0a-a125bf9ed12d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee4ee89a-2cb4-4a9d-909e-75dbf019aeb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e00356-56ab-49bd-a904-e6fc97a61c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d239523b-1278-416f-a347-902fe65f6289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cb775d-93bf-44fd-9eb8-f775428a6386",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbcee47-36e8-405f-bc1b-c3f1a2ee769a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e886d8d2-9e63-42d7-9a1a-52000ad8d33c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d377a9b-4730-46a3-a8b0-4d2e4564950c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d451ec-e593-4dff-b86c-75a843d75d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f6f2a6-9249-4ee0-9e73-1f1d7994a12a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f090e6c7-7ac6-465e-9e0b-a662184e598a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "531ab64c-141b-40ea-93b2-80866cbf0948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "691e2acc-98a7-4401-af91-a2712141f4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26616bbc-de0a-4a39-949b-98d23f46a1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def7da61-fb91-42a8-b4c7-017566b9450d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a7922c-9465-4aec-9a33-e4abf3d446c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02bac0d-e4ce-4e31-b6bf-53496ba3ba59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49975ab4-1cf9-4924-b81e-d11a701b5429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98d3681-67d8-4a8d-a17b-e53304d7648d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5b33ae-4a8a-4ab4-8aec-abaaeca0e4f9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ce6eee-b752-4788-badd-02a2e6e47b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a0fc20a-b132-49d3-9316-d566b3cc7f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd09af0-f7fe-4013-806e-bc99aa26dcdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e98bfe9b-10e8-480f-ac55-7a187e6b0a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385921ce-85cd-4d8d-b9dc-e3f4d663ca95",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a8781b-1933-487c-9b04-d37e2a9f75e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f91cf8c-70d6-457e-8216-91632e3b5b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93c2aa3-b473-4823-8f2e-3aed40412a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970541ab-2a2a-4a01-800f-d36f463f23a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd660e3-b34b-4735-8fba-b24c66f3913c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651048e6-756b-4b2b-936d-d5f4d2be50de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5ce7634-5ff0-4ece-b079-cca5df728fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cd42c2-cbb6-415a-bae7-fee97f3d3d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0835bed1-d72e-459d-90ad-3cd9305e7662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec52794d-2eb9-46e1-a0e4-acd1bc6cec69",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7adf363-a127-4356-b40b-fc61abe95617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2034ff90-88d5-4447-96f5-dbf2e922ac09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f08abc-4feb-4fca-9800-0809a1c706da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd013f33-8a0a-4496-89f3-df1bcc4d5ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06421979-a771-42ad-96e2-ba762e81ce53",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0da2575-90c8-4116-98fe-6ddcba121634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf8574e7-f71e-4986-8720-319394b99ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea6a43d-a422-4c3a-a8a6-56c11905f0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84dcab20-8665-4d32-a91c-0f3a9184a157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9271023-3815-4548-896a-d8ebe10b3084",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfbb941-36c2-4e0e-a95d-19c5a492c5a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb9ed2db-bbd7-477c-82ee-df7ecbe70ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8004785-9728-406e-a3f3-da291e216f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f28a34f-a763-4ac1-b881-d8f74e8fbc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f555e5b2-fb7d-4638-b428-2f3d359549f2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d070e09-17c5-469e-a7ff-d624846f1a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd178b7b-dc4e-4753-a870-cb6d96de32dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab021e62-6156-4552-9361-7bfe08702a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ca208f-2b78-4a42-b329-1e49e409de4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23edc38c-2e9b-4210-905b-86abebafd99b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9afea8-3d36-4a37-b09d-c041029e4463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e57da178-4cee-4fe5-86ef-a3edf5cac20b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e269cd9e-5fa8-42b4-a571-787607bab5bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39cd767c-7b0c-4a76-90fc-539a62618093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b25001a-61f7-40e4-b2cc-c2f246aaa5e2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207ef222-c3e0-4ca7-a85d-6866988f7d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd03d1b-3e2b-4045-b67e-c9ecbd572667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd929cba-f33c-4266-aaba-93ccae1c2e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab799c6-c932-4447-b21f-64c798aced67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa93c2f-4b4f-4616-b251-6f52b8b7e6c7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44d764f-40b1-4e51-819d-8f2d322891c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac651e05-b119-4804-9a12-9583ea723cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "514b413f-a402-48f3-a28f-c300e5e3d720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bfe7ef-0aca-4675-9972-ff54ff982fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883884eb-2ab8-49e7-aac0-1944e46c6994",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c54ecb-4da6-4ac6-9cde-d5f95e82a708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e02d5e-d380-4ba8-ab18-1712d63545f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f173d1-9f45-4bdb-b370-c5452d188546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c799587-171a-47d0-ba95-837318123ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b042a9-6b0a-47c3-9683-167ae83d70d6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97362cc-5fb2-4ed3-9892-36640dbc977f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8b2a5f-6818-4bad-8a41-fc42db9db623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7c1af4-aed2-4974-9662-063418d7c3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3f91e9-911d-4cee-b18f-414e137b3c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fc563a-df07-470b-9ce2-5117bfddec7b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d265cca1-2b0a-4ae6-95ba-6825ef73dfca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f4ec46e-421b-4806-a8cf-3f1c9cb4c8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89313148-7cd2-4d18-8c3a-10182fc2704e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32472a0-1323-40a5-aee4-eb0a7203b7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fdbf7f-1384-4abf-a5f9-74651445e103",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9b45c0-ee55-49cf-8e45-f90b97d3e2bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4e775f-6a35-4c6f-b51b-b358e22e54f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5504b33-3d1d-421f-9bcc-e565fae58929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbb1c85-7e9f-448e-b558-60ab39bb118a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea40af9b-914a-40bf-b791-85c0158ee030",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b6ea65-0e81-4eba-ac77-d6bf28f586c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af803f6-384f-46e4-ab4f-bf00931ad6ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8b9474-bd5b-47a7-b957-c212a50f3d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366dd6a9-cdaa-4501-865c-8e1550fa1e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f80542d-9347-4927-b6f3-2da48cce79a4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1520e1c4-4bb9-408b-9daa-1ce7982b6d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8aef293-454d-4f48-bca9-7f0616c75b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed058d6-2d4d-4c0e-8f2f-b20d9e14eb40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ba63e7-fdba-448a-b22a-d0b0abf955ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f176649-33f2-4d5c-bac7-bc47965fb3ff",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9bc870-5b01-489a-b149-4bd3cada0aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8adcf8-5e81-47cc-8302-a3b9b5d2e145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174ff142-503a-4784-9dd4-b4a1e27721a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47603b7-d57a-4ddb-97d3-f81eed6ee194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48bc441-c6f0-4dff-902b-faa6b6537b41",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1674e93e-83ff-4ec4-9db0-d8f0070d8de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451a38cf-d559-4420-95e8-0c217fe571a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "694a917e-852e-4609-8159-e6afcf4318e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46747d48-99f8-4f3d-84c6-dab4d81f1406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70e358c-6cd6-485e-baa8-fdabe376ce23",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d163797-ffa7-4ae2-a677-0b673e96be1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6cd117-403a-4051-a90b-b84f09704b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfc103f-c854-4ca5-b800-45cb139d8b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe8c253-be87-438f-ba00-ccc5a2b09957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370c00b9-4b54-4d94-ae7b-6299b9203eec",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a7f1cf-fd62-461b-8cd4-2214f2b8d604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5618de-8713-4018-aed7-509e3e8fbf44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe577dd-21d8-42ad-8859-1b941c49277c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db974ea9-7eaa-4562-bef4-8455e4d0b592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6f57ad-552d-4f2e-adfc-7a0cc6f25f22",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9240d2-4c5f-4c42-86a2-ff752754d117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d7956f-f9a3-4ecd-a7a7-48a3ba8ff3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "185e79cc-90d5-4d5c-8679-ebeb3a0f317a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8958a6-c5c7-4096-be10-2b43dc1a7a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb69927d-83ef-4b64-9bed-fab403747735",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8253b4-dd61-4890-947b-82ccd1e675c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e296ee-7af2-4b18-9dc8-8279a4cb02b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc72795-bc47-4e77-8bd7-dd15c8512fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c296af-673f-4433-b737-82a1dd98bffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33173f72-18ac-4446-8144-97f1815c41da",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1f2272-16ea-43c7-9082-cb98e2414394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63b9dba-c7b2-4f53-b104-ea2d3904da10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0cc04f-1721-4dd8-a8c0-fd3574f43803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b7784a-95f2-4d4a-a098-05bad1e2888a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718cc5b4-2d46-4815-8c14-fa5bc9c0bd60",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a402d9c-2fd5-467a-b05f-e16ee5dfe6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72875fa-c312-4e61-b78c-aa4be05a324d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e7c02f-8ef9-4cc7-bea1-ad4a1d31f436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b8cce4-e858-40ce-9113-6192f57058d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddc91bf-18ea-4bbe-8d8e-474ac6b821de",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854ed950-73df-4946-b58f-56367f598148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f85b99-0be1-4997-8f6b-42b9dc6abd09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d6f606-fe9e-4193-b565-335b73c1fd89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad100f2c-98ad-4f6a-b22f-904ec3a254f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27fe897-41e1-41b5-91f1-67cdcd37c3a8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc39ea7-dafe-4653-8101-07782b3f0979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d9e777-5fee-41b6-b720-663eb45a43bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa803716-87d9-40a1-81a9-d222b1d7a1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2d99b6-0608-46ba-8a1f-e1a8c190c605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09fa343-a4d8-4af8-9ba2-db971f70b3ed",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7b85d9-d8f5-4d19-82f1-c910a9486c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0d051d-1af4-41f3-950d-64732bb6e7ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa43ad8-bacc-44d1-8cec-b0d4de6ec8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e721b73-a81b-48aa-8704-7e76dc367139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e07ff43-1c42-4674-a7b5-ee8debedc7e7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48df1d7-6918-450a-9b0c-9e3aa2abd752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e386d023-9b27-4c9b-b6c8-c0b9c65b3474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2b366b-e9c6-49dc-962c-b65eb7c6683d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd67266-ea5f-4c2c-8411-a0bf03413d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801ad51c-b657-4b60-a5da-ccff2c62dbb4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc236d66-bea0-4034-abec-5c707c1937c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95800323-df83-42f2-aeec-1ef106cc3e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f85f2b-68a5-4d5e-92c5-65f7a5632a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c2da29-3eee-4e1b-834c-bd854efc8c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f491dc95-7277-420b-bc48-506532f9f4be",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c242e4d6-2dff-4fe3-bfdc-846744c64562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9c0eaf-ee54-4e20-9930-ae0e286edc6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f08a26-8753-44f6-8579-fafc47d4a579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03223de1-f527-4d48-8ddb-79f25a1cf7d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0af4506-a6f0-4af0-94b9-d98adb4ab74d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1291f3fd-1610-4c16-a46c-8f1f7cbd90c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc9fe62-6c24-44ac-8bea-aabfc5c2e214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d540753b-66cc-4b3f-97f3-950e2f6b1849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad10eed-4dac-4b96-a8ab-89a3e6a7d195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3daa2047-c35f-41a6-9bb5-15aa75466d1d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247561bb-b5d3-4815-bc35-7a592ed2c975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f79911-c5fb-493c-b0ba-3126b4d3ee15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75ad85c-d356-4a74-b5f0-8e43cb2eb32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e35b51be-99bc-4afd-9287-31d519e6338d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71447ef5-80ba-40dc-b4bf-00a0f57fbe86",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab33250-c7e9-4b39-9c6b-9838da234fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9567b79-a4b6-43aa-829d-3a927ae107c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea84efc-1bda-4f80-a845-f4339f7df8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00bcef9b-8cc0-4401-8459-042dac533b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c5782d-a25b-4a43-8579-a181fcb3b989",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2730c9b-dcc5-4d95-abd8-04fc84d9c8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24915349-7942-426f-ab02-8b20c9327799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc32eca-4d46-4c44-b4bd-75c19355f548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db499656-e41c-41a6-944b-817e1c7d2af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596713bf-b9d7-49a1-82b8-d3ed4edf55a3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f07232c-f1e0-4970-b842-b3a54e8684aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5780ed8-0d25-4e3a-92ed-9723688649c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdbe3bd-1505-46bc-bd80-ce40ab16d40d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69d5b4b-5afa-401f-998d-7d14ce81a26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0f20b2-335e-4c3b-8a20-2d1a9697b1b1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfb9a15-abf2-40f5-a785-2e0727fa6ec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97150b77-087e-4721-897f-7408f7f07a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015f7118-6511-4d5e-84b3-d70e2b3bcbf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b1d8e48-cf2e-49aa-a94b-570ff9897c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247ec164-2e8d-4cc7-81ad-fb2085c083c0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882c0644-e9bb-4142-8aab-e334d934a2e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893d257b-d0b0-4c3b-b99f-f327694bbe2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b10a5c-5f21-48ba-b2af-f3fa550e9d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f192361-b0ff-44d4-b5ad-32baa7cbd966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4896fe-24d2-481e-a119-510fa960cc6c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa79d83-039c-479d-b324-bb5b2627e456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f74d6911-3215-4601-8bab-f95926a190ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba706fc-ee99-451e-8b77-2d0ebf130a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61349960-c7ab-42d2-be8e-711c262881b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d59066c-115a-4c60-9310-3e29626ab615",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa732e9b-ef1c-4b57-8e86-2c259d87bd6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcf8f099-68f6-4a8a-9259-d7fb1d1e2746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "899448fe-d259-4893-8443-59b96466bd10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76e893b1-b1cb-490e-88d0-9ba8cea5060b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a069869-5dd5-4fe8-b980-420149f6943b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e023dac-d99b-4c1f-8078-4a058a6a358c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b9476a-81d3-49eb-9594-aabff75fee55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5411264-cc62-4c9d-94d3-ac80c6ea675c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef265a6-8f26-4678-87c4-8708339c63c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68206680-5d79-411e-8c91-f389b91e10dc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcc2d24-3fbd-4238-b914-a72597b9c908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d615031-e6d0-43b5-9630-7fabaa8a8020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33762db-7d3b-4ab5-ba97-d03db241a869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac6dda7-938c-44c6-9df6-845d394d3f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cff783-80ee-45b5-9c8d-43547a9280d2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820078d3-a9a0-4c30-ab0a-9dd2f80f77b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5640fe81-9701-43bd-8a8a-0d7f06df4abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb67280-7b47-42b1-b7be-d7a74a7a8472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d701e0d-d3af-4258-85b3-d754b941b184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ba52e2-3564-423d-a140-27ab96f50be8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed73bc6-59f6-4dc9-bbdb-d1ef68c00da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afc52ea7-2235-4fc6-a98b-29b88ebfd08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deeeb153-0047-4f52-bedc-0d7df9633989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcbf2d6f-7a88-4e42-9a5c-12dd3d96d4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bba87f-489d-45be-81a7-6f78c45a8d48",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e25028-f8ec-45e2-880c-ef6bac70158b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e8b1aae-8ef5-4cc6-966a-40a29b17b68e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871d7be9-44a3-4f67-8f7e-087b63ca376f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2c4f3d-feb5-43af-b290-2568cbddcce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bf8489-cfbe-4e43-9436-ab7a49736a39",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1be655-38a1-4a6d-93ee-86e5802c75a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfd660a1-1d8a-4f6f-b968-f82d480c7a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6c3b71-8c0a-45a1-bc24-f345d433c61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70314061-b45c-484e-ac31-d481a19d1abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896afb7b-cc9e-4f9a-977b-5bcc60a632e2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378c6a99-a348-4f93-9c1a-820a88a65871",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "237de8dd-36c9-4237-b265-2087e91ad17f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "279abbd0-8604-45e1-9351-b241bcd099d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4da484e-d223-4fac-82de-9865edd7f898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf62e08-e194-4b64-abfb-ec7c7536037e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0506aa-572a-4f3d-a9e5-52ca950d0714",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "652980db-f2fe-4985-84cd-d559ac9f0580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5953b0f-5c0b-4893-869a-446e1eba7d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a876d0d-3377-4c24-93d3-88774e617311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c30ece6-5753-4738-907e-efa58da3744f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4855e2d9-f57d-4706-a76a-f3bde64bbca1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc9dd5cf-f896-4c7c-b737-d9f8c3d82c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fa02f4-ee47-4804-9a73-35b52e27da90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f111a35-e637-40e9-ba11-6fda2e426bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d721651-b07a-4282-8853-a53d8789a064",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72236cae-bcd6-4f9c-b1e9-15595e41dedd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab9f28c-c667-4813-b25d-37eec28c2966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "953418db-9a7b-44dc-890f-94ce94d3c867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ae7cd7-a13b-4ec4-9080-8a0a7e1920f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f3e601-3ef5-4e63-a3cf-0aea229ade72",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12141383-e069-4677-90a4-9fa3fd3a06d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aba2d2f4-b191-4b85-ab09-daa15e21698a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71156f91-ed0a-44fa-8b82-6072cf50e47a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3478fb4c-d1c8-4c70-bbb6-511086c50e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d52f40-40e1-4c9a-ba12-8af29b984175",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92aa747-4664-4f59-97b3-c88459f16e33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "909e7a59-0ea1-4086-801c-974bfbbf3738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c1a81f-a7a3-4904-a7ae-9e8bcb127d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ed29f8-fdb5-4203-98da-53105a16d407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007e53a2-4a6d-4339-87f5-9b6b48b07c41",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7616d3cc-32b5-4bc1-8e5a-c487cdebf3b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b6ba02c-1c69-4915-8914-459c0744245a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a079e9-a3b3-4bdd-b0ec-5406f242dca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321c96c7-3a4a-4c56-9fa8-c6ea1af33b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd55efea-f09d-425c-a928-e582e39f898b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3088df9d-ab48-4109-949c-979cd36907fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "212933d2-c82d-4926-805b-4ac4dbd8b7d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90805856-faf4-4ebe-9ffb-c86cad581104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c9c929-bdf0-47c4-9b2a-73ace86ed837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b9e6f1-29be-4ea6-85ff-bfe4ce943809",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d0820e-4faa-4288-84ca-373307280900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77fa3a2a-46e0-4577-9118-f2045004f6f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cadc014-9ddf-4e14-ac7e-3a9355713475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c059d7b0-5bef-4b5e-8ce7-46e315cf47d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04afde7-fa04-45e7-ad11-206630db7470",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cf97f0-9069-4810-bebe-50a3fa8efef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38011768-75e4-4493-bed1-6662d6b9b32f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606729f3-7286-4e75-9c86-f0f07c3fc803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53aab671-079a-4793-b384-9e6973d6dc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5b2716-b8de-46d2-bb2d-d933f621e4bf",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d100a7-62f8-4405-9afa-0cea34f8c52e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb9afecc-f8dc-4ba5-8e8c-b036cdee7746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9fe9d2-d414-4a00-b9db-3b0321231996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a073f1ad-b891-4647-a3d6-ee66ce536656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e328e2de-820f-492b-ba45-b179fddeb8a8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4aa305-f5be-48fb-ba06-2a0b049e69d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d0e29d1-903f-43e1-8c7a-7d2577e0978c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5022d3f-8dcf-4bd7-969f-5bbd9724d947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85b947a-9a5a-4605-8b6c-24d9a01aa307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a12196d-1a96-43d7-b9ba-7ae9e87f26e2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd1f1b2-e584-46d6-9342-d0aacb533aa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8563e69-671c-4e26-8e5d-b636b42b22a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce1bb17-f59e-4281-80f3-14e72fe89e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f809349-b947-4667-88d7-ec94aaf377d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ae2a55-3464-4f36-babe-2193b3b22b90",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7757e724-d2f9-460c-b8b9-495d21c44453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab3a03b7-b95e-42e7-a408-9918d0393cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f8f1fd-af5d-4985-b1ce-ae1436ad832d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e251bbc1-74bd-43bf-be3e-721ed95ebbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bd17b1-1fe6-49bd-94f1-8766f8749096",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c2a7ba-5b96-484c-b24e-87dfc683c2f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e14766c3-3c07-41f8-af89-d8a2e4e1486e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50a07b7-d1fd-4777-9374-c2b3b6e41787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e8b955-eb46-4e37-9f97-594fd305d2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0a6bc4-3f46-4b30-a6c6-2d7a6a9b84aa",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c010fa60-b52a-4e37-8e42-f800c070b5da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44bc0556-068f-40b9-90ff-06b9fa167e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96dd12b-2f78-474b-9ad2-f1bc15cc969f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e5182af-7a13-4165-918e-8c88477a1c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e62733-9499-482f-920c-7ff733f71d9b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d07a81-cafb-4a4f-a4ee-1ad58f18fef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa8be70-cbd0-4910-b6ed-7e95d39526d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f892a4f6-d2e4-4bd8-8251-ca97e5d0ea53",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3daf92-cc9e-4b2d-981a-fa12048111f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf69384-7cbd-4eb8-adba-35067a9f89e3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9243d9aa-41ed-4bf7-819d-6f27de96ffa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f55cfaa5-7e39-44b9-94f5-5bd7bfd6613e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2b4785-29ae-4184-949b-c2148f84517b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4f020c-b884-49e8-b465-6d7719ffdc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98bc1929-1068-4c39-9314-68be40ccff6a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b36818-734f-4e66-b486-dfefba9ce1fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80ab3d9a-1376-490e-b57e-bb231e923600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa379cd3-29a7-44dc-bbee-d5b6e2a17fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e525b9e3-1a08-4f42-985e-2da7dc6d9df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425f08b7-eaa8-4f1a-aeb9-1cd382f6f5ce",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4165ce36-f4a7-4b57-892b-6f59ab6cecf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5de3c7e-fd07-4b73-8cd4-ab5b356d79e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bedbec-3a67-4ee8-b677-b961d94c3725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f2f525-cc57-4fbe-be6b-42f09addd8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f6f218-1a96-4d9f-80c7-9ba34c11bdfd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf92505e-bb69-449b-b1a5-b954cfa4fb48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "776a644a-b864-4bad-a664-badb6a3a55a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658c4128-f171-4768-9368-c21207f1eacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50fe37c-9b3e-41eb-b055-6ec273541bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29db18d-4b40-43e5-b8c5-6d144e4b299c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5109cc-5e35-41ba-9a2e-f2256dcfadc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d602928e-4b72-4aa5-bb59-9332a9c1630f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2c83a6-7e5d-40ef-9d1c-da5fc47910d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd258ce5-0273-4139-aaf9-c2e123a79e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d320c95-e162-4d1e-9711-e12d8edeecee",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bf0ce8-6397-49f0-a636-a13db181f070",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "024ed18e-3c60-43a7-9b78-bb66ffa28e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4824e57b-62ad-488d-a3bf-7a30ff5b3a03",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2acad21-d8b2-41c7-9360-58c7152932f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafca6ff-74cc-4a61-ab2f-9ca669e1be4c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e81f7e6-86e7-45a8-9196-ee2657293d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197fc7af-6d3f-4c05-8120-033ec5b2f972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62ba347-bb5c-4546-9658-1764bb6ace3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc312d46-059f-4f3b-b651-55b9ecefffe4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "beaa9c47-a1c3-4029-9b00-74e704f9565f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cb3294f-ffc5-49c5-b208-96e88419d202"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af987f75-82a5-45ad-be12-7c3afbf1640d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "140bc59e-17d4-4b9d-ab39-3860cb2b58d1"
                    }
                  }
                ]
              },
              {
                "id": "a3e84494-ccf7-4765-8f93-04e6c122d873",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f44391bb-aeef-45f9-8c90-0eedf65a75be",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecd5e1b-3026-496d-8800-f351edb9d3a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4c56433e-4624-473a-9ea6-214c92462859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9156c0a4-5ad6-4d0d-892f-142d1d1f9ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b601239a-f243-4442-860b-be27d8728896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d07a43c-6504-46c3-822c-7f0b4e19da1f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732b8a1f-522c-43d3-86d6-2a13c18ec471",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f74b8354-dadc-4147-90be-4d83d052ff06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb87dfb-be43-4a08-b96a-643d9dc05bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cabb808-4640-40c4-9e54-31d54c3765b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02ea2e04-95e6-41b5-96ef-62d0a1e87c44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7ea9c25-a494-4e68-b1a6-55130dfb6beb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83b94086-2c76-4c0e-9704-f74cb83e0409",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8d8eaa8-3963-4da7-bbb5-93d694aa26fe"
                    }
                  }
                ]
              },
              {
                "id": "496f4b50-9b36-4ed2-9439-236b3da9a52d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b06f449b-b4ce-4d5e-a033-363e27bb324a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ecca3f-2c82-438a-9532-3ec4326aa426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "19a2ad1d-aad3-44c3-a9f2-825c1668f22f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68aa09e2-c839-467e-9f51-0b5f5f29d6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17460cc-98d2-4905-bbe9-ec58847f2c1b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "09f9fb5f-08f7-4bce-bd30-6050f3c9b169",
            "name": "Positive Testing",
            "item": [
              {
                "id": "465ee36a-87a2-433e-9f1a-20cc80ce6635",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b7dd3b7-3b9f-45b9-b6f1-9820e1af9f2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "83967cd1-37bc-4191-8f01-53d275aa96fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a63fa71-5e26-483e-9f2b-b7a179d717e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9dea03a2-3810-43b7-88af-1c6310a98574"
                    }
                  }
                ]
              },
              {
                "id": "9cf79839-08c2-404c-9f0c-e948de667e4b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb20b974-f1b8-427e-bb09-b91418a13367",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ac2f44ac-7c97-47d8-8eb9-48dcdc07d387"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39ebf896-e9fa-4866-b23f-bfbe3c3b107d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f5bad4e-078c-49e9-b93c-3de9c416185d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2179fb5-7cd4-4e67-bf76-d46482185b55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c5744904-c662-44ed-b373-f67b27f95e1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc799534-2c23-430a-99a3-167b25c44493",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "78d2d4a7-9283-4011-ab34-c8f4f563d99a"
            }
          }
        ]
      },
      {
        "id": "991d8ccc-82f7-4f05-ae3b-8d589d6fb92d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3b86b6b1-a023-44ba-b1a0-d8a2ca058446",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f872189-cf7e-45aa-b722-b7306116cd6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fcfe0494-38a1-4d3a-9751-5031e0681192",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcc70aa-de80-49a2-afb1-ade01fe867f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "530a2c2b-ea7c-472b-a590-4a6142cad0e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3168d80e-463e-4e5e-8fa6-2f4de52dfcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65b8d216-b981-417e-b387-7afc86563e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b36fe56-b9cd-4710-8b36-f3adacdceec6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f93f67-8514-4339-b0df-bc6a8115d344",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ddee89ea-6817-4ab5-bb32-85e81b5ea3b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ca9cec-a9c0-498a-9a96-25916135dbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8998984a-0116-4f0e-ab4e-3cd6734edf27"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6107933e-4e00-4c08-ad8d-36112d786920",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6bc2ffc-9202-494a-86ac-4a9b81f89fa3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57d91a6e-5432-4427-8128-c29ae429e5bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f76420d4-03cc-41c7-98bb-d2db2e71a1f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8113e6b-29ed-4056-9286-6586f90d0625",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "adc2aa23-6545-4ea7-8570-64070571eeb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0917959c-b713-41ef-8324-e1e1f04f4657",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "005ccd74-957d-44ca-8208-42ef88ef0946"
            }
          }
        ]
      },
      {
        "id": "f002f09f-d20a-4f5a-8ff1-f6cbca61d772",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "697227d6-914e-42fa-bf26-09096cf46d67",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93039888-6af5-4c1e-851c-1fd7e13c3fe5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4733ed57-1f1b-4948-b706-9d1bf47f4d66",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda63538-b77a-40ab-b466-c01238c2f80b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe55c942-3c41-4f1b-bcec-87c785936c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e18aa3-e9b9-4150-8d81-381aeedf4d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb659365-7444-48d2-b6fa-f7ee98f2b034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85d29e4-4a88-4653-aa4a-caa6b890fba6",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d502848f-c5ea-4195-85ac-07253cf0c509",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3abdb4-290f-459e-a680-87b3c3643664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f908e2-0743-4354-b749-4fe27862cf0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96113097-f26a-4ba4-8c05-e4bcbe4e11f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f97c00d5-4997-4f4a-bd3e-c1b61232c82a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0505f4dd-4801-4a28-bbb0-62438a9309f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6da591e-19ac-41e4-b711-1258958da62f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05e4eacd-3c59-4de2-9c3e-74565bd56e82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e86647e-eae3-4f76-9988-acbe34be051b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e8e9bb8b-a039-475d-b7fe-0529a81f8afd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47f067b5-0c83-43d4-98eb-e82ac1ce0fb9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2ead7c1-8c46-4a1e-98f3-02ab7e167189"
            }
          }
        ]
      },
      {
        "id": "a1ebab2d-d739-4e54-bf2c-5e6f8c984b90",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b76a2376-1022-4a24-8992-d07ba57dcd24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c32c72fe-a750-41b6-a647-e28cf55eea90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2042b20-4399-4045-85fd-6e38e021c768",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc6575c-4d34-4dd1-8b88-57cee9dcf8e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67a42174-6d73-44ad-baaa-16dcff93ae03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaee2864-e10d-483e-a495-db872d627e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13829140-f658-418e-97d4-d8089d556d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e36cf2-26b8-4934-bde1-f02c31fba9cf",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b761554f-0f0e-41ac-95a6-47295a3aeb5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "35b16445-726d-453f-9d2d-f1fc1e70c26d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718a4f53-ac12-4540-9a62-2d327853679f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ad2e055-fc39-49f9-bead-4b5324fa0046"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63281225-415a-43aa-90b8-a3960f5742d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfda4c97-a497-4876-b3ed-5d214a1bc567"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1a93e63-f283-48a7-9f35-34f9b75f726f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55878820-a4e7-4f06-8955-b41ffaf881da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bbd402e-7ac7-4670-8649-1886c04b10d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a434cc24-c54a-4a94-832a-9f6ebd312634"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "332462df-1e30-4f6e-833a-70511c3a1cfb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24cdf6c0-549e-4f89-890c-3b1723c1c4ae"
            }
          }
        ]
      },
      {
        "id": "8dc59439-9ecf-4ae6-a13b-e381e2abd3a5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8317fd7-4601-4e44-8263-d0db4011ca15",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eaf39f12-d3c0-43a9-ae33-4cac41615206",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "05bd5bf3-50ad-4908-ba78-3f9a8b952555",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f876339-a5fc-401f-bbb6-a0bffdca29e6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd7d6bce-6710-4036-b684-0659b41fd5b6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 278.64478764478764,
      "responseMin": 11,
      "responseMax": 7422,
      "responseSd": 862.4784599637266,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678063318959,
      "completed": 1678063402921
    },
    "executions": [
      {
        "id": "a85d04ba-38b0-478d-80fd-9d8d6f3a3d47",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "85fe210c-cfc1-40e3-95fb-eb4c4edbc0e0",
          "httpRequestId": "074045f4-ab23-446a-854c-b22aa1394e12"
        },
        "item": {
          "id": "a85d04ba-38b0-478d-80fd-9d8d6f3a3d47",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4a2a2c25-5ab7-4764-be33-96df7b36eea4",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "0af27562-937a-498f-adcf-e663a8c2d5e0",
        "cursor": {
          "ref": "620be77c-f718-4873-af31-7d47a0247702",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0e06dcd7-23e3-4a50-bc84-14fabf9b0817"
        },
        "item": {
          "id": "0af27562-937a-498f-adcf-e663a8c2d5e0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9b14741f-a5ab-499f-a30c-a51fb4c453aa",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "fa9ddfc3-ac8e-469e-a046-359b48a3de11",
        "cursor": {
          "ref": "e1da33fc-aa7f-4985-939d-1c367acc11a6",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "10bafc32-9e0a-4833-868a-76e853deb9d3"
        },
        "item": {
          "id": "fa9ddfc3-ac8e-469e-a046-359b48a3de11",
          "name": "did_json"
        },
        "response": {
          "id": "2582d865-872f-40a9-927a-a1e00b3d6623",
          "status": "OK",
          "code": 200,
          "responseTime": 561,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4d3eee-6cf1-46e7-9bf9-d7bcf3aedefc",
        "cursor": {
          "ref": "4ffd3199-bc45-4475-a28c-423afa339522",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cf56c19e-51fe-4411-8147-34e05514dd1a"
        },
        "item": {
          "id": "fc4d3eee-6cf1-46e7-9bf9-d7bcf3aedefc",
          "name": "did:invalid"
        },
        "response": {
          "id": "c094ec9c-1de9-4a8f-ad6f-f25545a8f431",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1900,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fc4d3eee-6cf1-46e7-9bf9-d7bcf3aedefc",
        "cursor": {
          "ref": "4ffd3199-bc45-4475-a28c-423afa339522",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cf56c19e-51fe-4411-8147-34e05514dd1a"
        },
        "item": {
          "id": "fc4d3eee-6cf1-46e7-9bf9-d7bcf3aedefc",
          "name": "did:invalid"
        },
        "response": {
          "id": "c094ec9c-1de9-4a8f-ad6f-f25545a8f431",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1900,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "023b94ed-a32e-4d27-b43d-3aa711ed687d",
        "cursor": {
          "ref": "c5e00050-8490-42c9-8d52-c5e990358b15",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f5fc0f08-bbe3-49a0-999a-b7962290609f"
        },
        "item": {
          "id": "023b94ed-a32e-4d27-b43d-3aa711ed687d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2e3d26fc-1f43-4301-9bbe-e81e49529b4f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875f1ce9-6ce6-489a-ac99-4af7f0b6e4d8",
        "cursor": {
          "ref": "385d973d-3919-43bb-b4b0-04871981f1d8",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ca653744-5d5d-4fa1-99c4-36808f37974e"
        },
        "item": {
          "id": "875f1ce9-6ce6-489a-ac99-4af7f0b6e4d8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d2509b79-9cc4-440f-8970-9db74a0c7cc8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d294c4c-9405-4b1c-9c75-59d13fba5a33",
        "cursor": {
          "ref": "24fafa5e-ef07-4249-b099-688c863cc849",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4032d826-7839-45b4-94ac-8f73254abc44"
        },
        "item": {
          "id": "2d294c4c-9405-4b1c-9c75-59d13fba5a33",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9e14d427-a48b-4f8c-86e9-371dc1d6f1de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "8b135a28-3845-4e82-9591-cd935b702ee3",
        "cursor": {
          "ref": "742426a4-2fdc-4d35-a98c-b5b06627a771",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "104f86b9-7fc2-4fa4-ab53-952beba768cb"
        },
        "item": {
          "id": "8b135a28-3845-4e82-9591-cd935b702ee3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6089b673-1b5d-44f2-ba3b-54993c9eba14",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8b135a28-3845-4e82-9591-cd935b702ee3",
        "cursor": {
          "ref": "742426a4-2fdc-4d35-a98c-b5b06627a771",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "104f86b9-7fc2-4fa4-ab53-952beba768cb"
        },
        "item": {
          "id": "8b135a28-3845-4e82-9591-cd935b702ee3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6089b673-1b5d-44f2-ba3b-54993c9eba14",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f58dc0f0-4aff-43c2-9f79-2d1b71629c4d",
        "cursor": {
          "ref": "aed9d7fa-5329-48f8-bc51-e1c3a0f4647f",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8691b0a9-cdf8-467a-b96a-9b1fc1118d0f"
        },
        "item": {
          "id": "f58dc0f0-4aff-43c2-9f79-2d1b71629c4d",
          "name": "identifiers"
        },
        "response": {
          "id": "8fe6d997-3db7-4a03-9a22-6207b70f44f9",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7277e462-45be-441f-9c16-133524ff5afb",
        "cursor": {
          "ref": "65df9457-fe82-4355-9030-d211b3b5a269",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "621d22bb-6cc5-4034-be9c-7dcfa42d25bf"
        },
        "item": {
          "id": "7277e462-45be-441f-9c16-133524ff5afb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d469ad67-c96d-4b51-898f-f6b810c33708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7277e462-45be-441f-9c16-133524ff5afb",
        "cursor": {
          "ref": "65df9457-fe82-4355-9030-d211b3b5a269",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "621d22bb-6cc5-4034-be9c-7dcfa42d25bf"
        },
        "item": {
          "id": "7277e462-45be-441f-9c16-133524ff5afb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d469ad67-c96d-4b51-898f-f6b810c33708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7420e2-4efa-49e7-9a41-87d99fa09fbc",
        "cursor": {
          "ref": "9f9fdb22-83ce-44af-91fe-6c688fcdfc9d",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3b28fe82-7773-4bdb-a473-4ee69d8e8dc6"
        },
        "item": {
          "id": "4f7420e2-4efa-49e7-9a41-87d99fa09fbc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a9bcdea9-dc52-4a9a-8bda-562b4fc7dd97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0109c97-5585-4d48-a076-d27c2207d9dc",
        "cursor": {
          "ref": "c2c85bca-d7ff-4371-9cdf-ccffbfd161b4",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c3ee3862-67cd-4940-b7c3-a0fc056f6f31"
        },
        "item": {
          "id": "a0109c97-5585-4d48-a076-d27c2207d9dc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b9482001-2d20-45ce-a846-2adc5d6a88af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94308a8-6def-401f-89b1-7df2463d3134",
        "cursor": {
          "ref": "d11ffa24-3673-4e2d-945e-0a3eb1327f3a",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "da5415e0-8c7d-4fad-bfbd-75c2ec118fd0"
        },
        "item": {
          "id": "c94308a8-6def-401f-89b1-7df2463d3134",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b99f23a4-a12b-478f-82c6-e7877330741f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906814f4-1d5c-4625-b737-e86a79f408b6",
        "cursor": {
          "ref": "8966d2ef-bd8d-4302-ba62-a8f3c32f3e0e",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a3913ef1-8cfb-4936-ac77-0fb89381cc41"
        },
        "item": {
          "id": "906814f4-1d5c-4625-b737-e86a79f408b6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a751e44d-7c16-400c-ab0d-6c75265b131a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45a4e38-0a08-4f5a-88c5-eb1a44b22304",
        "cursor": {
          "ref": "afc1836e-7ad0-43c6-9ffd-91229833474b",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "75e3e6cd-a795-4062-8f8b-44ee4e1d5dbd"
        },
        "item": {
          "id": "c45a4e38-0a08-4f5a-88c5-eb1a44b22304",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d2b0ac7d-24d5-4373-b4bf-330d2e52132c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b37a39-2dc9-4dce-b0a3-76ed51490cee",
        "cursor": {
          "ref": "9259cd4d-7ece-4d36-a578-6be5441d877b",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5b8b5846-2ccb-412f-acdb-602f7efcbd8b"
        },
        "item": {
          "id": "d1b37a39-2dc9-4dce-b0a3-76ed51490cee",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5c7f3125-6c1f-447c-989d-5e302d111204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab294673-e7e6-4847-b54c-f9810e6af663",
        "cursor": {
          "ref": "1aa98909-5127-43b5-9c6d-28b705df3567",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ea889f5d-066c-4f94-90a6-73c4a8e7078d"
        },
        "item": {
          "id": "ab294673-e7e6-4847-b54c-f9810e6af663",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8e767264-1d8f-44ad-88ed-18b095e316c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb96973-0252-492c-8c6c-361171271490",
        "cursor": {
          "ref": "90ac00a1-b8d7-4c4b-8418-5e1d83d5f512",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e1fcc066-ab62-4857-b852-e589ad34a544"
        },
        "item": {
          "id": "aeb96973-0252-492c-8c6c-361171271490",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "414f1d03-9880-412f-8cee-2371f5c816d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ff4f13-1b37-4f52-be84-3b9890b79e16",
        "cursor": {
          "ref": "2e9d84b3-f6a9-4c9c-a01b-ffb43a3fd854",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd924895-200e-4fe0-82a6-3f59b502d227"
        },
        "item": {
          "id": "90ff4f13-1b37-4f52-be84-3b9890b79e16",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8e29d81c-53d5-470d-8969-4944d4cdfb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7690a6d8-452a-4c7c-9b40-812f83561bfe",
        "cursor": {
          "ref": "a39f8d09-db3b-44ee-b51a-62500adf3f42",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "22c2e435-c3d7-47a0-b4de-00100b294b4a"
        },
        "item": {
          "id": "7690a6d8-452a-4c7c-9b40-812f83561bfe",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fb1130c2-85f5-4d84-82d7-8b14ca0480cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff2e64b-78c4-42e7-bed9-019160336d1f",
        "cursor": {
          "ref": "d7d31913-c23a-48fc-b8ab-fb672f43ccdd",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "88da983e-f1ec-48e3-a59c-f7d3a56afb6f"
        },
        "item": {
          "id": "5ff2e64b-78c4-42e7-bed9-019160336d1f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4c2d4327-3889-45e7-97d1-396d676c4560",
          "status": "Created",
          "code": 201,
          "responseTime": 638,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "df3e9b74-7c64-43b9-85cf-dad127994368",
        "cursor": {
          "ref": "39f3e1cf-ba19-4cb9-b008-11bf23e12067",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5978062a-0c5a-4b5e-8e8a-6a41a162aa57"
        },
        "item": {
          "id": "df3e9b74-7c64-43b9-85cf-dad127994368",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a9a68e41-5111-4d70-8bb9-f7ce7f9f85bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0755268-aeaf-4a67-857c-85989f77c9a7",
        "cursor": {
          "ref": "b92dca2b-cc48-446c-b952-8425228c4ada",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "36f848f5-6e06-447f-811a-a34f685f242b"
        },
        "item": {
          "id": "f0755268-aeaf-4a67-857c-85989f77c9a7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6b04f085-9a8d-4b57-9f14-543f75518f97",
          "status": "Created",
          "code": 201,
          "responseTime": 7422,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "65e230f8-8263-4518-9072-ae1685724a23",
        "cursor": {
          "ref": "e8bdb479-a486-4687-b9ba-4d466244acf4",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "55830373-ccf4-4773-b257-13712cf0328a"
        },
        "item": {
          "id": "65e230f8-8263-4518-9072-ae1685724a23",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e61057a6-de8f-448d-9bfc-8174ba50b3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19921da4-1447-4d5d-bf31-dc5a54d03270",
        "cursor": {
          "ref": "d31c91a8-eac9-450b-9373-78f7738d41be",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f8f27a75-390f-44fb-9da7-0254305024c2"
        },
        "item": {
          "id": "19921da4-1447-4d5d-bf31-dc5a54d03270",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5c602a9b-c290-4e2c-bf9a-dc60fc2cb695",
          "status": "Created",
          "code": 201,
          "responseTime": 6484,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "48d20465-6c3e-4c69-bc32-9bce515cdc20",
        "cursor": {
          "ref": "2b1bdc0c-1a9f-4461-a507-810c85725c8b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ff2e264c-dd48-4aee-acab-9a926bdbcd60"
        },
        "item": {
          "id": "48d20465-6c3e-4c69-bc32-9bce515cdc20",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "40c6962e-9d1b-408e-bc28-fa39181a5fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b6a333-2060-49e8-933f-1d303376cb09",
        "cursor": {
          "ref": "66d61b8a-c824-4090-91e2-607f27b3bd64",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6dfb84f0-733b-4f84-8616-365d3a9dba30"
        },
        "item": {
          "id": "a1b6a333-2060-49e8-933f-1d303376cb09",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "833004aa-1ed5-406d-b2ee-9eabfe673358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f842b14-a18f-492e-92e9-5b0f94b3de79",
        "cursor": {
          "ref": "67dd09bd-a79b-4165-915e-697c40e55c68",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "52849795-647b-4bde-b21c-4661944f83c7"
        },
        "item": {
          "id": "5f842b14-a18f-492e-92e9-5b0f94b3de79",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4e6ac673-d25f-4627-a143-d0fdbbb148ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9fe847-d289-4f22-8c16-d58e73aa3592",
        "cursor": {
          "ref": "7c16c336-f189-4079-918d-43aa0c46f29c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "948835c6-de41-4e72-a91c-9719b9119640"
        },
        "item": {
          "id": "6b9fe847-d289-4f22-8c16-d58e73aa3592",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "847a0c21-409c-4616-9fbb-01852aca4a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bf27b0-db72-4bee-9848-0294d987c24b",
        "cursor": {
          "ref": "59632fb0-4535-49cc-bb37-4ed87717fa33",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1aba70d2-7352-495c-913c-980eaa0ae753"
        },
        "item": {
          "id": "c9bf27b0-db72-4bee-9848-0294d987c24b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "603c09aa-ef14-4636-9473-00d954017825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b8df99-c1e8-4af7-8548-c21046264214",
        "cursor": {
          "ref": "ba8ec54c-1096-488f-8f4d-00597f8fea67",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fff9c004-5339-4bdc-8fab-85150d5d87e0"
        },
        "item": {
          "id": "96b8df99-c1e8-4af7-8548-c21046264214",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3308719d-e623-429b-ba68-6cd98150a621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5fd2aa-8274-461f-a234-cfffc90291b3",
        "cursor": {
          "ref": "19040554-e939-4f79-988a-bdca8a13f08b",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "84023dd9-50dc-40bf-b78b-b3f00f435977"
        },
        "item": {
          "id": "ac5fd2aa-8274-461f-a234-cfffc90291b3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5845aee4-1828-4e3c-9780-16a81dcff272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f9bcee-7100-4287-aaf6-77da951f9a13",
        "cursor": {
          "ref": "45c868fb-39c3-4a06-b8e4-cf7545fd88ca",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5d0de735-d9d7-454b-9326-e7ddd543bdea"
        },
        "item": {
          "id": "02f9bcee-7100-4287-aaf6-77da951f9a13",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "84ac4851-99f1-4c45-8545-5fccb37b90a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcff8b5-1764-41e4-b689-e0c906952f76",
        "cursor": {
          "ref": "ddfd75d2-daad-4d90-a9eb-b18da2b9810c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "db627ca4-76d4-4dd8-b8e0-fdc755088a30"
        },
        "item": {
          "id": "8bcff8b5-1764-41e4-b689-e0c906952f76",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8238d400-e80a-4723-88dc-c301fab5f2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88bbf23-7a4e-4cb0-8356-92c0e6ea5df9",
        "cursor": {
          "ref": "4c53c765-d1d8-47eb-8801-40ae907fb213",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "628bff52-fe31-4745-8842-9b2609607854"
        },
        "item": {
          "id": "a88bbf23-7a4e-4cb0-8356-92c0e6ea5df9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e2caa1c0-b492-4d58-90d8-55d0971a57ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652379dd-107f-4d81-b6ad-b653a8708985",
        "cursor": {
          "ref": "9128cbb9-413a-4b5a-8046-86730b8abebf",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2a63bd7a-6dc5-4f5a-818a-94b0929cd318"
        },
        "item": {
          "id": "652379dd-107f-4d81-b6ad-b653a8708985",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1ff9b067-cfb6-4655-80cd-12c26350992d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb3a638-ef94-4a59-9c2a-497cc1c63e9e",
        "cursor": {
          "ref": "19c38452-5996-4acd-a639-9f9b714c56a0",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "29d792ca-907a-4e09-95c8-9b71e4dd54d7"
        },
        "item": {
          "id": "7eb3a638-ef94-4a59-9c2a-497cc1c63e9e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ca010738-5764-4eb9-8e07-3d8a05784a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db0ccff-a57f-4982-9557-f7cf3699c8e6",
        "cursor": {
          "ref": "bfcd646b-b36e-45af-82c8-c6bfa297c456",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b87667ae-cd61-4130-a1d7-1025f7905488"
        },
        "item": {
          "id": "1db0ccff-a57f-4982-9557-f7cf3699c8e6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d9faae37-89ee-4445-bfe7-248dbf0ea3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56057dc-b304-425f-8c71-b862b636cab8",
        "cursor": {
          "ref": "43c1e987-0c98-46e4-8b5f-32716ce4083e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8aca7d8d-f597-47ef-ad78-32d0df4445ad"
        },
        "item": {
          "id": "e56057dc-b304-425f-8c71-b862b636cab8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "975613e4-a833-4337-8c33-45988831be20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fe037e-87bb-4a62-8568-540d965c8955",
        "cursor": {
          "ref": "11bd455a-9940-4bb8-9a27-386f8f514cf7",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "541f06ca-cee9-433b-9f89-72645cc0abe9"
        },
        "item": {
          "id": "d1fe037e-87bb-4a62-8568-540d965c8955",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4f9139de-f286-4736-a13e-c6ae2fa15723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f571240-86f5-4ad5-a846-09ad53ade0b6",
        "cursor": {
          "ref": "d3e4a342-a0cb-409c-a508-144ae1b0686f",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a6740910-e051-4478-9165-455e8f7072a0"
        },
        "item": {
          "id": "1f571240-86f5-4ad5-a846-09ad53ade0b6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e6c18a3c-9742-4233-8331-d11105744899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc4614b-fd47-443f-a3b3-598e9a3a6bb0",
        "cursor": {
          "ref": "bdc03d62-a05c-405d-9c60-8057ac6d43d1",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ecfb9601-6960-4f6c-97ac-eca727b6c2f2"
        },
        "item": {
          "id": "5bc4614b-fd47-443f-a3b3-598e9a3a6bb0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "14bc9a05-c817-4bc3-9fe0-b0e2171d21f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a33c3c-e7bc-4d24-bd7d-20d3a5e4e1e2",
        "cursor": {
          "ref": "a8681656-e206-439e-9063-1ca305c883c5",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "161cb674-1562-49a2-897d-1ba59a75bb74"
        },
        "item": {
          "id": "f1a33c3c-e7bc-4d24-bd7d-20d3a5e4e1e2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b1c74e61-b487-41ef-9081-c180e1709846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26568cef-0b65-4733-a06c-f88fa203b35b",
        "cursor": {
          "ref": "07176b39-33d8-4d03-ad5a-96b617ed0cdb",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ab8b386e-6d27-417e-9d70-4f793299db69"
        },
        "item": {
          "id": "26568cef-0b65-4733-a06c-f88fa203b35b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ca2e33d5-44a5-4955-8d34-e5210004d744",
          "status": "Created",
          "code": 201,
          "responseTime": 2745,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "974636db-75b0-4d3a-a56f-2dca0d70cbfa",
        "cursor": {
          "ref": "67aa03c3-a44b-4c8f-a949-041346100bce",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "59b75293-8088-496a-86cd-f5b85fd35053"
        },
        "item": {
          "id": "974636db-75b0-4d3a-a56f-2dca0d70cbfa",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "878ea17b-60e5-4586-a008-5ca6c81865bb",
          "status": "Created",
          "code": 201,
          "responseTime": 3047,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1527c0a3-2398-4b76-be2e-87cdd1181aba",
        "cursor": {
          "ref": "27aa0a0a-df0a-4bc2-a02c-e78b97e3750d",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "59dd854b-d4db-4b62-9e1b-bd504f50c6b2"
        },
        "item": {
          "id": "1527c0a3-2398-4b76-be2e-87cdd1181aba",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "577cf352-6923-4616-801c-a070d70b5a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c828a8f7-63ca-4e52-a3d3-bdcf74a468db",
        "cursor": {
          "ref": "471f9b6b-23ca-4605-a661-2b40d16ea9e1",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "818204f0-0ada-4653-9174-5fe4c84547ed"
        },
        "item": {
          "id": "c828a8f7-63ca-4e52-a3d3-bdcf74a468db",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4f257fea-6d64-4aa9-93e8-6e0f96065957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86be6fb-1179-4d7b-b2b2-394f2d0019a3",
        "cursor": {
          "ref": "8662d99b-e4b0-4019-8474-3912ca1f929a",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4ec5822e-ab0c-48ce-818f-2a8417f9cf1a"
        },
        "item": {
          "id": "e86be6fb-1179-4d7b-b2b2-394f2d0019a3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e0a3fa11-6160-4b48-a794-32e9847b3338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65b12fc-676e-455c-aa5d-2b3487dda1c8",
        "cursor": {
          "ref": "c8f07c34-a4f5-4de6-b7a3-9bac40ceac1f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9add2e31-8c9a-4e61-9dc5-2d9849fa0ecd"
        },
        "item": {
          "id": "b65b12fc-676e-455c-aa5d-2b3487dda1c8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4c193148-12f0-4b89-bcbb-ec066c070c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db398bf-6448-4cf0-bb9e-3c981f55cf3e",
        "cursor": {
          "ref": "cf289ad6-5c90-46d0-a561-feb85090d3f7",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8b6d26a5-280b-4f5f-a0f7-fa9c68a1e107"
        },
        "item": {
          "id": "0db398bf-6448-4cf0-bb9e-3c981f55cf3e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8a4622ca-0034-4d46-a2cd-ebd29eb14cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb1dd30-96ac-4b6e-9e50-52316ec4a23a",
        "cursor": {
          "ref": "3ea9f2ce-6202-4ad6-93d2-82cea70fec52",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "35b819d1-cb77-4b24-a00f-d1442a37f000"
        },
        "item": {
          "id": "9cb1dd30-96ac-4b6e-9e50-52316ec4a23a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7409cc9f-6d55-4a3b-aca1-06c75b417592",
          "status": "Created",
          "code": 201,
          "responseTime": 2200,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a71675db-c56a-4cea-a9de-b663cd86d828",
        "cursor": {
          "ref": "6f137ec2-2bf7-4ebb-bb4b-4e296a583cbc",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "19094ea0-bae1-4e20-ba9c-75ef3ee36fcb"
        },
        "item": {
          "id": "a71675db-c56a-4cea-a9de-b663cd86d828",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c8206a75-a4c4-4818-84ab-1895be34ef1c",
          "status": "Created",
          "code": 201,
          "responseTime": 2727,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8bd8df92-056c-4e35-a8fd-1496986bb272",
        "cursor": {
          "ref": "59101a7a-f87f-4d42-bb71-d59e855d5f53",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8bb040ac-1cad-4f4e-8612-a8e7ebf72e2a"
        },
        "item": {
          "id": "8bd8df92-056c-4e35-a8fd-1496986bb272",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cb1c1f5e-be88-4d18-b4bc-2855a00842b9",
          "status": "Created",
          "code": 201,
          "responseTime": 2941,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "6e01e507-8b91-46a5-9f7f-ba5b722f584d",
        "cursor": {
          "ref": "34337726-ad3b-450b-a348-bfcaf49e05dd",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8dd64193-a319-4731-9e5d-71cb0f42560c"
        },
        "item": {
          "id": "6e01e507-8b91-46a5-9f7f-ba5b722f584d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "211e079a-5246-4c8d-ae4c-a79c4becb8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ee9ff0-f0e5-46ad-b23f-c4c214c13fbb",
        "cursor": {
          "ref": "2f30f933-c981-4fe8-ab8f-93c939a08a5b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8efad1dc-9d15-45b5-815d-5a527b5f1ea6"
        },
        "item": {
          "id": "c1ee9ff0-f0e5-46ad-b23f-c4c214c13fbb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "01f4bdf2-e7f9-4ae9-8ef2-4002edbbcdba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c02d6bf-f97d-4378-a86e-12067af9e4ef",
        "cursor": {
          "ref": "7cf11c0a-ed9e-47f2-906e-c5fad7c85736",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d54e1b75-af39-42cd-8696-b8bf4efcf86f"
        },
        "item": {
          "id": "1c02d6bf-f97d-4378-a86e-12067af9e4ef",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5af173e3-1771-4974-8f70-8279800b2675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6647c0-cc47-4c23-a1d0-c1ee87174369",
        "cursor": {
          "ref": "71569ba6-69f9-437f-8d02-049f07e1ddee",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8de0ef38-bb07-4e45-85d2-8bc2cdfe7620"
        },
        "item": {
          "id": "5a6647c0-cc47-4c23-a1d0-c1ee87174369",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cae625ce-7c31-4250-9f72-6451c99bfbed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 706,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b88436-da6d-48ae-9fe7-528a1f0811df",
        "cursor": {
          "ref": "2b24c34d-1fd8-4de1-b5e7-ac7ad2330d2c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "05de4f88-5429-4169-b3f3-ba356759dd34"
        },
        "item": {
          "id": "d7b88436-da6d-48ae-9fe7-528a1f0811df",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "de5d3a5c-41e8-41a7-9c92-3f2cc805c9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17127c2c-2b4d-4382-97b8-51f942be0dc6",
        "cursor": {
          "ref": "343e4d84-9809-442e-abd9-4ee234a0438a",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2e1edb68-4cb4-42f1-a6be-c26a3d26e471"
        },
        "item": {
          "id": "17127c2c-2b4d-4382-97b8-51f942be0dc6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c8d2c788-5f07-460d-a034-ebe424ec0eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040976b3-e3e9-43c0-8906-2849d71e7b50",
        "cursor": {
          "ref": "8566b7f0-1541-44a3-90c1-098dd036913f",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "db296a93-b566-442e-921b-b5f39ae6ad9d"
        },
        "item": {
          "id": "040976b3-e3e9-43c0-8906-2849d71e7b50",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a25a3ab3-c226-4ba9-863b-ed3715dd27fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316ac269-6ce0-48f3-9ff3-6018ac46282e",
        "cursor": {
          "ref": "52b6ef4e-2772-4f86-95bd-de5a9001aa7a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b36fe69f-84b8-4d8a-a490-52bd1dc136f6"
        },
        "item": {
          "id": "316ac269-6ce0-48f3-9ff3-6018ac46282e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "326d8d68-4fa7-4d18-ac92-45f87c5c4aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc1d2a0-fcff-4328-9298-649553de99ee",
        "cursor": {
          "ref": "826cbeee-c877-49c5-b502-593ab617ba6d",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cd24e17c-3a60-4179-858f-8178126c3161"
        },
        "item": {
          "id": "bcc1d2a0-fcff-4328-9298-649553de99ee",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f34e3d52-affb-445f-93b8-cdd72ac2f4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6403268-8903-483a-83a2-efbf6eed8ff9",
        "cursor": {
          "ref": "d762bf79-dfb1-4618-8821-abe552077b1f",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4a12482d-60f1-4ac1-b6ad-b8f4f6b07a13"
        },
        "item": {
          "id": "a6403268-8903-483a-83a2-efbf6eed8ff9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "94dc9e18-43ab-47d9-80c8-ceb45e71f549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1df7f76-382e-4880-ac19-6f484b54c121",
        "cursor": {
          "ref": "a2d97504-9e1a-4a21-9026-118b3cf2d7f0",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "70b2a6dc-d4e6-40a4-9b6a-0fa634f2bd99"
        },
        "item": {
          "id": "e1df7f76-382e-4880-ac19-6f484b54c121",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3407b1ae-5c33-451e-9ee4-dba8f2b55bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27a54f7-c8cf-4be0-8630-180fa8c0f8ce",
        "cursor": {
          "ref": "1fca78dc-0ec9-470a-8741-dfeb42320493",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "efe5617c-2d88-4a92-8419-86202b784a8d"
        },
        "item": {
          "id": "e27a54f7-c8cf-4be0-8630-180fa8c0f8ce",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7865589c-39c5-48db-88af-961be87e332a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33f4868-378f-4de9-9c2f-6c6990f4d12d",
        "cursor": {
          "ref": "fd655e50-d9fc-40fb-a156-afcfba1293e3",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9270165b-7f17-4e67-9465-ae754f729528"
        },
        "item": {
          "id": "a33f4868-378f-4de9-9c2f-6c6990f4d12d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "99bb7c06-2de5-4e68-a89b-56eb81a3c0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc227af-985f-4c40-9162-bb0a72fc7e3f",
        "cursor": {
          "ref": "b94ed4ec-cddf-4852-9370-edcfaf4b34bc",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d4293377-0bfe-4cde-83a6-f4e2de3b8a64"
        },
        "item": {
          "id": "8cc227af-985f-4c40-9162-bb0a72fc7e3f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "08e56a25-b1a5-40f8-bb26-31dc8b22093b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8d38a9-5b9e-41af-bad2-49598b586b14",
        "cursor": {
          "ref": "f7914193-93e6-4358-9ffc-9a5e91ed1965",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1ea9a348-08eb-4bd9-837c-c627177df0d5"
        },
        "item": {
          "id": "8f8d38a9-5b9e-41af-bad2-49598b586b14",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "abcac8a4-3c7c-418b-93a3-6ba76bebcac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f60f740-8169-4a08-b678-8168e65fac11",
        "cursor": {
          "ref": "c0ac0869-c6d1-4e9b-bd65-de82f8b1c580",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "dffe97d5-3cdd-4c07-97a9-0d7e91337986"
        },
        "item": {
          "id": "0f60f740-8169-4a08-b678-8168e65fac11",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bd32532b-869f-4700-8cc7-1dc144a1e140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f358a279-4f76-44de-8204-3a8b44df8716",
        "cursor": {
          "ref": "41119ba4-86b1-48e9-8b03-2a2b13d12e69",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d41edbd3-9397-44b4-b60a-5501a4154e1d"
        },
        "item": {
          "id": "f358a279-4f76-44de-8204-3a8b44df8716",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7af77ed3-905f-4878-a72c-3cd93c8aa2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f2f9b3-c1f5-4a0f-88f4-f74c764ea146",
        "cursor": {
          "ref": "f10c5dfd-d1fb-4197-ac1c-ee7b566af262",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "38add09e-46a0-4656-9f5e-974bacd5db10"
        },
        "item": {
          "id": "f1f2f9b3-c1f5-4a0f-88f4-f74c764ea146",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1c44b84f-8329-49cf-911e-a792f92a0cd3",
          "status": "Created",
          "code": 201,
          "responseTime": 2695,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "951b1f8c-66b1-453a-8639-15bd507f5dd6",
        "cursor": {
          "ref": "0421a3d9-c535-4e25-a9bc-0736724e97eb",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7851e1dc-1861-412c-ae9e-c97a120db5e6"
        },
        "item": {
          "id": "951b1f8c-66b1-453a-8639-15bd507f5dd6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ff57c171-a20d-444f-9b7e-f8f294db15d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a69baf1-f08a-47cd-81bf-95e571889140",
        "cursor": {
          "ref": "26a03350-3a05-462f-89da-ebc2277b2ce7",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "18a33e8c-24ac-4f6b-acb7-550c8efe6005"
        },
        "item": {
          "id": "9a69baf1-f08a-47cd-81bf-95e571889140",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c3372191-510d-4f3d-90a6-54a5a281e5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5130a795-de95-43c1-a34a-195b16dd20e9",
        "cursor": {
          "ref": "048a2567-97ca-447a-934e-9cbf1b911429",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "89b9b2c0-2004-4ca7-853f-9ed1edb93fa2"
        },
        "item": {
          "id": "5130a795-de95-43c1-a34a-195b16dd20e9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bf34e702-66fc-46c6-8deb-4a131134b4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea7d6f5-2488-4ba3-ad2c-24d577465720",
        "cursor": {
          "ref": "373bafcd-d9e3-4d93-9ef9-454776dc9b26",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e7d0ae51-0ca2-4d13-a6bf-c48032555aa3"
        },
        "item": {
          "id": "bea7d6f5-2488-4ba3-ad2c-24d577465720",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "787454a3-a03f-4a5b-9788-4f2dc9996f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a12d11a-2b99-40d0-bd05-00e9bcd6f18e",
        "cursor": {
          "ref": "105fff8b-86d5-4a5d-a2ed-9540d17def67",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "06a9ceab-64c8-466e-ac26-5437b13afd5b"
        },
        "item": {
          "id": "6a12d11a-2b99-40d0-bd05-00e9bcd6f18e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6340a2d4-151c-4fb2-96dc-5003a7b0f51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26066304-a788-405a-aebb-45dff38c5457",
        "cursor": {
          "ref": "4bdabc39-c47e-49cf-85e0-6fd28e0e3c73",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d752e0fa-f35e-4b23-a887-528d99b52d71"
        },
        "item": {
          "id": "26066304-a788-405a-aebb-45dff38c5457",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "623351b5-3331-49f9-a87f-3c279c1a8617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bda8a8-8389-4f53-95e2-e93859c77ed1",
        "cursor": {
          "ref": "2456046e-99e8-4cc0-a330-0d79baac912b",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f814f65d-1456-40d2-b7e6-e74ae29e7983"
        },
        "item": {
          "id": "f6bda8a8-8389-4f53-95e2-e93859c77ed1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f7c85a73-ed64-40c0-8722-7e9e17d33309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6a512b-3dd7-476c-bf5d-0756672b3c11",
        "cursor": {
          "ref": "0f77d469-f8db-408c-881c-84032fe1a414",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "184bd1be-4d09-4901-b91e-9a354ad839df"
        },
        "item": {
          "id": "4c6a512b-3dd7-476c-bf5d-0756672b3c11",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ea102bbc-a909-4f9a-ad3e-d870eb367e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d115ad-8284-43f9-b110-529fa2c86515",
        "cursor": {
          "ref": "dd25a9cf-f795-40ca-8d9b-a129873ad22d",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "df1ef6c7-2503-48b4-926b-d98ebb4415ea"
        },
        "item": {
          "id": "d3d115ad-8284-43f9-b110-529fa2c86515",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d182f33e-eeb9-4a17-a946-d0b0299e2857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4c54ce-41bd-4b68-a893-1120f2011cf2",
        "cursor": {
          "ref": "48ebbcb7-97bc-447d-96f9-dd8740b36bc6",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "58429240-aecc-4cb9-a895-578bcd3779d3"
        },
        "item": {
          "id": "4a4c54ce-41bd-4b68-a893-1120f2011cf2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c9ef0ca8-dae1-41e3-a86b-39d88117f83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50ddd2a-8727-4652-90b5-28eb67508976",
        "cursor": {
          "ref": "1cb417be-3d10-42c3-bc39-37b0aae37a57",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "210158c1-0c93-4f94-a8ec-88a44c2410bf"
        },
        "item": {
          "id": "d50ddd2a-8727-4652-90b5-28eb67508976",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5780c66d-9af3-4f0d-a10b-da908f0bc4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76edaf40-49b2-435f-b19d-9382d31674f4",
        "cursor": {
          "ref": "6d3559af-0995-4171-b0db-2b9c0149fc35",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fc8ede2a-13fa-4236-82a5-45e3bfb515c4"
        },
        "item": {
          "id": "76edaf40-49b2-435f-b19d-9382d31674f4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0e260f4e-f6c4-4931-b8e8-5cc236a7191d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6be5d0-705f-4548-a10f-7244ce3eee80",
        "cursor": {
          "ref": "fd8a205b-bf76-4e64-aa31-ec907d1327b7",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1c0a2815-c0d8-483c-8d0f-4e3b2dc1cc77"
        },
        "item": {
          "id": "5a6be5d0-705f-4548-a10f-7244ce3eee80",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b6446cf3-c2ce-4ca8-88f9-3e34e20b8427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd916b97-2491-4189-a63b-05f354f8036f",
        "cursor": {
          "ref": "a653e6bd-43ad-494c-9230-9f56f0467bb9",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "65b7d9a8-207b-45c5-b56a-092f05f8464f"
        },
        "item": {
          "id": "cd916b97-2491-4189-a63b-05f354f8036f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5c9cbdc3-0746-446e-b0f8-4a36b389f8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4517fdfb-0716-41de-8eb3-cde3f82ad3ca",
        "cursor": {
          "ref": "7133052b-9d87-4dc5-89ce-84eca6473c26",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "453a32b0-8352-47a5-b205-284284f087ee"
        },
        "item": {
          "id": "4517fdfb-0716-41de-8eb3-cde3f82ad3ca",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "56cff085-59bb-4d88-ab82-57c6eaf40461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5076d9-00c3-47cc-a220-378eca154298",
        "cursor": {
          "ref": "80c0e074-31c7-4497-b97c-4ed273f02d61",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "56629c6e-a10d-48a4-95ec-34c5d12d4c26"
        },
        "item": {
          "id": "7a5076d9-00c3-47cc-a220-378eca154298",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "00049ae8-44d8-4042-a935-89d7461fe9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7b6b89-84b6-4823-b3a1-bc12f3f23e29",
        "cursor": {
          "ref": "f3f8d09e-afa0-4f0f-aea6-19fc0ec0f8cd",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8459566f-87fe-4d1d-b282-ee4bd38e0097"
        },
        "item": {
          "id": "ef7b6b89-84b6-4823-b3a1-bc12f3f23e29",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f30ca909-5b44-4233-a757-700ebba36979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c726fef-19a5-4661-9e65-d9b7b78b6f7d",
        "cursor": {
          "ref": "e260a402-0e6c-468c-9bf2-65db00213710",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "70cc5270-6519-4491-9bba-16f77ed5f741"
        },
        "item": {
          "id": "5c726fef-19a5-4661-9e65-d9b7b78b6f7d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fb5c2ea1-b5b4-42dc-b036-c2e6c020e5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03063ad3-9d38-4d52-b78d-2d5f22ace064",
        "cursor": {
          "ref": "1033c527-5de5-44fd-b8cf-f496f160ab0b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9b48fd45-6401-46b3-866b-4573ebfecb1a"
        },
        "item": {
          "id": "03063ad3-9d38-4d52-b78d-2d5f22ace064",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4b5ca226-a3d4-4893-b698-2bb3ade1f4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e03b7d-1515-4137-9592-b62b278f3326",
        "cursor": {
          "ref": "8618c779-8d7c-4b9a-993b-9681e8f9497b",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f79680c2-d4e8-4a02-bfe6-48abef2764a7"
        },
        "item": {
          "id": "85e03b7d-1515-4137-9592-b62b278f3326",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a0db55cd-4031-4822-8093-f4dcd72c980e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd46f3e-74bc-486a-802c-8430d9c850db",
        "cursor": {
          "ref": "08f47ba1-d7a8-4628-9e87-42f4c28ff6e5",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "286d9a9f-0d2b-48be-b2dc-bb9e64a88ee0"
        },
        "item": {
          "id": "ddd46f3e-74bc-486a-802c-8430d9c850db",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7169be34-fc5e-4e10-a9f9-372ef07d6096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdef628e-e949-4493-a100-fe6f1cd9af49",
        "cursor": {
          "ref": "37646568-da69-487f-a819-b9225150c8bd",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c51a1f8b-e017-4214-adf6-de1af2227002"
        },
        "item": {
          "id": "bdef628e-e949-4493-a100-fe6f1cd9af49",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9595a415-8d68-4cc2-add2-8322141fd9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3f79ca-6b6f-4c53-b5c1-2574894e4d68",
        "cursor": {
          "ref": "7f8bcb5f-170f-497d-8f7b-f57582ec86d6",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5700235e-1044-48f3-aa70-cb918afc9c63"
        },
        "item": {
          "id": "cd3f79ca-6b6f-4c53-b5c1-2574894e4d68",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1ab4f3b4-4cb0-4bc8-bce8-58257cc7cf1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f48ade8-8842-4824-b979-2938399177cd",
        "cursor": {
          "ref": "97c0c82a-bc0f-4758-be5d-92e69ff62cf9",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6a92ec04-1376-4c79-b960-151dd6320911"
        },
        "item": {
          "id": "7f48ade8-8842-4824-b979-2938399177cd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8bea921a-166f-45c1-9351-2b38aeafabcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18592dd1-eb6f-4bfd-9fbd-2f31e4001bf9",
        "cursor": {
          "ref": "7f8ca161-2d9c-4a15-bd0b-e60f38421d0d",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9c7b2f3b-6ed9-4652-a490-418191c6093a"
        },
        "item": {
          "id": "18592dd1-eb6f-4bfd-9fbd-2f31e4001bf9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1dae9197-2c7e-469f-a591-04a9b8b7da9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc7bf86-9320-4c16-a4ab-9779530a1bae",
        "cursor": {
          "ref": "77f1b1cb-d8a3-4a14-8444-b698b46314c9",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "46460a3d-da5d-4a50-9cf3-d6353471cb38"
        },
        "item": {
          "id": "5fc7bf86-9320-4c16-a4ab-9779530a1bae",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "990a7330-d8f9-48c7-bdba-47fe2fc291c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67318fe4-94e1-48ce-9549-bde25d4420a7",
        "cursor": {
          "ref": "2a2f905b-5c2a-434d-9e68-a77437bdf951",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dba8c1c3-4ff0-465d-b0bb-274b518a7f33"
        },
        "item": {
          "id": "67318fe4-94e1-48ce-9549-bde25d4420a7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5cc1ca83-216b-4b48-ac7b-838922184ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2d2be6-1e81-46da-be25-f124f2a7524d",
        "cursor": {
          "ref": "d9d7d6a2-6452-4dc3-937c-130f0bc66878",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7734f772-2a24-46d3-ad72-c6b12660081a"
        },
        "item": {
          "id": "aa2d2be6-1e81-46da-be25-f124f2a7524d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "be1e1a20-6d1b-43a7-b6ca-db6fa6cf95a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027395e7-3532-491d-b3bf-f5c0f4bcdc63",
        "cursor": {
          "ref": "24b2690f-ff42-4c63-833c-972a69818371",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bdde7018-7b2c-4395-9096-d387724b7afc"
        },
        "item": {
          "id": "027395e7-3532-491d-b3bf-f5c0f4bcdc63",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a50be4e0-de74-4642-a453-8f61b18500e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6554aa8-1bbe-4f89-bc91-ba705a57943b",
        "cursor": {
          "ref": "93c71dfd-3bea-463c-aa86-4680e84952f4",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7ec95076-af3a-4b87-b0a5-1fa382fa207e"
        },
        "item": {
          "id": "c6554aa8-1bbe-4f89-bc91-ba705a57943b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "337f842e-692d-48b7-b8b7-184467997eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20caeb7-8219-4386-8808-2d6497f251a5",
        "cursor": {
          "ref": "4f76f798-4574-4d83-a402-310f506a899e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fbc54e58-ee05-4054-857b-e24df70e85c4"
        },
        "item": {
          "id": "f20caeb7-8219-4386-8808-2d6497f251a5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "34975121-c3f4-4270-96aa-faf5d66af9e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "767d43b1-0df5-478f-b0b3-a5494de38e8b",
        "cursor": {
          "ref": "3889f5f7-f4a5-43ec-b4c0-9f6a1d8c31f3",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4c063a2c-32db-4463-848e-e0f5d8705a64"
        },
        "item": {
          "id": "767d43b1-0df5-478f-b0b3-a5494de38e8b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "79ca8137-2024-44e6-a324-841290ea6f17",
          "status": "Created",
          "code": 201,
          "responseTime": 3418,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e259d4e9-6efe-4b0c-ac02-f2fe00bd9a0c",
        "cursor": {
          "ref": "cec49a31-7382-4556-ad8e-03c5bd4f84fd",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "48d89dd5-2641-470d-95cf-566f34066e52"
        },
        "item": {
          "id": "e259d4e9-6efe-4b0c-ac02-f2fe00bd9a0c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4d0b4021-0181-4cf1-aa4c-8240c4399116",
          "status": "Created",
          "code": 201,
          "responseTime": 3458,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed259f7-5256-41e7-ad11-3700dd421e8e",
        "cursor": {
          "ref": "0ef83975-41c2-4f4a-a57c-3d11c2cd9eb3",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "28507f10-c784-4e74-94a5-58256e727c75"
        },
        "item": {
          "id": "1ed259f7-5256-41e7-ad11-3700dd421e8e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "64b8d4c6-c9b3-401c-8e58-30f84e45ba18",
          "status": "Created",
          "code": 201,
          "responseTime": 2953,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "053c78ff-dd0e-4f85-8890-4f340f999015",
        "cursor": {
          "ref": "85840c12-b347-46e3-9fb3-1a0a24e4ecb4",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a85dc4b4-6c31-4152-9889-94ff1c2a172e"
        },
        "item": {
          "id": "053c78ff-dd0e-4f85-8890-4f340f999015",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fa0923ac-a5c1-4a93-a399-09534350d6f9",
          "status": "Created",
          "code": 201,
          "responseTime": 2324,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ff792f-9162-4faf-aee4-50eca995948c",
        "cursor": {
          "ref": "cb48be07-2cfc-4058-a264-a6290f7a5662",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "00396ed8-ecef-4fab-bb7b-574908b71ca7"
        },
        "item": {
          "id": "55ff792f-9162-4faf-aee4-50eca995948c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "38bc836a-e6b2-4c34-9366-8316e3352f42",
          "status": "Created",
          "code": 201,
          "responseTime": 2589,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-06T00:42:58Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-06T00:42:58Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "4311a08a-35b1-4eb4-a063-888c6449df04",
        "cursor": {
          "ref": "11524c2e-d845-4a9f-8d1a-adf94810e2c9",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "729fd8e5-dcd5-4985-b370-ee5cf09855b3"
        },
        "item": {
          "id": "4311a08a-35b1-4eb4-a063-888c6449df04",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "049ebc69-176f-494c-a8b5-73426de97b0d",
          "status": "Created",
          "code": 201,
          "responseTime": 2435,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "c132aac7-684a-4238-8a8b-d09534b2aac3",
        "cursor": {
          "ref": "972b8288-1b03-433f-8dcf-6bccf207c5b7",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fb69dd14-9d95-4f90-91f3-7c4f85108c15"
        },
        "item": {
          "id": "c132aac7-684a-4238-8a8b-d09534b2aac3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eba55266-17c9-402f-9c09-5d9d71412908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c132aac7-684a-4238-8a8b-d09534b2aac3",
        "cursor": {
          "ref": "972b8288-1b03-433f-8dcf-6bccf207c5b7",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fb69dd14-9d95-4f90-91f3-7c4f85108c15"
        },
        "item": {
          "id": "c132aac7-684a-4238-8a8b-d09534b2aac3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eba55266-17c9-402f-9c09-5d9d71412908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5642f40a-7bba-40c5-a961-c7cc036fb783",
        "cursor": {
          "ref": "d1de6990-ff1a-4658-8a35-1bb08e830838",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e0b2b65b-7bd7-414a-8531-7e59b1de1199"
        },
        "item": {
          "id": "5642f40a-7bba-40c5-a961-c7cc036fb783",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "62047f90-e0a7-4159-a088-767ff0d60e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e25482-605f-4ba3-851f-a45b8946d369",
        "cursor": {
          "ref": "73019c9e-0372-48cd-8183-531eaee82f7e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c9767645-6306-47c7-b32b-ad1de770f258"
        },
        "item": {
          "id": "25e25482-605f-4ba3-851f-a45b8946d369",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9132f286-1260-4553-a494-d1db6db85c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639caec4-b79c-4d98-97a1-7c621f383af9",
        "cursor": {
          "ref": "84cbcf5c-111f-499e-808f-abcf591ee1b6",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f7e65910-fc45-40e3-957d-6a19ab320cf7"
        },
        "item": {
          "id": "639caec4-b79c-4d98-97a1-7c621f383af9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "caabcfbc-ce25-4122-8b67-7235a5bc3005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa1c891-8696-4908-b50a-63570daf0345",
        "cursor": {
          "ref": "3829cfa4-408f-4aad-b1f5-30f679ceeb32",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2568f4e8-3fbb-4d37-b8f8-e5727f94689b"
        },
        "item": {
          "id": "0aa1c891-8696-4908-b50a-63570daf0345",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "08d9929d-8b50-4281-bafc-dabd6cc811b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b351bc-6573-49ff-99db-e6ad1254d7f7",
        "cursor": {
          "ref": "9049c2bd-da6e-4741-8a7f-673a10f967af",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6c320292-621d-43e2-a1b1-b11d4cb3df29"
        },
        "item": {
          "id": "90b351bc-6573-49ff-99db-e6ad1254d7f7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "74bd6620-07c8-44f1-b597-db6e82ff8377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f76480a-7b30-4b67-a7cf-5655b667c37a",
        "cursor": {
          "ref": "2715ea2f-d9db-4a7a-ba66-1a98ce109b95",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8f13bdaf-10a8-48b4-bf8c-4bb422502163"
        },
        "item": {
          "id": "4f76480a-7b30-4b67-a7cf-5655b667c37a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "88d11b19-48d5-4d24-80d1-97c71f60ede7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4950694f-a1b8-4179-a3fc-7efcc19f99df",
        "cursor": {
          "ref": "875b5c63-c76c-4c94-82a5-197d9e314361",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6f0f64ce-c75a-44b1-9998-77a4f4347545"
        },
        "item": {
          "id": "4950694f-a1b8-4179-a3fc-7efcc19f99df",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "21cfae2a-a6c4-4d98-9e13-ed9bb97005d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7ea0bd-081b-4b43-ae97-609a17d373a6",
        "cursor": {
          "ref": "e803d697-8689-43f9-9d26-5d59cee96053",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f31a5b2c-507d-4c7a-8483-0092b49f15d8"
        },
        "item": {
          "id": "ac7ea0bd-081b-4b43-ae97-609a17d373a6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "914054f5-b5e0-467f-98aa-a09b760a0b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7903e5-c0ad-4cc3-a64a-c40c7b8ac8d0",
        "cursor": {
          "ref": "ef506e05-99c5-4b0f-8465-b6de34e12ff4",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3d2f20ba-3ef3-4802-8864-7055650adc32"
        },
        "item": {
          "id": "8f7903e5-c0ad-4cc3-a64a-c40c7b8ac8d0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8da10a35-e8bd-443f-bec4-516960174e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cb1ec9-1958-444e-8e1f-c777086d0b41",
        "cursor": {
          "ref": "8316d928-5fbd-47cf-9ac8-97f50e9d0891",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2bc222bf-f5e0-469c-ad38-7692c48034a1"
        },
        "item": {
          "id": "d7cb1ec9-1958-444e-8e1f-c777086d0b41",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5abe1183-b6ae-4115-9ad8-16df6225236e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f55c9d-00a6-486f-b584-824af0a38f20",
        "cursor": {
          "ref": "68d1ed9d-83a3-4266-ab0d-994bc9dc91b3",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6f64cd68-e9e3-460f-b310-a4084b218fbd"
        },
        "item": {
          "id": "52f55c9d-00a6-486f-b584-824af0a38f20",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dd42a97a-b470-481a-b605-682b2d5ac28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e62fe4-403c-404c-bc01-35b22db3ef31",
        "cursor": {
          "ref": "51d0c786-6cf1-48e6-aaf9-debdd3a6683c",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3da98c8f-b97b-4f98-9d70-e45852b8080b"
        },
        "item": {
          "id": "04e62fe4-403c-404c-bc01-35b22db3ef31",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3058e42a-f6c8-4f0f-9226-b324cc3e1191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af1e1aa-f4ef-4bcf-ba87-bd56d8d5b260",
        "cursor": {
          "ref": "d9593587-cd8b-4b09-b517-57f406a2ba40",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "84adb49e-cc56-43ca-95ba-1a74edcb263e"
        },
        "item": {
          "id": "2af1e1aa-f4ef-4bcf-ba87-bd56d8d5b260",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2c5313c5-a0eb-4b0b-8e2e-8a8d620df100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4abf310-2b8a-4caf-8c77-0237126e77fc",
        "cursor": {
          "ref": "441abc66-779c-4754-a13f-8321f3939098",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e71dd8dd-85d0-402e-b280-9450b7a07ccf"
        },
        "item": {
          "id": "d4abf310-2b8a-4caf-8c77-0237126e77fc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c100b44c-a3e8-4960-99f7-36bc86362679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d24cf9-d2c0-4ace-b84d-3d8223bd409b",
        "cursor": {
          "ref": "38bd2ecf-baca-4ab2-8757-c96554016e98",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "66f4ad2c-3314-45d5-a86f-9b195b2dc472"
        },
        "item": {
          "id": "33d24cf9-d2c0-4ace-b84d-3d8223bd409b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1ef15de8-d750-4d67-ac0b-016755df11ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c79d0de-aa4c-4ca0-aedb-83d6f6c715b6",
        "cursor": {
          "ref": "f22845cf-baf8-4736-97c6-b0a22844a274",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "74a0718c-fae9-4e66-97f5-e9031782d29a"
        },
        "item": {
          "id": "1c79d0de-aa4c-4ca0-aedb-83d6f6c715b6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ae4da6e2-33b7-4958-ba29-7e97826e6cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182d9f92-9690-4d28-bf2a-979341915d1f",
        "cursor": {
          "ref": "102521e4-b1f3-4849-883a-36d1185a12ee",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "220b8ce7-7f98-44dd-9135-0fe675acfed0"
        },
        "item": {
          "id": "182d9f92-9690-4d28-bf2a-979341915d1f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "12e0c492-ab0e-4e79-9b5d-cebe0f7a662e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66c0e57-28a1-4612-a960-644152f6d7bb",
        "cursor": {
          "ref": "5b3f21d3-2418-4cb2-96a2-6a4e8052085c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7459b6b1-27c5-4dfa-913d-60b35d9b947c"
        },
        "item": {
          "id": "a66c0e57-28a1-4612-a960-644152f6d7bb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f8f5360e-a931-486f-8228-54f745614417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0016f00-e1e5-412f-8f32-cc19d54dfbf5",
        "cursor": {
          "ref": "936b3399-2f65-43ec-bd78-e9a5d66bd8c4",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "30dee1cb-d214-4ff8-bd65-92c0526a3078"
        },
        "item": {
          "id": "a0016f00-e1e5-412f-8f32-cc19d54dfbf5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9b0c0d8c-bf6d-4d7d-b440-c8a5778c1ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f173a3e-f84d-448d-b507-1546504f13a2",
        "cursor": {
          "ref": "681ec8f4-7a0b-4f99-b8f1-dca452397ef9",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0bac2715-2ffa-4e60-b68e-778fb5796936"
        },
        "item": {
          "id": "7f173a3e-f84d-448d-b507-1546504f13a2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bd1a2097-b0e5-410b-a09e-ade9ce17da58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56db7414-739f-4133-8e50-203391c6cab7",
        "cursor": {
          "ref": "4439bae5-9815-48c7-bcb8-9dd64302c4ab",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e461c505-c84b-4ab1-8033-a22476ce7173"
        },
        "item": {
          "id": "56db7414-739f-4133-8e50-203391c6cab7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8f159861-38b7-46d4-b104-a3e8ea81ecec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50a4f17-e088-4cdb-8fbb-0b21e7ac826d",
        "cursor": {
          "ref": "7b65470f-9d65-4547-b46c-487909cded17",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c3a45ff8-31b6-4c51-b887-c61c431bc7d4"
        },
        "item": {
          "id": "b50a4f17-e088-4cdb-8fbb-0b21e7ac826d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "02c8ff3b-6250-4333-9d90-8cd9b293fab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a818fbdc-1f25-4062-b106-15bee322d859",
        "cursor": {
          "ref": "785e2735-abc3-4610-a19f-542fee76a90b",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "03eba877-fbe9-4051-90d9-f27ad900a785"
        },
        "item": {
          "id": "a818fbdc-1f25-4062-b106-15bee322d859",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6d3272b0-e811-4a7c-b4c5-0411259d392b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1a6397-c313-4220-a99c-b1d1162404c9",
        "cursor": {
          "ref": "cb1475a4-07c6-4ef3-a03f-a7c6af6fae90",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "29f6a93b-6859-48e0-94c6-3f3c58ea0e05"
        },
        "item": {
          "id": "fd1a6397-c313-4220-a99c-b1d1162404c9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cba52958-4709-4ee4-84cf-49f17dbb77c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7930cbff-da5f-4015-94d6-7c024208bd4a",
        "cursor": {
          "ref": "3abf6db9-8295-43ba-a09f-47bc921fcb35",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5fac5ed9-5c86-457c-8f84-0ec347a64d96"
        },
        "item": {
          "id": "7930cbff-da5f-4015-94d6-7c024208bd4a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "488a149f-da3e-4e66-9fe5-d9e11e16ee29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bcd362-84eb-483d-907a-564edb7cefb4",
        "cursor": {
          "ref": "45ed396f-b243-429a-90cd-d18ccb9e26dd",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c6430429-25a3-4c12-8b2f-a4aeeb57da39"
        },
        "item": {
          "id": "c6bcd362-84eb-483d-907a-564edb7cefb4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c1065938-21e4-4fd5-a606-200128db12c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e1b0e8-90eb-4fed-9d43-60810081436e",
        "cursor": {
          "ref": "b3942a70-05e2-45dc-944d-501a40071a1c",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7c974f84-e6de-46b4-98a5-706c18371f33"
        },
        "item": {
          "id": "39e1b0e8-90eb-4fed-9d43-60810081436e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "caf3e6e1-8a8e-449c-b665-8453802dcd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f158d4-0d3e-41a5-a076-b8579a8beea9",
        "cursor": {
          "ref": "0e42a39a-d6df-4fdc-aac6-8691be569b5b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "02b9794a-d325-4891-a42c-9be442f42d96"
        },
        "item": {
          "id": "b2f158d4-0d3e-41a5-a076-b8579a8beea9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ecef5db4-1bd5-4915-b999-66a9f8b536cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d768629c-2a9e-4959-81d8-af25fd4c8eb2",
        "cursor": {
          "ref": "21c2b18c-2764-493d-bab5-6dfc69d73ce3",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5930eddf-0e8f-4db4-a4a3-b4b27f223762"
        },
        "item": {
          "id": "d768629c-2a9e-4959-81d8-af25fd4c8eb2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "46757471-e894-4c73-8b28-172b326f71a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1faf1d-a260-4040-b5bc-8f672553e7e8",
        "cursor": {
          "ref": "837fab00-a945-4737-8ec5-a2e28e56921b",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bb182390-286b-4941-afe4-0f52ba828f45"
        },
        "item": {
          "id": "8f1faf1d-a260-4040-b5bc-8f672553e7e8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "07a8dcd9-0254-4ae7-a172-7bc282a9dee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b03018-0514-4f15-b358-3569897e0b1f",
        "cursor": {
          "ref": "3b12baf2-65a0-4610-bf7d-25413b98d790",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c897f291-7505-4bff-b626-896e988cd4a7"
        },
        "item": {
          "id": "18b03018-0514-4f15-b358-3569897e0b1f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ddecf3e9-2b91-4d72-9039-caae1d68a2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b840199b-05a1-4840-b2a1-46f88ee593f1",
        "cursor": {
          "ref": "c561c7d6-0553-4002-bba9-155d917258f2",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "68522f6c-4c20-453b-849a-479df030018f"
        },
        "item": {
          "id": "b840199b-05a1-4840-b2a1-46f88ee593f1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e9392e37-3414-4d0f-bc62-80f06b26a8cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "4e4c2707-c170-454b-b826-07f22133860f",
        "cursor": {
          "ref": "4f2dcf84-7126-41aa-9cde-7e6b58017df3",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c2dfce26-8fb9-49a1-a517-f3cc29415b6f"
        },
        "item": {
          "id": "4e4c2707-c170-454b-b826-07f22133860f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "56077f7c-5bd7-4d2c-a686-3ae7a0960a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "7b29b967-1481-412e-93fa-a8067fd22287",
        "cursor": {
          "ref": "b7e7a5de-d8d6-41c4-ad41-f20f494fd5a8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "de6d5f87-78ae-4e24-be5a-765aef58e402"
        },
        "item": {
          "id": "7b29b967-1481-412e-93fa-a8067fd22287",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "16fc54f2-b51b-43d1-a1d0-a0b4a9e88dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b29b967-1481-412e-93fa-a8067fd22287",
        "cursor": {
          "ref": "b7e7a5de-d8d6-41c4-ad41-f20f494fd5a8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "de6d5f87-78ae-4e24-be5a-765aef58e402"
        },
        "item": {
          "id": "7b29b967-1481-412e-93fa-a8067fd22287",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "16fc54f2-b51b-43d1-a1d0-a0b4a9e88dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d13580-d70e-4f7e-a45a-78e53b38ae91",
        "cursor": {
          "ref": "5ff344a5-c7ed-44e0-985d-f9a159935341",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "08ee608d-8348-4481-b546-13a00d912b7f"
        },
        "item": {
          "id": "90d13580-d70e-4f7e-a45a-78e53b38ae91",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "75411b3b-4f1b-4ccd-95ad-2dde401f23a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8f2b39-016b-4531-8cb0-d0d908ad361a",
        "cursor": {
          "ref": "52568e1f-dfe5-4b29-a2db-2aa9606dffb2",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bf554079-2292-4311-b933-bdfe93597bf1"
        },
        "item": {
          "id": "ca8f2b39-016b-4531-8cb0-d0d908ad361a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "74435f8f-23c2-45e6-808c-3682c2f1a203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e73ec44-b12e-43b8-98b4-27870214c7e0",
        "cursor": {
          "ref": "cb03ff52-7723-4818-bb56-048e810c784f",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "67d02067-0002-4d8c-a742-ade47c3db525"
        },
        "item": {
          "id": "3e73ec44-b12e-43b8-98b4-27870214c7e0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "16b594dd-6f09-4ae7-bcbf-2ec7615ebd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9bd671-064b-4bc2-8354-bb1c34273fdc",
        "cursor": {
          "ref": "023f3fd5-b521-4efb-a438-b071a9780fb7",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ce800ca0-da66-4075-9c95-237df3aebca1"
        },
        "item": {
          "id": "9f9bd671-064b-4bc2-8354-bb1c34273fdc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "07e9c56e-a970-4272-8be6-a84e6fb09c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4352ccf-d60c-4787-a3eb-f4a8feb2c799",
        "cursor": {
          "ref": "5a34f39c-1468-4208-8652-3b18695a53ed",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6cbdaccb-55de-4a68-8603-40777c7e1a32"
        },
        "item": {
          "id": "e4352ccf-d60c-4787-a3eb-f4a8feb2c799",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9cc94b9c-2a4f-42dc-af3d-aa28355d0281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bbf094-7aea-4000-bacc-7af766442f8d",
        "cursor": {
          "ref": "d89a6ced-2ff0-4a17-8ee7-83b76352e55b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "49d805fc-f551-42f2-a704-0439ab49606a"
        },
        "item": {
          "id": "b3bbf094-7aea-4000-bacc-7af766442f8d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "307616e4-30c0-4e7a-9eaa-c633a11de2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cffa29-e4bb-40a3-a866-d3746c9bb6f9",
        "cursor": {
          "ref": "b068976d-7aac-41a0-a4c2-861a1b386794",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "31044d05-004c-4cd4-8f31-1b4de1a100b8"
        },
        "item": {
          "id": "87cffa29-e4bb-40a3-a866-d3746c9bb6f9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "003c1225-2380-4935-b51d-fd9dc1508470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e470421-188e-43ac-a561-cb335087be60",
        "cursor": {
          "ref": "683d1f47-a607-43bb-96cb-11e5c2f5a904",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cd63f2af-413a-4d90-bcbd-60fe0a278655"
        },
        "item": {
          "id": "4e470421-188e-43ac-a561-cb335087be60",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fc94686f-291e-43c1-8175-9648442d969a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315d3485-d6a8-47ed-a218-77005528b0f0",
        "cursor": {
          "ref": "9be4490c-ebcb-471e-90d9-468e2d1c658c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e77ce44e-fb0a-4a95-8fce-707f2ea0e840"
        },
        "item": {
          "id": "315d3485-d6a8-47ed-a218-77005528b0f0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "016a8b7d-2463-4350-bca2-be6fbb7ca6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66654963-dff0-4a96-9c9d-4725be060bab",
        "cursor": {
          "ref": "b8462d0f-320e-46bb-ae94-5258353b7543",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b0c72814-df5e-4fe8-b8c0-9ee05aa76e45"
        },
        "item": {
          "id": "66654963-dff0-4a96-9c9d-4725be060bab",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fdd940ef-2337-40b7-8f9b-9069e15327ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7a7cdb-aa95-4831-99ad-2183c570f09a",
        "cursor": {
          "ref": "c9df6b5c-742d-4b9e-ad94-1ebde8db9ed6",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "553961ea-f1b5-4706-873e-ae66506dc8bd"
        },
        "item": {
          "id": "3e7a7cdb-aa95-4831-99ad-2183c570f09a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "10df3b31-1466-4563-9aa6-2b6ffb3319f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce0cc1d-9570-4d9f-bdd2-1c9d92794252",
        "cursor": {
          "ref": "ec051ba4-3375-44a1-bfc0-baa1e3ae82a0",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "aa855d9f-458e-4fc8-b4da-79a22fa3ab0f"
        },
        "item": {
          "id": "3ce0cc1d-9570-4d9f-bdd2-1c9d92794252",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2c861861-c34f-4251-ac82-550b00ed1ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b462174b-6afe-4ed0-8f65-0422c5050680",
        "cursor": {
          "ref": "89da968c-effd-4e0d-889e-40f568240735",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2aa1a31f-bc95-4abd-9960-1909765aa0b4"
        },
        "item": {
          "id": "b462174b-6afe-4ed0-8f65-0422c5050680",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "953f034d-6b1e-4325-8425-f46559102031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a91758-0655-4902-bccc-15ac12668aa3",
        "cursor": {
          "ref": "445ba17f-b0e3-4b9a-83f2-660ca743f29f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "30d938f7-b743-4b62-a88b-14d9c8c4bb32"
        },
        "item": {
          "id": "25a91758-0655-4902-bccc-15ac12668aa3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0e42ff1c-e9d3-48f3-8c2c-71855791d8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337b95d2-a814-4a16-a75a-14661a4f7486",
        "cursor": {
          "ref": "34b2fa29-b093-4998-b08a-59c88c53b71e",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fdfaadd0-c742-408c-8138-1ab519833b33"
        },
        "item": {
          "id": "337b95d2-a814-4a16-a75a-14661a4f7486",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dd1a0a24-f6c5-4a75-b656-dd3eda71f8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6100c8f-5a95-48da-9485-05e24706f451",
        "cursor": {
          "ref": "a7f2442c-6e0a-4fda-b8bb-190f68b13dbe",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6cd73dab-3b2c-423e-a210-7b67502ead34"
        },
        "item": {
          "id": "d6100c8f-5a95-48da-9485-05e24706f451",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "363ca529-41ef-4b0c-bdb0-11a18296859e",
          "status": "OK",
          "code": 200,
          "responseTime": 632,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "098828b3-7559-453d-b62d-4d13ed3bfab0",
        "cursor": {
          "ref": "9c16c319-42c7-4da2-a2be-be494619e946",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5ac0f115-bcfd-41cc-b909-2b69f1a7b72e"
        },
        "item": {
          "id": "098828b3-7559-453d-b62d-4d13ed3bfab0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6a90223b-e8c5-4076-a299-83fb27082ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb86dc0b-d7bb-40ad-8054-827af18be013",
        "cursor": {
          "ref": "4e0d23db-d13d-44ed-9e82-ccf2ec03bb9e",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b72e5383-e9b3-49ea-93a8-422e2404cfa9"
        },
        "item": {
          "id": "cb86dc0b-d7bb-40ad-8054-827af18be013",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b7aa9878-de9c-4438-9898-fcf531d938fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217cc264-0cd3-419b-9e5c-f0a2073b50b7",
        "cursor": {
          "ref": "73368dc1-3299-46f3-96ba-c5be9e1befce",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "798e72c6-7722-42ff-ae9f-b612719caaca"
        },
        "item": {
          "id": "217cc264-0cd3-419b-9e5c-f0a2073b50b7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5d771c30-d371-4d5c-92f7-6e5e777f33d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a434d76-02b1-4e11-be6a-84ae31b6d1ef",
        "cursor": {
          "ref": "2db02f8b-2954-45b1-88fe-6f1d08597c31",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9e679354-dc89-48f6-b6d4-2df7161d3143"
        },
        "item": {
          "id": "4a434d76-02b1-4e11-be6a-84ae31b6d1ef",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5a7acb3c-c46a-4123-8642-8662bbc5e245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ab22fa-66b1-4487-9861-6ead806fadde",
        "cursor": {
          "ref": "f2a7658e-5e10-4c16-8327-137f0ad7d75c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cc0f3f94-3784-4f68-8b35-4f65871c2cfc"
        },
        "item": {
          "id": "78ab22fa-66b1-4487-9861-6ead806fadde",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8d33d7f3-917b-4485-86d6-5876af7be590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af383c34-689d-41f8-8060-e678ba1aef09",
        "cursor": {
          "ref": "3618072a-c82e-4763-ab14-28df1bafa300",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "dc49828a-a6d0-4408-b8ef-4fd76a4ff5f3"
        },
        "item": {
          "id": "af383c34-689d-41f8-8060-e678ba1aef09",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c2c4aad2-3671-4631-8250-66ffc3929052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d9e1af-9967-4b56-80ac-779968f3f0db",
        "cursor": {
          "ref": "f3c2ad25-a65f-4835-8f83-ed63899bd2e9",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ca48b86e-9df4-468d-8fb7-4e97937ffe5c"
        },
        "item": {
          "id": "73d9e1af-9967-4b56-80ac-779968f3f0db",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0dfb00e7-4c1d-4058-8027-6862d127e437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ea7b70-1d58-4db2-94f9-646f34344423",
        "cursor": {
          "ref": "b8373b1d-5241-435b-917a-675c4f751ff0",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dbcfa40f-6972-447c-a427-af0bb73b7fec"
        },
        "item": {
          "id": "40ea7b70-1d58-4db2-94f9-646f34344423",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "10dd9b35-5b15-4527-9e39-7b6291a3683b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cb775d-93bf-44fd-9eb8-f775428a6386",
        "cursor": {
          "ref": "77f40a55-2cd5-43fe-92de-766a50f360f7",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a6f97fe9-5cd8-4059-8416-7bfaa12a3180"
        },
        "item": {
          "id": "64cb775d-93bf-44fd-9eb8-f775428a6386",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "19c2fd08-cc6f-4872-9302-5930b9dcbfc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f6f2a6-9249-4ee0-9e73-1f1d7994a12a",
        "cursor": {
          "ref": "a7e2ad76-4225-48e2-85b9-964182c46dbe",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8c07d6bf-48eb-41f5-a5f7-dd4ba13909bc"
        },
        "item": {
          "id": "e7f6f2a6-9249-4ee0-9e73-1f1d7994a12a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f1a46f79-ca8f-4031-8d8b-9752a1f492d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def7da61-fb91-42a8-b4c7-017566b9450d",
        "cursor": {
          "ref": "753947dc-7269-43a5-8fbb-c6746671cff9",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f91c7498-fdbb-471a-9acd-89b8494c1226"
        },
        "item": {
          "id": "def7da61-fb91-42a8-b4c7-017566b9450d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "291b1b9b-6b08-4ae7-b1a7-c37299481a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5b33ae-4a8a-4ab4-8aec-abaaeca0e4f9",
        "cursor": {
          "ref": "baf3d34b-abfc-422b-a15f-5007ab54ef62",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7a16d08b-046a-4d16-b45e-7ff33fc868a1"
        },
        "item": {
          "id": "6f5b33ae-4a8a-4ab4-8aec-abaaeca0e4f9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "099d2fc4-b403-473e-9a5b-ff8a1d817b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385921ce-85cd-4d8d-b9dc-e3f4d663ca95",
        "cursor": {
          "ref": "a6c8b121-4fc0-4de8-a9cd-c82aed45deab",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bfc65eea-e1a5-4543-b023-6d10fed162cf"
        },
        "item": {
          "id": "385921ce-85cd-4d8d-b9dc-e3f4d663ca95",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e6f450a4-92c0-4ccf-9bb5-d5275dd09bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd660e3-b34b-4735-8fba-b24c66f3913c",
        "cursor": {
          "ref": "b90ce64f-97e6-4389-822e-9db14eec489b",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "05f1290e-58a2-4270-9123-95ebeba0aafe"
        },
        "item": {
          "id": "cfd660e3-b34b-4735-8fba-b24c66f3913c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4bc465ae-278c-45b8-ae5e-0aaa815e5757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec52794d-2eb9-46e1-a0e4-acd1bc6cec69",
        "cursor": {
          "ref": "7050f344-e0fc-44cb-a9c3-2677bb895bab",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7433f372-910f-4b42-9158-6f4ff4c265b7"
        },
        "item": {
          "id": "ec52794d-2eb9-46e1-a0e4-acd1bc6cec69",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "039b6f9b-c307-4e4d-a444-0ded452357dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06421979-a771-42ad-96e2-ba762e81ce53",
        "cursor": {
          "ref": "531018dc-77ac-4cc2-9c4d-76b8981faf90",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1b1b8571-5bce-41c6-bf5b-0b3a51f20560"
        },
        "item": {
          "id": "06421979-a771-42ad-96e2-ba762e81ce53",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a71d87c0-bfc4-45e5-b5d6-781c5f04248a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9271023-3815-4548-896a-d8ebe10b3084",
        "cursor": {
          "ref": "0b95a77c-70db-4c4e-a4e0-3964c5d00eb8",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7e834793-8bd2-4656-ada6-f1c6734bc5cc"
        },
        "item": {
          "id": "a9271023-3815-4548-896a-d8ebe10b3084",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7bb1b758-5735-4632-b776-c7c56471216a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f555e5b2-fb7d-4638-b428-2f3d359549f2",
        "cursor": {
          "ref": "2096f228-08e8-45fb-bff4-405686da815b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f983f696-2abe-4738-966f-601b7d6d6b5a"
        },
        "item": {
          "id": "f555e5b2-fb7d-4638-b428-2f3d359549f2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "33cbdedd-e757-44e7-b36e-704ab336d50a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23edc38c-2e9b-4210-905b-86abebafd99b",
        "cursor": {
          "ref": "575d7b95-116d-40af-b27f-18af2498aa84",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3d1ffcb3-d5dd-43f9-8055-2a79b9018791"
        },
        "item": {
          "id": "23edc38c-2e9b-4210-905b-86abebafd99b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "651ef7f2-5a7d-4ac6-957d-b09cb4fb0f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b25001a-61f7-40e4-b2cc-c2f246aaa5e2",
        "cursor": {
          "ref": "d3528afe-ad45-4325-aa66-b9d18ae6f0f4",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "632ea206-3583-48b7-8fbb-aec117834f5f"
        },
        "item": {
          "id": "6b25001a-61f7-40e4-b2cc-c2f246aaa5e2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7a4178cc-6fc8-4007-8d76-ce931866b82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa93c2f-4b4f-4616-b251-6f52b8b7e6c7",
        "cursor": {
          "ref": "d8bf386d-1b7f-421a-909e-50db459be8ef",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b460a653-67ff-46c4-8fb3-1a30c3fff320"
        },
        "item": {
          "id": "baa93c2f-4b4f-4616-b251-6f52b8b7e6c7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ec456a50-973f-4af7-af77-ae9a59e944be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883884eb-2ab8-49e7-aac0-1944e46c6994",
        "cursor": {
          "ref": "42c07526-3d37-4ded-9e8a-586cc3f7cb6a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6aa09e32-785c-442f-9fe1-4902c445c62e"
        },
        "item": {
          "id": "883884eb-2ab8-49e7-aac0-1944e46c6994",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ea9759f2-91e6-4017-8864-057ed0a29d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b042a9-6b0a-47c3-9683-167ae83d70d6",
        "cursor": {
          "ref": "fe7661fc-3ba6-4739-8007-fbd0076c0fb9",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cebe6031-8399-4907-a0e1-a2d00e455a8d"
        },
        "item": {
          "id": "46b042a9-6b0a-47c3-9683-167ae83d70d6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b1459cc8-b1f6-4a36-b733-d8c3dacb9c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fc563a-df07-470b-9ce2-5117bfddec7b",
        "cursor": {
          "ref": "33c7923f-6658-4886-a598-a58344922203",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7960b416-035f-451b-aa9b-4d5c4592913d"
        },
        "item": {
          "id": "00fc563a-df07-470b-9ce2-5117bfddec7b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "aadfcf01-f7a3-4be7-b3ab-1b1eb0f234c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fdbf7f-1384-4abf-a5f9-74651445e103",
        "cursor": {
          "ref": "9b2efd3d-53c8-4b67-8491-57e95f50eac3",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "58af84c5-6b89-4a90-8b2c-507dbcbb46c4"
        },
        "item": {
          "id": "c4fdbf7f-1384-4abf-a5f9-74651445e103",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7b00fa53-30e7-460e-a454-bc9f56c81e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea40af9b-914a-40bf-b791-85c0158ee030",
        "cursor": {
          "ref": "271dd5ca-f7c7-4943-9700-f793288ff42b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1ce5ee96-18a9-4067-a9aa-ebf35d4e8dd6"
        },
        "item": {
          "id": "ea40af9b-914a-40bf-b791-85c0158ee030",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bee63f67-7d07-4406-ab73-938bf442182c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f80542d-9347-4927-b6f3-2da48cce79a4",
        "cursor": {
          "ref": "b630d6fd-aa03-4ce8-a1b5-110397539b8f",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8566a4b4-4275-47b7-9ebf-c3513bf26d3d"
        },
        "item": {
          "id": "7f80542d-9347-4927-b6f3-2da48cce79a4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "234e2608-fffb-4de5-a5ff-fee6fb713534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f176649-33f2-4d5c-bac7-bc47965fb3ff",
        "cursor": {
          "ref": "b0a7f25d-f047-4152-8688-bc6e554ced40",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "56f022b8-f836-48ca-aede-e241aad5df69"
        },
        "item": {
          "id": "8f176649-33f2-4d5c-bac7-bc47965fb3ff",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e826fc88-1b5b-4c7c-a4ca-22bced053723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48bc441-c6f0-4dff-902b-faa6b6537b41",
        "cursor": {
          "ref": "fab1e758-3be4-4787-bbc4-2be2d74b248d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d41de99d-ec92-4217-bf53-d6d53b23481e"
        },
        "item": {
          "id": "a48bc441-c6f0-4dff-902b-faa6b6537b41",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dd293312-d728-4bca-bb66-9b04aca84040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70e358c-6cd6-485e-baa8-fdabe376ce23",
        "cursor": {
          "ref": "4738fcb1-1ac5-4f89-b058-7f52b0f4ed2f",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "40501ca9-3a40-4d6f-a3e7-9d80bda23c55"
        },
        "item": {
          "id": "e70e358c-6cd6-485e-baa8-fdabe376ce23",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "866d894b-cb22-4d4c-a8e0-c3ab9bc0689f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370c00b9-4b54-4d94-ae7b-6299b9203eec",
        "cursor": {
          "ref": "b7c85982-75e5-47ba-a339-d5c9a4c5bac1",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fb2cbd3c-c413-4edc-bde2-009cd52e061a"
        },
        "item": {
          "id": "370c00b9-4b54-4d94-ae7b-6299b9203eec",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b3a34883-d362-4cbf-ac09-4d23517f9b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6f57ad-552d-4f2e-adfc-7a0cc6f25f22",
        "cursor": {
          "ref": "a49071eb-ec16-4433-bec3-d46288fae5fb",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5bd6f544-21a3-4e8e-a0b5-4501df283fec"
        },
        "item": {
          "id": "4b6f57ad-552d-4f2e-adfc-7a0cc6f25f22",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "80a1d0c0-54f1-4924-b7bb-60d5d9b396f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb69927d-83ef-4b64-9bed-fab403747735",
        "cursor": {
          "ref": "04548dac-990c-4278-84a1-79f0ede4f70f",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8c1cb244-e841-4062-9fb9-5c9b1b36ad4c"
        },
        "item": {
          "id": "bb69927d-83ef-4b64-9bed-fab403747735",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4ff21f8b-edbd-4136-9f42-6ba84b2c0a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33173f72-18ac-4446-8144-97f1815c41da",
        "cursor": {
          "ref": "e3e7ed30-0794-4d42-bf14-562fdcbac6b2",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f0945895-d9f7-4bdf-87ff-17336ac61b0d"
        },
        "item": {
          "id": "33173f72-18ac-4446-8144-97f1815c41da",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "68778005-7cf2-4104-ad81-3669dd5f12ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718cc5b4-2d46-4815-8c14-fa5bc9c0bd60",
        "cursor": {
          "ref": "3a7a2f37-1b83-45f6-8763-b09fd6bde2a0",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "544c4104-0277-4e42-a2fd-fbee61246bbe"
        },
        "item": {
          "id": "718cc5b4-2d46-4815-8c14-fa5bc9c0bd60",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0746669d-463c-4dcb-a3f0-ea2d7e0f014b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bddc91bf-18ea-4bbe-8d8e-474ac6b821de",
        "cursor": {
          "ref": "6bc941a7-14fa-46d8-b5f8-2c0b28d04909",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "305800c8-a306-44e0-93f7-6efe8f8c68f8"
        },
        "item": {
          "id": "bddc91bf-18ea-4bbe-8d8e-474ac6b821de",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f033ea48-bf1c-463b-ad4f-d61e17785e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27fe897-41e1-41b5-91f1-67cdcd37c3a8",
        "cursor": {
          "ref": "f06f8c34-af2c-4278-a5df-c97a7237df99",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3cacc285-69ec-4958-a433-fe44feb2525f"
        },
        "item": {
          "id": "c27fe897-41e1-41b5-91f1-67cdcd37c3a8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1cebed5c-7f93-4337-b3eb-e3ed71ff54dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09fa343-a4d8-4af8-9ba2-db971f70b3ed",
        "cursor": {
          "ref": "f8858281-efa1-4e72-8779-859deda58de5",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7e79e8b1-e012-42c7-8c2e-aa0ef60b161b"
        },
        "item": {
          "id": "b09fa343-a4d8-4af8-9ba2-db971f70b3ed",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "61241e33-f5a3-404a-a199-e40a08b81a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e07ff43-1c42-4674-a7b5-ee8debedc7e7",
        "cursor": {
          "ref": "90c736f1-d54b-42d5-83f7-d430db26520e",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a2a7d281-e684-4bd5-8e7e-c4f97895538a"
        },
        "item": {
          "id": "1e07ff43-1c42-4674-a7b5-ee8debedc7e7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "97e6c7ae-d8d6-4ff7-86fb-1eaa5651c21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801ad51c-b657-4b60-a5da-ccff2c62dbb4",
        "cursor": {
          "ref": "629a089b-97c2-4450-8d26-8c01268174c6",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f5e1b8f2-7b66-4b1a-a910-0d7fda51430e"
        },
        "item": {
          "id": "801ad51c-b657-4b60-a5da-ccff2c62dbb4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ca9928be-4f85-4f62-a4de-01f2b62e51e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f491dc95-7277-420b-bc48-506532f9f4be",
        "cursor": {
          "ref": "ecedbb9c-75c2-430a-ade3-b130535326c1",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "208395de-d89d-4575-b109-f9220941ae77"
        },
        "item": {
          "id": "f491dc95-7277-420b-bc48-506532f9f4be",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2b46db9e-0f6f-4b6d-9c24-e64c8d4ef125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0af4506-a6f0-4af0-94b9-d98adb4ab74d",
        "cursor": {
          "ref": "8d8ec1b9-22c0-4d4a-bf80-a11919aa7aa5",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c2be90b6-7b0c-46ad-ad7f-701ca12acca7"
        },
        "item": {
          "id": "d0af4506-a6f0-4af0-94b9-d98adb4ab74d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "77656a19-b43d-4140-a5ba-d2f57e10e833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3daa2047-c35f-41a6-9bb5-15aa75466d1d",
        "cursor": {
          "ref": "f46cc5ea-71a7-445c-94a3-efc0c8143a80",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2fd5b7b2-9457-48db-b01d-2843459e4a68"
        },
        "item": {
          "id": "3daa2047-c35f-41a6-9bb5-15aa75466d1d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b5daeb6e-fbd7-464d-84ff-fba5329abeb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71447ef5-80ba-40dc-b4bf-00a0f57fbe86",
        "cursor": {
          "ref": "83193a95-6f4d-43dd-affb-1ef94cca207c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a5abb289-dc40-4ae4-8f94-229b6653a238"
        },
        "item": {
          "id": "71447ef5-80ba-40dc-b4bf-00a0f57fbe86",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cec59908-882a-4990-b7ab-2b9a1a7aa773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c5782d-a25b-4a43-8579-a181fcb3b989",
        "cursor": {
          "ref": "836f4328-d71d-40e6-ab8a-7630d88f0414",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0e9aa90f-5a9e-4586-b609-a8d71a1e1d78"
        },
        "item": {
          "id": "a6c5782d-a25b-4a43-8579-a181fcb3b989",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "436cf9ae-2358-4777-9794-c97991a1b996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596713bf-b9d7-49a1-82b8-d3ed4edf55a3",
        "cursor": {
          "ref": "98a4b485-caca-4162-932c-1a94a74c2d47",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "88544366-8792-4388-a4b7-e48456154115"
        },
        "item": {
          "id": "596713bf-b9d7-49a1-82b8-d3ed4edf55a3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4621cf4a-da67-4c65-8a4d-db5b09adc37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0f20b2-335e-4c3b-8a20-2d1a9697b1b1",
        "cursor": {
          "ref": "f5bf9641-2207-441f-91ac-f89f9be9b07c",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0cc1c4a9-945d-4b7f-8d8d-0d834ae61246"
        },
        "item": {
          "id": "ee0f20b2-335e-4c3b-8a20-2d1a9697b1b1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9415cde0-63bf-4c93-9466-189dc22b28aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247ec164-2e8d-4cc7-81ad-fb2085c083c0",
        "cursor": {
          "ref": "5c17cf92-bc15-4342-b6d1-bbb33ed023df",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "00fe9f94-5682-462b-b8a5-151842b123c2"
        },
        "item": {
          "id": "247ec164-2e8d-4cc7-81ad-fb2085c083c0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e73c50f2-0d4b-44ca-82b5-78e4d00ffeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4896fe-24d2-481e-a119-510fa960cc6c",
        "cursor": {
          "ref": "85da2758-2d0e-4d53-b5d2-16cb54d326ff",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "63898078-7d4e-43dc-bebd-9f56a84c4861"
        },
        "item": {
          "id": "fe4896fe-24d2-481e-a119-510fa960cc6c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "42626d11-78af-4509-b702-be91371b62bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d59066c-115a-4c60-9310-3e29626ab615",
        "cursor": {
          "ref": "74b5f64a-a186-41b9-b9d7-df9725dbf915",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7786bd63-1df8-4d68-9048-a5dc3e259856"
        },
        "item": {
          "id": "0d59066c-115a-4c60-9310-3e29626ab615",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0e49d543-6236-460f-bf91-facf7d956d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a069869-5dd5-4fe8-b980-420149f6943b",
        "cursor": {
          "ref": "c4b40492-a6fd-4cb2-97a1-1699c58ccc88",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c2a96389-5ac5-4c6c-b5af-068f6e9a7ffe"
        },
        "item": {
          "id": "6a069869-5dd5-4fe8-b980-420149f6943b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e5e77b3d-8d61-422b-bd2c-3135d38a7a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68206680-5d79-411e-8c91-f389b91e10dc",
        "cursor": {
          "ref": "58b1027b-97a6-4790-a149-b7a3bd851ef3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5d734c07-70af-4e3b-8d47-fa256daceccd"
        },
        "item": {
          "id": "68206680-5d79-411e-8c91-f389b91e10dc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "541eaa18-113b-4090-a0fb-b4993b3627d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cff783-80ee-45b5-9c8d-43547a9280d2",
        "cursor": {
          "ref": "52bd4f21-208c-486b-9773-006e0ed216a4",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a3266800-84ec-4d6a-a859-0260996f2755"
        },
        "item": {
          "id": "66cff783-80ee-45b5-9c8d-43547a9280d2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a3986e09-70aa-4feb-af5f-85510b932568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ba52e2-3564-423d-a140-27ab96f50be8",
        "cursor": {
          "ref": "42a2eb93-219c-47bd-b045-380cb9662242",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9dcb752e-7f78-4cc8-836d-67d54776b9fc"
        },
        "item": {
          "id": "d3ba52e2-3564-423d-a140-27ab96f50be8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "858165f4-793f-4f4b-8d74-bf887dd2486b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bba87f-489d-45be-81a7-6f78c45a8d48",
        "cursor": {
          "ref": "3d88129d-faae-4327-adf9-a6f021190e4c",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "57762479-10bc-487a-9fa5-8abae53433a0"
        },
        "item": {
          "id": "48bba87f-489d-45be-81a7-6f78c45a8d48",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "874d93d5-46e1-4845-bfe1-adee7c5ac6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bf8489-cfbe-4e43-9436-ab7a49736a39",
        "cursor": {
          "ref": "c0dba4d7-8678-415e-9bfd-3297ec8c8bc4",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "60c9355c-3368-46f9-8e5d-8eb730f06ced"
        },
        "item": {
          "id": "e0bf8489-cfbe-4e43-9436-ab7a49736a39",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b243999e-6730-4f3d-a294-8a5e9f137536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896afb7b-cc9e-4f9a-977b-5bcc60a632e2",
        "cursor": {
          "ref": "0c62c7aa-c7c3-44e9-97c3-d3befce69f20",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c30e3d54-00a6-4662-8455-668a5186e9dc"
        },
        "item": {
          "id": "896afb7b-cc9e-4f9a-977b-5bcc60a632e2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e441cea6-9b3e-4193-a04b-345c905ad537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf62e08-e194-4b64-abfb-ec7c7536037e",
        "cursor": {
          "ref": "15ba67aa-b4bd-4575-8114-9eb4be148f55",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ad75701d-b581-4019-96e3-ed20b5daad3c"
        },
        "item": {
          "id": "dbf62e08-e194-4b64-abfb-ec7c7536037e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "028984d6-f168-4c1d-b570-0770bafb052c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c30ece6-5753-4738-907e-efa58da3744f",
        "cursor": {
          "ref": "6ead8aa7-f507-4329-8a14-91a07f3e09b8",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8309316c-97b7-40e0-8093-ecb4a3b14843"
        },
        "item": {
          "id": "7c30ece6-5753-4738-907e-efa58da3744f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "280ffb1e-2020-400f-af1b-f8c9a65eaacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d721651-b07a-4282-8853-a53d8789a064",
        "cursor": {
          "ref": "69c55bff-8b82-4724-b600-357ff73d45a4",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3430218d-e6f8-4d54-b4ea-1f455a45f21d"
        },
        "item": {
          "id": "2d721651-b07a-4282-8853-a53d8789a064",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6111270c-a897-4571-b84f-c31ecf4e6117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f3e601-3ef5-4e63-a3cf-0aea229ade72",
        "cursor": {
          "ref": "5dfb4f19-b9e7-4c4e-ac6e-07c75b3adb17",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "12cbe947-8fed-41c5-a4a3-746705df34c5"
        },
        "item": {
          "id": "73f3e601-3ef5-4e63-a3cf-0aea229ade72",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a7dcaeb9-f70b-4416-905d-27e5bbe10a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d52f40-40e1-4c9a-ba12-8af29b984175",
        "cursor": {
          "ref": "780b4e16-0e3f-4866-8aa7-d06dfea4968e",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "768652ee-7a41-40b1-af43-31b440e21ee2"
        },
        "item": {
          "id": "27d52f40-40e1-4c9a-ba12-8af29b984175",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b67071be-1845-44b6-b46a-890e88a20e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007e53a2-4a6d-4339-87f5-9b6b48b07c41",
        "cursor": {
          "ref": "bb2b6220-e6e2-4a26-b3a2-8de8af7cc189",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dda9cbd1-3e53-40c4-b88b-64f0bb7f4c87"
        },
        "item": {
          "id": "007e53a2-4a6d-4339-87f5-9b6b48b07c41",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7b2303fe-43ff-4749-ae28-66488be8698a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd55efea-f09d-425c-a928-e582e39f898b",
        "cursor": {
          "ref": "dfa8ed44-dc16-4210-a7f4-8ae5197aa8b6",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cb2c0f6f-dd90-4e49-9e07-3b20106c5898"
        },
        "item": {
          "id": "fd55efea-f09d-425c-a928-e582e39f898b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c1c8e0ca-a6a9-47e8-9acc-e64cd97091e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b9e6f1-29be-4ea6-85ff-bfe4ce943809",
        "cursor": {
          "ref": "31aaf5c6-9255-47e0-b9a5-d0e8d7643da6",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "89544fa2-cb21-4c87-90c5-971f537cd81d"
        },
        "item": {
          "id": "43b9e6f1-29be-4ea6-85ff-bfe4ce943809",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9e180991-cc34-44fc-aa0a-91130d4cd548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04afde7-fa04-45e7-ad11-206630db7470",
        "cursor": {
          "ref": "27d8489d-cef2-4d18-b184-e1c80911d1c1",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "aec0b4be-adeb-4274-be5c-2338023df910"
        },
        "item": {
          "id": "b04afde7-fa04-45e7-ad11-206630db7470",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3dec9ae0-2b92-4848-8cea-dcd3aee342c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5b2716-b8de-46d2-bb2d-d933f621e4bf",
        "cursor": {
          "ref": "2d6cab18-975b-48ad-a736-c9bd9f07383f",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d27c4dda-8a1e-492c-b419-8b25d8fa0d2c"
        },
        "item": {
          "id": "cd5b2716-b8de-46d2-bb2d-d933f621e4bf",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "de94b0e9-6544-41b8-baf8-eaa6ca5859b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e328e2de-820f-492b-ba45-b179fddeb8a8",
        "cursor": {
          "ref": "12de8135-f958-4bf3-85f6-add34fa97f76",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1b0cb81d-7000-4a74-9d53-f69500ae97f1"
        },
        "item": {
          "id": "e328e2de-820f-492b-ba45-b179fddeb8a8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c0ceda84-1df8-473e-ac5b-fdd1a561840a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a12196d-1a96-43d7-b9ba-7ae9e87f26e2",
        "cursor": {
          "ref": "438f92c2-90a1-4619-924d-436e3256473e",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5345fbe3-694b-47ed-95d8-61473dec710f"
        },
        "item": {
          "id": "5a12196d-1a96-43d7-b9ba-7ae9e87f26e2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d5d3951b-8357-4a65-bfe4-94d4bbbf0396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ae2a55-3464-4f36-babe-2193b3b22b90",
        "cursor": {
          "ref": "a37836f4-9dd3-480d-b312-8c82464cd377",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4cdfa6b3-4d7c-406c-90a6-9fe9f5060d9f"
        },
        "item": {
          "id": "03ae2a55-3464-4f36-babe-2193b3b22b90",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6e6799b3-3884-42a4-ac48-04a4c16de180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bd17b1-1fe6-49bd-94f1-8766f8749096",
        "cursor": {
          "ref": "4e915458-7db7-47d8-8098-806949f3db88",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "18100af7-e699-415e-ae8e-6bf0ef877e2f"
        },
        "item": {
          "id": "a9bd17b1-1fe6-49bd-94f1-8766f8749096",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3a9c0c6a-5483-4149-879b-6c17f41ee253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0a6bc4-3f46-4b30-a6c6-2d7a6a9b84aa",
        "cursor": {
          "ref": "0374f379-9b8b-4ffb-9e12-6c7da4c95364",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "84b5ecf0-0834-4689-9562-fafa7d2c6523"
        },
        "item": {
          "id": "8c0a6bc4-3f46-4b30-a6c6-2d7a6a9b84aa",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c77dd790-9a72-414c-8f62-4a4571c48513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e62733-9499-482f-920c-7ff733f71d9b",
        "cursor": {
          "ref": "8f1d7b62-716f-4aef-b1e6-0ce49d219e4f",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a285e55f-5d63-4c39-9380-09e601ce3752"
        },
        "item": {
          "id": "91e62733-9499-482f-920c-7ff733f71d9b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5e30f876-f557-4af3-88c7-1478a2e14f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf69384-7cbd-4eb8-adba-35067a9f89e3",
        "cursor": {
          "ref": "8ba3cfe4-1e6c-413a-92fe-ddc9ade694e7",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b3cc6233-6d16-4e96-82c6-36ea5c6775a1"
        },
        "item": {
          "id": "1bf69384-7cbd-4eb8-adba-35067a9f89e3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8cb9c7bb-5628-48bf-ba69-4df57ff741e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98bc1929-1068-4c39-9314-68be40ccff6a",
        "cursor": {
          "ref": "93d4f227-7fb9-40be-834e-0936b9954313",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "31735e32-b15e-40ad-8518-80099b317e78"
        },
        "item": {
          "id": "98bc1929-1068-4c39-9314-68be40ccff6a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b1bdbab2-ffa4-4808-bca3-6575afbc55dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425f08b7-eaa8-4f1a-aeb9-1cd382f6f5ce",
        "cursor": {
          "ref": "573c8aa0-6c59-4595-9ea9-a36f0da6ade0",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "69573c63-0c88-471f-8509-8d0f0212e06d"
        },
        "item": {
          "id": "425f08b7-eaa8-4f1a-aeb9-1cd382f6f5ce",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7972cf70-8dbf-4aaf-b56d-75b14daa70ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f6f218-1a96-4d9f-80c7-9ba34c11bdfd",
        "cursor": {
          "ref": "e706e7ff-b66a-4869-8465-9ca7bd91a468",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ca7e8f3a-6332-4b31-8a7a-47b9e6734178"
        },
        "item": {
          "id": "30f6f218-1a96-4d9f-80c7-9ba34c11bdfd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "09c0992c-6496-4066-99de-6383f640e1aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29db18d-4b40-43e5-b8c5-6d144e4b299c",
        "cursor": {
          "ref": "cb6cca3c-37db-4363-99be-ea09d491a088",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1e1e959d-3dec-4cc0-ba3b-b99d606269dc"
        },
        "item": {
          "id": "e29db18d-4b40-43e5-b8c5-6d144e4b299c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4b53a9b0-01c6-4497-a9ae-aec899db16a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d320c95-e162-4d1e-9711-e12d8edeecee",
        "cursor": {
          "ref": "859ec34d-103b-44df-b1bc-38bd4d1d9e32",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d74e17a3-733f-470c-85b4-4b56f8dffe5c"
        },
        "item": {
          "id": "3d320c95-e162-4d1e-9711-e12d8edeecee",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1007d6cc-19da-4079-9d89-f47de7d0a401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafca6ff-74cc-4a61-ab2f-9ca669e1be4c",
        "cursor": {
          "ref": "4126f409-1b52-44ea-8d88-40d947fdc38e",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4458ca15-bd33-4102-a572-c9724872da1c"
        },
        "item": {
          "id": "dafca6ff-74cc-4a61-ab2f-9ca669e1be4c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "57e73eaa-fc8f-4428-820f-26e5b0f1f63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44391bb-aeef-45f9-8c90-0eedf65a75be",
        "cursor": {
          "ref": "18023ffe-afad-45b2-82c9-e4b98f50e870",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1ec10468-6e6d-4fdd-8fb9-c4146ac7f5e8"
        },
        "item": {
          "id": "f44391bb-aeef-45f9-8c90-0eedf65a75be",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f8ec16e6-2708-4b7b-b0c4-e5385491e87f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2d07a43c-6504-46c3-822c-7f0b4e19da1f",
        "cursor": {
          "ref": "06f73706-0fe9-43dd-96a5-009ad0029971",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8a582a05-163d-4470-ac0e-a5342c03a762"
        },
        "item": {
          "id": "2d07a43c-6504-46c3-822c-7f0b4e19da1f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b08ec14a-6c20-4d36-8014-3fc479eb60ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b06f449b-b4ce-4d5e-a033-363e27bb324a",
        "cursor": {
          "ref": "4a5b1ce1-466c-4b37-91d6-a630edbd8c22",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "da62547e-b094-4438-93fd-b58e01e4b6eb"
        },
        "item": {
          "id": "b06f449b-b4ce-4d5e-a033-363e27bb324a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4f8b27c5-3d88-4e91-8dbf-f855cdee76e2",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "465ee36a-87a2-433e-9f1a-20cc80ce6635",
        "cursor": {
          "ref": "8e206218-7ea4-4d66-ac94-97f7c0eb51ca",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "350ee09e-e256-4e40-a771-e779b25b1435"
        },
        "item": {
          "id": "465ee36a-87a2-433e-9f1a-20cc80ce6635",
          "name": "credentials_verify"
        },
        "response": {
          "id": "40563bd8-df89-4a98-852d-ea0edcfca82f",
          "status": "OK",
          "code": 200,
          "responseTime": 1825,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf79839-08c2-404c-9f0c-e948de667e4b",
        "cursor": {
          "ref": "9cbf48cf-28b9-4148-b0cd-b5c3e2c744dd",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "60fec33f-1e19-484a-a641-6e3b0018fb0d"
        },
        "item": {
          "id": "9cf79839-08c2-404c-9f0c-e948de667e4b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6c76f6e5-3296-439f-ac62-8c6a2d799f8b",
          "status": "OK",
          "code": 200,
          "responseTime": 2362,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfe0494-38a1-4d3a-9751-5031e0681192",
        "cursor": {
          "ref": "33d66973-3e99-4565-88da-171bc6b475fc",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "84db28e7-8363-4990-883a-24c82fef1c7f"
        },
        "item": {
          "id": "fcfe0494-38a1-4d3a-9751-5031e0681192",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "873edf5f-d571-4212-8b21-063ff6bd8345",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "fcfe0494-38a1-4d3a-9751-5031e0681192",
        "cursor": {
          "ref": "33d66973-3e99-4565-88da-171bc6b475fc",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "84db28e7-8363-4990-883a-24c82fef1c7f"
        },
        "item": {
          "id": "fcfe0494-38a1-4d3a-9751-5031e0681192",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "873edf5f-d571-4212-8b21-063ff6bd8345",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "fcfe0494-38a1-4d3a-9751-5031e0681192",
        "cursor": {
          "ref": "33d66973-3e99-4565-88da-171bc6b475fc",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "84db28e7-8363-4990-883a-24c82fef1c7f"
        },
        "item": {
          "id": "fcfe0494-38a1-4d3a-9751-5031e0681192",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "873edf5f-d571-4212-8b21-063ff6bd8345",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "4b36fe56-b9cd-4710-8b36-f3adacdceec6",
        "cursor": {
          "ref": "01ec19ee-93c2-476c-a532-82ce7b6ed884",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4ea9e352-fede-4d48-8052-58afa11bb8a0"
        },
        "item": {
          "id": "4b36fe56-b9cd-4710-8b36-f3adacdceec6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "538981d1-1045-4cf6-ade0-cdd7b7e83f6f",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "4733ed57-1f1b-4948-b706-9d1bf47f4d66",
        "cursor": {
          "ref": "c06e5311-ed49-4856-8699-a9fc1576a9ac",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "35b4a58f-eb6e-4b63-bedf-f5942a26351b"
        },
        "item": {
          "id": "4733ed57-1f1b-4948-b706-9d1bf47f4d66",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3edf21a3-899e-4c72-bb47-3a0e1186b1d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "4733ed57-1f1b-4948-b706-9d1bf47f4d66",
        "cursor": {
          "ref": "c06e5311-ed49-4856-8699-a9fc1576a9ac",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "35b4a58f-eb6e-4b63-bedf-f5942a26351b"
        },
        "item": {
          "id": "4733ed57-1f1b-4948-b706-9d1bf47f4d66",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3edf21a3-899e-4c72-bb47-3a0e1186b1d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "f85d29e4-4a88-4653-aa4a-caa6b890fba6",
        "cursor": {
          "ref": "925f818b-7ecd-4bf5-b71f-1e3022fb8b82",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f16d6e6d-eb97-43c8-bbf1-48fd72843d8f"
        },
        "item": {
          "id": "f85d29e4-4a88-4653-aa4a-caa6b890fba6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e5cdb69d-22c8-4cca-be93-a1f8fd048c1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 106,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c2042b20-4399-4045-85fd-6e38e021c768",
        "cursor": {
          "ref": "cbd7c930-f896-43dd-8db0-c20a3238d752",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5cf03d77-18c4-400c-9baf-03d93c79cff5"
        },
        "item": {
          "id": "c2042b20-4399-4045-85fd-6e38e021c768",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "cf7e73c9-e1ff-49e9-a3bc-de18cd2b2d87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "c2042b20-4399-4045-85fd-6e38e021c768",
        "cursor": {
          "ref": "cbd7c930-f896-43dd-8db0-c20a3238d752",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5cf03d77-18c4-400c-9baf-03d93c79cff5"
        },
        "item": {
          "id": "c2042b20-4399-4045-85fd-6e38e021c768",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "cf7e73c9-e1ff-49e9-a3bc-de18cd2b2d87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "98e36cf2-26b8-4934-bde1-f02c31fba9cf",
        "cursor": {
          "ref": "dfea7ca8-0567-432d-8747-ba9359751b93",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f3f61bea-cf9b-4468-9f0f-dd5d06e4dbac"
        },
        "item": {
          "id": "98e36cf2-26b8-4934-bde1-f02c31fba9cf",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f861ffd2-d745-4eed-94f9-98a3b9d07dc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}