{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9c53e531-c0bf-4e2e-bc81-0f78e8aecadc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e9c85e66-3eb2-4a36-bbca-b64ae848b8b2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7673fc0f-f7ee-41b2-99e4-12b2c6146e6d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e002c1bb-753f-410c-aec9-c951af22bf75"
                }
              }
            ]
          },
          {
            "id": "215c7019-583b-4f4e-8573-2549370951a5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae3d4970-36de-4e02-b53e-9f1cf5d5602b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bfdda695-8f3b-486b-8074-0d9a2be16daa"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fa19bd84-6613-40e8-94c2-0eb0d2e91092",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a61ff743-8ac8-414b-9e07-65988ae8cc01",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8dfa5593-2e1b-4aeb-9de0-7e2692b9d478",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c9ec34b-79d8-4e97-b996-b128e449f71b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e608dbe5-d77a-4a13-93ac-febe20c5de9f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "371b79ce-3896-430d-968c-4465b5506fe4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c44ae173-cffb-4071-9e9c-6f192409969d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "41b20cc2-2cdc-4fef-9edf-8f4b4db5c8d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc4af10c-83db-447a-b4b5-b6871800e95d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "155962ae-ca8c-407f-b46f-2ce0c9dfd8da",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cea941e6-a9e3-4724-92a1-effcab2b31f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8f04ecc-6160-44e1-980e-67db794a73c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c12df65-772a-4acd-98a3-daa332438488"
            }
          }
        ]
      },
      {
        "id": "505da3c3-c45b-4b8d-9c31-b4ae01cc132a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "48052b43-1a04-4a14-97e4-4b1356193a66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25ee35ce-43d3-4828-87b6-ee313c6ad45b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f6b7e834-fed4-478d-b10e-62c8315fc1f2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4926a74f-4898-4beb-a846-2a36db4085a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcd6e7d0-bfb8-4c68-946e-b18006c30fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a94f917-19f4-4a79-8487-9f4314cfa6dc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e9e777-3051-4caa-b036-d0d819e9e375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1359804e-0a87-42d7-bb1b-3440c7ccafa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee691c14-8874-4365-ac8c-64f93f13c3c8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05934267-dfc8-4000-aabb-f2179b8cdede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16ba2845-6a3d-4707-a5be-291d2db86769"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7356d19b-493c-4bbb-8e72-1de89c21b06a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f25408b8-5498-41b9-a225-9435f4e7da2b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de85aa10-ab47-442a-8a2e-efb0a46171cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ed58096-6145-4639-b995-c92e1b440786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d9295a-077b-41f3-aa19-e293682afc93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c253309-f8ea-4a42-ba23-d9ad0d7c0271"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f8b7e366-e5f7-4650-a1cd-dfbc29a46ace",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d7255063-a7b9-4468-a748-4fb8f9019992",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca97c5b8-d31c-483e-8d6d-312a54d9e4cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b10392a7-2e6a-484b-8252-a5bbd5054d3d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96e719c9-b6cb-4836-8784-3815d50ba187",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3907ca73-928d-43f2-bf05-c548ab732dfe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc9e5f7a-1ed4-4ebc-8bb2-c1ceda32d22f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8249d23e-9b00-41e0-85a8-7b53d53c0f77"
            }
          }
        ]
      },
      {
        "id": "e19d3982-18fd-4478-af49-92dd0cfbf080",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "de9a737f-6919-42da-a1ae-ab23d7f7cce1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab86086c-a2e1-42b1-b03e-ed5643d39452",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "705f786b-395b-43d1-b346-01ad392e7dca",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a442dcac-f297-4159-a65a-21f817e53049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08db07d0-cb71-41f8-b959-7f31bceb63c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd582ca-7685-4f28-b24f-ed0703e393ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "253532f7-b56b-4ccd-9422-73acdc3c9a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba418dd9-0e9f-424d-985a-b8f48b9f5c51",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dc13ca-9bcf-42db-86ef-6356936f2880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "445a3868-2308-4af1-b225-11fd4f30f260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4235ad-17fa-4930-9377-d343421b7f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58ea1a3b-1b8a-4570-af77-7b9f3d8b66c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d771231f-68d1-4b10-ab5e-9a6281e6ba68",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5106ba9-7303-49c7-bf23-a2d464e74b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e49061f9-128b-4cdf-9e9f-a6d6ea22f7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198feb41-ef5f-48eb-9815-bee9428cb237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e72428e6-5538-4cec-9fb2-5b831c775923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfa7223-f6ac-42b2-b644-9f58ac067b8e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db649af-0984-4a36-96d0-538c74a98e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1213312-c58d-4fda-a446-5b17e89b9f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96cb408-1294-4865-b491-fc813a1ac5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f551adde-b45e-44e1-a7a6-b4879ff56952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2767e74-a86d-4303-9d30-66fcf0e00f0d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cf792d-9c48-4100-9793-b9f4a194c793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c73f241-1e07-4707-ba19-c2c45c272d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16053e1-b6ea-4409-ab99-c261f350283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "250935b5-1ea4-45fe-b621-c6bd0e29f763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf6057c-eda5-4c5a-9e11-2e5d40e814d0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b723a328-e0c7-431e-a193-8a21875a5527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c492cbdb-6fb1-4cb7-8523-82add50847e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e61df6c-fcd3-4514-937d-cf768383c83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5957ddc3-5bfa-4548-84d9-a2c1970d1ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246d4661-da9e-45e7-96cb-2ce437bab7ef",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493f5ef9-4934-472d-9eb3-1f2fbe39e3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea70e81-faa9-49e2-b640-3cbcf7027074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f31d8e-9231-4bc1-bc31-83fc8fb1df99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14a1c098-0367-4760-8527-ad65bdd064fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7442b656-a7ba-463b-9e45-12d36f9802a8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34549b3-b625-48b1-90b8-00a99e1c7a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee71ad6-1a6d-45c2-9705-79cab0ae4c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb18995-c8ae-4dc9-a984-60fa35e57217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8109e85e-bab6-4355-836d-f2eb9fd4e213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f2e28e-7cc9-4d70-b5e5-2f5a94ebff7d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f2a51e-5211-48cf-bc40-0601aafb23aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef039879-f3fa-4be6-b4f7-9298532ec811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70606bc-0b8e-459b-b278-39b7f3a63750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "279557d7-4224-4a84-b39b-a74370ee6ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c01635-2120-437d-9280-ffdece315461",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0664b91-ddb7-4b26-985b-17fd00a29f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6035be4a-6c0d-4478-be86-c1bb34aedb97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f65c968-2cf3-4618-a8e1-560633adc179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9eed6b96-e44c-40c8-92d5-a175ae3a2726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67696c1-c41b-456e-98c2-1f19d7694747",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16940042-e589-42ac-b4c1-eade8bfa2546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8225a0d-ac16-4987-b67f-6769ac9c90e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc6f2bd-ff9f-41a1-8fa7-76e0808e01df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff89c0f2-1faf-4bef-9c06-c9c40f1745a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2824e3b4-a49e-41a9-b54f-15d382cc6424",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec235d2-e0b6-4c5c-a691-99163edfb510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29fcefd-d32b-4ed6-a373-664b566e5fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183b5a13-0fea-4bb9-bbd6-b7af6f64445c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cebd4251-9f7b-44ae-be97-13188912cc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1ac441-b7c9-4f8f-8622-05e4fdfd796c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40b7763-3b35-4f03-98d8-20d1f4496e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45a8e32-30d1-470b-8a05-474dec952c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bf33b4-77db-4c86-be5d-a7431861ef70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4192d5f7-d510-4135-a86a-a1df0d336fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71766e5d-9cc9-45c5-9de3-22087caad42f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73674e71-5dea-4a31-9dd6-70e71b917f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6588ba-ae0e-4693-82fe-5e16e1387c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbe3029-b8ce-45a8-a5dc-ab1cb3a29fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e850d102-3b4c-4b28-8671-f01eb61979be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ea04ec-bca8-47e9-8c34-c744f5249cb6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21b478a-fc59-479c-b03c-b1359e60e941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8a4741-c5e9-4d2e-81a1-c7e206444f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958252a7-7a7b-4378-9a83-fe4c4e8ce631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85ac1bbc-25dc-4ee5-9052-b127967651ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7860ad18-5c28-4e09-8724-fb376ca39576",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5173c1d-2bb1-4afb-9346-7f7af01ab24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00050286-dd9a-403b-8c90-32b7ee246ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f33f90e-2091-42b4-a2fd-f2392b150d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d477cda-7f02-40f3-869b-1f2fa1373cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3778892e-aa35-40a1-aafb-9ed44a650732",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb3dc7c-f5cc-4ff0-b7bb-7fa7fe3e462c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4696772-2bae-419e-8d2e-73df155aa108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafa0cc3-29e9-452d-a63e-069b8335e922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e88ad92d-0e47-4205-a350-2a392b23a7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7640d1de-02ba-4be1-a525-1ed1d1a0271b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585e047f-af1b-4c81-bbe3-66a8ab18b871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f9fe7f-53dd-4d8c-b3f4-cb74e2b82886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6433ff98-85f6-4008-a7e5-5fefc2ce31f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5132c828-1c1d-47af-b965-efdd08f82a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce83b1a3-3834-4bac-a96c-fabbf1105878",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d06766-3430-4855-be18-dc3ddaefd5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3446e503-d380-4004-8f20-37851da0a78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62e29fa-5191-40c9-a6e5-04253fcdfb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "521bc24a-86a1-423f-9ab5-6b27172d5d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaead1e-0510-4782-915a-320f0d4e86f1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7705f6-bc11-4c06-9d2b-bee0282bfd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c75e4a-cfb9-401c-984b-6b4ca5c8221b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32165935-5f69-4096-8580-8a97fc5cb060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9270bcee-89ee-4031-9682-f821b6e92636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda5148c-3f8d-4c5e-9da5-381f28a7d5dd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35dc5985-c706-496f-81c3-0366782f025f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c621fa0-fe3c-447a-a410-8688f0967a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d78d66-baf1-4b03-924f-ed9ee0d85390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53841c89-c7eb-43d1-8367-e9f613a96f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cc669d-cce1-4a6c-93fa-51101fb1ece1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1a07c1-1ff3-43bb-b430-7658299041b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa4d338-e3a5-4a26-b64c-046a1942f678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abebbd62-c309-4e19-a1ee-6e8520ccc447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe85fb69-390b-49bc-b5b4-6745365b9284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802f168e-de5e-487e-8254-a023ef7543e3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1b1224-428b-4f2d-93bf-0023142a93f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cbd216-3d02-41b8-8c4a-fbb4c525dd5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e645af-28e0-4629-adaf-64a7df55ac00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ea1cddd8-bb2d-4b63-a2f3-4f4d7e36e76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1155d6d9-aeab-46be-ac99-e62cb9654331",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e18c10-67a6-4458-95ab-1d8f68bd8379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a864bec9-7709-43df-a77e-654a1cda9fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4578fad4-7a46-4c46-bf90-be8b06a1ed23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c874eae4-d7cf-4eeb-a6da-e650aa54d9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b42e3e-5f15-4003-a053-4aeda236f426",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c326ab0e-7b0a-4d72-8b52-52da611859d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8810a5-013b-473b-9943-692223649647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dc940c-b04c-4cc4-89cb-41404736e9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34821c89-2bb8-4332-b172-b1a578c19717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccb7951-72af-4254-b908-59b33cf144c8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5479b9-b454-4358-ba48-b84c6fc7892c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe13a9f8-eb3f-4573-b18f-8fc3a95ba2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f328f6fc-0787-439b-8679-b72d7e29564a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ef2b26a-c6d2-4c7c-848e-ab9e852b93c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f39098-80e9-4a88-a35e-83f93b1169ba",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4352642-e730-4952-bcbe-cae4a3b1ac8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9345f98b-d9b9-406b-8b25-01b2e699a4e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e9b85b-0c13-4e07-8d45-54473ced1e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5be733-ccc5-4b00-851d-430b07eb061c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ebc6e6-b589-4f87-a22b-5de498fd7c4d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d3059d-a263-4d3e-ad14-024153f00979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b412bea3-12e5-47c0-a466-26be5385d5f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4dc117-50e9-4c3f-bb49-2fa9842e45c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39e6484e-d893-441d-9938-b8fda22d0e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79c3b45-ff2f-4c47-a502-f61dccdb4f15",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5111dccf-f507-4ed8-902a-18a2e1554548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "588645fa-4a72-4f17-86d0-bf9f49c4a545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30953f7-cc6e-4f85-849f-871aa1014e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "175ed31e-ee8b-4bd2-91c1-6a820b646e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329eb56a-30d6-465b-8bd6-bd5bddcfc86b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde6cf51-fddf-4829-a425-2cd117a6a860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657674b8-525b-4f9f-a995-baf777725292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e928f114-ea7b-4a63-9b3b-58b3a6069151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f9b568-506f-4fe1-b9ba-e0efe00e50c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6fe993-6ced-482e-9e02-0fdd17191434",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7550bcd-148a-40fd-a004-225f120d12dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346dce14-2ece-4d28-91a0-38d2312cafb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eaf050e-ef36-44fb-8ebc-8ed6b25fb7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c495341b-9ddc-478c-bf47-31a2de3ee609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddb2795-6df6-4f1c-9464-b0f370648230",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fe6fda-266e-445b-9cd8-3c88802b1df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "938e5bb6-ff79-404a-8b47-21600678b9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd7b3b7-cc04-49ab-a3d1-a9c443aee22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "267f3041-8fdb-475e-a735-6d99de9668c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2c7dd0-2b2d-47d0-bed7-f41e990b25d7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3729ec8b-5be7-4364-9689-41d76f0fd128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d97faa-4bf3-460b-bcb9-26360ce5443a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985889b0-3c02-489b-b7e4-b4e3e158018f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a775345-1d02-43df-a1ab-9370af5c1075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c27b14c-bc4d-4647-867e-bc0ea4b72723",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62594b53-af47-46bf-8ece-57e7381822a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d42e20-2f0f-47a2-95ae-a5913629066a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cb389a-7693-4f48-9ea2-2b44dd286ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c07aed-b8b9-493c-aff5-287d8a25d8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edac195-86d0-441c-88e9-33a5230f6737",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54086ac9-6816-4805-a8d5-d933f42fd683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a134ffc-3399-45d6-905a-349114908b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf659179-cb0b-499e-b5ed-cbc9f97358ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c5cf61-1b6a-4e02-873f-48f95e170f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ef4e21-a88b-4935-9871-c6e0a7dfd729",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98f3ec4-91d2-4487-9e57-b6237a18ec7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0aa85de6-116a-49ea-88e2-76a735a30258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b4f4b7-8efd-4bf9-ae9d-b27b2e36dd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "078b2d66-931a-4059-83d5-402d12f4026a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24709200-66cf-45c5-9226-bcdf939b04e1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fed6243-5a07-44aa-8239-480092a651fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38fb880d-de35-4aa6-80a4-6699d4b4a44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce217f3-ef99-491a-a573-91499f61f6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17e51e07-4749-498c-85c9-3cc59e7aeac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11907acf-ae96-454b-8686-32529327cd98",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96afb65-38fa-4155-a0c7-ad31172df31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19fc76bc-dd77-4810-b82b-ec134a3d1943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f6a5e8-b272-469e-b8e7-5b3fe226badc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9ff0ad-8630-4eec-abf1-fa5c291c80b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf2afec-226c-4725-875e-3478df8808d1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5e72b6-109f-403c-a62b-581147792b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2100d8c-0a44-4466-95cf-ae0eb29e2563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01081e8-5ed8-4659-9d6d-04bd2c44e7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "93b3abf0-39de-4aea-b7a1-ca6f46b75370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4e69b6-e622-4a51-b150-e1a8ad4adf82",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b157f01b-f77e-4396-9e5d-d02e7ccc4fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04ecb2b-062a-4eed-b59b-a52849aab7f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071469a3-f15c-4bb3-84c0-ef8e600cc2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fbc0c84-56c6-4b22-8017-cedbf84f23ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf3a624-e24c-44bf-a851-43b4a9420918",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0028bb25-d018-4d7f-a403-25acf3c87ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0614bd12-39b8-4255-a4d7-c86275413731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad330003-46d3-44ac-ade3-87dc1ef9e8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "33befce1-9a18-4811-bf38-982b30d3ebc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a692d697-6a2f-4eb4-8363-422dca7b43ae",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b78078f-bf8a-4d1f-a1b0-200d7f67b070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2aef3f0-8311-470f-95c0-846e915f22c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaf7f70-e8a2-4933-9df9-0ff67573e8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bc08ef92-fb2a-438d-8e7e-c9e8ddf24d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da6649d-f633-42ff-8928-9f3830bd315f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f8aaa8-070c-4107-8f93-4ec089773b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e76da9-a72f-424d-9308-71cba2b6c27c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413e59b6-f7e9-417e-9002-f9255ce5af7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "afa5f0aa-e4bf-40cb-9e6b-661fd40bd6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42a9f69-d642-4e17-bdcd-d0528f6a7e4c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f4e08c-fab3-4afc-9e1e-0a9ba2f68fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47c2d22-caf0-4e80-b959-44d7bf38386c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e10cf49-39d9-42b8-b252-e6d18d5ee7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "87560ee9-0263-468a-bfed-cc8724be52c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f19638-adac-4fee-bbd5-3aac25ee898e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a897b97-a634-49d1-b0ff-103f379cd178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094fd3bd-159a-423c-aa0d-8aa2cef69ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00f7090-9911-405b-ae02-3cb8b6645651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaebe4a7-d8c2-4fa5-828f-d2e4a803d5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf32160a-abeb-4b86-851c-27dff574b29f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111fc7b4-dcb1-45fc-a1e0-5f06a917b372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd792668-9b9d-4e42-aa43-aea2dd594855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb59ed4-974e-4708-82a2-4325678830a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e7dc88c-f8a0-4112-a73b-c2302d922778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2348a1f-56b7-4e89-a5d8-f4e300e0c4ae",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b86a4d-118b-4015-8a6c-0a5d81e5773b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112069c4-c870-4b0f-aa3d-ef3957eef8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4560e36-b97d-42f8-aae9-61dcbc17f07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "880c65ba-9272-4cf0-b81a-283b557a33d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ac1c50-4560-418e-8ec3-4449c05229e1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423d027a-d1a4-4039-a9ff-a121cf1da49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326b1ed7-9a05-4d3e-81cb-66d3597cbac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85c3403-1157-4170-b933-8ba2e2dbee98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b336ff-2e24-4fee-83d2-b7eed7ff2ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff549720-a33b-458a-9c66-869cac72973d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94f2fde-c94a-4a8f-aafc-d633d5a55ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad7cfc7-6c1d-4371-b1ce-d0ec1cdebaac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf13a06-cc99-40ec-afeb-b92a02ae7694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a16f902-ed2a-4e88-8450-41af6eed9e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfea0df-b1f2-4def-b04b-2b5415d81c0e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0107a973-9d9d-4794-86fb-8e2d0c2bd0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb7c112-5a9e-4f8c-a100-391b47157925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e584b4-d9d4-4464-9cc2-102ae49f1ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "293c3093-7242-4d17-8e3a-20d5a54a77b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76af8e7f-d4ae-43a8-b853-d7a3ad231826",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424142d2-8605-4496-8efc-4bcb25dfa19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da751a3a-a249-4a99-bbee-6b6a8491a6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7ade8c-7eeb-46a4-bf17-6dd856d0ecca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5805def-a7e4-457a-a7bd-c36f4846b992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8127b3df-1bd5-4ca1-b5d4-905e4db2b938",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e2a89c-42e9-4e3a-a987-95f2f5e48491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb0f34c-6741-40c6-9bc8-6b9056299032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b0b784-56ae-416d-9b6a-a581cefdb047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "40ef1a74-8ca4-4cc1-b582-52249a7f59a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3c6087-10c1-4f6a-8cec-05a8fd2b0d12",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1eaa31c-1423-4ca1-9c17-5c9f0ce32f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68e91af-74d1-4099-8e3d-5c26a31f2734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ea7790-7ba4-497a-bfab-52726ff7da6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "daed3075-d088-41a1-80ac-3214399efa69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1854d640-aa90-4407-b13a-7be6dac71dd4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd33ad48-5286-44c7-9fb4-dc1c1519c607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62021596-8748-4819-ad05-ee9b0a84745b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42eecab4-a0c4-4838-91cc-00ee0d1459fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2873af1-7979-4a59-a1ec-c76bcfcf61f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75421b2-3cc6-4888-bef7-2b3e0f981b2e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a87da7-b445-456d-891a-0899ca5bccf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5b657e-875b-4d85-8b6d-0959be5cbe02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a731edaa-2a12-4f40-9e90-3a74282fdfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78b789ca-baad-4021-a4e0-17d4ebf250e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8c0e6e-6711-4c6a-a996-81edaf880ae5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ae0368-594b-4f98-8ab8-fad99ee698ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35aec029-144b-4081-af42-372223fc3ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7fe041-12da-47d5-9503-1005ab19a32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "78913b56-d242-4da3-94ea-02079e6bc02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb9e18e-a76f-4352-b37d-fcae0eb3f54e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e72a8d-5216-42f9-b7ca-01cea3648ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0eab20a-da08-47c9-b572-db887703ed5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b9cec6-a7c4-439c-ad3f-50acaca431b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4420a2c-972f-425b-8097-589db330edd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497281a1-d248-4ba3-bd5e-5018791748b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbc469e-3336-46c0-956a-2404c3ddd594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b2e8d5-005e-44c1-b040-b6979763d5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10cc5a3-5ae7-4841-8301-e1276750ae04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "76aa89aa-3dd6-49b4-932d-46660b26e5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbec489-2704-4853-b421-ea78b10fac7b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d379ca7e-8da9-4131-a9ca-4ce0f7635055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ae2962-42b0-4aec-bdda-a586ae868c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa338ad3-735c-4d22-9281-5936fd90a79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5953ae-b1b8-4907-a92e-1128c540a361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c628db4e-b423-4127-9e54-1cd4328facab",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4501bb0-1e2e-41b7-b07c-ba0f82d4a152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d77f2af-388e-4be6-ad63-f8b45c89e227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6607be72-2bbc-4dda-a3f4-8b6bc22d05ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "211f185e-f755-4f87-b739-db3e50de14e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54682cbc-ee5d-463d-bbf3-da5e13fd9943",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec77165f-5edb-4c3d-b5cd-4a2219f16ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1956fb-535d-4c33-b1a4-12a95c4fe7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832a8811-8c2b-4d8b-a367-56c97edc0c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4227df-78c0-4b5a-9876-c95735df6bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b617e1-797f-442c-8a71-cb5303faeba3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8549920-f590-47e2-ba43-5ecf2deb6b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67225e97-9aa3-4a68-89ca-8f0f5e2c32f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e49bb19-84f9-4423-9320-8a5bd5841b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d58bf4-9529-4879-96e9-eb0075f4de4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21985f44-8a6d-43ab-b7c1-4a74b6e56222",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18acb464-76d4-42b2-88d9-bf9ae3c14c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c3b65c-dcf9-4ecc-a052-49513fd7ce0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb0cd9a-cec5-45f7-8d84-451ee52476e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dabd8a51-ff37-482c-b30b-8d93a04148a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09abb42d-2c0a-4bc4-a920-321ae6fb4666",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8f5ace-04d5-4f6b-a5e2-137d972615a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4642d1db-b120-4427-944f-2493cf45b507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9de5d2f-4375-4a51-b9ae-f5aba3373e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e62b085-599f-4a63-a410-3d0323fa88ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee307546-3daf-4221-a056-d63c53656e44",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad5958c-baac-49b9-867f-994b699c0365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb2a485-c809-4409-a673-ab1a33d7c450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dcd37c-fe2d-4d3b-9781-7caf7807016a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a39004f4-e102-4f5f-a94a-46fcf6accdb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded0df57-5f65-4486-a9e1-60a496ae7a5e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3eabac-2b7c-41cc-b715-d979f102ba39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17735aec-0cb1-4dc9-878b-570ee5f3c03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d022a3-c562-49a6-8ad6-1eb438676463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3e84ac-c7f2-40e2-afa4-8dee3835f7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966ae3e7-4734-4c97-9953-940018762fdf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c15d9d-0f1d-4017-a25e-3ddebc78bc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df88489-0726-4839-9037-2d8e6e70a327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2aae9c9-cc59-404d-aa1c-321a329db557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14b1e9b0-557d-4b2f-b3ce-4040c297d1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c18743-83a2-4760-8702-eabfcce719fa",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bae8469-d273-4982-ae7c-8fc244d10781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3caee40b-b3e7-4792-b35c-ee3bbaf62e6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4239a0-31c7-4cf0-8f8f-33938fd84dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b040dad1-68f7-45e6-8230-5f5826e34135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf254df-05f7-45c0-b52a-c75aa2e320fd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1176879-0b78-4ecd-a3be-6ccfa94e4a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8af7010-8d87-41b5-a027-54e133feb42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b156938b-c95a-4ed3-8b54-c38be1eac82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "60005271-9c7a-49c0-b862-4f3cd37b1fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64846e9-16c6-428b-b5b4-dca3f5e61aee",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9973063f-ec61-4b12-91a9-a5bb2356dc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3947d0c3-4de1-4370-a048-c58e240ee6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694bad39-3320-4c3a-bb8b-da346cbb7c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d10579fb-8ab5-4701-a933-b7d15e04183e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871f2fe5-400c-4d51-834b-ad6c66118bd9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68eaf37d-1b61-4cc9-8be5-a2b417642beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1473a9f9-087c-4176-982e-d100fe0a6a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2395cb36-7ca5-4ffb-a818-fc0dfaf7f07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08baa28d-46c1-4b5a-8dd3-89d817c50ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4499d21b-4966-4fee-b661-e40938f2cf44",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14f8979-c97b-4179-b6ca-30c81225be46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2df5e0-04c5-4e69-b25b-6a63f7bc2fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0cab7d-34a4-4e1c-be3e-4911f2ff7a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e8c510b-7bfb-430a-be43-d56d7ded47e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c480d9ba-2402-414e-8ba4-a58ce9557b64",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e3459a-80c3-49e7-8bee-fd9a6b72acd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7e6531-80ca-4250-af7a-7eb9b72df16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365561f6-99ab-42c8-bf1b-d2f56a225ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d83c450d-bc70-4f81-908b-c44d6bc27bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c77a32-17a7-4383-a198-7700bd52f056",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa72096-1ba3-4bb9-9f12-5c9d4a592bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b0d835-78ee-46de-ad0b-6978fb3c6a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed4c272-2fb4-4796-8235-d26d5d33fc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d651822-3483-4487-9b6a-9ded84f5f07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627c66bc-73c4-41b1-8c5c-2eea198888ad",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f19511-faae-4e15-87dc-9a2c1dcc52c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be48f456-1815-46a4-b55c-c91379a86936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3787c54c-386e-44f2-8251-1712fcf10fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a2252c-b9bf-45a9-9db8-8fc230c0977d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647d5742-8144-43e9-84c9-a10debb5fc4f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5983dd1-b8d2-4c01-8e10-6c59bcfa07b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68b4fd9-99c9-4131-abf5-bfbbd7e62232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764bff64-aa97-4dcd-a046-91435d5510f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bff16857-50ab-421e-850a-8df78419a0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc93975-be2a-4c0c-bdac-edb6761097ea",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f68e2f-1bf1-407c-a050-99dee6029493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c81155-cfa8-45be-a7c0-fa55d9d41e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8983842-c7bc-496f-9791-95455c2c563a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87f57edb-0510-4c65-a990-b1a2a7129a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93047af-09f3-4aac-ac04-511e6b2dad01",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005ed61f-e45c-47c2-883d-53d4a796a44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15906923-89e0-403c-b1da-c70013a01259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665961ec-6236-4d61-b67b-e0ce01a09527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51b76b7e-4805-44dd-bfcf-01a01ded00d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c522c2-8b72-45a0-a562-949040024a81",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "762078cb-2a25-4d3c-97ed-146a9260062f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39ae7f2-6772-421e-a856-65af7224ba58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d303ae22-89a0-4990-a4d2-abeed6fb0921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "67d34ed8-e8bc-44c5-b1cb-4b2953550ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba7bb5d-99f0-46c7-9c87-e6957f7b24c0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248da184-e5df-42d5-8e64-4a74d9e877dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9a7315-1c69-4754-bdd5-17d841e979fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3211dd4-f452-45d4-9b73-0d41f343ed0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f14133a-15d0-400c-bb6a-bf57828a5932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454547c1-cb64-4bca-9ef7-14c333ea22ee",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8eeb28-dd65-44cc-b9f7-b5dbdfb346b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6743c6d-fe0f-4ce1-8fe6-ab41e1c543f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d86cc0b-d5c8-4549-b411-01ff424165d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "233f8f0b-eec0-4490-abf7-b2474d161f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62f933d-e9db-42e0-bfbf-4f712855e2a8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757489f8-d8e8-48e1-99e7-6bd7ddead8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd4a887-6aa4-48a6-b2c1-5b51ad042b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2661bef-39a6-404f-b46c-4039ec2152f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5b018e-38bc-441f-b98d-f8cd650b380c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94641cd-c61f-4857-9276-367517b4e1e6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97127e0c-c96e-40b4-b131-c7bd72235184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45955ccf-fb0b-4ae5-98fa-d190a1963ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f42954-874b-4c15-aea0-82ce46e697a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9541acc3-1e60-40e3-a107-9060a171e119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74484eb-a113-44e2-92eb-d9b8b1f847a4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c56ca5-1a4a-47ec-834b-ee335a51d5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fcac768-0da2-4a3a-af60-8bb9bea84eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222fecb2-f73a-4241-a176-fe50d0d7f269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be73990d-ca85-4ead-9b39-70699531deca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3622df-caf4-42f0-a5ba-fc925a0e6510",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8219eb94-f249-4816-9186-7c4b20411f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda1a32c-888e-4a81-921e-86e724ffe9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35ed7a0-24ba-4200-af92-6ce229383bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04cd08f9-6c70-4af3-8130-5da52eac5272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df3e5b5-6c6d-4efb-844f-73e2b5f54b2e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3708696-be1f-4117-9fd8-c39a7e174c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be9a89f8-67a2-42a7-8904-dd22df6fdd6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356c05b3-be72-48fd-bf64-7bfda1bc049f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "350d7212-39af-4253-b95b-016738c9e382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7aecae6-b4eb-4b75-8f66-60481212dbc4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3609dd9a-8cdf-4c04-a63f-7aca881a3e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd063e6-f2fa-478c-b42a-d9baecda009c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6572d1-c72c-4745-8202-d41a94f75917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab87758-5ad8-4c2a-92af-d6b7f0c77b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987e68b5-8ba1-4c5a-a9c0-28ec40a64b06",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1884039-a087-4002-beec-4ed32cb1c3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb19365-31f0-45df-bf58-4a6357c9f3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351894b8-d571-4ab7-add6-2dc727bcb40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c79bfa-3bd8-42fc-ba62-5dc57d64e65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96f4a39-377e-407c-b4bf-09f377aef36c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f6fd6f-1258-4107-90e8-20c2bee18d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f47e8e0-d4ed-4b47-b508-d1cc1eb25a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d4bba5-1ee3-476f-890b-f546bb2f52f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad90857-7950-45a8-95c6-7f7f9dbc3f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d8d3bc-3ba3-4f46-907a-dfab1c2e93c7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a74d53-2cb0-4c8e-93ed-0d6b63eff448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ada4c7-64ec-4a4f-98d4-1a2ccc3b34de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a86b03-6136-4922-8cfd-ed76cad2f3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2763eb3e-84d8-4b4e-b38a-c57574764b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e375e29e-31f9-4ff9-a801-84842fccf1b9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5cd57a-f22d-47ab-be96-3d6bd1ec10d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920ff0e5-f8cc-4c9d-abf3-6fb192cf44fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b5c8ab-1a50-4e1b-99ff-b6e4b6d2fb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "633a652a-028a-4632-a9ab-e7379684fc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988ff335-4fe6-4eb7-832a-835df7064ebb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22b175c-156e-4f03-b596-9a2cfd8a9153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7767e49b-5f94-4070-8110-48d71ab1353e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe906d1-d9fb-4a8c-bb99-b8898fb44b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3bb3d8-384b-433f-bf9c-a7fdd329e9c0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c1e0a55-c182-4a19-a579-6ca3a40abe45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e9edb08-7a27-4e07-91b2-b42680fb4590",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e0ac5f-1e78-43cd-bd48-cdf996b271f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3d87877-c006-4383-bb73-9175861647fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8300836c-03c5-4ff9-8ac9-5651888cc0fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a744ac0-4f8a-4d2c-bbd9-2aef4fbdc92e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4129bfe0-6e89-468b-aedd-ef3ed3713705",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e106b544-0b53-4c95-b5d8-4a1dd5370a44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d8baa3c-9a9e-4d2a-8f81-b372591f3318",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f87e4a93-23eb-4e3e-8a27-1b52abfa0107"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4b434ce4-488c-46c4-8bea-4228cce5649a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb393831-db8d-466d-85a9-c7611c8ac7ea"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1b09f5e7-4161-4671-ba25-5875e9f91098",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fbff3332-1844-4273-b0fd-62294923b7de"
                }
              }
            ]
          },
          {
            "id": "b08f2c8d-c4d1-4c64-b237-50df2f576dd4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3a6bbf0f-57c6-4b84-8a26-c47079ae3139",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "222dcf61-9a00-4e18-857e-d75c5de563b7",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696c9eb7-5806-4383-b127-f25debb28fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8d37e30b-096e-45ab-b95c-ca1fc4af90e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04ffed0-dd84-48fa-bccd-43a1623f4b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba99ec4-ade3-45cb-ba52-8037aa86dbbb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8a3f1bb3-aacf-4647-a852-d457ac02a531",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04edc48c-27d9-4545-8d90-7c28f7c68643",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f011e3d5-b1a1-4ac2-9e66-0cfeb8a0d205"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a99b5af-c6fc-4013-9890-9627a0e73464",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b1a8b730-f47e-4618-bd6b-8f7688295322"
                    }
                  }
                ]
              },
              {
                "id": "c7b829f3-7429-4b48-a082-9e31b0a2a443",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c99ed73e-0ec2-4782-bd71-4a3fe5a71f9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b50d2a65-1b93-4b73-b5c9-f8ec0b7f5e13"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c07bafa2-eff3-44d1-b7c0-68c8cc3a4bdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "98287a8b-81a1-48a0-9276-972439175c3b"
                    }
                  }
                ]
              },
              {
                "id": "38b70c4b-dd58-43d8-94ee-be5afdbcdae1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f57d1df6-7196-45d3-9e69-894364ccb04f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "339829d3-1cc2-4283-a8f6-0f01bb7eae27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "848c3246-9ef9-4ca9-9618-35e68c796a51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "488dfe80-fad5-4b44-b7f4-0d48a9d682a5"
                    }
                  }
                ]
              },
              {
                "id": "7775df69-9301-4466-a26e-bddc19eeedb8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "718a96d7-9a3f-4b9a-a8c1-49c415b92c9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31d4de42-0c1a-4ee1-8e9c-9b9aff7c212b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53d9c7c0-60d1-425f-bf9e-210ce11b124c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "131d8892-fc41-42c0-accf-cfdf9964a924"
                    }
                  }
                ]
              },
              {
                "id": "50c0bd38-04ee-41ee-88a1-81124210fa4a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "559d10f9-4297-471e-87a1-2993a4d34646",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8cc74c3-1e88-4a4b-9b9f-78256c1f4a5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a66b259c-d16a-4743-8c57-a97b8dffc7a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "34666748-2351-4e5c-b2c8-8cc27fba28ca"
                    }
                  }
                ]
              },
              {
                "id": "fd177772-3978-428b-a93e-8c98dee0471c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a998ec60-0db7-4a78-bd6c-930b9af8101a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "665a4561-140d-49d0-b7d6-95d1be9561f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59d3a08f-6583-4c14-87ce-8a4c3b740fe7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cb8b49a7-1cdd-4db3-bf11-0614a98c328a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "477504eb-b66e-41e2-935f-b8869998af0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4e9de9b-7a50-40df-8a7a-afe3884d22d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "93e0bd51-954e-4115-81b3-2b8c62e83dc2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1bad749f-618e-4b3d-8c9b-f99de242acbe"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99a332e2-7e63-4655-ad15-f47451eb9655",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2204104c-8848-4a10-9c97-3a32ff3e11c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2d1a98e-bf74-4a18-b784-a7bde283d452",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe484c27-486d-49e6-aaf9-4b38917ce7af"
            }
          }
        ]
      },
      {
        "id": "42b1de06-25df-4cb2-af71-2d74e36d5d3d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e726d350-22a1-40c4-ba84-c047de898b80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85ddbb94-3ed2-49fd-9b32-cf39c82037cf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eab6bcb7-97b7-4782-adf0-9672966c2a55",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b567e31e-a8b1-451e-9a3b-3a18036a1698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d681c1d3-589d-49c3-b4d1-93ea852f4bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e223e63-9cd2-46bb-bc8a-27ed7b9681b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "72ee67eb-b70c-4266-a292-040c32397350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a37383-87c6-43f5-a881-3925c148262e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf194ca-e1b0-4476-a876-1912cf36c5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442c7877-6290-4aaf-8e66-c6c7be2fa8a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df554bd7-9e7f-42b0-b620-fcd11193e0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f947c1-64f3-4aa4-95cf-5b883c3f003a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcb16b6-e67a-47c7-a7d4-b271887d4e0f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6443fd5f-8864-4df8-a410-febfd2b1be5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5023d4-8c07-4659-b444-de3bffa35963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6462c4-92cf-4784-827b-6e5d396cfb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7515b68-d234-4df3-9b06-619bac8dc9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b03c3d-aa6d-4386-b99e-d01d0e4139a9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706a48c8-539b-4a6a-b70b-7f35bc149801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9fda326-b3c0-46d6-bef3-96210073b92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427d2d58-2a00-4135-bdff-f4b516a9ce7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a76b8340-90bd-4796-9fef-750733031ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0180ff-f537-484c-bb63-ada086183cb1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2efaaf4-57a8-4bc3-98b2-bc9f347dc47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43463b0e-9d15-49f2-b16e-5f82c9e4c1d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d4defc-5a2f-4592-ac43-1b2470cbcd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2303ca7c-b1e5-414f-aaf0-b05f61b0b6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8802bd6f-0bd8-41e8-8fd9-721571a9e2b4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dbc14e-ade4-4c75-8d8f-181aa44a7257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194d33e7-b24b-4d31-9296-c5f44abb21f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7fe4bd-b884-4f9b-af6b-ccdf164d7a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c61f931-1714-4777-810b-16c03338259e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efda4f6-663e-4957-8936-f366550d22eb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3132c408-0414-40b0-afd0-21fbbceabbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b355a76a-c4e5-4831-92c5-241d48c19fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9188cdc7-4303-413f-8541-19471fb78c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3504d887-475b-40d4-a4dc-811a8905d4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619bbfdc-04fc-48cc-ad1e-b1147ca3918e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6393bd-f59e-489c-a46c-9f99ff5337cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e475449-f5f4-4768-87d0-1ee28a4adbd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593499bb-60f3-473f-8c50-4da3a6d756d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3c6dcf-dcf4-4428-800b-b84cecd5b17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e74d44-9a83-4736-b6e1-f2b67e82f7bb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e55f7e-6694-46e3-b376-a25095dd95af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd4efb7-83b2-4fc6-9dd1-008350a4b88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584a0913-0cb8-42c4-ad38-c4b31df29686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e581eea6-9143-44e3-acfb-64b9d525439f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7c8b03-e8fd-4395-a27e-2f3defb9e9cc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa4fd0f-1828-4f07-a12b-958282006803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d9458a-e8c9-4966-9a8e-391db4deed51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fd628c-1ca1-49fd-a667-d14800c54cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25715b38-edb5-422a-b7de-7f627ee4d522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236fa473-fbc4-4d6c-8204-0f5b05709c62",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c0ffb0-e1e5-43ea-ad50-7822f1ffe800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d076ba24-2f14-4442-a625-c4a1bd1d505e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2263d519-b672-44ea-9c44-97ea72d31b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "635a8d39-bc55-4701-9af5-e0ffafae7669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b26ab2-44fb-4dcd-a4f8-243a6ebeb9ff",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e1a19d-a64d-4461-a0a5-b7eaf37232df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a514ee23-214d-4e9e-bf62-aa1f51c26728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6642f7-35c5-442d-b697-8582c2d29ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3604609-61ac-4501-bd06-3a94a111968f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac5c736-4c85-43a4-b26c-89bc002f2f1d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11046587-e6ee-44db-8a56-46cbeba08cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63f0341-21e7-46ee-9dae-f4bc4b27dd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4eb8476-3568-4cca-a5ab-c16debb1b1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1cf1d03-5ef6-4b34-baab-86faf830bcb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d32878c-be74-4640-b5cf-a9ff12dd5e4d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482a2a08-059e-44a2-ad9b-ffc8995a82cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f441096b-566c-4f4e-816f-aa362b4594f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1678d27d-321d-4620-9fbb-0ad200d1151c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "321a2f9a-91d4-4ae7-88b9-7fcd261cb011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9af93ea-c681-4336-8fa7-d9b25416a151",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c0e08f-1f4e-4d01-9e13-b42b6cecfcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52242ec-ecec-4387-a73f-da694b3d0147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fd0bea-7971-444d-b278-8bf10dbbeaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5cb1b71-5f55-4b4d-ae47-2ad944dd1055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e9df6f-b601-4ae9-9e69-be67b2607bcb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae22297-795a-428f-b4c5-9debaa9ddc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c605cf-67a4-4fbe-a7a7-1915f658ef02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0e9648-cb3e-4db9-bf8f-681ff558630b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7253414a-8ce6-433d-8613-ca5b54774338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30372fd-9783-4863-8746-2a3cd656808f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec62df04-abb0-4d70-bcb1-e7165758698d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7219bb-e51d-4fc8-8aa8-78327a8a2e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd68418-bf4a-431f-a8a7-4cd607dd06fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a90a9df4-6475-4bcc-943f-c8e1561ff408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e48f7db-bec3-4151-8e22-7a3486ab7772",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0609e277-f699-4c47-83f9-b977cb4ecc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b4d3b0-e235-434d-9fa6-0f3dbc70ac9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44d14d9-5d26-4e32-a10c-6a33a370c788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "29330d9a-c3d2-499a-9a7d-ef42680fba93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0599167e-d7a3-4d2b-91fb-c9d6c1a8eaeb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a92d987-743e-40e4-b417-7d060068e9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2da1f56-6238-490d-b2ad-c954cf5dffaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f193799-ef28-4d9a-9c41-1acdd098f8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "962649dd-8ff9-46e6-b60d-531bf4786f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f276c07-8b44-4ddd-b980-8a273d1257c0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95797067-68a8-4fc3-bc37-149a99a13031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0739e00b-5fb8-4141-9462-781861ae44e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9214d60e-4682-40d0-afa1-53b24683c7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6196eb-8c4a-429f-8eb0-24ab77b910e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7de5ea-669c-4161-81a2-b2c98c167ddd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0817f699-0f46-423c-bef1-2d2b5067fde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ebe580-206a-46a0-8fe2-75914cd663a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1149ef-3fb0-498e-b973-2d06f86c02b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48fb107e-9f4c-4050-8e2a-364473ec74b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68231f3-fa16-4680-9941-fec84022994d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f902a8-eecc-40e8-9ad9-16d2d40633ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ddd5e9-2bb3-4fa6-b10b-e6caf106279c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924bdac5-2722-4044-9c8c-eeabbfad3b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bba5e47d-d90f-4127-a8cc-adfa6e43c957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7026ca4c-031f-4820-a2a2-78560f3bc61e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1971d6ae-ed86-4b83-bc11-e1290e6f4097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73136c4-0c9e-46e9-953d-b13092562705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2164a6c2-818a-4a0d-b80f-7e5d630e50c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0e76d5-c22b-44b2-b9f3-6556096e01e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a802df9-a3fd-450b-923c-7d1aa949f7be",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dff2af6-aaa8-4ebe-942f-8ace50c73211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8676a1e-107b-4894-9dc5-4042b16f9c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84a5e13-316d-4214-8ba5-3e4f2b9c00d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "951e8d69-603f-4d48-92f4-756cf158a170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71df4b3e-096d-4c06-9d7b-2eb5042816e7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e2d675-8d6a-44e1-878d-36b3785d0273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add54ceb-87a9-438d-9df9-ea36526e4323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8879a46e-4ab6-4ddc-ae3d-06115192765f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0c406b-5293-47e1-b40d-2ef5f8eb9191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd244b3d-105c-4c02-b889-bd24adcfd220",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5636c862-1a54-4e63-a629-4d0669bcacbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1764ad4-b497-4bb7-bbdf-20ea1e8755f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31119f3-b2fe-4cf5-8591-fe8c6a6cdd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3333d38c-9364-4006-aa3c-3e65ef10753e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d62acc-a5ad-4cc8-aaf8-cfabcf56ca92",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b16763-fafe-499c-95c8-564a6d90a3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e43e455-5e02-434c-9c1e-4fdf3232d1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086a1dc4-2f73-4ff8-b7dc-123a81cebba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14091b02-ffdb-494e-be59-a504707833ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c74643-c358-4a9b-b25d-d5ab73cf3fdd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34227e1e-3817-40ff-8122-62121c38c99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c9de8a-2223-432b-83be-f847ddfe21e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150d23e2-f096-406b-a4ef-50486429c489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60357aab-efae-47a6-9b8d-33dbcd6264d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bdd6bcb-9fe3-4e3b-8cf0-f005b112fbf9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635db210-744c-4e37-a2e7-77c99086ee87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178d0baf-f60e-4aeb-8ffc-67db8de9d9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3194fec9-c1c2-4a17-871d-ccc45e031347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf9f5da-7c59-48ac-8a16-ab72214a9a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49b6b56-d99d-4977-8599-7fc643bc1af9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d14106d-5036-4e20-80f4-3bfe553ef37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9592529e-5ff0-46a0-9b82-8ee8f140af35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc412aa-86e8-4e92-a0ff-c8354d5678d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f22e2dd-d6a7-45e8-ab7f-08b5b34d1976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae6d2e1-0b71-431a-871a-c1678857876b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66041ec5-4c6a-4bf3-b20e-8d1c713ab1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ef5442-3675-4d46-afcf-d0a0adba176e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129887fb-ecab-4990-aca7-d195773a8607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40802700-865d-41ff-bfd7-5120ae4ebb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c079b5-8e73-421f-8c1b-c14b1a6c51c9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42afe135-d46f-4a58-8a3f-b7ecc5acce30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6cc699-cf53-45c6-a900-18364492c103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f526cb-4e5e-4341-aa39-a5f8b43350a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6da8039e-809d-49eb-be54-f89ed30e7cf4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ab2a0d74-e9c5-417f-8926-3d026236815f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb9b638c-6fc9-4329-97fb-ad0b1bc9e126",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbeb44c6-3c68-4051-910b-b33bc081d831",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3bccef8f-85d2-40ae-b393-d6f2a3c6084d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6558be8f-023a-4943-96a0-826800fadb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb8d779f-2cb1-496a-9ffb-db379b0c8976"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b0a99f6-bd70-4c32-ab17-769f9a752085",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d384710-4b2d-46dd-9fcf-ffaba6ec5a9a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d168821-d4a6-409e-a27c-def8136b430d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e18ae605-6ad7-4f1e-b332-96582a36dff8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f41db922-524f-4453-ac35-dbc285b09997",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e3a7770a-1c30-4cce-9b08-07ef32b3958d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da1ad832-f106-492b-b5e4-c137308216ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8846e5df-ad63-481c-9da9-b6d52555220d"
            }
          }
        ]
      },
      {
        "id": "56e04d25-f652-4ed4-babb-17bedd702354",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3bd6ff4f-8f8e-4bd4-8933-d298ab7480dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e2207dfe-0a27-431c-8183-66165d232e50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a2e8ecf6-9f8e-4a81-8dd3-cc970f11b313",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4f90c8-aff9-49a3-92d9-cd74d39dcce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c91bb2-f4f3-49d0-a75c-9aec7d4281d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6908900-74ae-493c-a53a-3d93f84d45af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe092f55-4f0d-4dbe-aa38-3f02233b9491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d49e36-f8a5-4c3e-bb13-8fa72bf35238",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a453cb-19ef-4232-8c48-2a4d6228bf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60475f9-9b00-4fa0-9c3d-b2be036c0024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a798bf65-3029-48f3-8628-252d1d60837b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd85778-4b0a-4fa7-976c-b38e61c0e53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3906b1-dfa8-44e5-b781-e524f46cbafc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84a696d-c149-4839-bb42-60ab0af57a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee493bb-e896-44f0-b08a-cfcbdef34d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8556f9b2-432e-4a0b-a0f1-2d691a32841e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28651e85-3bd8-4471-9ccb-88212b287049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d513c6d5-33e3-4e3f-84bd-dd5d067076ed",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e4ba17-656b-4f52-969c-fcf066c42aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8a5761-6b46-44b7-8471-d64f7cb168dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfbc4f7a-684a-48d1-a797-1d034f1bd74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71ed2ac7-50d0-4ad9-8853-405b4da34e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f992058-95ae-4a47-b2ff-477e13732e0a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c96e8f0-da7b-4ce1-989b-b5eba8aecfa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0149b90-3bdf-4a0f-8082-0bc71dea3a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2a33cd-04f8-4508-829f-66c5e26726e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b325c2f3-3cdb-4ebf-93e8-7fe9c2c570b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7147cae5-be86-4afc-ba2a-9a5301afeaba",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a180357-e527-4f3b-841e-613160e81b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7889c4a3-c532-4072-a246-4cdebead4a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d3ec25-778b-4b29-9a58-09d7ef83b657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6be17d85-1f0f-410b-b89b-2d28a283d927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f125ad7-a53a-4607-b898-f9399e7496ab",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab65ad01-f272-40f4-8b92-41218566fd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36a938a-2ab2-4fd2-8076-872578866c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53096ddf-63c1-4bc9-ad49-372ff1d8d154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d52fc0-e503-46cb-a101-550d7c5f0564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acd1c14-1ac9-4c60-9152-070de3c0ca95",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c7a6ea-bd5f-44fd-9d43-0a432009c827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "860a95d8-50fa-42d1-890a-3386cc0d74b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd035e11-a424-4927-8dca-c3d5621a82c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad8c197-d2a2-4d55-be38-70a5b8030949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845fdd87-b6a8-4b07-9984-0b452bf1028e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba75f23-3d3e-4450-becc-de7fc58861b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fcc62b8-fa8c-4cb9-b48b-34f3095eb6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f1c69d-f12a-483b-924a-32f8ce3e1d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91191278-1854-40ef-92eb-39dc7f8b3d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb88caa-978f-4e41-9852-3581e23b359e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc284084-40a1-49dd-a567-20b9e467bf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b12e3641-f4f1-4446-adab-8f9c6030f000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44c8986-9e83-4ec4-a24c-80b884a636be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9931044f-4117-49f6-88c4-3d4336cd0f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9882baeb-50be-400d-aae6-7a6b4825430f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10db97b8-4278-4c34-ac9e-8d7a4ebe15ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2960f91-0a58-43c7-beff-344c1230cd0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24107a47-90e4-4293-93e2-db2174dc1eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "afc2e479-bdd4-4fae-bec2-27e3e4f88539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdc689d-fda0-4a7d-9029-ac6ef05846e6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7168af-c95b-4697-bdfe-727638f9703f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106716af-ac77-435c-ae05-1d6bc5f542bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec1147e-9233-4a65-a847-4b9fe94dbc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0310c219-8629-4c7f-8bb1-793c9dd96d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cedf192-6d70-4783-b16f-f9aba48849c2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232f4943-f980-457a-b894-1c37031a7aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca1b1bd-b83a-44c9-bfdd-0eb32ae27d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1720c86-353b-46ff-a018-2862e0bf00fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4182dd2e-b8dc-42b3-900f-97c66fa0a652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63f4741-26fd-44d0-87e2-e6ed79eded60",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645332e0-465f-472f-a378-801ce80364d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd7c841-9f74-4dcd-bcb4-88f4802cc288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da57f38-2ce9-4ce9-96b7-b448de4999dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5751449-11f2-4651-9676-db6c8b8286e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967df14c-8cda-4946-bfaa-83138f2a0b91",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8f7bb7-e28c-48ff-a9f1-8fa0017a00fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53989b9c-546e-4f65-93df-0117940d6b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78facc1e-492f-4b37-932e-2c417de116e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c771aa20-8caa-4545-a272-370244c9f4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d70fa7-6795-4fc3-9d45-b35a3d63bdec",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79302a8b-c153-41ea-87a1-19fc3f6fb88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196bf3f6-5a52-471e-bd94-c80ca97f55c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c500ff-294f-4b99-998b-116e43269fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c69bbfc-723c-4b31-9b3e-4fa33bd7be30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d3b24e-ef54-43c4-8713-1627a6045273",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56e82c8-abd4-4eb0-a75a-e9fefff67751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41da514-d0fe-47d7-8835-7be65d433843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b103b2f-83ff-4489-ac3b-eeae0e0a1ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "05807369-6b8d-4be9-b0c9-2b1aa8f5ecdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897e5fcd-95f8-4d2d-b037-3db49b540507",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00189ec1-0754-467b-844b-b8f4c55b7926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12765b9-cc21-4619-8cce-89d4d6d711c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d401dad-5465-4ffa-ac83-c9f428c26ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "910fdec5-b7de-4dbf-a42c-dd630b2e452d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0245ee7-d5a2-4228-87d8-320aff9f7ebe",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f741bbb6-19d0-42de-aa6e-cd5c0c8361c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c57889-be49-4a41-8a2c-1b410fc86c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947c5d1e-4582-47e8-8caa-f2732688561b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3e3924-747d-4cc0-a031-1080df1da871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b2cd44-cfe1-42d5-b491-36f345b38350",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b29aa2-e47f-42ed-ada4-24313ea9008b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc344be7-388c-4f0a-aa37-5cb1c7a2d5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a76da5c-77fc-4744-b597-d659d6dbc4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "535fe4c6-5ff1-4616-b190-7ea5b9a55ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397bc493-fe5c-4b7c-8af5-fcc727ed077f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76795135-00c2-48af-befe-0e9c6ef074b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265331ca-4b9e-4fb8-9348-8e6ca7fb4434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcda7cfe-72e7-4291-ba14-9bf05b79bc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3659d5c-1840-4156-ab7d-66639d73b926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e99b27b-a93f-4a20-9bdf-edaff1ab2593",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a2a624-6bee-4ceb-94fb-b338c0bf1262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d592ab58-e5b7-4716-a8f6-15e58b009576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da11e5f8-51ce-4a05-bae5-336f3668aa0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d8be92-ba04-4147-9b86-44c2d1f76033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d98742-3cc3-48e6-9166-60b7d9fdf28d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbd59a3-26ee-4c15-9c6c-8e327722467e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e5f08c6-85e4-4813-8e09-e007ad6119dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff95331-00f4-442c-b4d2-311f1e2a790b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4fdb2b2-cf5b-44f7-b465-4ae21c7915f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a880a325-48b9-48ce-b81e-f344eb5a6238",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9646afa9-3b5f-40ee-ba9a-192c67ebe4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479536cb-72bf-4cfc-bdc8-56dba85fb0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92f34ab-cff6-40f6-bd38-42ed952fbe6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b5a059-660f-40fb-92f6-20d27411479d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48ae5ea-d744-4738-b817-072b9282bd35",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8561469-55e4-4cef-b819-7de339a3340b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22211993-e405-4b03-a536-8f5afe8e619c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157055ab-76f9-4ed5-968a-6c5cf3a4f330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a89a4c5-cdbc-4b31-a4f9-312e05e30fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e475c785-b14c-4bc5-a89d-84278afc3c50",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faf1ec7-26b2-412c-8a8c-870bfdd6fa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c90269-e369-43ce-b821-6c5d6f1c38df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49857ed1-bd58-42df-a6c1-f32a03c2d3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "739d4fba-58b0-455e-a7f1-3d061c0a5b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d22f2b1-d259-40e1-8124-1b936ac44526",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79c28d1-e366-4d40-8ac4-278deecf5b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7812a638-5565-4144-8640-febeb07860fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b507e4-3f8c-44c7-a4a5-0978cece3ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f1c235-04a3-463e-9e57-4ff5018f97f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d8e578-30d4-4aeb-a570-5fa58848098a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffdaf7c-f784-49a8-b065-a7ae718ba85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14dbc0c4-f086-499b-a377-7d78b0a26a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40176772-d907-495d-928a-a4d769a88328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38ffd8df-2ce1-49db-8171-96004c582e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4d7c0e-34c3-498c-8463-85e98c9abd7b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b70daf-503d-4e64-903a-c531f18868da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b781692e-553a-4db9-80e1-cdcf452cce47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b459d91c-31cd-4613-931e-f243c0802cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "885fe641-368f-47f7-936a-ca73013acc65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b76a4f4-b03d-4ebc-9973-90f4dbab7d65",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78981adc-01f6-4dd5-8716-f88a766bcb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "280c4488-26e4-4698-83e3-f20aea8c98c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496761f7-3f31-4f3b-b332-bb8d030d57f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55b5e6ff-0878-49b4-8357-717221f5760d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0b0a91-58e9-448e-a0e7-2e627350d6e5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e75a3aa-7393-4c10-8411-e1d02cad0216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517f3954-28c3-49f2-bac3-f2ffbf16e02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cacca1-2f7e-4784-aaae-cf0dc083b1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c135efba-2c2b-4e11-bbf5-5a9d6cd0b920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d37819-e9eb-41db-b404-da27c2d1a9ba",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433740bb-35fb-4a2b-8944-7f33e7c41f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e49d126-7579-49f3-9fc2-21b4b2791ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e614bb7-c151-418d-b160-4d3f067e5b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "466c9857-e0a0-45c4-87e1-35d2197d0287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a27df64-3a4a-4fb7-9623-fbfa07c11d08",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44cd903-3af4-4a8e-96ce-a2e17e397db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3d3cfbc-a8f5-4844-99f3-4f195540941a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ba7536-f4c2-4a40-9cce-c7cec2123505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2d5b3f-bcd7-4a01-9d58-0576feb49285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bec555-6452-4b2e-af84-c23c6864c6bd",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4660ebb0-1a41-47e8-aa78-4cf1e2196a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f921d7b-d4e0-4b31-b42c-58750ff4437d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3bb68b-56c2-464e-9aa9-0c619a836b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f28485b-d51a-4a6b-92be-1c540bb7e492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a93fa4-08cb-4626-a0f5-94cac19c05c4",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fa0f0c-faa4-46d6-a30b-5b8a85e8b124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ac7569-cabe-4cf3-9d37-9aa7b8ac5c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a656c9-63e8-4077-b02e-72269aba04e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2af53cb7-6179-4879-aa75-baa62e2fb77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a360efdb-1271-4e6a-b9e2-853c42989b77",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b0db5c-9841-4eb2-9803-5bb3afef71a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224b2ea3-db04-4bb7-9264-3d9eb1ebbc72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50b6b1d-9271-4b2a-b1ed-72eeaeb177fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "708ec730-d0b6-4936-b243-37ca185391f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929cc575-e1c9-45a6-95ac-8427768e4fdb",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18172fe3-58d1-4f41-b3b1-c393f36817d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3809bfc1-8e79-46a6-b03b-ab52d875c102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73afa72f-7667-4a4b-8c7f-71f5eb5f9f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99b6d6de-c879-4bf3-a83e-3d413b686011"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d21b2519-066e-40b4-a5b8-e0974d113b17",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "192f7b13-9fdf-4b36-b0e3-7f3d2d1cb572",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be907b2-9847-48e7-bdcd-1319b17e4b7f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f2260c2e-e206-4c39-8988-fa71d92a6dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e244e536-4a03-47a9-ab9f-fd089fffb9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ca76166-caae-429d-8176-0e2e33a0627f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fbf1e83-7f77-464a-8d6c-ccb7c4ff1a57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7986228b-e12a-4d20-9238-7874d411e9f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd680e2b-fee2-4ae2-be4a-d28c9a199ddf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2838984a-bdfb-4e5c-ad0d-e83ab2425a11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a189ba62-e722-4248-8fec-441b08008b4b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db0d1a5e-0487-489a-bdd8-899f6a7273f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d3e97c2-4b2a-4fec-892c-bb3eed3df0ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46eb785f-46ef-44f3-bded-783e9d6144b7"
            }
          }
        ]
      },
      {
        "id": "58ef35ba-6687-4d7f-96a2-7aa3ca232590",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0c039b8c-fdc4-4ca1-a070-c2f8f1bf53d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9192f842-dd85-43be-90f0-f5a442ff7d36",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cb26a3ba-c0fc-4446-b25a-2250cff2e192",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3e5592-1772-41b3-b236-7f11dd980636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf18b0ed-2834-4c9c-aa3d-da6a931a2ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34cb11f-d2e6-4399-83ef-cb11b14fbdae",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd7b32b-8429-4a55-b954-8f02dfed69b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51324d2-0c09-4ae8-b50c-b51be566d544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19b22f6-d1b8-4c5b-8dac-60255a0b98fa",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ec3eae-0dbb-4d25-ac2e-d57f5038b3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b600a1b-8453-4bcf-a5ff-39fee184a1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b5f54b-e58f-4b2b-addb-d7fe47fa52b5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5e8f6e-3906-4a46-9f5c-47dcd3a070b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1ad347-9572-4d72-ab69-18367a390231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ac15f8-c123-490e-96aa-87792f04e1d8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f252ac-57cd-44a2-aed7-7486f2a16c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe32538-4ef2-49d9-b41c-664073c4688a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f4c0fb-1c31-435a-8a36-efaa38db75bb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45f475c-8dc2-4788-aa83-3dc99a138659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089ffa46-e356-4ae5-968e-df125f84a2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55bd7a0-53c6-4cca-a7b6-fc63277238f0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fe7949-9553-43fe-a978-4f07ae1b6e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6c09a9-5a6e-49fc-852e-1359c81b2731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9740f5d-9f43-4ef2-af84-794bf63ea185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b488efd-31e8-4b88-9aec-a10e1a7b3b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08d9258-06d6-4855-9184-330df948a6c8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf444b13-938b-47c5-931f-208d60c6a3cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a4bff5d-0640-4aea-86de-c8f6f673ae0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50afefd2-2510-40c1-a1f1-3a684ff7dfc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cdb088d-8cef-4f1f-8865-8a20682a2b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6516bfd-9978-48e6-9d74-cfabad1b2ea6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7199b186-7302-4115-86db-84d2dbb92ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "033b58d6-848c-473d-927c-90b023229707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798adc3c-0e76-4004-8243-674670e84b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3214dab-88da-477c-ba8a-be0a4906bc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a495fdc-15b4-4937-9ce8-04584474789e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5526419f-20a1-40e7-9114-af6c67b450b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cec0eb7-dda9-4171-980c-3d50e69c2e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3021b5-7907-40a3-8d64-e0df0d28f3a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f31e9e-593d-4d57-be92-ec08bcd0390b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c393b87-d76a-4b4a-9153-590dfbd6faf5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad9d12f-c017-4961-99bb-3672509232c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825c6a0c-866e-4fac-ad42-f9aed5e70475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ba1636-54ae-44c4-ade0-fa0fcfec26ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbfcf54-b852-4dec-8704-66c2e2f5c23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60eedebd-37fc-4902-a141-04a17a3ba552",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f5e267-6b0b-4ee2-ae00-7c4d3a5e3bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e4e855-e1ce-4c8b-8b1b-de7d72464f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05477c65-ebe5-420c-8b90-086eca6c5fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908c6f2c-cec3-4033-9413-3a8b944356af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9266a157-334b-4d22-b4a1-0afd7b1b26c5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc8ef1f-55d2-46d5-b138-1ac5276d7cb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5ab035d-1d38-4e34-8685-ec18b025bd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc819d3a-08ca-43aa-b172-3d33b62f557f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec0fd29-8077-43c7-b86d-a2aaa98946df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3dc36a-3654-469f-894f-09e12d8762f0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71976dfa-def5-4f59-99e9-943269c29bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21147897-c15c-428b-9905-870cfdcfae9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c5b043-ea8a-47f6-976d-519ca6e4201e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c61dd0a-cc8f-44fe-b8dd-bb2f47fef70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71261ca3-f6d7-4a24-b275-ebc6aa227eea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0651f77-e110-43fc-9a56-5bb0f1763733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa020ada-45f1-4d35-ae31-5d87d87aec96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b2697a-1cfa-4232-a5fc-37445137bbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6555d11b-a9d5-4636-b497-0a06ed359802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79484ed8-4b6d-47bb-b8bf-68dfcd36549a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ee4029-d5d8-4829-be40-8266189d4650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08136ef9-a297-4537-9eb1-90681ea1fd3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6571e3-6afb-4594-b36c-fd8bf9ae717b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8af00e6-a384-4eb6-a27a-3069415fabc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78824399-c080-40c9-9d2a-6a8fb21e5ce0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d29b5d6-2226-42a0-ad03-98ba7c44a66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc43b7a-06a2-4972-83d6-f7dce41e380c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18445695-1b82-42b9-ab59-2364728ff0dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f58cb1-4953-48bf-a34d-9750f2396af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982d5206-d619-44bc-a343-122b5ba777e3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c497eb-ca5c-452f-bd08-816a2a3246b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da950ff7-dc16-42ee-8f92-12d8b736516a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68a09f6-e5b3-45c4-8585-8f88388a9a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62fbf20-0e78-41d2-a3b3-b5875a450760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7266830-f968-4ffa-a178-9241d5162094",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127e6179-721c-4f4d-bacb-3729166a8481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4db8171-7363-48fa-9ae1-9a59552337ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fe8d58-94ec-4158-8212-5b9aee4ed355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d2b749-f1fb-45b4-a59c-1a063a2f7d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ef88a6-42d8-4e26-9f95-1397225d4c44",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb530659-1b68-4a1d-a9a2-374529831ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1655ca-3b8a-4b05-bc60-f3ceeeb2cacb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3ef6d3-b18c-4cbc-ab0e-fb923cc856cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b422c616-2ab0-4592-8849-4c18e144306c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941c9b0f-4acb-4078-a992-98c8ee703e1b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988812f2-f862-4c1d-9123-2f77631b1571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "306a5cfc-3896-4bab-9508-c311ee89f09e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a172f49-e37f-4602-824a-ede2dae54feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c37d895-939d-48a3-89f8-b58dacfb0f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd2fcfc-bcb6-478b-b664-1ae0c6c44b5c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466c039c-c00f-4238-a693-f2d624542955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dae3af8-e886-4296-95f8-22770d572687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d07c99-4b47-42cc-8e05-07413d05a49d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2683add0-2c82-4ce4-be10-2aca2be534e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556cc0f0-8176-41fe-a62f-b9771ebef953",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537c8074-77b8-47da-9ff9-04d62b2975b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144950f8-b8bf-4a58-910a-27cad22446e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d8d661-cbf9-4946-b8cf-9da6ed0366de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bf47e8-ec5c-4c18-8367-adff391d6960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e1f797-5dc0-44a0-b0d1-1c5d457bdb0c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ea5ff5-d6ca-470c-98c7-bae64139f2d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "744e3a59-4e25-44d2-b50f-53ce976f1641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e948a6-d9d4-4f0f-b89f-1e2bf89bfe51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c006da-f49e-4f07-b50c-ad366fdd0e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b95a735-6d72-42c5-b801-fd3c49f7c2cf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4232a86c-c036-4dba-a0bc-1c10d664f6e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8318a510-894a-4b18-a245-1268611b9d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35393931-eaa8-4fe9-aa92-db72c09a2f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828e2e73-3ac8-4e8e-acaf-3cb14ca96482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432d3a58-dc66-4835-a90f-a1d660d5461e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43761bf0-4a1b-4200-8b9d-d8e7253e65b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "770f6d47-1878-44fa-b259-5afbdc3940d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b60f971-a56c-4651-9f2e-ac24b15c8c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074510d1-5249-423f-8026-e392173dca34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6f7645-1a17-4f17-b15a-ba9320083fd5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557236ee-df25-4532-b610-ab5be1f0a0e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4bf2c6e-ebd0-4fc4-aea9-b54567b3d271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e35df4-5f65-449f-b621-48eade68dd00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bee19ef-8c39-446c-9ecb-4a84ff81c1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b85d9c-3d22-498c-b37e-e4002e6922ef",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0182a1f9-286a-4fe3-ae86-0944ad08ce82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3930d2-6ec9-450a-a585-759345dc40f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317b39d7-65a0-4221-a3ce-8c84726e408b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d28459-7b86-4487-ad7d-15afef14aff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cfec75-5cfe-4bbb-9583-423b34425ac1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965cd627-d300-402f-95cc-0a5e96dae967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5587d48d-91bc-43b9-9f3b-4ea007b8e0aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91d350e-823e-4899-822b-21efda1e7cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a11776-147c-4958-939e-6a8682aa1c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8681189-dc5a-45d6-b88f-241107b7e9a1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec7af58-9532-4540-bc45-084bd868596f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "816e86c5-7339-44c7-92bb-00bea3a4ad0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88abfb5b-4cd4-4c5e-8e5f-8ed37dc5f0ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ba355d-c846-4d74-9fcf-d9d5b4ef05f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46348827-b2b7-4990-a61b-5ae913535400",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1bc023-d12a-4da0-aa4f-36a44a129892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e11025a-d8ec-4387-8018-28990a0f0117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1831c9b4-b2e4-4153-8de3-a2f4ceb13f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49145d59-8e37-4dd9-b2cc-3d4df7362a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba519e3d-6d16-4601-bdc8-8963526b0f87",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93798d19-3d94-4bed-8857-eabcf3e853f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbbb4e25-2beb-48f5-82bb-7b2c0a0803af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7912110-b46b-46d3-8cca-ed4bc5fbc16b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7cb9c7f-e27b-46da-8398-db957c344511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468c3ba0-f315-4f3e-b0af-afaa98b49395",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f719e274-2b96-4f23-8b49-c0bd8437ddbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea1771c-adff-40b1-92d7-d9ca4190fd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad025956-68c3-492e-a4d5-c80f5fb54057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8046e655-886f-47a9-a6cc-f36acea3fc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630daebc-796e-414a-9c21-2165abc3711b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b14b6c0-107a-491e-894a-b822da62e5fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46973038-93d5-4b94-aba2-c51c91b6eb13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56353e5-75a4-49dc-aa95-ffd76f8d81a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25597194-e98c-44e9-a621-117294e54612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd374fec-1114-40e7-bb38-6ef7f2235df1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06dd3a26-ddc6-4f44-b44f-a24cf2c8a770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bbb85f-6d10-432f-8182-383a9aa465f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfc9c31-12d0-416e-a225-9b814beb1998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb6d871-f662-46c4-82eb-d9a23c81e00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b65fa5-129b-4110-8b20-49dff0d5410b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35a8815-d542-4a13-b1be-8262fa2dbd24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58934bd-5203-48d2-b117-4c601a1c9118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5746f1-1892-4fa9-b9ed-ee6633df4c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644e73db-5b0c-4a32-8121-d017ed5c1f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa44e2e1-4323-4ec4-ae39-5233ec3863a5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b76781-5fde-4086-82c9-83f0540089bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "210a011a-18bc-437d-ba5f-1666eb0df708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c98a51f-d3a8-4be7-a232-1d49d8c46772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dacbd35-173f-448c-b4d9-3ab1ad8f6037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c816890-6a4f-4ff8-8318-f5c5c51acd6d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c1f364-cf44-431a-bf32-689476c772c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32749bc4-5bd2-4761-854e-cadb754a234c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2523028-5a1a-4e02-8821-5ec2a6db1de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d7adf0-aade-4a40-bfc0-5f9d3366912e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d88b7c8-8b14-4116-ab0c-b12b04e366b5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57773a1c-64be-4a73-90dc-06c9f1cc6497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482016a0-b6ab-4f22-bf00-3a2e8f584f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfdaa8f-5047-40eb-8f06-0167e531b97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcfb651f-733f-4f8f-b472-8203c450bb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d2186e-e4b8-4830-854d-874feb131ea0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5322b1-5f42-4ec1-9afd-7fb2ce2af594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f738fa94-a253-4e28-bc1a-66d6f874d876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bf3ddb-832d-4e8a-b95f-2260f70e0569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56544ea-dccd-4911-98df-1b06d0ea2a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01520143-b3df-405a-a608-d0c8deb105d2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219d9965-4c6e-45f5-8b26-2aca47cfb171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc46e15-c47a-471d-8a07-1ff1c4c58c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcfb43e-8213-45b3-b952-291d7680e7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f153cf0-8f3e-4621-8d8d-78031b5eb570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34546b0a-e610-409a-99aa-3191da13add4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1aa8bc-aedf-42b3-9b1f-abe108d15693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54929957-e4c0-4a03-8579-3b0ded8ffa64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8dea68f-acf3-4be4-b1b6-255e76df694c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909c06b6-88f9-4f6d-94b7-ef532f8925d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c72fb09-6fda-469c-a602-90740e2d6fc2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4139715-aa08-42f3-8504-bcde901edf82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa735c71-8e7b-4283-ae13-0a15ae5c94d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390bdeb1-8aca-4714-b17b-6574273a375a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37babdac-ee4a-4ce3-8652-292ce0b24e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992f1646-c984-4935-8a16-c62389596d8b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70d4071-dfcb-479a-8952-8a47927717a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c7f301-76e7-4bbe-9a98-cf46c34ba8e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc26275d-cbee-4ad9-9b19-b5de4c19c86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41d0d2d-7673-4240-9f10-d26f85eeb37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209592b3-7a1d-40f8-a9a4-d9923f82ee87",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5c302b-071b-4a71-bc71-003423c5f551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa35947a-330a-4b83-9d15-847b58064db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c374a991-e178-4c83-a501-e3328a229b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac83ad5-da57-4270-9ee6-a7ff0b11864a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76245a18-a502-4531-b223-2f3da8127642",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d722a21-42de-4d84-8b8a-3c988b14c2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a1d16b-9a6f-49f5-aca2-640cd64605b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac02d4c4-6393-4296-ae9e-0b64e79896cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a6584c-caf8-41c3-9268-9be25357878e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda4b696-9b77-4663-8646-067d4a3cb7d1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712884ce-f508-4f32-8613-5a5ecd5a3d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24da9e27-8117-487a-b47f-dcb7f3e7b2e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dccc8e8-1788-4596-950f-908f5713ecf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656db5f8-a1dc-4d70-864b-0eafbd26a6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e22025-ce2f-4aea-b563-5383c67e3e35",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341237e7-e264-449b-bdc9-aa2901c6b103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a8425a2-e125-4164-81ab-ad691877f4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526aa276-5a77-48d3-a6fa-4529832c976d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60de13c0-26af-4813-907f-be371ace2b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbfa22d-2e75-4758-9511-84c254b7a3d7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63412538-eed4-4523-ba6c-19241db69c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d995e6e-17d9-4f92-8118-a5e85b4f1708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08643bd-8d75-4987-b664-c6cfd0527967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b94b64d-c5e3-4bef-8dad-3d7b5c1c02b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332b71bb-83e9-4f7e-a1f5-64378be1ea00",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e13dfd-fc23-451b-acdc-4025f5c9661e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5e708b-95b9-4f36-9074-e9ea6d59d1c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6889ac-fd82-49b0-b87b-13f44ae74cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992ec118-eb41-41b5-b261-808cf3a867df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cdafc2-a5a6-4776-a84e-ba593dfd97e5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16d56da-1867-4e74-abc0-aca3abc3ca03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0861686e-8bfe-4c71-827a-9e4eb69989e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043e75df-1d2e-41e5-bc8a-c620e404272b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15041d9-a356-4fec-bc4e-3852b9e547b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5597f8b9-0b48-4049-b1d6-b0f8c99911b8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e33c13-7368-4d1d-a6ae-3c30bb7b0e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e58b2cb-b20c-4e82-a858-b5fda7fc8e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e555fac-0f86-41b7-aedb-7ed0ae9d1490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79e3814-0b8d-4b04-bca6-760411372af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc43654-31c9-4b0a-bcd9-31c7fbc466a0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c93f05-5eb3-40e8-b09b-ee662f98a661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52341da6-0c75-4f94-aebd-170b9140bbcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0197a0df-b079-48ae-91dd-e1d39c3edb47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8feb9600-f34b-470f-8d24-d7bfdd092027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308ce8fd-7d93-4f41-9c00-330edc0f68a9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06efa44c-d081-4ad1-a00b-ecb8464b6b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa8a3090-8798-4786-9ff9-38ab4fdf9368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20077fd-08cc-470e-a45e-a8e9c430e699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e0a09a8-bafb-4294-9734-e8233dddafa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d4dfa7-4f88-4f5f-bf39-621a570d1d3c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2624ca11-a943-49a9-b637-2c715fae952c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3f5127-3c00-4bfa-9532-ff1db9c68a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75cee94-29cd-48c3-bfd4-03fed55f1a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1063e929-4b71-4b65-b140-da6dec03b586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86085a10-0c0d-48aa-b105-bf6411192add",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d7e070-ddc3-40f2-9a28-d2c4a22ab5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db0b574-d98a-4545-9236-79e1a8aa62c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44aab1f-3e2c-440a-98fa-2b86811c38ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88e4c72-5c07-4f38-8fbd-6ce7c34edf4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a38f11-3e1f-4652-a064-3ee0604615db",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90149897-09cc-47e5-82a2-98a08b109ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93f8327-6d7c-4ec4-a5e7-e1581f977642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af59686e-46e8-49fc-8d64-84d7c0a85258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ffb003-8889-49ac-b901-1bf4c97d3139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7e3519-70d1-40fc-8c0f-7188a615cf67",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9c1187-3d3c-4f9f-8348-9115cc117569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1aa9ef-f1ce-49a3-b61f-0384be82047e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d1a56f-1394-4fe4-bee5-0cadcb854b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d696c014-7040-43b1-b876-e4716d74e8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c8aef4-122f-4c9f-a4bb-50b2acec46a8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c362825-226c-42cb-a477-84a93c40a7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02dfbd1f-b641-4451-97e1-c7d4d8cb4634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129e97c9-9a6b-4ea5-a31c-93961be2c3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0cb1ec2-87f2-4d88-877f-cd2413d34297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6a4915-656f-4a8d-a408-fd4acf504794",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec9b816-831c-4ee4-9f6b-49041cda469d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ebd2295-1a63-4c14-b34e-6f524ed43c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ca338a-15a0-4db8-b855-b9abeb30a8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4276056-b52e-462e-9138-885e1a456c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951841d4-b00a-4ff7-8359-55ef31cab785",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7caf2d0-483e-4adf-a708-45de417d4ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ff288c-6fd2-4566-a7fc-a3662744ca07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b60c78-3914-4397-a4cc-93bf8c008307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17dfad06-f552-463d-be9d-ea7e4ce15409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a09290-df53-4407-bbba-7aa4c067777b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6977cb62-f734-45af-ba73-bcb8a9d67d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b6fbd8-92db-484f-95ea-73af71b815f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50da1d4c-b294-47de-acdc-901cc39427c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53e8dbb-5741-438d-93f4-1550449be377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b07dcdf-2cfa-4edd-a65f-352bf38eec3d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62f5454-e058-43e0-b379-ce803a0b422c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95bb0c25-9cbe-470f-8220-bccf2b48722d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6307f02-5318-467a-8845-690559f8c62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ef025b-b8fe-4ff6-a5eb-6fdcb935645d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b25ed9-e50d-411c-80e9-eda66e58c3ec",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741e2ee5-efbf-429f-b855-6d859c842941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "147f6e8d-0795-4d69-8f5a-fa2e17d412da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b082f2-0f96-43dd-a58f-f59d7087a57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d76d37-e278-42dc-8206-8be2d24c723c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3202b126-bf01-4610-a6d8-3edf20d1126a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a365c166-472a-4a6e-9eb9-f2bf952492ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d33eaaa-137f-46af-8510-ddd12d86b586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c8f9a8-ce11-4424-b500-18a544d29a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7557410-55f6-4d2e-8323-fbe9e7b40ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50af6a43-6e31-4c0f-abcd-b85841134a59",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b907c9-d2d4-4d99-b433-14df656e78fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de75b25-7918-4034-85c8-9abc19c019d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f43aa5-9f0b-4316-9b5d-bad88e1f16cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7dd38d5-f6c5-45bf-9620-c77befd0ad71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51df8253-3e12-4368-92b4-28a18b9a4129",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d72ec9-91e9-4b31-b7ac-ddeb30fb4b57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b834dc2-6bc2-4656-b43d-6bab020872db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73ca4b6-c38e-40a2-9239-0f0b8dadf7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a3dc43-2506-4ac4-bd5e-44d0197f178f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9dab32-581f-448d-a9d4-1775eed05623",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20315deb-db1e-48ed-8a84-6f674fa667db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae55b761-62f9-49fd-a783-3e99f3e8c93e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d43c5d-686d-441b-b12c-4e957ad47763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "641702a7-cfb7-422f-9aab-94b4b7a6245c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36b1350-0ee2-4ac9-98a8-c8eab9aa4109",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3728e2ba-9acc-4185-b8e6-51a7df97ab52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a7a5b6f-b02a-4b3b-93e0-29fd914c881d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79fd362-5381-414a-aeb9-732888cd3244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1658008-5eca-449f-b6bb-cd7dff12d7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833e86f1-84a3-40c9-9370-4a46126a4811",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a517df-5d8d-4717-9849-e4e31aa9bc6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f0f6761-5c1a-4b9c-bd75-a53706019d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223e0ccf-b1e1-4022-8366-78fefa59aed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad988b05-cb77-40d4-8701-5cd935eae502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835d6ee7-0c22-4ab2-a88a-882c151b019a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8af42d-9257-4dd1-ad68-4edeae5b1c33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "377ee941-6207-4a83-b4ed-7a04e0cb2045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f9c86e-2393-4256-b56c-dda669088a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f7bc21-b645-45e1-9545-de609e647104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3927ff8-db92-4419-ab7e-6dd464c94b38",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a383e5f-33f7-465d-ad88-870b2f0d4e10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c001375-0aa2-4821-a3a3-5589d05cb3ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0fc8a2-aea5-494e-a574-3471822f1bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c431c9f-2c88-4c5d-a456-eb991ab2532c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686f4aeb-0190-40f7-ba92-d6a5cdc72124",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ab5beb-fe8c-4493-bd4e-f821310a0a26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1618172-51c6-427e-bc3e-63952520925e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441dc1c2-88d7-4c47-a018-c545d1da98dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d89d7b-a613-47ec-8cae-e872aed67397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119a7276-80d3-4501-bb70-d7cb5f6c0439",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f568e0e0-0bb9-45d5-8a59-0853badca748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "515369b7-ba3c-4102-bb5d-36af4ec55619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a377251b-4644-4120-a7ea-962e69712896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e715bdb-b27c-4548-826b-6e60ed9fe514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3a2231-fa94-4575-a4fb-5ddfa76d4c84",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473feafc-866b-48bd-892e-1c1ebe9de8b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cedfc535-d33c-4c6b-97ab-87aeff09c4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f67f66a-6ae7-4e8d-b566-5eb141067e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a44945-e3b6-4ff4-9184-3bf34bfa27df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6acdb0-73f9-4197-a1a0-48effd78b485",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ac1a22-4fe0-47d8-8d18-026162d43b82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05618b50-5973-42f8-b06a-dd511f59db8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d254051-cc10-4b30-a93b-ad8a8e110c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eff5755-45ca-42b1-b5d9-2cdfe21d1516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a1279d-e447-4be5-81e9-c8406b631da2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3149bd4-58f0-43b3-8ce8-d62d91b9dc33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7501fc7e-6a25-4219-94e5-c12e69276d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e984de56-45b5-4d76-8d1e-8eef8bf8bc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d2d49e-74b7-43ad-a607-bdc159de0e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51517fa0-606f-4abc-9bda-aa7a3a39e964",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ff7a86-68c6-4b3c-ad55-61373f0b0404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06b02656-a3e1-4a16-9896-57cd355506d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afea7c58-af84-4128-8c17-8bdbb2d41f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4246d7-8788-452e-92e4-2f87cdcb6ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbcacfd-061d-48d5-8d73-d26437c1c005",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c328cf30-a9a3-4e9c-9cd4-dc7fbe8fc589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c32d64bf-e74b-495a-9a03-87635e681f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671f8c8a-d297-484c-a496-ee133d9c72d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c1b00a-7211-44e1-b888-f6d6ccee91ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936cf500-2a51-44b8-b9dd-ca8656ed7eef",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a685ff2-9fe0-437e-b9dd-d9138414ea9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b036129e-6424-4372-9e14-c8c50a844b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11abc847-863e-4127-b8a3-218d2e7ad0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a7fcd9-8e23-4a14-86e4-26491c264d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065468a2-2007-4084-bff5-294809c531aa",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5e1689-9597-4dc7-bdd9-e58bebe9c4cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ad776a3-8793-4155-8d40-d3a930615ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13a6e6f-e07c-45ea-88f9-eb4bac3796ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3097d892-a5a4-4f46-b9d7-0655da1097e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3959a130-ac90-4929-9aec-389dec69d0c4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076bef29-dd4d-497f-a92d-6f9b072b1aa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "519e899a-50e8-4174-8d7d-4ed668720eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12e3db2-dae0-4cc4-902b-ba0bd01c1d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030183d4-722f-44df-bf46-400e2a111f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26059f9f-9e04-4693-bf18-ee2cc99fc040",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d56c09-ef3c-40bf-9f9a-6d738628065d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d33b1972-1994-411b-8e40-b01b2211190c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "117fb1ad-ea93-4d87-94a8-897e4a45b73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb47173b-d0c8-401d-9a4b-a77b29994097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabe6d3f-055e-401f-a801-33adf20c6b26",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ef6e10-3c8c-4686-99dd-5ddef6b216a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "677a3fe7-32df-4cbc-acda-36c1856fa2cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "632614f7-5565-42ae-85bb-08b2279be7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3be8f3-e7a3-4591-8828-1c1858418159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69717887-2691-4b19-9482-801cc6b86a61",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e920915-0afd-42e7-b3ef-8868f55df5a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89c05ac5-6bb3-4ca5-98e3-c06d41d0cd5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e8a89b-885e-4940-a9bb-443c50a8039d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6ef324-5253-4e03-81cf-c7cbd75bf069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0e4483-eaea-4bb4-aa67-424971268924",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44f58b0-c5a9-4063-9eed-c3343e4abd91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "534c1412-93dc-4d5c-a3db-ea4ba67b6e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d84f663-8926-4792-bfe3-df2f7f46604f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145df21c-143c-4fc7-9681-f9879fa4400d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61ff777-021e-4820-ae50-b81f39b906cb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2baf1597-d04f-446f-bd2a-bffff9cf25d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08820759-b2d3-40a2-a068-ef02117a12d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57eb7a50-0138-4719-81d1-06ed337b8cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f7fe31-0a85-4325-afbb-0a4dd2a59f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9896402-62cb-4999-b2ab-32b3edcc2b80",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1744d7-831b-4e90-b3a0-7de44050adf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63515d5f-5e35-446c-8c3c-a686d289aaf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb330f88-362d-485b-b14e-9d97c1662c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d2e0e9-6cde-4f3b-8318-30b07b4fa0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394f1fb8-d739-42ac-8660-269d5d1067af",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecad75d-25e5-4ad6-80be-93ed5bb37dd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd6210b6-acc5-463d-b742-ed03c4dd8e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e702ac5e-52d5-48c7-a972-0104bce06c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb1ab1b-a4c7-4a84-a6a7-13bd531f45ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d2ffe2-dd63-4b51-b0b0-de24075dc74f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e273d07-3d86-4470-9eea-c97df87bda22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c1bce6a-c9f3-4065-af48-c459d4ece4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26183801-d6a6-4beb-838a-61f5b22b7606",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d2c35b-afca-4508-b194-3dcef1418463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5fc234-c49b-4231-940e-64eaaacf0b75",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11e7beb-e7b4-471b-9c06-76a5577ea582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c88c80cd-8576-4e71-8aca-bcd5f38a50d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4516dd0-f475-4f20-bf24-f7ec240ebd23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e7a8baa-e4a0-4e37-a833-f45cee6669bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5999303d-30c8-4d02-8f8a-dd82005739d2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdb3bdf-d94e-4744-95a2-c6d68a270133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33ccffd5-8aa6-4707-858a-fde4dee39dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a38a0e-c76f-41bd-a167-2c93da8238a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd07f794-280a-4c0b-b205-ce9b9959d47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395a1694-ebb2-4ef2-8a06-400e60e05338",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bf88b9-e9b8-46fc-877c-05ef16fbb1af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dab8bbc-fc10-4d9c-8a09-9dc86c23a253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4e5a96-e6bf-41e5-ada6-8d398e0899c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5899d2cb-3f9c-4eb6-a331-40c303096586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b845b1-880b-4bbc-b437-7aba690c2e80",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09975e07-3940-49ae-8cd0-3163391c17ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "340b45ba-76c0-4a73-8181-3f19579fbd8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f91431-db9e-4009-b949-133eb756ccdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0705191a-6830-405f-a53e-dc04707c13cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b349a49-dc54-4d99-9876-aa9a24066ec2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424bde87-0ec0-4df9-8e98-b5e6010147c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0f45203-00fb-4944-b11a-e171ed271dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdad139-92d7-4d75-b391-4b601125c5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167e7121-27d7-4008-a93a-7c7dc8871828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45eefba1-af2c-4063-b015-69f8c1a9de56",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed93bc08-90e5-4e75-a63a-49cb3a91f4c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728a8a3c-c260-4a9b-9fc9-0539c1acddca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6473bac6-308c-4baa-9c7b-4edfbfab3965",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fabd767-62a3-4890-8658-28380c68f78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3da090-19c7-43db-a95d-8ffc94e88e2a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16961c2b-51ca-4f1c-a155-9c410d4e3532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a02feac-9ab8-43da-83ab-3354fb389817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b9b043-a233-4cbc-9521-b946e367a3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7a25cc-568a-44d6-b1eb-034338dace50"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfc749d8-6500-4caf-a5a7-5826bdca30fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74f0b3f6-9ed3-47e9-94af-301941811247"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "512e93fd-2fab-4650-a7de-32e3c93a1c33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5832359-0c3f-41de-a6ab-19a726b71a74"
                    }
                  }
                ]
              },
              {
                "id": "0a42d3e7-0180-4e94-a299-db4d77ec33f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f32b8761-0367-4b9b-ac08-88b9c512f832",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fdc4f9-0d62-4554-9b1f-bfbec7599848",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "52eb9e82-c001-4523-a131-c91552fd23be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71408c8d-eb9b-4a6d-b835-9e1f75fdb46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1de3d6e-980b-4d4a-9f1b-9bac10ccfcfb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "193b2803-32ba-4911-b128-d0f2f4231248",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbf378e1-0049-4fc2-83e4-0c710a770b13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14042e20-3618-4769-9fd9-151a9d2193aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3288cdd-2cf7-4a8d-9c7c-805c7b9484fa"
                    }
                  }
                ]
              },
              {
                "id": "9981934e-71f0-43c1-a605-364ab08fc2f9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0f8be4a0-295d-45b6-860b-ff924b7145d8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c745d41-0e4f-4514-a4e2-06fdcbb13fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5cac1ca4-98a1-4fe4-b0f0-9669d7fcb7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9708c06-0f8e-4827-96d2-f7baacc5c511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b0e00a-29a9-4e2f-85f2-dcd8cbe9b84f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6ef93827-0b58-410f-97d1-349eeced4bec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "10230903-6152-4a19-98b5-923c38e68fd1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49e9c0b3-f83c-4bb9-a406-e51cc032eaad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a934db20-ff76-4cfd-b504-7c0224bcd40b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a414941-a65f-4ed6-8501-fa88c82d6904",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bc61add-f590-4022-b51f-dfb123ee3d6c"
                    }
                  }
                ]
              },
              {
                "id": "a7780f78-6d1a-4e2d-b3fa-b09eb2be2527",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "425f1e14-ccba-4a12-8dbc-0b70791c88d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f6bdb3a6-cb9d-44a7-95f3-3d0f7d7c2617"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffd28651-09fe-4560-9e23-d039cb11e0a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08b8b54c-5d44-457a-ab6d-6cf77252e330"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75562065-0f23-4c22-9a1f-1062b0daea6c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fbb9e522-83eb-4ae4-8d4a-f8cff8b46fa1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f516d7d-600c-4860-87c5-3f8ed5d8fdef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0fdaa30e-15a2-43cc-a5ec-776e32e83fcb"
            }
          }
        ]
      },
      {
        "id": "cbc66ef7-a5f6-43a7-89ff-8e2f8ae99578",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6f5d5117-f252-4768-b2e0-a3926c301ef8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91e6c799-7146-409e-98cb-9bc6da77e549",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06f0ad06-4ebc-47ef-84a0-08304629fae7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122694c6-4fbf-4a65-bb06-0c10998b0674",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5c07cf78-45c5-4b76-b4b3-65d45cd9b6b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2501aa-9961-42ed-b425-5373ec700a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5eb8ae05-c4ce-4509-bc45-54b7704ba4e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4875ef34-5448-4807-964d-0652b1fe0c8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c83640b4-b9dd-493e-85ca-5ea8380ac509"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5021f94-7fd9-4cfb-bf86-7627470b63ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d99606b9-582c-4898-befd-06c76dc8570e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ba1d441-d7d7-4f6e-ad03-29426cb2f6f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3bf47d3b-e7ac-4481-b6a8-4c62398f8444"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3e64719-9ad5-4824-82de-0e4c041609d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f366347-7de2-4153-8e51-604cad325908"
            }
          }
        ]
      },
      {
        "id": "5b547376-f07e-41e7-b6f4-c29ae651380a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7d6cae07-b8f5-41c0-bf06-475fb25ddb6b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0dc1476c-bf52-4da5-b712-05826badbbb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d463e546-da51-40f5-94d4-6e711341015f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0fecf24-b1ac-47d3-9544-bd8344f2408d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90040910-2ad5-48e5-bdba-3709a452cfe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "269a4dc5-7ca7-47d7-860b-3e6fbbfadfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28571ad0-fd50-4177-99f5-fd9c15b00fd4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd3b3436-a78c-4684-b770-ee8eff9ecac4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e48a6d4e-1fc9-40ab-aea7-8062099c6847"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0117d04e-f044-46a0-8e6b-2af78bb13db8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f698341-f6d8-4206-aa37-99fc3c9c3975"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c93ccf6a-d739-4147-ac16-6a49eab34c02",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b1a747ec-6276-4eeb-bfdc-934f12cd3b67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b94c746-a08e-415a-8387-1304804dca11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e32e256b-477a-42b5-92fb-bcc7e887e911"
            }
          }
        ]
      },
      {
        "id": "f2e08b77-15c3-4747-a0d1-4ba858ba56c1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a3ceb36b-23aa-4ee9-ba71-7beba55f856d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d61df504-d289-47b5-8dfe-a7064efb78e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5947cd3-7f93-40bd-9dc8-cce1639989d9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5311f171-906c-47d6-b5f6-633576ffdbf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "493dec96-32a0-4e1f-9d95-279d7ef4f086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fb9abf-a618-4fc4-8d9d-499d962d8347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b5e048d-97e0-4e1d-86df-d78a1e6628e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d15ef70-7871-4916-ae06-6efc2ac42200",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b9dc853-7c30-49d4-8d49-d71cb39d2aa9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6d46b16-3c4c-4fbc-b138-afc8f156f9ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "884fa957-7411-450a-91be-93ace264dbc9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c9ef63a-744b-4d2f-a9c9-f99fbf865433",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e0c9f286-e9ff-415f-a144-3daadd2ed621"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2bebcf6-a1b8-4465-a57e-0648120dce42",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a266b17a-2cfb-4cee-ae9a-f3944f72d160"
            }
          }
        ]
      },
      {
        "id": "f87ec224-5ae0-4ecd-92b5-cdaee8fe5348",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95cb5878-f2be-4233-9cc9-02dcc722138c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5f2e929-cfb9-4a94-ac63-7f077785ff20",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dde34701-3bf6-466b-8299-04fc0123b855",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ec45d4c-cc94-4efe-b354-0f8aa2331094",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9b8cfe1-cfd1-4582-a6e5-bd2c5fa6de3f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.3438596491228,
      "responseMin": 10,
      "responseMax": 544,
      "responseSd": 78.10704085239138,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707265948824,
      "completed": 1707265978185
    },
    "executions": [
      {
        "id": "e9c85e66-3eb2-4a36-bbca-b64ae848b8b2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d58de535-5984-44d1-a341-86e29fbc9139",
          "httpRequestId": "b1f254fc-468e-4591-9006-adb12047d69c"
        },
        "item": {
          "id": "e9c85e66-3eb2-4a36-bbca-b64ae848b8b2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e076e0b1-ecaa-47d1-a4cc-226299300a6c",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "215c7019-583b-4f4e-8573-2549370951a5",
        "cursor": {
          "ref": "943dac4e-742a-49e4-8b01-e6d566f1443c",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e44e1dfd-b472-40d7-9d9b-38538a2e8746"
        },
        "item": {
          "id": "215c7019-583b-4f4e-8573-2549370951a5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7de17fa0-5e6c-4665-8d1d-9d2dadabd97d",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "8dfa5593-2e1b-4aeb-9de0-7e2692b9d478",
        "cursor": {
          "ref": "fc6d5a26-b8ae-48e0-8f9b-eb94a01344e2",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b4b9b5b2-a7eb-43a6-aaf3-a7636d7cf4df"
        },
        "item": {
          "id": "8dfa5593-2e1b-4aeb-9de0-7e2692b9d478",
          "name": "did_json"
        },
        "response": {
          "id": "9e77ff34-7196-4a80-b379-b01951e9722d",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b7e834-fed4-478d-b10e-62c8315fc1f2",
        "cursor": {
          "ref": "fd6877c9-a5ff-4873-8854-31b373d126cb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a8762b6e-8aab-4664-aebc-6ca2c149a0d1"
        },
        "item": {
          "id": "f6b7e834-fed4-478d-b10e-62c8315fc1f2",
          "name": "did:invalid"
        },
        "response": {
          "id": "0857ead5-eb30-4aaf-bfd0-30e21c73d651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b7e834-fed4-478d-b10e-62c8315fc1f2",
        "cursor": {
          "ref": "fd6877c9-a5ff-4873-8854-31b373d126cb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a8762b6e-8aab-4664-aebc-6ca2c149a0d1"
        },
        "item": {
          "id": "f6b7e834-fed4-478d-b10e-62c8315fc1f2",
          "name": "did:invalid"
        },
        "response": {
          "id": "0857ead5-eb30-4aaf-bfd0-30e21c73d651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a94f917-19f4-4a79-8487-9f4314cfa6dc",
        "cursor": {
          "ref": "a806b1f5-8017-46c1-9f25-5e3bf6f996ef",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "697eb136-0da8-4fa8-8f3f-76495deb14d7"
        },
        "item": {
          "id": "2a94f917-19f4-4a79-8487-9f4314cfa6dc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dfb4fdeb-9f05-455a-91d7-c502d46092a5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee691c14-8874-4365-ac8c-64f93f13c3c8",
        "cursor": {
          "ref": "23b16c02-18d0-439f-9624-72b11541d52b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ff48c29a-1a7d-49e2-a771-8b1004f40caf"
        },
        "item": {
          "id": "ee691c14-8874-4365-ac8c-64f93f13c3c8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d76a8931-a710-4d6d-b4c0-b9492c9d6c59",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25408b8-5498-41b9-a225-9435f4e7da2b",
        "cursor": {
          "ref": "c1d574d2-e08c-408f-ba1e-d2a26e3f3664",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f3992b82-65d0-4775-b595-4f35e69cc043"
        },
        "item": {
          "id": "f25408b8-5498-41b9-a225-9435f4e7da2b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "45a75bb7-4375-48c8-a21b-5a873188944e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7255063-a7b9-4468-a748-4fb8f9019992",
        "cursor": {
          "ref": "a50977e2-f5f0-4934-b9aa-2369beff7231",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "07ffaedf-ad37-4c97-aafe-fc6dc76e8954"
        },
        "item": {
          "id": "d7255063-a7b9-4468-a748-4fb8f9019992",
          "name": "identifiers"
        },
        "response": {
          "id": "305ba832-908a-44c5-8436-ee82f77cd121",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705f786b-395b-43d1-b346-01ad392e7dca",
        "cursor": {
          "ref": "5603d7ee-a1f8-4cd9-a760-7f706f34daf2",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b0dc56a2-4770-492e-8dfd-e36c05a2721f"
        },
        "item": {
          "id": "705f786b-395b-43d1-b346-01ad392e7dca",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1e1426c1-55df-47fd-a57c-51c791aa4399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba418dd9-0e9f-424d-985a-b8f48b9f5c51",
        "cursor": {
          "ref": "705ea28f-a7de-43b2-9968-818c17b5565a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c7d616af-8168-4c40-9ae0-28558a2d34ac"
        },
        "item": {
          "id": "ba418dd9-0e9f-424d-985a-b8f48b9f5c51",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "218bf79d-e335-4f47-8f0a-733e90bc122d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d771231f-68d1-4b10-ab5e-9a6281e6ba68",
        "cursor": {
          "ref": "8e512b58-f10c-4a0a-a6b0-3d82bd9361da",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c5be2334-59db-45f9-8a64-fe162682bb57"
        },
        "item": {
          "id": "d771231f-68d1-4b10-ab5e-9a6281e6ba68",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dad1a6d1-464a-4c93-abd4-8bae8c49a38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfa7223-f6ac-42b2-b644-9f58ac067b8e",
        "cursor": {
          "ref": "78764e5c-9fc1-4f93-a9ac-754f6c04ed6d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b5174368-f7a8-4cd3-896f-5df3cb6f6132"
        },
        "item": {
          "id": "edfa7223-f6ac-42b2-b644-9f58ac067b8e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1b70f013-065c-4328-8566-41c849d0ce02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2767e74-a86d-4303-9d30-66fcf0e00f0d",
        "cursor": {
          "ref": "8717e355-6a59-43de-8570-d2cbc399a33d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "25c5a512-71e2-4b5c-9a87-884dfa16ae46"
        },
        "item": {
          "id": "e2767e74-a86d-4303-9d30-66fcf0e00f0d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2af6e32f-3f3e-434d-8807-02a4d5e955e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf6057c-eda5-4c5a-9e11-2e5d40e814d0",
        "cursor": {
          "ref": "52a1e53b-e585-4e29-a49c-40752447ddd1",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2622556d-94ae-44ac-ba7b-2e5058349e63"
        },
        "item": {
          "id": "cbf6057c-eda5-4c5a-9e11-2e5d40e814d0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f476438b-3798-4940-a1ef-00530e2264b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246d4661-da9e-45e7-96cb-2ce437bab7ef",
        "cursor": {
          "ref": "a863ab2d-0937-4e9c-a319-a2b486d7a167",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2e0ef82f-6776-4e85-98ea-0409b6292879"
        },
        "item": {
          "id": "246d4661-da9e-45e7-96cb-2ce437bab7ef",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "61bc9563-750d-4290-af64-19e39dc6284e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7442b656-a7ba-463b-9e45-12d36f9802a8",
        "cursor": {
          "ref": "2b44db71-0c65-4b40-8881-5fb886b81b4f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0ad8c96e-03ca-4c5c-8c62-4582209fa800"
        },
        "item": {
          "id": "7442b656-a7ba-463b-9e45-12d36f9802a8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c76100a2-3811-4548-b854-b56008198f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f2e28e-7cc9-4d70-b5e5-2f5a94ebff7d",
        "cursor": {
          "ref": "bcacdf4f-633f-47ad-9529-ae28255fc217",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ee5abe8b-8cb4-4e8b-b33e-93bb8cc2596c"
        },
        "item": {
          "id": "f2f2e28e-7cc9-4d70-b5e5-2f5a94ebff7d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "89d168c3-7b43-4bb0-afde-665028479d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c01635-2120-437d-9280-ffdece315461",
        "cursor": {
          "ref": "1540b279-47c9-49ce-b1df-828a4ee9d8df",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "081b93ba-e206-4d45-9d19-7c8dd0b33123"
        },
        "item": {
          "id": "e8c01635-2120-437d-9280-ffdece315461",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0aa1fe14-fc2c-45aa-99fe-9710f3c20d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67696c1-c41b-456e-98c2-1f19d7694747",
        "cursor": {
          "ref": "9738a6fa-e5e9-4dfa-aff9-1ddb602f414c",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "53ba5704-0f7a-4b6d-b905-4aae458a9028"
        },
        "item": {
          "id": "a67696c1-c41b-456e-98c2-1f19d7694747",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d6bca247-4af3-4f8d-845d-cd8f1671fb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2824e3b4-a49e-41a9-b54f-15d382cc6424",
        "cursor": {
          "ref": "a36c8ec1-f52a-476a-9db7-a870851e18d4",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5ad23eba-70be-4523-a397-f7b984c76ef4"
        },
        "item": {
          "id": "2824e3b4-a49e-41a9-b54f-15d382cc6424",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f82be832-dfca-4145-89ee-5986bdb6d419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1ac441-b7c9-4f8f-8622-05e4fdfd796c",
        "cursor": {
          "ref": "52004d55-05a2-4086-afe0-4e2adfe17b32",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c42a55db-a79f-4942-9fc6-66a97c1f19d1"
        },
        "item": {
          "id": "4a1ac441-b7c9-4f8f-8622-05e4fdfd796c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "78287fba-a959-4514-9683-aac26358cbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71766e5d-9cc9-45c5-9de3-22087caad42f",
        "cursor": {
          "ref": "be092fbf-9b4c-4aca-845b-fc7586d59f8a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7861ba54-ac1a-429a-9260-71d30644dc17"
        },
        "item": {
          "id": "71766e5d-9cc9-45c5-9de3-22087caad42f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "be6136ec-6a26-4fd3-89d0-02b99fac5b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ea04ec-bca8-47e9-8c34-c744f5249cb6",
        "cursor": {
          "ref": "adf8381d-f733-479a-9dcf-36d79474e211",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b28c71ba-2d3b-497f-8c4c-2fa2bbe22659"
        },
        "item": {
          "id": "39ea04ec-bca8-47e9-8c34-c744f5249cb6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7f9c69a4-637e-4616-9d94-b93a311cdb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7860ad18-5c28-4e09-8724-fb376ca39576",
        "cursor": {
          "ref": "f508c832-3a8d-4b8b-9f6a-ef0df9059cd5",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "daf7d3e5-856b-4438-a13f-d971b0b44c62"
        },
        "item": {
          "id": "7860ad18-5c28-4e09-8724-fb376ca39576",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cf3deb06-0db5-4146-a82f-f38fc05b267a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3778892e-aa35-40a1-aafb-9ed44a650732",
        "cursor": {
          "ref": "5e852e23-1991-4be6-abbe-b50c65f1cac5",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "67ac1b0d-046d-4170-b7ea-9c2d900d6387"
        },
        "item": {
          "id": "3778892e-aa35-40a1-aafb-9ed44a650732",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "52fa0803-b338-4405-a8c2-486fd668b5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7640d1de-02ba-4be1-a525-1ed1d1a0271b",
        "cursor": {
          "ref": "bb88873b-ebba-4358-b6fb-c3b95f475604",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7cbc8256-679d-4883-91b1-fc7fdb734d1d"
        },
        "item": {
          "id": "7640d1de-02ba-4be1-a525-1ed1d1a0271b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4d30ba50-7ce0-4f48-ace0-67ec859978d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce83b1a3-3834-4bac-a96c-fabbf1105878",
        "cursor": {
          "ref": "ddb9d1c7-286f-44d7-aed2-89acdc57f5c6",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6228e7bd-3eec-4c01-be20-15ab52fbb1e1"
        },
        "item": {
          "id": "ce83b1a3-3834-4bac-a96c-fabbf1105878",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4481bdd6-aeac-43f7-81cf-49a514cd78c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaead1e-0510-4782-915a-320f0d4e86f1",
        "cursor": {
          "ref": "6089097d-597b-48c1-aeb4-2867e959e9f8",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a02ef581-5b95-4bb6-a61f-8c0627981095"
        },
        "item": {
          "id": "dbaead1e-0510-4782-915a-320f0d4e86f1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cbf12329-a8bb-4699-9591-e23407ecd5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda5148c-3f8d-4c5e-9da5-381f28a7d5dd",
        "cursor": {
          "ref": "e6d9b675-ca34-442e-8832-420c237c7e39",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "30c5bf6e-666c-44e7-9fd9-c5cd54600cb2"
        },
        "item": {
          "id": "eda5148c-3f8d-4c5e-9da5-381f28a7d5dd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e052a9b2-1516-4667-b82d-75a3e3ddcc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cc669d-cce1-4a6c-93fa-51101fb1ece1",
        "cursor": {
          "ref": "fc7e8427-e67c-4a86-8901-548c1ecd7d2f",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f3b82985-5552-455f-8136-11f5b731bafc"
        },
        "item": {
          "id": "33cc669d-cce1-4a6c-93fa-51101fb1ece1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "540991e7-bd27-4990-a93b-132357f928bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802f168e-de5e-487e-8254-a023ef7543e3",
        "cursor": {
          "ref": "b92360f5-94f6-49ba-8afd-073e380fb7fc",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cf9115ea-33fe-4ec1-bd96-4f38928a8c45"
        },
        "item": {
          "id": "802f168e-de5e-487e-8254-a023ef7543e3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "42fb7275-0af7-4bab-b545-d01383aa8a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1155d6d9-aeab-46be-ac99-e62cb9654331",
        "cursor": {
          "ref": "8c27e9da-b1a5-483f-988c-373e15b0384c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "33ecff86-9c94-420d-acf5-8a7f1490dc66"
        },
        "item": {
          "id": "1155d6d9-aeab-46be-ac99-e62cb9654331",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "39b1eee4-6ee1-467b-882b-0f8a7edc2c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b42e3e-5f15-4003-a053-4aeda236f426",
        "cursor": {
          "ref": "efa9fb0e-aaee-484f-919b-68012f932a56",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6fdb5b18-7a4b-43c3-981f-ad97712f9df5"
        },
        "item": {
          "id": "a5b42e3e-5f15-4003-a053-4aeda236f426",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3ad1349e-51ee-4bc7-8c04-9bc8604b2645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ccb7951-72af-4254-b908-59b33cf144c8",
        "cursor": {
          "ref": "61b61b6e-2381-481d-b8e8-bd083834c7bf",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f8a09e69-90df-4061-a008-80d4dd41d32a"
        },
        "item": {
          "id": "9ccb7951-72af-4254-b908-59b33cf144c8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0bfdd7dd-b6e9-4b7f-b452-82814847e0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f39098-80e9-4a88-a35e-83f93b1169ba",
        "cursor": {
          "ref": "ae57257b-2dd8-4505-8ddc-c6ad3e94ee58",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b34974ea-129c-4605-a769-d6452b6dbc0a"
        },
        "item": {
          "id": "95f39098-80e9-4a88-a35e-83f93b1169ba",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "05acefb3-0510-497d-bfd0-fb962697dcb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ebc6e6-b589-4f87-a22b-5de498fd7c4d",
        "cursor": {
          "ref": "7f924c0e-31f0-4220-b91a-cf9c5a365dec",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6330f61e-b5da-4ca2-9e73-9a3b044d2495"
        },
        "item": {
          "id": "88ebc6e6-b589-4f87-a22b-5de498fd7c4d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9dfa945e-6531-42a2-b2b0-e1c6ca3a4972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79c3b45-ff2f-4c47-a502-f61dccdb4f15",
        "cursor": {
          "ref": "3bf28375-4174-4af7-b371-9c16292d8fd9",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2376adac-9fc2-4414-9c12-e7de4f071ae2"
        },
        "item": {
          "id": "e79c3b45-ff2f-4c47-a502-f61dccdb4f15",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "854adf42-cf8c-44a4-9850-badf0940f627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329eb56a-30d6-465b-8bd6-bd5bddcfc86b",
        "cursor": {
          "ref": "0691981e-83a6-4cc6-9d19-66a68c5bb972",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "79469773-950d-4baf-a94a-1ab8eac5592b"
        },
        "item": {
          "id": "329eb56a-30d6-465b-8bd6-bd5bddcfc86b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4e940abb-eed8-4d3b-a810-df62bcbd477e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6fe993-6ced-482e-9e02-0fdd17191434",
        "cursor": {
          "ref": "fa3f019e-922c-4b54-a777-e4e08a850662",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ccf782a2-268f-495e-8879-e44d5f823d38"
        },
        "item": {
          "id": "8b6fe993-6ced-482e-9e02-0fdd17191434",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "46fc502e-3372-45fd-b9e7-acb7b16f65e5",
          "status": "Created",
          "code": 201,
          "responseTime": 544,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4ddb2795-6df6-4f1c-9464-b0f370648230",
        "cursor": {
          "ref": "63fe82c8-4cc5-444d-b9f6-568a6f2af254",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e2950d39-c555-483e-b608-44338cda0bbc"
        },
        "item": {
          "id": "4ddb2795-6df6-4f1c-9464-b0f370648230",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "48511c87-c19e-4e58-819d-8009750c0791",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7c2c7dd0-2b2d-47d0-bed7-f41e990b25d7",
        "cursor": {
          "ref": "e8d8d8c0-f074-4c2f-8077-59504c1f4301",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "544a6748-7795-49f2-acd1-9a02fd4411ef"
        },
        "item": {
          "id": "7c2c7dd0-2b2d-47d0-bed7-f41e990b25d7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5c3ea206-0929-4ff0-a661-d192549ea315",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "1c27b14c-bc4d-4647-867e-bc0ea4b72723",
        "cursor": {
          "ref": "6047e469-1924-429e-abb2-33010adf671f",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f5a4ea5e-ac21-471f-b957-b913238ec03b"
        },
        "item": {
          "id": "1c27b14c-bc4d-4647-867e-bc0ea4b72723",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "866f03ab-4a80-4d34-b6de-49134811123c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edac195-86d0-441c-88e9-33a5230f6737",
        "cursor": {
          "ref": "c9355105-c42f-4d8f-a0f6-d24902fa7d00",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "581adb42-6999-452d-9dba-f32261569c1e"
        },
        "item": {
          "id": "1edac195-86d0-441c-88e9-33a5230f6737",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "51b78dfe-db6b-4e84-bd0c-931f7c0e8fb4",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c6ef4e21-a88b-4935-9871-c6e0a7dfd729",
        "cursor": {
          "ref": "e32e06b2-dad4-4be7-8c77-4acf7b1ebc06",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6e5b77d4-f918-4451-a0fa-7e7528adad4f"
        },
        "item": {
          "id": "c6ef4e21-a88b-4935-9871-c6e0a7dfd729",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e66bd4da-b16a-49d5-84c7-da1ba1d4486b",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "24709200-66cf-45c5-9226-bcdf939b04e1",
        "cursor": {
          "ref": "025f33ae-4a73-48a9-90d6-d6ff079fe30b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e12caa60-0518-474b-a9bf-b8f81de5c216"
        },
        "item": {
          "id": "24709200-66cf-45c5-9226-bcdf939b04e1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9fa30b0d-6ccd-4feb-b926-96d33a25d02b",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "11907acf-ae96-454b-8686-32529327cd98",
        "cursor": {
          "ref": "50c408ac-7cb9-4895-984d-ac366b0b103f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9d6b1729-16fb-4e5c-934f-4fa37d75ece9"
        },
        "item": {
          "id": "11907acf-ae96-454b-8686-32529327cd98",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9e84d6d4-771b-4203-bc6a-c484207f0d53",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9bf2afec-226c-4725-875e-3478df8808d1",
        "cursor": {
          "ref": "4e41822d-00f7-4c14-bafd-29ecaeacfd2a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8fd7ab76-3308-489a-bf7f-75fda29386eb"
        },
        "item": {
          "id": "9bf2afec-226c-4725-875e-3478df8808d1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "07947e1e-153e-4208-bcb0-78d0ea08d396",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7b4e69b6-e622-4a51-b150-e1a8ad4adf82",
        "cursor": {
          "ref": "0a6ca34a-e1c7-48ee-b588-2d16a1a7af23",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b73ff3bd-b805-4f81-8174-3781ca14d2df"
        },
        "item": {
          "id": "7b4e69b6-e622-4a51-b150-e1a8ad4adf82",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2657cd6d-b1a4-420d-867c-269555bf66d0",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6bf3a624-e24c-44bf-a851-43b4a9420918",
        "cursor": {
          "ref": "1df9da7a-b6a8-4860-ad0b-fe88e7c6c1da",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b6c5c4fb-ed61-437a-93e4-3bdf65b27b7a"
        },
        "item": {
          "id": "6bf3a624-e24c-44bf-a851-43b4a9420918",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "93c033a7-8dec-433d-b905-03aceb4ed9ee",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a692d697-6a2f-4eb4-8363-422dca7b43ae",
        "cursor": {
          "ref": "9cc3c3c8-ae72-441a-829a-d1bb0aab775e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b92816f9-8c59-4b52-92c6-4596173e1ba6"
        },
        "item": {
          "id": "a692d697-6a2f-4eb4-8363-422dca7b43ae",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e92b358a-4f5b-4444-90d2-85000f6736c7",
          "status": "Created",
          "code": 201,
          "responseTime": 440,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5da6649d-f633-42ff-8928-9f3830bd315f",
        "cursor": {
          "ref": "081856bb-37d1-4f61-9483-81b7f15e70df",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "95e36af4-0859-48a6-928a-7aa683938a5a"
        },
        "item": {
          "id": "5da6649d-f633-42ff-8928-9f3830bd315f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e9ffc1a3-0702-4e48-a2f4-4d80ad86338b",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a42a9f69-d642-4e17-bdcd-d0528f6a7e4c",
        "cursor": {
          "ref": "7cf3b900-b656-4bb6-95a9-241b47f7bb53",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c0e83a80-20f8-4462-b28f-337b8441a631"
        },
        "item": {
          "id": "a42a9f69-d642-4e17-bdcd-d0528f6a7e4c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0ccd2f79-8ec3-423b-8801-f0dee258f6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f19638-adac-4fee-bbd5-3aac25ee898e",
        "cursor": {
          "ref": "2999eb31-8979-41d5-b164-3eaea95f6e35",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "36510a20-ba78-4256-85d6-7595f6d164f6"
        },
        "item": {
          "id": "d8f19638-adac-4fee-bbd5-3aac25ee898e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c9e9ec2a-798a-49d5-a830-36c336d304c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf32160a-abeb-4b86-851c-27dff574b29f",
        "cursor": {
          "ref": "7a66727c-1d40-4ff2-b329-12bc454eec0f",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5600d86a-4003-4f3c-8272-7d13f37ce85b"
        },
        "item": {
          "id": "cf32160a-abeb-4b86-851c-27dff574b29f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "69c708f3-e445-47bc-ab3e-6f10ab0d12f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2348a1f-56b7-4e89-a5d8-f4e300e0c4ae",
        "cursor": {
          "ref": "ad8e4319-8137-4f6b-82f7-08feb0523c02",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "143e2fdc-2bdc-48cd-91a5-27f1fdcb4b95"
        },
        "item": {
          "id": "b2348a1f-56b7-4e89-a5d8-f4e300e0c4ae",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "41f33da0-cda1-4d1d-9f2a-74b174dde24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ac1c50-4560-418e-8ec3-4449c05229e1",
        "cursor": {
          "ref": "45189850-d165-46d7-ad02-7b13ea505c60",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6f47a21b-3f3d-454a-aaa6-33f6d99198fd"
        },
        "item": {
          "id": "d3ac1c50-4560-418e-8ec3-4449c05229e1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6aef3ad8-bbfa-4711-b0cd-1cdd09b22b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff549720-a33b-458a-9c66-869cac72973d",
        "cursor": {
          "ref": "edd6d5c6-345f-45cf-af62-af6b976c4e8a",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bc82ad6b-3930-4281-b65f-aac0ef9fd05f"
        },
        "item": {
          "id": "ff549720-a33b-458a-9c66-869cac72973d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b4afcc33-2e4f-44db-b907-4f67d7e39b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfea0df-b1f2-4def-b04b-2b5415d81c0e",
        "cursor": {
          "ref": "fdf8e7ee-99ed-4d60-b437-144182bb6ddc",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c45af77a-7512-4aee-932d-041a05b84072"
        },
        "item": {
          "id": "3bfea0df-b1f2-4def-b04b-2b5415d81c0e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e28bdf40-fdbf-4c85-b62f-2cc2292f6a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76af8e7f-d4ae-43a8-b853-d7a3ad231826",
        "cursor": {
          "ref": "2bfb266f-10fb-485a-b13e-ed3532513f9f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3736df61-6ecf-4097-baaa-e454209c65c5"
        },
        "item": {
          "id": "76af8e7f-d4ae-43a8-b853-d7a3ad231826",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0eed91c1-d5f9-4a0f-8935-4ceec2e0c41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8127b3df-1bd5-4ca1-b5d4-905e4db2b938",
        "cursor": {
          "ref": "9a6a35a3-4c2e-4ef1-842e-098295510fe3",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bf6f3484-3487-4385-b2d0-b9ba2bc5c3c6"
        },
        "item": {
          "id": "8127b3df-1bd5-4ca1-b5d4-905e4db2b938",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "563f5889-6aac-4671-8409-ad543550e492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3c6087-10c1-4f6a-8cec-05a8fd2b0d12",
        "cursor": {
          "ref": "8477bff4-1e73-4bf6-aaa1-066819ea5ec3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f17e6648-1474-4aa1-997c-eb2c39f57523"
        },
        "item": {
          "id": "ec3c6087-10c1-4f6a-8cec-05a8fd2b0d12",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fb7782b0-7f24-4e81-88d9-3c8d06586a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1854d640-aa90-4407-b13a-7be6dac71dd4",
        "cursor": {
          "ref": "05a41e12-3c27-4b40-8be0-66c82005f0bb",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2a59c91d-35b5-48be-9898-37fde367d21a"
        },
        "item": {
          "id": "1854d640-aa90-4407-b13a-7be6dac71dd4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ae83ed6c-e66f-46db-ba26-146f8e8105ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75421b2-3cc6-4888-bef7-2b3e0f981b2e",
        "cursor": {
          "ref": "5b8b2786-973d-4dc1-9325-2b870301df55",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "16913c5f-31e5-4a43-9270-47c085108799"
        },
        "item": {
          "id": "c75421b2-3cc6-4888-bef7-2b3e0f981b2e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "44b90357-2ed9-4df8-bd55-62b06518a8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8c0e6e-6711-4c6a-a996-81edaf880ae5",
        "cursor": {
          "ref": "f1265c74-c3da-4b2c-9b96-343abaa08646",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2a655481-767a-4b7c-aad1-1b4620d49fb3"
        },
        "item": {
          "id": "4c8c0e6e-6711-4c6a-a996-81edaf880ae5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "69149c5c-e844-4e10-a62a-c7e3de0b018a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb9e18e-a76f-4352-b37d-fcae0eb3f54e",
        "cursor": {
          "ref": "7a9a6d9c-935d-45c6-8f09-c5cfd04fef4b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fdc8022a-0f85-4007-91db-b05b7ea0c778"
        },
        "item": {
          "id": "ccb9e18e-a76f-4352-b37d-fcae0eb3f54e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a0562ae6-649c-4b16-bfad-7f496fe78fc5",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "497281a1-d248-4ba3-bd5e-5018791748b0",
        "cursor": {
          "ref": "71b25f67-96da-4c47-8519-4a57a854fb55",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bffa6224-1ad0-4b65-8c9b-816339eabe4c"
        },
        "item": {
          "id": "497281a1-d248-4ba3-bd5e-5018791748b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "06390f9c-18c1-4244-ba36-a0d633e79d0e",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3dbec489-2704-4853-b421-ea78b10fac7b",
        "cursor": {
          "ref": "2e2cb893-eba9-402f-adfb-f6032ef7ad75",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "70765906-bf1a-4103-bb45-12ae66fac634"
        },
        "item": {
          "id": "3dbec489-2704-4853-b421-ea78b10fac7b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "da854028-f2d5-47af-ab1b-4491a0a40856",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c628db4e-b423-4127-9e54-1cd4328facab",
        "cursor": {
          "ref": "dd2268c9-75d5-422a-a787-6dbb22b52054",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "701df237-9ebe-4d01-a984-7cdbdfb1c884"
        },
        "item": {
          "id": "c628db4e-b423-4127-9e54-1cd4328facab",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e93d0a8d-dc5d-4708-aa4f-3bed68d9afe2",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "54682cbc-ee5d-463d-bbf3-da5e13fd9943",
        "cursor": {
          "ref": "8dc487d8-59ae-4379-83de-00c143ea1521",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "21d6fd67-fe11-4564-8ee3-f085db827036"
        },
        "item": {
          "id": "54682cbc-ee5d-463d-bbf3-da5e13fd9943",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "48134203-2c38-4e4e-90fe-aa769f02d66e",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "02b617e1-797f-442c-8a71-cb5303faeba3",
        "cursor": {
          "ref": "53f10a5e-0d5a-40d3-85b8-17089faffe7d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "56569863-422c-4720-a2c4-4212e30bd230"
        },
        "item": {
          "id": "02b617e1-797f-442c-8a71-cb5303faeba3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2562232f-adda-4104-a8b3-2d3f5dc66476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21985f44-8a6d-43ab-b7c1-4a74b6e56222",
        "cursor": {
          "ref": "a3809b1d-236b-4def-8b14-7654cb28e36b",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4358180b-2a07-4e94-a350-596d809ee01f"
        },
        "item": {
          "id": "21985f44-8a6d-43ab-b7c1-4a74b6e56222",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "07d26a80-4718-4967-9563-ac6482b6e32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09abb42d-2c0a-4bc4-a920-321ae6fb4666",
        "cursor": {
          "ref": "21d3e412-238b-4d63-874c-8570275c7571",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d1bc7b23-f3e2-4607-b0ad-aa9dbfeb5076"
        },
        "item": {
          "id": "09abb42d-2c0a-4bc4-a920-321ae6fb4666",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8f157b89-5b42-4b8b-851d-e3df066972e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee307546-3daf-4221-a056-d63c53656e44",
        "cursor": {
          "ref": "7e0c0f80-5118-4353-b0da-43f9e7cfa11f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d1f4979a-76e5-49d0-b2f0-74a223447583"
        },
        "item": {
          "id": "ee307546-3daf-4221-a056-d63c53656e44",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e3d756ad-091c-4440-ad7d-f62a93aced7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded0df57-5f65-4486-a9e1-60a496ae7a5e",
        "cursor": {
          "ref": "ab007682-ecb1-454f-90dd-664656ef8ba0",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "962f9642-9f3b-44cd-aa46-18fd019e0fe8"
        },
        "item": {
          "id": "ded0df57-5f65-4486-a9e1-60a496ae7a5e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "95fead9e-9b09-4836-ac33-51e6bfb97ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966ae3e7-4734-4c97-9953-940018762fdf",
        "cursor": {
          "ref": "ef613b0f-6bfa-49f5-909b-14c851c0ad55",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "419b2b5f-40bb-46d9-b31e-a7a8383dd1dd"
        },
        "item": {
          "id": "966ae3e7-4734-4c97-9953-940018762fdf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e0dd4c74-7897-4141-833b-51a5793eed06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c18743-83a2-4760-8702-eabfcce719fa",
        "cursor": {
          "ref": "2c1f1cf5-3eef-4135-b4d6-1a73e3494b4c",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e386e24e-ff7e-4ea4-8a22-8b950726d14f"
        },
        "item": {
          "id": "67c18743-83a2-4760-8702-eabfcce719fa",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4c15e0b7-a1e5-493d-8ef1-34f8f6af0507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf254df-05f7-45c0-b52a-c75aa2e320fd",
        "cursor": {
          "ref": "86154f5f-3108-4c66-b8fa-514bf850ae53",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eae609d3-3a88-40b7-8882-047698910ce8"
        },
        "item": {
          "id": "3bf254df-05f7-45c0-b52a-c75aa2e320fd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7f7706d7-40cf-4ebb-bf48-c6c97facff39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64846e9-16c6-428b-b5b4-dca3f5e61aee",
        "cursor": {
          "ref": "2deffdd4-5353-42d7-803b-753825278fa8",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5ee1a976-170f-49e7-bdfc-d693030be0ff"
        },
        "item": {
          "id": "d64846e9-16c6-428b-b5b4-dca3f5e61aee",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3a740a6a-8dfb-467b-9126-f6e17982b306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871f2fe5-400c-4d51-834b-ad6c66118bd9",
        "cursor": {
          "ref": "ad2d07ed-482b-46bc-ac40-fc2fedfa9f78",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e32435af-528d-4052-b759-85aef7442ce5"
        },
        "item": {
          "id": "871f2fe5-400c-4d51-834b-ad6c66118bd9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d2cf2177-12ce-4f33-9973-dff4c78882c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4499d21b-4966-4fee-b661-e40938f2cf44",
        "cursor": {
          "ref": "eeb27d40-3be2-4bd0-97e4-2c18a4c6ff85",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "10ca8c7e-d3ce-4e4e-b914-2bbbfb74c33b"
        },
        "item": {
          "id": "4499d21b-4966-4fee-b661-e40938f2cf44",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cd42de2a-7f24-4449-959c-4b1876dc2b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c480d9ba-2402-414e-8ba4-a58ce9557b64",
        "cursor": {
          "ref": "ba9d1b4f-6c18-4770-8356-dbb21dcff930",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "cc165d2e-7bfb-459e-8352-a8cb2fd06fe9"
        },
        "item": {
          "id": "c480d9ba-2402-414e-8ba4-a58ce9557b64",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "292a8782-b668-4625-93aa-713e32972ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c77a32-17a7-4383-a198-7700bd52f056",
        "cursor": {
          "ref": "d15f4853-69fe-482f-94bb-3e3c0dc85ba9",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "db82fc0f-fa5d-4ba4-86d6-a1cfd1fe1a16"
        },
        "item": {
          "id": "12c77a32-17a7-4383-a198-7700bd52f056",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7e7a41d6-5d24-41f6-a632-704607626d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627c66bc-73c4-41b1-8c5c-2eea198888ad",
        "cursor": {
          "ref": "5d4ae18f-e9fb-47ad-b4b7-d4e96afd7f70",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d329ff6d-1eea-420f-9367-2fe6400799ac"
        },
        "item": {
          "id": "627c66bc-73c4-41b1-8c5c-2eea198888ad",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d61734b6-4479-4776-bced-5c3abf5ac3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647d5742-8144-43e9-84c9-a10debb5fc4f",
        "cursor": {
          "ref": "296d9417-e0b3-4dc3-ac26-8ebca5dc7434",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "01c63ae4-a96f-49f3-8d47-4d9745f057e1"
        },
        "item": {
          "id": "647d5742-8144-43e9-84c9-a10debb5fc4f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d2022362-c36c-426b-90cf-a2bf0b090d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc93975-be2a-4c0c-bdac-edb6761097ea",
        "cursor": {
          "ref": "26494398-10c6-43c5-a583-60ef6f7c6baf",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3ef4784b-93e3-4722-b185-8af45d8ec818"
        },
        "item": {
          "id": "3fc93975-be2a-4c0c-bdac-edb6761097ea",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f58de0e8-eeb1-42d8-8086-109070ce4463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93047af-09f3-4aac-ac04-511e6b2dad01",
        "cursor": {
          "ref": "12ebfd3f-99c5-42fa-b210-f5229f149d92",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "59d469d3-286f-496d-a943-f0fc0f901898"
        },
        "item": {
          "id": "f93047af-09f3-4aac-ac04-511e6b2dad01",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b27ec928-d95b-4da1-a074-4bb8aef74c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c522c2-8b72-45a0-a562-949040024a81",
        "cursor": {
          "ref": "56f995c4-a399-479e-90db-0370808bf0fa",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "53e92559-1e4f-47f6-a841-4854fb96a66b"
        },
        "item": {
          "id": "13c522c2-8b72-45a0-a562-949040024a81",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2e89a2a9-5659-4527-9333-965fde1b22d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba7bb5d-99f0-46c7-9c87-e6957f7b24c0",
        "cursor": {
          "ref": "b27cd735-fdaf-4558-9ffa-2a83a5e6a9b6",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9dcb2a17-c0a9-4f0f-b45e-10c209fbd94b"
        },
        "item": {
          "id": "bba7bb5d-99f0-46c7-9c87-e6957f7b24c0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "998236a7-3812-439a-b127-213b7d78410b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454547c1-cb64-4bca-9ef7-14c333ea22ee",
        "cursor": {
          "ref": "0387fa31-cf4a-4577-b430-fe613714bb10",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4b65c205-fd0e-4fee-b5d8-487d5df24787"
        },
        "item": {
          "id": "454547c1-cb64-4bca-9ef7-14c333ea22ee",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9e176a06-e2d7-449d-83af-1c8a1e59d22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62f933d-e9db-42e0-bfbf-4f712855e2a8",
        "cursor": {
          "ref": "ee2ffcf2-5dad-4191-8a37-87f156b57149",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6b6c22ff-f6b4-4928-b3ea-f7581c8b1a38"
        },
        "item": {
          "id": "f62f933d-e9db-42e0-bfbf-4f712855e2a8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d206cb1a-1971-4e61-b441-93645a770d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94641cd-c61f-4857-9276-367517b4e1e6",
        "cursor": {
          "ref": "4c71bd0f-5944-4374-bac1-950a3dd6018f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7fb10bd8-bcdf-402c-89a9-ccf120b5db48"
        },
        "item": {
          "id": "a94641cd-c61f-4857-9276-367517b4e1e6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b0e5ec11-f4a1-4eab-9896-021743ee5f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74484eb-a113-44e2-92eb-d9b8b1f847a4",
        "cursor": {
          "ref": "8e555c2c-5756-48a8-9887-b73b6e48c1ec",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a09d19de-b314-409c-bf1a-7236fc736c3e"
        },
        "item": {
          "id": "c74484eb-a113-44e2-92eb-d9b8b1f847a4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d4e64524-490f-4358-a7c0-d76f0cee7d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3622df-caf4-42f0-a5ba-fc925a0e6510",
        "cursor": {
          "ref": "835e6ba6-e852-4244-b0f4-241b75ecf50d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4d4cb778-a77f-492b-8a28-c7ebeb0f55e2"
        },
        "item": {
          "id": "4a3622df-caf4-42f0-a5ba-fc925a0e6510",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "67ffb8e7-2031-4d18-b4c7-b5904973214b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df3e5b5-6c6d-4efb-844f-73e2b5f54b2e",
        "cursor": {
          "ref": "17c29b6b-11e1-419e-8b39-112b6fba49c7",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c3c48e4d-8218-4329-b122-d7c5d732b8fd"
        },
        "item": {
          "id": "6df3e5b5-6c6d-4efb-844f-73e2b5f54b2e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "37cddb72-9f2d-4e6c-a9e4-c8023fa97e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7aecae6-b4eb-4b75-8f66-60481212dbc4",
        "cursor": {
          "ref": "2c66e006-d5d9-462b-a88f-fe37a89ccfc1",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d6fc7a67-25d5-46af-91b5-95f7e81c1463"
        },
        "item": {
          "id": "f7aecae6-b4eb-4b75-8f66-60481212dbc4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "580bd692-38cc-40d0-bdb5-c438987289c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987e68b5-8ba1-4c5a-a9c0-28ec40a64b06",
        "cursor": {
          "ref": "5ab87153-ba79-49a4-9c76-834322922ce3",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b0c631e7-047b-4498-ad32-a0cc9c40e780"
        },
        "item": {
          "id": "987e68b5-8ba1-4c5a-a9c0-28ec40a64b06",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "35fad57e-4437-4a5c-b515-8d52c589ce1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96f4a39-377e-407c-b4bf-09f377aef36c",
        "cursor": {
          "ref": "b643270d-3deb-4fa5-98c8-5163335c3d51",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "402a95e5-553e-489d-a432-aa797b91836f"
        },
        "item": {
          "id": "f96f4a39-377e-407c-b4bf-09f377aef36c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d3bc9995-7e81-48be-8918-a20c56708f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d8d3bc-3ba3-4f46-907a-dfab1c2e93c7",
        "cursor": {
          "ref": "e72d244f-bb3c-4742-af7c-566e265cf526",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bce69f38-2093-4509-a154-a8a1e5a3233d"
        },
        "item": {
          "id": "d9d8d3bc-3ba3-4f46-907a-dfab1c2e93c7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "78ad69d9-1a75-4e62-accb-f7ce0e790cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e375e29e-31f9-4ff9-a801-84842fccf1b9",
        "cursor": {
          "ref": "16ba53ae-76e4-4371-8453-f83d3e97abe9",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cf1443f6-f8c7-4b2d-a352-b6a0a090d783"
        },
        "item": {
          "id": "e375e29e-31f9-4ff9-a801-84842fccf1b9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "be4a8a89-be28-4b69-b2ab-78b55c9d72cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988ff335-4fe6-4eb7-832a-835df7064ebb",
        "cursor": {
          "ref": "ba2540ba-cbe6-477d-9aff-55ec67504eb8",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fd9d9a59-2e46-45ad-946b-a83e5b1291a2"
        },
        "item": {
          "id": "988ff335-4fe6-4eb7-832a-835df7064ebb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "10294795-bd6b-448e-9a4b-0131651fb31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9edb08-7a27-4e07-91b2-b42680fb4590",
        "cursor": {
          "ref": "8f10cbea-9a5e-49a9-96d8-4b81a7b669fb",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d04057cd-f991-4dfb-b23c-47ce05167c4d"
        },
        "item": {
          "id": "9e9edb08-7a27-4e07-91b2-b42680fb4590",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d581c00e-edeb-4f37-897d-5d8c526899a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222dcf61-9a00-4e18-857e-d75c5de563b7",
        "cursor": {
          "ref": "a1ab26ca-a5c8-4b07-891b-9fb995ab98d5",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6a12ee42-893b-464c-8e5b-964e55b10257"
        },
        "item": {
          "id": "222dcf61-9a00-4e18-857e-d75c5de563b7",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d3c073a2-cf1d-40dc-a271-bacd1a9a0ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "8a3f1bb3-aacf-4647-a852-d457ac02a531",
        "cursor": {
          "ref": "b005c1f6-ac44-4501-bc2c-450c634e2533",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d764a062-4fff-46d0-94d2-91e86a1c2813"
        },
        "item": {
          "id": "8a3f1bb3-aacf-4647-a852-d457ac02a531",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fd86a3ed-4a1e-47c2-a184-934b0aa565c7",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b829f3-7429-4b48-a082-9e31b0a2a443",
        "cursor": {
          "ref": "b479ce14-7516-4364-af2e-cc328ec7690d",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b63dc7c3-e618-49a8-9982-3a52191d01cc"
        },
        "item": {
          "id": "c7b829f3-7429-4b48-a082-9e31b0a2a443",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7eb02c55-fda8-4ee5-88f5-c0801b631ec7",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b70c4b-dd58-43d8-94ee-be5afdbcdae1",
        "cursor": {
          "ref": "51415712-f508-4040-95a3-6b65b0f62356",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7ba045d4-23ea-42c1-a74f-bece14f2e512"
        },
        "item": {
          "id": "38b70c4b-dd58-43d8-94ee-be5afdbcdae1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "10d0694c-356a-454a-91fc-ce15bbee127f",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7775df69-9301-4466-a26e-bddc19eeedb8",
        "cursor": {
          "ref": "29d7f954-9ef5-4897-a06c-c9febd903eff",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "956ab873-6fa4-4900-8d5a-52ba28fc2072"
        },
        "item": {
          "id": "7775df69-9301-4466-a26e-bddc19eeedb8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "003197fc-ab88-4c79-9636-2ba718bf42a0",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c0bd38-04ee-41ee-88a1-81124210fa4a",
        "cursor": {
          "ref": "bcd4c76e-6dbd-4cd5-8816-395f7d52bbcb",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9b57254e-daea-48eb-a1c3-b60bf5ca351e"
        },
        "item": {
          "id": "50c0bd38-04ee-41ee-88a1-81124210fa4a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5258186e-4f97-42ff-92e8-fe68558ee7a6",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-07T00:32:43.101Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-07T00:32:43.101Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "fd177772-3978-428b-a93e-8c98dee0471c",
        "cursor": {
          "ref": "581ebde0-ba3f-41c2-aff9-2817b09d1d7a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a3c079c7-5b40-4959-9756-f6fcd7ce386d"
        },
        "item": {
          "id": "fd177772-3978-428b-a93e-8c98dee0471c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6230c1f2-7a59-416c-ab6f-972b29188c45",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab6bcb7-97b7-4782-adf0-9672966c2a55",
        "cursor": {
          "ref": "93f7913c-3c47-4b27-b432-d7a23ab5d73d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4d8c4792-72eb-4db0-99af-d68f5b143601"
        },
        "item": {
          "id": "eab6bcb7-97b7-4782-adf0-9672966c2a55",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "320dfe21-e344-493c-8aca-b9b24cac0967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a37383-87c6-43f5-a881-3925c148262e",
        "cursor": {
          "ref": "fb5fa045-af3e-42f0-a70b-40f192309c41",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0424f912-4b84-4214-aa72-cc844b765381"
        },
        "item": {
          "id": "08a37383-87c6-43f5-a881-3925c148262e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d36dc8b3-9a83-45a2-ad35-b97298caf826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcb16b6-e67a-47c7-a7d4-b271887d4e0f",
        "cursor": {
          "ref": "628c234d-a528-41ad-8789-3c266604ffe5",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "73efa69d-8ffb-4e13-9d08-0c0eeb6c08cf"
        },
        "item": {
          "id": "5bcb16b6-e67a-47c7-a7d4-b271887d4e0f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d6d8ad95-fe69-4519-8e94-18db25747077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b03c3d-aa6d-4386-b99e-d01d0e4139a9",
        "cursor": {
          "ref": "8cfc6941-63f3-405c-b511-b75751a46d90",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "002e4e7f-5b51-49bd-a69c-82ef2a1fa66c"
        },
        "item": {
          "id": "b6b03c3d-aa6d-4386-b99e-d01d0e4139a9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e8fda2e3-833f-4e5c-8693-1a95615a7ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0180ff-f537-484c-bb63-ada086183cb1",
        "cursor": {
          "ref": "96d737b3-4890-4cd8-815a-3e551bd1ce5a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "94326d0a-d71a-4ca8-978c-80acf49f815e"
        },
        "item": {
          "id": "1b0180ff-f537-484c-bb63-ada086183cb1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1a578126-1e61-4b8a-96b6-71202b7f2097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8802bd6f-0bd8-41e8-8fd9-721571a9e2b4",
        "cursor": {
          "ref": "ac884ef0-ca69-49fc-83a3-7aa29486a604",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4f4889ae-9518-45d9-b822-2666922250a7"
        },
        "item": {
          "id": "8802bd6f-0bd8-41e8-8fd9-721571a9e2b4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c9e15535-5146-4fc8-a072-140342a03a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efda4f6-663e-4957-8936-f366550d22eb",
        "cursor": {
          "ref": "a4f5f4f9-aa68-4794-8314-082d7a0eb31a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a5af6ff8-4f95-4961-910f-8dfe45983c73"
        },
        "item": {
          "id": "0efda4f6-663e-4957-8936-f366550d22eb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a94408ab-b9c9-47f8-9ab1-9b40f15ea7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619bbfdc-04fc-48cc-ad1e-b1147ca3918e",
        "cursor": {
          "ref": "648c0a0a-5d86-41fd-9e68-aa984dd2921d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "05fa447b-b2a4-4304-853d-1f6406486407"
        },
        "item": {
          "id": "619bbfdc-04fc-48cc-ad1e-b1147ca3918e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "892ab4a3-8735-4286-8a8c-4e63fedb7c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e74d44-9a83-4736-b6e1-f2b67e82f7bb",
        "cursor": {
          "ref": "c7143e87-3b80-4a67-a5aa-bb4cebf2a534",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d4fd52ac-2203-4985-b998-1771755c2d13"
        },
        "item": {
          "id": "17e74d44-9a83-4736-b6e1-f2b67e82f7bb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "397776c4-9a91-4471-b6df-31f5dbe57759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7c8b03-e8fd-4395-a27e-2f3defb9e9cc",
        "cursor": {
          "ref": "f27baa7d-a1db-4077-a80b-f0d751dfea4d",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1ed763e2-19b6-4179-9c52-f3445181ffe3"
        },
        "item": {
          "id": "5e7c8b03-e8fd-4395-a27e-2f3defb9e9cc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b16ae613-003e-4ade-8380-5897507e9dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236fa473-fbc4-4d6c-8204-0f5b05709c62",
        "cursor": {
          "ref": "e40a22fc-a06c-4a25-93f9-3d0b7dfe877a",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3c129b17-08c3-4bd3-99df-65f5bb67ceb6"
        },
        "item": {
          "id": "236fa473-fbc4-4d6c-8204-0f5b05709c62",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4006d219-d2f7-42cd-b19d-b75ffb0401ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b26ab2-44fb-4dcd-a4f8-243a6ebeb9ff",
        "cursor": {
          "ref": "42a11409-435f-4965-bb50-063f75258aed",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a4dc8950-1004-4193-8ce0-909407b371b8"
        },
        "item": {
          "id": "b3b26ab2-44fb-4dcd-a4f8-243a6ebeb9ff",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "efe8075c-07a2-448b-9f4f-fb5d592da49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac5c736-4c85-43a4-b26c-89bc002f2f1d",
        "cursor": {
          "ref": "19adb7cb-2d7b-4a80-8596-8aeac19ad34c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bc4d41ae-c4ec-4f74-a107-04a7660c0dda"
        },
        "item": {
          "id": "3ac5c736-4c85-43a4-b26c-89bc002f2f1d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c8b899b4-8e4e-4dbc-b602-38d1c858627c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1d32878c-be74-4640-b5cf-a9ff12dd5e4d",
        "cursor": {
          "ref": "abc9b703-1636-4267-a23a-92818d3882d6",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "258ec0cc-7904-48a6-bf61-0c10adb58cc8"
        },
        "item": {
          "id": "1d32878c-be74-4640-b5cf-a9ff12dd5e4d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "69743a82-3a75-41d6-8f8a-94373eadf86e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f9af93ea-c681-4336-8fa7-d9b25416a151",
        "cursor": {
          "ref": "39392529-30a8-46f1-810a-3e1740c05d8e",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0e0d2c1d-ea7b-4e7d-8145-8719e787b3ea"
        },
        "item": {
          "id": "f9af93ea-c681-4336-8fa7-d9b25416a151",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2b07ccc5-149d-437b-8922-8467b410892f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e9df6f-b601-4ae9-9e69-be67b2607bcb",
        "cursor": {
          "ref": "810bc0de-b355-4898-b2f7-0fab0ed432e3",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f6cfc8a3-8a98-45a3-b085-4ecc1b0ee119"
        },
        "item": {
          "id": "d3e9df6f-b601-4ae9-9e69-be67b2607bcb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f96e32bd-894b-4d04-8622-138503fd5f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30372fd-9783-4863-8746-2a3cd656808f",
        "cursor": {
          "ref": "62500b83-8975-4e3f-a4b2-dfbc5f97f79e",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cea81d13-eaa2-49b7-ba8d-758f16502631"
        },
        "item": {
          "id": "b30372fd-9783-4863-8746-2a3cd656808f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6ab4fe52-497f-4e94-b083-6abc1ee2d5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e48f7db-bec3-4151-8e22-7a3486ab7772",
        "cursor": {
          "ref": "10605a0f-a039-4756-af8d-ce16233e6bc6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e8a7d541-1e5e-427d-8a87-08c7d9ccf6df"
        },
        "item": {
          "id": "7e48f7db-bec3-4151-8e22-7a3486ab7772",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b00e05b9-4ef7-4498-b27b-725ee446018d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0599167e-d7a3-4d2b-91fb-c9d6c1a8eaeb",
        "cursor": {
          "ref": "7af05834-e335-49c5-a01c-f92eca730c18",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "424a6134-c3f3-4632-a395-521a227aa347"
        },
        "item": {
          "id": "0599167e-d7a3-4d2b-91fb-c9d6c1a8eaeb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "57945792-f7a0-46a2-9e50-0a6e338cb019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f276c07-8b44-4ddd-b980-8a273d1257c0",
        "cursor": {
          "ref": "9ed11484-6888-48fe-bb86-cb8dcd9b3ca4",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "296785c3-0c79-4104-94af-a317d247a407"
        },
        "item": {
          "id": "6f276c07-8b44-4ddd-b980-8a273d1257c0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fb4f8b6b-70d6-4528-9bd0-2469aa2ee30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7de5ea-669c-4161-81a2-b2c98c167ddd",
        "cursor": {
          "ref": "94f192b8-7457-49dc-843a-bb7f5d4ee9cd",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "107ee1e0-b016-4745-9fe0-26f4e4f9558a"
        },
        "item": {
          "id": "5a7de5ea-669c-4161-81a2-b2c98c167ddd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "88f73aaf-691a-4567-bd30-e6d9e4b24e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68231f3-fa16-4680-9941-fec84022994d",
        "cursor": {
          "ref": "1c70b648-2ff6-4dd0-a090-c36ea7b3d010",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "aff99c3a-80b3-4406-ab29-db4ab27ccd8b"
        },
        "item": {
          "id": "a68231f3-fa16-4680-9941-fec84022994d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fa1f882c-845c-4e38-a491-8984277971d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7026ca4c-031f-4820-a2a2-78560f3bc61e",
        "cursor": {
          "ref": "13593898-a93b-4a8d-a18e-7ffb2d90f4d2",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8f7e024e-e4d0-4847-80c0-67afafabead5"
        },
        "item": {
          "id": "7026ca4c-031f-4820-a2a2-78560f3bc61e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7371dcf8-d348-48e2-803d-6d32fffec560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a802df9-a3fd-450b-923c-7d1aa949f7be",
        "cursor": {
          "ref": "8f110294-8246-4821-9d24-902bf43bdeb5",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bf22fd0c-fc6f-4913-9175-ef4506b654a2"
        },
        "item": {
          "id": "3a802df9-a3fd-450b-923c-7d1aa949f7be",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1fef5c25-4458-49be-85b3-1a58c0e1d33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71df4b3e-096d-4c06-9d7b-2eb5042816e7",
        "cursor": {
          "ref": "c4c43438-bb04-4f5e-a8c0-f4fdf52b7261",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cf8cd22d-68f8-4bbe-80b3-28fe5951e2e7"
        },
        "item": {
          "id": "71df4b3e-096d-4c06-9d7b-2eb5042816e7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1cf5e538-7632-44b0-adb1-ae483d361e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd244b3d-105c-4c02-b889-bd24adcfd220",
        "cursor": {
          "ref": "527be99a-77d8-43b4-836e-e510f0c56cd0",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d93447e1-3452-40ee-ae22-d33553af0bbb"
        },
        "item": {
          "id": "fd244b3d-105c-4c02-b889-bd24adcfd220",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "55092b79-7d5a-4637-b760-35ffd10fa059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d62acc-a5ad-4cc8-aaf8-cfabcf56ca92",
        "cursor": {
          "ref": "60922241-7314-4f85-9957-e9660539b47e",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a993d04e-b452-414f-a586-da15ee4bc50b"
        },
        "item": {
          "id": "63d62acc-a5ad-4cc8-aaf8-cfabcf56ca92",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "81251939-0a66-4224-8d02-34144a241de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c74643-c358-4a9b-b25d-d5ab73cf3fdd",
        "cursor": {
          "ref": "5f617e5f-8c4f-43c6-89cc-483c8988c45d",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3220ed7c-f02f-4db4-934e-309efdc9dfd2"
        },
        "item": {
          "id": "a3c74643-c358-4a9b-b25d-d5ab73cf3fdd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4b45ea55-bcf6-4a45-94bb-2e029d0c0422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bdd6bcb-9fe3-4e3b-8cf0-f005b112fbf9",
        "cursor": {
          "ref": "324690ea-2753-42b9-9504-ca168304381d",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b9480e64-e332-4773-a95c-aa9f9fde2a0d"
        },
        "item": {
          "id": "7bdd6bcb-9fe3-4e3b-8cf0-f005b112fbf9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2c42cd46-dc59-4bb8-bfc0-831f213d1be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49b6b56-d99d-4977-8599-7fc643bc1af9",
        "cursor": {
          "ref": "45f4be0a-c4c8-4894-834c-d1de051cfe44",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7bad356c-76f0-4dfa-b76d-5549a586df68"
        },
        "item": {
          "id": "c49b6b56-d99d-4977-8599-7fc643bc1af9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "eaf91fa0-afd9-4892-bc85-5ee11f177401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae6d2e1-0b71-431a-871a-c1678857876b",
        "cursor": {
          "ref": "065c06b1-ef0e-4df5-ada5-e747a9550fa2",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eedb76e6-7a35-4a75-ae4e-68e3ce3cf00c"
        },
        "item": {
          "id": "eae6d2e1-0b71-431a-871a-c1678857876b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "afb2bf3a-e3b1-4478-a14c-46c6e0712adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c079b5-8e73-421f-8c1b-c14b1a6c51c9",
        "cursor": {
          "ref": "a1ea51f5-4a07-423e-a95f-d61f58b1c27c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "46ff03a8-f87b-462b-bdf5-b580ad56973b"
        },
        "item": {
          "id": "51c079b5-8e73-421f-8c1b-c14b1a6c51c9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6cb74b3a-85ed-4ebd-bb90-429a5df8ab6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "eb9b638c-6fc9-4329-97fb-ad0b1bc9e126",
        "cursor": {
          "ref": "828e9c58-888b-4062-850a-1aa6747992e0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4444d97e-98f8-4f2a-b7e0-24f24cb8bc1c"
        },
        "item": {
          "id": "eb9b638c-6fc9-4329-97fb-ad0b1bc9e126",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0a4ef474-3360-495d-bd5d-fce8e0fca7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e8ecf6-9f8e-4a81-8dd3-cc970f11b313",
        "cursor": {
          "ref": "7de4f33c-c518-414b-89a5-a93cf1241013",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "01974121-0a76-482f-a3c5-d58497352ea2"
        },
        "item": {
          "id": "a2e8ecf6-9f8e-4a81-8dd3-cc970f11b313",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dfea2bab-76c1-4933-abe5-c199bfd9a336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d49e36-f8a5-4c3e-bb13-8fa72bf35238",
        "cursor": {
          "ref": "65136a44-f355-4b99-b107-406145b7b6c3",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5d77110e-d392-49d8-837f-8afe08b3ed3f"
        },
        "item": {
          "id": "c5d49e36-f8a5-4c3e-bb13-8fa72bf35238",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a992b354-0dec-4d9b-9917-a3ff6a771419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3906b1-dfa8-44e5-b781-e524f46cbafc",
        "cursor": {
          "ref": "9b4ee624-b4d6-4056-8586-a917875cf59d",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86af3b22-24a6-4b36-89b8-8467324ff7e2"
        },
        "item": {
          "id": "4c3906b1-dfa8-44e5-b781-e524f46cbafc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "72e2b0e9-ca94-417b-8415-e1fa0248ce63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d513c6d5-33e3-4e3f-84bd-dd5d067076ed",
        "cursor": {
          "ref": "41a14e97-bbe3-44f6-8bcc-2f914f8c06da",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6f3da735-b269-40bb-8834-66b3e6a1aa20"
        },
        "item": {
          "id": "d513c6d5-33e3-4e3f-84bd-dd5d067076ed",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "98a7c392-3925-4e1b-86eb-68a249c7a924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f992058-95ae-4a47-b2ff-477e13732e0a",
        "cursor": {
          "ref": "7d3d77fa-92d1-4429-8fb5-50d85affb7a3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "56fe29ca-68ef-4c59-8c8b-11e1df3fec65"
        },
        "item": {
          "id": "0f992058-95ae-4a47-b2ff-477e13732e0a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "456744d5-cd8a-4699-8d1e-c31a637e1099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7147cae5-be86-4afc-ba2a-9a5301afeaba",
        "cursor": {
          "ref": "6b6c45dc-c2fe-4c8a-a53c-29e32f6f77c7",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0a3b24a1-cc49-4a8c-b2ed-53f817bb02d6"
        },
        "item": {
          "id": "7147cae5-be86-4afc-ba2a-9a5301afeaba",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9ad3d795-e82e-40e1-95f2-76d27fb2e633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f125ad7-a53a-4607-b898-f9399e7496ab",
        "cursor": {
          "ref": "e511e987-e521-4985-8e77-adb7535234f0",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "446c8e98-5951-43b2-9dbb-0267533148f2"
        },
        "item": {
          "id": "3f125ad7-a53a-4607-b898-f9399e7496ab",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3aa5a1de-1dbd-45cb-8ab2-f8c67ceffbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acd1c14-1ac9-4c60-9152-070de3c0ca95",
        "cursor": {
          "ref": "45338556-dffe-4dc4-a5b4-a0bbd355c2d8",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "812a5ed9-8230-4a89-9f12-ea78375fb70e"
        },
        "item": {
          "id": "8acd1c14-1ac9-4c60-9152-070de3c0ca95",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9c667381-63cc-43d9-a0bd-41f13b7bb190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845fdd87-b6a8-4b07-9984-0b452bf1028e",
        "cursor": {
          "ref": "c8da9c0a-434d-4057-b1c5-8ed2ae4e4dbc",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f99b73dc-908c-44e4-b449-52048f57f195"
        },
        "item": {
          "id": "845fdd87-b6a8-4b07-9984-0b452bf1028e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b7e19b53-9a70-4c2d-b17e-b523332aabf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb88caa-978f-4e41-9852-3581e23b359e",
        "cursor": {
          "ref": "77f06cee-48c5-4f29-b11f-5ecc6338f83a",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1ea2e1c9-3c25-4a1a-9bfa-8343e7572607"
        },
        "item": {
          "id": "3fb88caa-978f-4e41-9852-3581e23b359e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e7b2f16a-2f46-4a50-81fb-5fb950d5a299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9882baeb-50be-400d-aae6-7a6b4825430f",
        "cursor": {
          "ref": "32278a1d-cf89-48ec-860a-0ad055d6d997",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "237bc44e-fbec-4f63-9d50-c9605a097a6e"
        },
        "item": {
          "id": "9882baeb-50be-400d-aae6-7a6b4825430f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e7cb88e4-abb9-4bd1-bda9-f80ea683b3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdc689d-fda0-4a7d-9029-ac6ef05846e6",
        "cursor": {
          "ref": "7e1b4fd2-2a50-41d1-b231-2f92eff0ff62",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b9c68e47-691c-41ac-aa18-2e6663cdf133"
        },
        "item": {
          "id": "bfdc689d-fda0-4a7d-9029-ac6ef05846e6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "32c6f204-139b-4029-8f81-b5a47f9e31d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cedf192-6d70-4783-b16f-f9aba48849c2",
        "cursor": {
          "ref": "0181e912-c8e6-4d4d-8c65-e03d48d9b2c7",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "37c9b4a1-5ba3-4a07-97ad-db7f276d8bcb"
        },
        "item": {
          "id": "6cedf192-6d70-4783-b16f-f9aba48849c2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e9724618-2b31-4c0f-8f3b-c41ca774cfe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63f4741-26fd-44d0-87e2-e6ed79eded60",
        "cursor": {
          "ref": "0fea3854-f5b0-4ea0-a15f-a8ce335dd423",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "cecb44db-5bff-41b3-9b69-3b36692854a7"
        },
        "item": {
          "id": "d63f4741-26fd-44d0-87e2-e6ed79eded60",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0d7131d5-3e7b-4d4b-a6d8-02494ce66a0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "967df14c-8cda-4946-bfaa-83138f2a0b91",
        "cursor": {
          "ref": "ccf4d5db-f0b6-4564-be51-3f80be8bca33",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4c488cd3-d82e-4f46-ac9a-da02791b6da0"
        },
        "item": {
          "id": "967df14c-8cda-4946-bfaa-83138f2a0b91",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0f27965e-5964-40fd-981b-8cc447515658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d70fa7-6795-4fc3-9d45-b35a3d63bdec",
        "cursor": {
          "ref": "278d99f9-e33f-45b1-9c39-c10c18772744",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b04b143e-ee1e-4873-b394-0aa83d58b1d2"
        },
        "item": {
          "id": "93d70fa7-6795-4fc3-9d45-b35a3d63bdec",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "749c5156-887c-4baa-af6d-9e1642c03649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d3b24e-ef54-43c4-8713-1627a6045273",
        "cursor": {
          "ref": "bc13d278-ddb5-4346-a4a9-2dafad128076",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cfa36847-d278-465e-a4db-9696a37cbb84"
        },
        "item": {
          "id": "28d3b24e-ef54-43c4-8713-1627a6045273",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6a192c41-cd6c-4780-ae14-ea8fc1b6a133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897e5fcd-95f8-4d2d-b037-3db49b540507",
        "cursor": {
          "ref": "c98c1ae8-0f0b-4800-9ffe-60c3bf7ac423",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "207b1cb4-200b-4ed0-a955-066c2a0eae53"
        },
        "item": {
          "id": "897e5fcd-95f8-4d2d-b037-3db49b540507",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0b3d70c2-2228-4353-a932-9daffce2769d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0245ee7-d5a2-4228-87d8-320aff9f7ebe",
        "cursor": {
          "ref": "a413308d-3c9b-4375-a73d-b6593d5f84c8",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "30881300-df65-40ab-a9d6-475f5976426b"
        },
        "item": {
          "id": "f0245ee7-d5a2-4228-87d8-320aff9f7ebe",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ebac9195-a7fc-4131-9c53-ea123b57cb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b2cd44-cfe1-42d5-b491-36f345b38350",
        "cursor": {
          "ref": "fd4a48d8-5b46-4cae-aef4-5cff6caab814",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "17179d3b-35b1-403e-9053-1c4973cd69b9"
        },
        "item": {
          "id": "c7b2cd44-cfe1-42d5-b491-36f345b38350",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1ff054f4-de39-4ad9-a6e2-73e1fd4dacd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397bc493-fe5c-4b7c-8af5-fcc727ed077f",
        "cursor": {
          "ref": "f08ddbcd-84d2-430f-8e9a-658ca41feb3c",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b4dcb1d5-453f-471e-a38f-899d15b23479"
        },
        "item": {
          "id": "397bc493-fe5c-4b7c-8af5-fcc727ed077f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c4a0231d-711a-4835-a20a-b28b65c44722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e99b27b-a93f-4a20-9bdf-edaff1ab2593",
        "cursor": {
          "ref": "c7e78b6f-ca9c-425f-8f8c-ab9673001a4c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2143061d-958c-4eef-a262-3a54b6bffd19"
        },
        "item": {
          "id": "4e99b27b-a93f-4a20-9bdf-edaff1ab2593",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d9cba40c-431b-4ad2-b860-cc62f15e86eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d98742-3cc3-48e6-9166-60b7d9fdf28d",
        "cursor": {
          "ref": "a60297e5-1653-4bc0-b180-137495b05a28",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "52b9557d-c5f7-4516-97c2-8b26fe0152d6"
        },
        "item": {
          "id": "97d98742-3cc3-48e6-9166-60b7d9fdf28d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2424d28b-a5fa-4ac0-96fd-b1e0d64c525e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a880a325-48b9-48ce-b81e-f344eb5a6238",
        "cursor": {
          "ref": "3552bf39-ac4d-4a56-9876-faf757b6b024",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0ca013c5-42cf-4038-9bf2-341671a2c508"
        },
        "item": {
          "id": "a880a325-48b9-48ce-b81e-f344eb5a6238",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "94a42bbd-57a1-4f0b-9a66-68ee53dc1179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48ae5ea-d744-4738-b817-072b9282bd35",
        "cursor": {
          "ref": "d64b62ad-64fc-4ca1-9468-1b8f5dc3c986",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d359d8f8-25aa-4409-bfb7-4eae710b0620"
        },
        "item": {
          "id": "a48ae5ea-d744-4738-b817-072b9282bd35",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2fe81713-0fa3-401c-b9cb-82fead727e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e475c785-b14c-4bc5-a89d-84278afc3c50",
        "cursor": {
          "ref": "02c7a1e9-f790-4759-b799-b93396227ce8",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "86338706-66a2-4f97-b0f6-5192bcb08180"
        },
        "item": {
          "id": "e475c785-b14c-4bc5-a89d-84278afc3c50",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5a1c6063-711c-42f4-9daa-ebf9f042409f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d22f2b1-d259-40e1-8124-1b936ac44526",
        "cursor": {
          "ref": "1838adb8-8acd-46f2-be0c-fa1335ccf635",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c8dceb20-884f-4520-ab61-d8bf2b9ab61d"
        },
        "item": {
          "id": "1d22f2b1-d259-40e1-8124-1b936ac44526",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5a510af4-58aa-46c9-99c9-ec58cd9440da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d8e578-30d4-4aeb-a570-5fa58848098a",
        "cursor": {
          "ref": "bdc33b47-5316-41c8-9bc8-2ba2d8f096e1",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c487103d-ecec-4dac-9faf-763be503b27f"
        },
        "item": {
          "id": "19d8e578-30d4-4aeb-a570-5fa58848098a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c97466f2-99dd-4785-80e1-1174db41e1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4d7c0e-34c3-498c-8463-85e98c9abd7b",
        "cursor": {
          "ref": "84e7d2e2-1cea-4dc5-99cd-63584c232c65",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e9b7405e-0851-45e5-b9e2-22731384f641"
        },
        "item": {
          "id": "cb4d7c0e-34c3-498c-8463-85e98c9abd7b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9ab42d48-bff8-4881-8a25-9f1805ceece7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b76a4f4-b03d-4ebc-9973-90f4dbab7d65",
        "cursor": {
          "ref": "52b75696-62d6-449a-a8fe-2d71fee3a082",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "decd5fdc-2ebb-4053-89d9-8129552ed56f"
        },
        "item": {
          "id": "2b76a4f4-b03d-4ebc-9973-90f4dbab7d65",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "991adce3-5a88-4c6d-bde3-4fdc4bba4a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0b0a91-58e9-448e-a0e7-2e627350d6e5",
        "cursor": {
          "ref": "afdee860-ebd4-414f-a834-c10636ca0a36",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b8a00ac5-f9b4-44bd-ab46-53f47be22586"
        },
        "item": {
          "id": "5c0b0a91-58e9-448e-a0e7-2e627350d6e5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b803a081-1a45-4c43-adae-e54e55243c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d37819-e9eb-41db-b404-da27c2d1a9ba",
        "cursor": {
          "ref": "aa50f4d5-4a0e-467b-bcda-8835f5f4c6f6",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1f94b291-55db-4f65-85c6-1be4b2703730"
        },
        "item": {
          "id": "36d37819-e9eb-41db-b404-da27c2d1a9ba",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d1d9161f-e67d-4806-a4df-9da762617c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a27df64-3a4a-4fb7-9623-fbfa07c11d08",
        "cursor": {
          "ref": "41a325c3-25ac-48b7-8e64-53e6f0989349",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5d331388-9f56-4be3-8f6e-c455d61f1975"
        },
        "item": {
          "id": "9a27df64-3a4a-4fb7-9623-fbfa07c11d08",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "badfb8dc-7ce3-4c77-b074-f907e68c06fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bec555-6452-4b2e-af84-c23c6864c6bd",
        "cursor": {
          "ref": "39c3bb30-44ed-4896-8733-9514aca63979",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "16151a59-8d87-421c-88d6-660438c403c1"
        },
        "item": {
          "id": "e0bec555-6452-4b2e-af84-c23c6864c6bd",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6ed54573-8416-4606-b67a-029474bb4b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a93fa4-08cb-4626-a0f5-94cac19c05c4",
        "cursor": {
          "ref": "e2df685a-76ca-4058-af99-a758d45937d0",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "123bba1f-78b3-42dd-a1e0-8877135478af"
        },
        "item": {
          "id": "35a93fa4-08cb-4626-a0f5-94cac19c05c4",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2c412580-0394-45a8-b298-e244a3184f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a360efdb-1271-4e6a-b9e2-853c42989b77",
        "cursor": {
          "ref": "23eef67d-5c5d-43b6-95a0-7c3b144a23ba",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8fe42e86-ec63-43c4-ba4a-2224d7a906d5"
        },
        "item": {
          "id": "a360efdb-1271-4e6a-b9e2-853c42989b77",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "807c0724-4a26-4a66-bf9a-39665c2141ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929cc575-e1c9-45a6-95ac-8427768e4fdb",
        "cursor": {
          "ref": "57bfcc0c-33fd-4e19-a908-458fdee86db7",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "786b6a0c-3152-4dd5-9f6a-a2f6dc1e079e"
        },
        "item": {
          "id": "929cc575-e1c9-45a6-95ac-8427768e4fdb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2032080d-074b-4d37-8e3d-35350daf0fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192f7b13-9fdf-4b36-b0e3-7f3d2d1cb572",
        "cursor": {
          "ref": "d7fde183-9634-4c08-b79b-c44ff07091eb",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "970e6235-cb67-4386-b64e-1f665b2f75a0"
        },
        "item": {
          "id": "192f7b13-9fdf-4b36-b0e3-7f3d2d1cb572",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b4f0e1c9-360d-4b02-b6e9-59f4b8f353b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb26a3ba-c0fc-4446-b25a-2250cff2e192",
        "cursor": {
          "ref": "c1373a83-e930-4ffe-b414-07cc49355692",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f3624587-2bce-47a1-b7c4-d754da66fa79"
        },
        "item": {
          "id": "cb26a3ba-c0fc-4446-b25a-2250cff2e192",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ad4d2d84-0780-4a45-baee-636e2b6735c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34cb11f-d2e6-4399-83ef-cb11b14fbdae",
        "cursor": {
          "ref": "19001da2-c9cd-4e34-86ca-9d933ec8366e",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "85239791-7ae2-434a-bbf5-d26cac1356ea"
        },
        "item": {
          "id": "b34cb11f-d2e6-4399-83ef-cb11b14fbdae",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2c023227-1cdd-40e9-804c-caf880c74e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19b22f6-d1b8-4c5b-8dac-60255a0b98fa",
        "cursor": {
          "ref": "70533501-b6c9-4caa-b215-92d59cd0ece3",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "01603b90-4429-4d0f-b78c-22835a7ee999"
        },
        "item": {
          "id": "b19b22f6-d1b8-4c5b-8dac-60255a0b98fa",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "55b21be7-482b-4786-9af6-aa1599afd297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b5f54b-e58f-4b2b-addb-d7fe47fa52b5",
        "cursor": {
          "ref": "40ed61a2-7e6c-42c9-a462-ea0bbbe1eb35",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9ab7291e-3dbd-4845-a013-78534b1e4d94"
        },
        "item": {
          "id": "08b5f54b-e58f-4b2b-addb-d7fe47fa52b5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "639bf3f4-6d67-46e1-9ba3-69928de7070a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ac15f8-c123-490e-96aa-87792f04e1d8",
        "cursor": {
          "ref": "b7985a25-9e70-42f7-bc3f-5e1717f7ab98",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fdba055e-6e33-447b-bb5c-74db4e941328"
        },
        "item": {
          "id": "e8ac15f8-c123-490e-96aa-87792f04e1d8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bf79ae71-0948-45e7-8a2e-07ac4d6bcc7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f4c0fb-1c31-435a-8a36-efaa38db75bb",
        "cursor": {
          "ref": "a0e77005-d05d-4bf0-a23e-2a0691b4a65c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0b6b4037-5e32-41a8-a397-9af5bc488beb"
        },
        "item": {
          "id": "37f4c0fb-1c31-435a-8a36-efaa38db75bb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6dd254c0-d40c-46ba-9868-13c4cdf10d01",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "e55bd7a0-53c6-4cca-a7b6-fc63277238f0",
        "cursor": {
          "ref": "9e8f75ab-b519-4031-8e32-29382e58f41e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eba2e3bc-115d-435b-98f6-5711413f5c3d"
        },
        "item": {
          "id": "e55bd7a0-53c6-4cca-a7b6-fc63277238f0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0be09a5d-a5d1-4b33-ac7c-91548dea13a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08d9258-06d6-4855-9184-330df948a6c8",
        "cursor": {
          "ref": "b91f644c-cbed-4607-8c8c-a59189b0af9a",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bf093bf7-dacf-4adf-a2db-843e43150b4e"
        },
        "item": {
          "id": "c08d9258-06d6-4855-9184-330df948a6c8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f5040a04-42f3-40a0-b803-a90600f3fe4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6516bfd-9978-48e6-9d74-cfabad1b2ea6",
        "cursor": {
          "ref": "dad81e33-4f10-4c32-bdac-eb802ecb5693",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "654d9abb-39f8-496e-b64d-7e82897fe459"
        },
        "item": {
          "id": "c6516bfd-9978-48e6-9d74-cfabad1b2ea6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cf81cac6-aa17-477f-95cd-23f652cffc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a495fdc-15b4-4937-9ce8-04584474789e",
        "cursor": {
          "ref": "0b0e8629-4644-41ea-bc25-c3fb7d2b8d2e",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4c3469a8-7ab7-4d83-8d4f-8461fab5fab7"
        },
        "item": {
          "id": "1a495fdc-15b4-4937-9ce8-04584474789e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "59218b4e-3cbe-4325-a446-da1ce8456be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c393b87-d76a-4b4a-9153-590dfbd6faf5",
        "cursor": {
          "ref": "c525d5b0-ac05-4cfa-aa75-6e4b7a0e0634",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b5960afc-18e5-4277-bd88-bd552fa40452"
        },
        "item": {
          "id": "0c393b87-d76a-4b4a-9153-590dfbd6faf5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fa55668f-2927-4166-a3c2-91cedf61ada1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60eedebd-37fc-4902-a141-04a17a3ba552",
        "cursor": {
          "ref": "0e4d7e7b-1580-4398-aa93-ddf4b904bedd",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8aa58213-a7a3-4065-9239-f31f866b214b"
        },
        "item": {
          "id": "60eedebd-37fc-4902-a141-04a17a3ba552",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e45c1b2e-3ea0-45df-a91d-2129ce54646d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9266a157-334b-4d22-b4a1-0afd7b1b26c5",
        "cursor": {
          "ref": "ec50ad68-f1a4-4074-98bc-d08d8411d1c5",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9347ac2f-440b-46eb-9893-72fc31b61866"
        },
        "item": {
          "id": "9266a157-334b-4d22-b4a1-0afd7b1b26c5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "aa7d4f33-78e9-48f0-b69d-389de48ab3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3dc36a-3654-469f-894f-09e12d8762f0",
        "cursor": {
          "ref": "d41522f1-1f9b-4e51-93b9-dcc1e8640c3c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "50513d04-5fb6-46e5-9847-b102c099688c"
        },
        "item": {
          "id": "ac3dc36a-3654-469f-894f-09e12d8762f0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "689cbf71-ada9-414d-b074-a9a4e956ab33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71261ca3-f6d7-4a24-b275-ebc6aa227eea",
        "cursor": {
          "ref": "28269f8d-cdde-406e-8f9b-db13cee0daa5",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b43374c6-10f2-4ada-8c43-9b024bb639fb"
        },
        "item": {
          "id": "71261ca3-f6d7-4a24-b275-ebc6aa227eea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0ab14d24-c595-421c-a46e-461ad9bab14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79484ed8-4b6d-47bb-b8bf-68dfcd36549a",
        "cursor": {
          "ref": "e2c9e010-7f8f-450f-8011-c4ef95e8211d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3a736eaf-6235-461f-8617-f13048dfe818"
        },
        "item": {
          "id": "79484ed8-4b6d-47bb-b8bf-68dfcd36549a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "de1e33fe-0fac-4b2e-a3dd-e7f163e7692e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78824399-c080-40c9-9d2a-6a8fb21e5ce0",
        "cursor": {
          "ref": "0c39a3d8-a987-40c2-b88a-9f284808294d",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "60022d7a-169d-45aa-91bb-908c4f759247"
        },
        "item": {
          "id": "78824399-c080-40c9-9d2a-6a8fb21e5ce0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "75ea6f07-a703-4e09-a299-35ff6f0828d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982d5206-d619-44bc-a343-122b5ba777e3",
        "cursor": {
          "ref": "cd0c5d4e-c00b-49e2-aeb3-28193f2fdeaf",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "77976f2c-e455-4a2d-aa9a-acb5b0735592"
        },
        "item": {
          "id": "982d5206-d619-44bc-a343-122b5ba777e3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d15cc45b-798d-4a7c-ba65-7635532334f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7266830-f968-4ffa-a178-9241d5162094",
        "cursor": {
          "ref": "684c75a6-7b89-4460-9db5-0d3cb0314eea",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c8064e63-180c-4a31-b9a6-fac680cc6c61"
        },
        "item": {
          "id": "f7266830-f968-4ffa-a178-9241d5162094",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "240dd7b5-8b56-459f-9aa4-8de8dc6ab875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ef88a6-42d8-4e26-9f95-1397225d4c44",
        "cursor": {
          "ref": "3c051217-207e-49d1-9ba7-b0cc6b6b1ab8",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7fc5c44e-e6d5-4c73-8db0-6d046cedf1a1"
        },
        "item": {
          "id": "19ef88a6-42d8-4e26-9f95-1397225d4c44",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c77a72de-7996-4a51-9925-bfecd68b6c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941c9b0f-4acb-4078-a992-98c8ee703e1b",
        "cursor": {
          "ref": "3129716d-bd6d-47e9-83d2-09e312c35e4c",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "917dbec5-8fec-4692-9c10-d44a58122c86"
        },
        "item": {
          "id": "941c9b0f-4acb-4078-a992-98c8ee703e1b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "57d06ff6-b1a0-4035-a23c-6ce36fd3ac21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd2fcfc-bcb6-478b-b664-1ae0c6c44b5c",
        "cursor": {
          "ref": "285c2379-3b53-4f6a-95fd-da1e524b1249",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "282ccff7-8411-41e3-a660-d235b6ac83fc"
        },
        "item": {
          "id": "acd2fcfc-bcb6-478b-b664-1ae0c6c44b5c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9c508e44-d649-40d4-b96c-565057f90c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556cc0f0-8176-41fe-a62f-b9771ebef953",
        "cursor": {
          "ref": "e11cca7f-5ebb-4878-ab9f-62931bb90c31",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "de7da886-bc69-4f55-8172-6eb762f99916"
        },
        "item": {
          "id": "556cc0f0-8176-41fe-a62f-b9771ebef953",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "14293f1c-f13d-4f98-8ef7-9e146506a112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e1f797-5dc0-44a0-b0d1-1c5d457bdb0c",
        "cursor": {
          "ref": "579233c1-f756-4b7d-980a-e2960d82516b",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "904848e4-ea96-4157-bcf4-62f4b7bb4c0f"
        },
        "item": {
          "id": "03e1f797-5dc0-44a0-b0d1-1c5d457bdb0c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b069d96c-404c-4926-9f6e-ff40e9269a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b95a735-6d72-42c5-b801-fd3c49f7c2cf",
        "cursor": {
          "ref": "934d82d4-d937-4fe6-aaf2-7759143df92d",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7a95193f-c112-4826-9dfd-0c50fe7cc3e2"
        },
        "item": {
          "id": "8b95a735-6d72-42c5-b801-fd3c49f7c2cf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d1e7287c-b33e-466b-bcd6-100e267221cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432d3a58-dc66-4835-a90f-a1d660d5461e",
        "cursor": {
          "ref": "9adf2955-d02e-444c-88fb-6f5dd427448f",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ce766b06-f57a-44e5-a780-84cfe649c98f"
        },
        "item": {
          "id": "432d3a58-dc66-4835-a90f-a1d660d5461e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "febee386-c9e5-4917-a286-3aed819c3ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6f7645-1a17-4f17-b15a-ba9320083fd5",
        "cursor": {
          "ref": "0e478e8e-c2f6-4a2e-894f-ad4b7b58d9bb",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3c05ad86-3d41-47a0-91cf-905f116e2c60"
        },
        "item": {
          "id": "fa6f7645-1a17-4f17-b15a-ba9320083fd5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a2b2a503-ad85-44db-a13a-347246239795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b85d9c-3d22-498c-b37e-e4002e6922ef",
        "cursor": {
          "ref": "406b96dd-68a7-4004-bbd5-c892d00adac0",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b3f2180a-c27b-4cbb-858f-a073b80b0fdb"
        },
        "item": {
          "id": "f2b85d9c-3d22-498c-b37e-e4002e6922ef",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "84aa3562-e2e5-4c63-9cdc-08efbf8973e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cfec75-5cfe-4bbb-9583-423b34425ac1",
        "cursor": {
          "ref": "70c2c505-628a-4194-a6b9-27c774e6c93b",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "05fbeebe-e532-44c1-bd36-b6804847b25a"
        },
        "item": {
          "id": "99cfec75-5cfe-4bbb-9583-423b34425ac1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5e99b65a-dc2f-48a3-b84d-add6a69c7ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8681189-dc5a-45d6-b88f-241107b7e9a1",
        "cursor": {
          "ref": "fdeaedc4-51f3-4834-ba9e-b9a1846a37ad",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8dcf018f-9c98-43ab-bc3b-6f44de935b32"
        },
        "item": {
          "id": "e8681189-dc5a-45d6-b88f-241107b7e9a1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d20be7bd-b02b-4717-9206-8af6ec4f2ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46348827-b2b7-4990-a61b-5ae913535400",
        "cursor": {
          "ref": "54465d03-e621-40c3-ab85-79465db401d8",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7cfd70e9-591d-4e59-a7fe-43bd6085e50b"
        },
        "item": {
          "id": "46348827-b2b7-4990-a61b-5ae913535400",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "103586f3-a55f-4f62-883a-3561342b9876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba519e3d-6d16-4601-bdc8-8963526b0f87",
        "cursor": {
          "ref": "28697f3e-4967-4734-affc-0410f3f9e501",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "727825a0-acf0-4fe7-931f-f4d51c23a746"
        },
        "item": {
          "id": "ba519e3d-6d16-4601-bdc8-8963526b0f87",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "94abf3fe-2444-4b97-a6f1-f24469e545af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468c3ba0-f315-4f3e-b0af-afaa98b49395",
        "cursor": {
          "ref": "ed033b48-b385-4cae-8aac-a7378b1e7ba0",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d52350a6-88f0-453a-be7d-1e3f54834846"
        },
        "item": {
          "id": "468c3ba0-f315-4f3e-b0af-afaa98b49395",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b6f4e861-7066-4911-8a56-63a2cae9f00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630daebc-796e-414a-9c21-2165abc3711b",
        "cursor": {
          "ref": "7d86317f-b42f-4e66-bf9e-22879265c7d6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "05a894fa-e82d-4241-9682-f5269c223663"
        },
        "item": {
          "id": "630daebc-796e-414a-9c21-2165abc3711b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d998b1b7-cc51-40dd-b5ef-64a97e92c637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd374fec-1114-40e7-bb38-6ef7f2235df1",
        "cursor": {
          "ref": "c6b53004-e046-4a1b-a0b1-bced49b265cf",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3fa8a82b-9ec9-41c2-8714-b25ce174657a"
        },
        "item": {
          "id": "fd374fec-1114-40e7-bb38-6ef7f2235df1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "68f2c768-f097-451e-8ed1-0e63bddde6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b65fa5-129b-4110-8b20-49dff0d5410b",
        "cursor": {
          "ref": "044fcd71-e76f-4406-b978-c6e5fc976e87",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "922c1a5e-ca23-4f9f-b617-143d85573344"
        },
        "item": {
          "id": "d9b65fa5-129b-4110-8b20-49dff0d5410b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "318b2e7b-0dc6-46c3-9db5-1ede305baabd",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "aa44e2e1-4323-4ec4-ae39-5233ec3863a5",
        "cursor": {
          "ref": "698afb35-5eb1-4696-ba8e-9990de8a6c1e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "eef9735b-0fe0-46a3-a099-38ee3c8125d8"
        },
        "item": {
          "id": "aa44e2e1-4323-4ec4-ae39-5233ec3863a5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "80ec816c-5d88-49e6-a1ac-5f33407244f3",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5c816890-6a4f-4ff8-8318-f5c5c51acd6d",
        "cursor": {
          "ref": "457d400d-a684-4ead-abd4-fee8243490f3",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "bd917fac-4452-4d92-ad1a-d4f14e98626e"
        },
        "item": {
          "id": "5c816890-6a4f-4ff8-8318-f5c5c51acd6d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fc357a99-73b4-4e15-8fd1-f59ff96416bc",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "5d88b7c8-8b14-4116-ab0c-b12b04e366b5",
        "cursor": {
          "ref": "eb879b7d-01f6-46e9-8b07-9b52c4d70b01",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "138bf59c-12de-4ed2-b936-8b0ce45874d4"
        },
        "item": {
          "id": "5d88b7c8-8b14-4116-ab0c-b12b04e366b5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e6e233c7-0285-4b83-ac65-560899cbab6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d2186e-e4b8-4830-854d-874feb131ea0",
        "cursor": {
          "ref": "5eaeee4b-bc45-4d3d-804f-5a5064362a5b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "68f8bd27-23e3-4a5b-8eeb-0795c25cef1d"
        },
        "item": {
          "id": "26d2186e-e4b8-4830-854d-874feb131ea0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b944fd67-7f7b-4a84-b3bb-0c9d7c0ee925",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "01520143-b3df-405a-a608-d0c8deb105d2",
        "cursor": {
          "ref": "986459ad-91ea-490b-8b40-44facdc49d94",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "65f5c9ae-cac1-4251-bbc1-03ef84247fc1"
        },
        "item": {
          "id": "01520143-b3df-405a-a608-d0c8deb105d2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "73dd2b52-b0e4-4925-a5f7-bdea0ebd3094",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "34546b0a-e610-409a-99aa-3191da13add4",
        "cursor": {
          "ref": "fbf0ce35-208c-4dce-b403-521693a43c95",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f91cbd04-0504-42b0-8a5a-f3f876876367"
        },
        "item": {
          "id": "34546b0a-e610-409a-99aa-3191da13add4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bfac09a0-e3ce-43af-8a78-239c2e1e3ed3",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "5c72fb09-6fda-469c-a602-90740e2d6fc2",
        "cursor": {
          "ref": "ebb9c83b-080f-4bfa-8649-f1293a314090",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6568eba0-f219-4711-b776-c52a0990cf6f"
        },
        "item": {
          "id": "5c72fb09-6fda-469c-a602-90740e2d6fc2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b984505d-ea29-40fd-bf6d-98f642aa2a9c",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "992f1646-c984-4935-8a16-c62389596d8b",
        "cursor": {
          "ref": "675e25f9-304b-4bc5-99cd-3ad8683824fc",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "25052ebe-d992-4678-8ff5-c10ba859325e"
        },
        "item": {
          "id": "992f1646-c984-4935-8a16-c62389596d8b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "310f9c90-98c4-46fe-91ba-a54911eac897",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "209592b3-7a1d-40f8-a9a4-d9923f82ee87",
        "cursor": {
          "ref": "a9e69c7c-a71f-475d-b31b-9f864f83d514",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "55cbb92d-6471-41c3-8710-4730f7ec792f"
        },
        "item": {
          "id": "209592b3-7a1d-40f8-a9a4-d9923f82ee87",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9c984385-45e9-458a-a308-24231ec6f4d3",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "76245a18-a502-4531-b223-2f3da8127642",
        "cursor": {
          "ref": "da650405-542c-430a-90aa-b14f0daca98e",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7deac877-0907-4688-8c0e-6c9feaaaba72"
        },
        "item": {
          "id": "76245a18-a502-4531-b223-2f3da8127642",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6ca25a5e-9fe7-4998-84ef-829e0f5afcda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda4b696-9b77-4663-8646-067d4a3cb7d1",
        "cursor": {
          "ref": "2d5e6bf1-15bb-45ab-ac2a-42ae96c082fb",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "07bd36d1-8b13-4e54-9188-e23333b8f9de"
        },
        "item": {
          "id": "eda4b696-9b77-4663-8646-067d4a3cb7d1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "debb626f-1289-4ef1-b094-7650ed0aba68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e22025-ce2f-4aea-b563-5383c67e3e35",
        "cursor": {
          "ref": "afd891aa-c26e-4ef2-b75a-a96e74fa9401",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "be701cb1-ff00-48d9-9538-2fd92da2e430"
        },
        "item": {
          "id": "d6e22025-ce2f-4aea-b563-5383c67e3e35",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1f2a511d-ed87-4b43-b496-555027ddd32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbfa22d-2e75-4758-9511-84c254b7a3d7",
        "cursor": {
          "ref": "9e8ba302-1d67-458b-a233-aae77f1a8805",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "77737cc5-f478-40d6-bee5-68debdcd6439"
        },
        "item": {
          "id": "dfbfa22d-2e75-4758-9511-84c254b7a3d7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6b849709-1137-4c37-bcdc-dad55e72356f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332b71bb-83e9-4f7e-a1f5-64378be1ea00",
        "cursor": {
          "ref": "0d72d138-451b-4f39-a57e-d222ecde52de",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2d4a2704-0f4d-4232-8629-18cb5020b0c4"
        },
        "item": {
          "id": "332b71bb-83e9-4f7e-a1f5-64378be1ea00",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d9d6832b-cbfc-4d27-8f32-1b1fcea2db56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cdafc2-a5a6-4776-a84e-ba593dfd97e5",
        "cursor": {
          "ref": "901d314a-f2c0-401b-a6a9-d4a538451ad9",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8cd4c6ea-abf6-4e64-a1f4-6845888b185f"
        },
        "item": {
          "id": "58cdafc2-a5a6-4776-a84e-ba593dfd97e5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a1467140-9a94-4ea0-8ef2-0c446b28f31a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5597f8b9-0b48-4049-b1d6-b0f8c99911b8",
        "cursor": {
          "ref": "cff4f6ed-3d13-412b-b2db-59c8d3e725f4",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a8231a93-b01f-446f-a23f-398cf95ffcd1"
        },
        "item": {
          "id": "5597f8b9-0b48-4049-b1d6-b0f8c99911b8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ad681823-d07d-4c22-864f-e137f7bde280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc43654-31c9-4b0a-bcd9-31c7fbc466a0",
        "cursor": {
          "ref": "7df1bc11-8984-47ee-bba9-913bcb03026d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cdbc115a-ec24-4c67-b9b5-edf46e281cb6"
        },
        "item": {
          "id": "8cc43654-31c9-4b0a-bcd9-31c7fbc466a0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1b92b7d5-7835-496d-b5fb-1125e4f99336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308ce8fd-7d93-4f41-9c00-330edc0f68a9",
        "cursor": {
          "ref": "3ce01361-a94c-4712-a866-971be0f06463",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "df3879e7-f89a-4de5-a737-0767ad5e6efa"
        },
        "item": {
          "id": "308ce8fd-7d93-4f41-9c00-330edc0f68a9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "dd7e14ba-11b7-4d9d-9e8e-3331587c56f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d4dfa7-4f88-4f5f-bf39-621a570d1d3c",
        "cursor": {
          "ref": "a084817b-0de2-43b0-a62c-8227e5015fc6",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "56e8624f-189b-4f2b-88c7-fe72f144ab3b"
        },
        "item": {
          "id": "c0d4dfa7-4f88-4f5f-bf39-621a570d1d3c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f333ec7f-ee5d-4884-b1f8-f9cff860f46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86085a10-0c0d-48aa-b105-bf6411192add",
        "cursor": {
          "ref": "95dc3906-5b83-4c49-a38d-7187c0d8d4b0",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "87b781c9-4a1b-4b50-8704-c16619e51e30"
        },
        "item": {
          "id": "86085a10-0c0d-48aa-b105-bf6411192add",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7fcf40c2-b4a1-4a5c-a5d4-c5d5e5799410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a38f11-3e1f-4652-a064-3ee0604615db",
        "cursor": {
          "ref": "c2e96f8c-ad5d-4bfc-b8e3-c348c55a85f6",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1864fac7-d5c1-43bc-98af-44476cb71b05"
        },
        "item": {
          "id": "d7a38f11-3e1f-4652-a064-3ee0604615db",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "58030d17-2122-4c68-9255-a3db0fba996e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7e3519-70d1-40fc-8c0f-7188a615cf67",
        "cursor": {
          "ref": "61024f30-8851-4402-a20d-86cc7370d99b",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0cc420cc-286d-403f-bc55-38eedc60a43c"
        },
        "item": {
          "id": "0c7e3519-70d1-40fc-8c0f-7188a615cf67",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "29bc6b17-230f-434b-bac4-3ad4b2e819c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c8aef4-122f-4c9f-a4bb-50b2acec46a8",
        "cursor": {
          "ref": "0dc90a88-853b-489b-b340-b20b6cf9c018",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "de99727e-542a-4d40-b57b-8c2417574e81"
        },
        "item": {
          "id": "01c8aef4-122f-4c9f-a4bb-50b2acec46a8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "268925e4-06cc-4255-b5c3-74e0ae8c35b7",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "8a6a4915-656f-4a8d-a408-fd4acf504794",
        "cursor": {
          "ref": "99388fcb-b0f4-4ee3-a7c0-084f602fc4a3",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cb504911-8471-4a87-b255-107f96962776"
        },
        "item": {
          "id": "8a6a4915-656f-4a8d-a408-fd4acf504794",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2093d7fe-3da3-4009-b923-5d4821e47500",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "951841d4-b00a-4ff7-8359-55ef31cab785",
        "cursor": {
          "ref": "a1518d16-8d21-4b61-b14b-45306526b253",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5c4aea94-14e1-496b-8b0b-a81675fd0dfc"
        },
        "item": {
          "id": "951841d4-b00a-4ff7-8359-55ef31cab785",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "25fed008-b21a-47c7-ac3c-3d701ecfadf5",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "98a09290-df53-4407-bbba-7aa4c067777b",
        "cursor": {
          "ref": "1ea446bf-a0b9-49eb-8010-8fec3958d7d3",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "661c213f-8918-44ec-82da-b07422e6bd16"
        },
        "item": {
          "id": "98a09290-df53-4407-bbba-7aa4c067777b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f45f7aaf-cdae-4c25-8f62-e659ce0d8546",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9b07dcdf-2cfa-4edd-a65f-352bf38eec3d",
        "cursor": {
          "ref": "5d906201-db2a-4f3f-b369-2ed9e121c025",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5761fd97-09f2-4968-ab2f-4c430a3d1a96"
        },
        "item": {
          "id": "9b07dcdf-2cfa-4edd-a65f-352bf38eec3d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0203d7ec-650a-4a4b-9158-17b1af794d3b",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "90b25ed9-e50d-411c-80e9-eda66e58c3ec",
        "cursor": {
          "ref": "a3e811c2-9683-4737-89e2-d10391799066",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a8916460-75a6-439d-bcfa-cfa27599941e"
        },
        "item": {
          "id": "90b25ed9-e50d-411c-80e9-eda66e58c3ec",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5b3ddfa6-dec4-4b3f-8891-aaffe5e5fa31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3202b126-bf01-4610-a6d8-3edf20d1126a",
        "cursor": {
          "ref": "ed7dca17-0ae7-4847-87dd-372b37eef353",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e6ab3ad2-0f11-43d6-95d8-b0d854a4aaa3"
        },
        "item": {
          "id": "3202b126-bf01-4610-a6d8-3edf20d1126a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "84eaa190-806b-4d5f-962c-f89acd466671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50af6a43-6e31-4c0f-abcd-b85841134a59",
        "cursor": {
          "ref": "74c7a3e7-f15b-4cef-a603-269df36ed8a9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5d546a43-2101-4395-ab91-7d20cc3de26f"
        },
        "item": {
          "id": "50af6a43-6e31-4c0f-abcd-b85841134a59",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "298bb8ca-ac40-4edf-a12c-6460b3d14cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51df8253-3e12-4368-92b4-28a18b9a4129",
        "cursor": {
          "ref": "3f605263-6a39-4347-8b24-f634186499c6",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f5f7621e-e598-49b1-ba2d-1f97397aa88a"
        },
        "item": {
          "id": "51df8253-3e12-4368-92b4-28a18b9a4129",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0a5f6b6a-73b2-4a08-b274-289eba885c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9dab32-581f-448d-a9d4-1775eed05623",
        "cursor": {
          "ref": "2290cde4-d60d-46dc-8ab3-80a511296bb9",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2bebc2c4-b502-4155-b2f2-29752e7f9943"
        },
        "item": {
          "id": "6f9dab32-581f-448d-a9d4-1775eed05623",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8dd58714-bbec-4952-83c3-bdd8621672a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36b1350-0ee2-4ac9-98a8-c8eab9aa4109",
        "cursor": {
          "ref": "a6ef4057-d420-4745-9807-0836e5c00112",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8b3a6c16-c7d6-410e-a00f-d8b53f5645dc"
        },
        "item": {
          "id": "b36b1350-0ee2-4ac9-98a8-c8eab9aa4109",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "207b76b2-5903-4997-926f-ef4658e0900e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833e86f1-84a3-40c9-9370-4a46126a4811",
        "cursor": {
          "ref": "7ef8685a-1b24-4c57-8330-cbd783c2baab",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "193d0435-94ea-4ccb-8e55-6d35bd07d8a2"
        },
        "item": {
          "id": "833e86f1-84a3-40c9-9370-4a46126a4811",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "702781fb-836c-4b81-bafd-87e0600fc9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835d6ee7-0c22-4ab2-a88a-882c151b019a",
        "cursor": {
          "ref": "ee2ed29b-c397-42ba-9934-384804d3bcde",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4ddcf205-06ed-4415-9b77-ffb187d0fda5"
        },
        "item": {
          "id": "835d6ee7-0c22-4ab2-a88a-882c151b019a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0344f7b4-8434-459b-97bb-51eb05fcdd1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3927ff8-db92-4419-ab7e-6dd464c94b38",
        "cursor": {
          "ref": "546803b0-5e03-44f6-8e3d-765d8482c91e",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f6ba8aa3-3114-44d7-8fef-fb091c6dff93"
        },
        "item": {
          "id": "a3927ff8-db92-4419-ab7e-6dd464c94b38",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "765fbf89-3ebd-4097-b07d-3d3a13f83477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686f4aeb-0190-40f7-ba92-d6a5cdc72124",
        "cursor": {
          "ref": "595a6518-922b-4978-bf34-97f371ca9636",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b995966c-108e-4d4f-8bad-7d35f344dec3"
        },
        "item": {
          "id": "686f4aeb-0190-40f7-ba92-d6a5cdc72124",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3eda07f9-fc4d-4b32-b3ac-a1e9fe692dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119a7276-80d3-4501-bb70-d7cb5f6c0439",
        "cursor": {
          "ref": "17e77157-6e5c-4a69-bf40-c253561b511c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c2cc6d28-cc1c-4707-9196-a1619519d870"
        },
        "item": {
          "id": "119a7276-80d3-4501-bb70-d7cb5f6c0439",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b4997d27-ae88-40e3-8d8f-9a21ad1c133d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3a2231-fa94-4575-a4fb-5ddfa76d4c84",
        "cursor": {
          "ref": "df9cd2e0-c7d3-4c3c-8079-9a5594cb156a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7075cd0b-a307-4e00-90fa-5f4f074e5fdf"
        },
        "item": {
          "id": "ff3a2231-fa94-4575-a4fb-5ddfa76d4c84",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7f984671-d819-4a85-a1dc-40116734fafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6acdb0-73f9-4197-a1a0-48effd78b485",
        "cursor": {
          "ref": "1e8ff00c-6acf-4af8-97a0-120f0c9faa3c",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4d3ed795-19ab-4334-a2fa-fa63f98bb164"
        },
        "item": {
          "id": "dc6acdb0-73f9-4197-a1a0-48effd78b485",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1e653b7e-e89c-4ae1-9757-22cf6be1845f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a1279d-e447-4be5-81e9-c8406b631da2",
        "cursor": {
          "ref": "e6a39368-99ff-4de5-9943-82903d61c686",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ee310a48-583e-42cf-bb32-d499e41cdd70"
        },
        "item": {
          "id": "e6a1279d-e447-4be5-81e9-c8406b631da2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "70be6d61-ced8-4f3e-8600-465eeef17302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51517fa0-606f-4abc-9bda-aa7a3a39e964",
        "cursor": {
          "ref": "58207cd4-eb34-41ad-b49f-861d45cc707a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "566f4770-5ea2-42cf-b5e7-0e657fcb82c5"
        },
        "item": {
          "id": "51517fa0-606f-4abc-9bda-aa7a3a39e964",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "32ff418b-3ac4-4245-927a-a68f69a9fff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbcacfd-061d-48d5-8d73-d26437c1c005",
        "cursor": {
          "ref": "e390691b-9aaf-4aaa-bb33-35ecaca5c264",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e1c165de-491f-4dd6-ae84-60f773253291"
        },
        "item": {
          "id": "6dbcacfd-061d-48d5-8d73-d26437c1c005",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "49381db8-7a31-4231-9e96-19a3166d62aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936cf500-2a51-44b8-b9dd-ca8656ed7eef",
        "cursor": {
          "ref": "5fe65d9f-312f-4a29-a0fe-404c97fa3096",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "80ae8138-a830-4995-b11d-fcb870ee4e35"
        },
        "item": {
          "id": "936cf500-2a51-44b8-b9dd-ca8656ed7eef",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "df21ad57-a271-4c58-994e-219e23715ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065468a2-2007-4084-bff5-294809c531aa",
        "cursor": {
          "ref": "2c93a4c8-6ab4-47ce-a369-dc322d7bedfe",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "523108df-d428-4e98-9e9e-cb992217810d"
        },
        "item": {
          "id": "065468a2-2007-4084-bff5-294809c531aa",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5a197f39-5207-42a4-94c6-a500eb7a5bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3959a130-ac90-4929-9aec-389dec69d0c4",
        "cursor": {
          "ref": "97b34b25-ec1e-4b28-a1f2-addacd22e635",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ae9b3300-aab7-4f3a-a375-82780149ab2f"
        },
        "item": {
          "id": "3959a130-ac90-4929-9aec-389dec69d0c4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "591b594d-b004-4b33-9775-aac28dc9a4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26059f9f-9e04-4693-bf18-ee2cc99fc040",
        "cursor": {
          "ref": "6fddbed2-16f5-4c84-9a7a-38c052ffb75a",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5ac2a656-9cb9-47b0-b7ac-740bbfa138b5"
        },
        "item": {
          "id": "26059f9f-9e04-4693-bf18-ee2cc99fc040",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f920fbf0-e8ba-4159-bb51-7ceabc5bd8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabe6d3f-055e-401f-a801-33adf20c6b26",
        "cursor": {
          "ref": "5e12cacb-2665-4bd5-90a7-ab101e7688e9",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "5b30a80c-afe2-4856-b8f7-dbdca58c4a85"
        },
        "item": {
          "id": "dabe6d3f-055e-401f-a801-33adf20c6b26",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e525bebd-ea2c-455c-91af-27e2b1227fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69717887-2691-4b19-9482-801cc6b86a61",
        "cursor": {
          "ref": "0cb79919-f352-4767-b721-4be71d6b2c8d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d795170b-e950-47af-811f-3795d769d5c7"
        },
        "item": {
          "id": "69717887-2691-4b19-9482-801cc6b86a61",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "06811a83-fc99-4a8e-ac6b-73dc3a7cdcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0e4483-eaea-4bb4-aa67-424971268924",
        "cursor": {
          "ref": "574b39dc-50e2-404c-80ca-dc4880f17cd0",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e379320e-6cf9-45bc-97ab-989c88a5260a"
        },
        "item": {
          "id": "5c0e4483-eaea-4bb4-aa67-424971268924",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a4a3395f-77e5-40ae-9747-8b7782d89ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61ff777-021e-4820-ae50-b81f39b906cb",
        "cursor": {
          "ref": "cda508a2-31f6-42d9-b59e-9123d4b605db",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b91e94fd-b6ac-4b0e-be10-89e95188e8f3"
        },
        "item": {
          "id": "b61ff777-021e-4820-ae50-b81f39b906cb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "361401e2-39c6-4cd9-b56d-e231ed71d2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9896402-62cb-4999-b2ab-32b3edcc2b80",
        "cursor": {
          "ref": "89c6f7f5-94b4-4e1d-91ae-bc59247b2679",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "98201db4-5e04-4ad6-9a0d-e6bea3ac5cf2"
        },
        "item": {
          "id": "e9896402-62cb-4999-b2ab-32b3edcc2b80",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "19607120-5ef9-4950-a0d5-8ef548856fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394f1fb8-d739-42ac-8660-269d5d1067af",
        "cursor": {
          "ref": "f3d1b6a1-502c-4928-ac8a-8960a7864c30",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e5a7e65d-8863-4c51-850a-0d63d21f0c31"
        },
        "item": {
          "id": "394f1fb8-d739-42ac-8660-269d5d1067af",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4bcff64c-fd58-47a3-bc6e-e46fcc810433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d2ffe2-dd63-4b51-b0b0-de24075dc74f",
        "cursor": {
          "ref": "509ef983-7496-4ff7-857c-7782ecdc2315",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "986df501-0846-481d-aac6-65b27412df24"
        },
        "item": {
          "id": "b8d2ffe2-dd63-4b51-b0b0-de24075dc74f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "917efafc-a292-4756-b248-bb8d95e8f2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5fc234-c49b-4231-940e-64eaaacf0b75",
        "cursor": {
          "ref": "19974179-391b-4078-8f29-4500667f9fd2",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "36835383-e309-4187-a94a-6deedf653a59"
        },
        "item": {
          "id": "9e5fc234-c49b-4231-940e-64eaaacf0b75",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1774d94f-6720-4048-9245-f7c96b3d8f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5999303d-30c8-4d02-8f8a-dd82005739d2",
        "cursor": {
          "ref": "19fa9329-65fa-4b59-b0f1-f2c387614053",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2ef3dbb4-1768-4d92-9357-d22fce143a82"
        },
        "item": {
          "id": "5999303d-30c8-4d02-8f8a-dd82005739d2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3508d804-c599-4d07-a4fd-badb69f12d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395a1694-ebb2-4ef2-8a06-400e60e05338",
        "cursor": {
          "ref": "79548b53-b2b7-4a55-8770-f04ab8e2e246",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "30250434-a2ac-4794-90d3-758c22fa1e83"
        },
        "item": {
          "id": "395a1694-ebb2-4ef2-8a06-400e60e05338",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8623f7e4-8f13-4fe6-9541-4b3c8300092d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b845b1-880b-4bbc-b437-7aba690c2e80",
        "cursor": {
          "ref": "bb0ef379-f4c8-444c-b321-595a0fa425df",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bf94f53f-d174-4430-8925-80c46bf2a58d"
        },
        "item": {
          "id": "d9b845b1-880b-4bbc-b437-7aba690c2e80",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "73f3e2a6-d189-44be-a931-e6293b39dd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b349a49-dc54-4d99-9876-aa9a24066ec2",
        "cursor": {
          "ref": "1ee06195-d11b-41a8-a0b4-dc048ffcf1bd",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "50222fa8-0084-40ce-beb5-186acd5446aa"
        },
        "item": {
          "id": "1b349a49-dc54-4d99-9876-aa9a24066ec2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "68ad9e92-7486-4af5-87b4-1ffb85d0d430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45eefba1-af2c-4063-b015-69f8c1a9de56",
        "cursor": {
          "ref": "4a4c5094-2cac-4d9c-bd23-9e69c9f66a01",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "532bea94-e2d9-4834-baa6-93f2329efabd"
        },
        "item": {
          "id": "45eefba1-af2c-4063-b015-69f8c1a9de56",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e4175015-35b2-41b9-9999-c1d93eca3548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3da090-19c7-43db-a95d-8ffc94e88e2a",
        "cursor": {
          "ref": "b530beba-6ada-4808-b72e-39d58a0d0c43",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "49630372-0785-4f61-9f6e-58e34a178a71"
        },
        "item": {
          "id": "3e3da090-19c7-43db-a95d-8ffc94e88e2a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f1249a4a-aaa0-483d-b60a-1b9169c483a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32b8761-0367-4b9b-ac08-88b9c512f832",
        "cursor": {
          "ref": "6b3e013f-9c14-4f9c-9d9b-f5835e154f67",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c9178f22-14ee-40a2-aafa-925dfabfed89"
        },
        "item": {
          "id": "f32b8761-0367-4b9b-ac08-88b9c512f832",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2bc3f917-4da8-45b6-b58b-53aa306454ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8be4a0-295d-45b6-860b-ff924b7145d8",
        "cursor": {
          "ref": "fab8c287-634e-458b-8a6d-9f9325cdae3f",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "bb2242c5-b9f2-493d-9756-29cd6319101c"
        },
        "item": {
          "id": "0f8be4a0-295d-45b6-860b-ff924b7145d8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "908d71ff-e662-4cbc-97ce-39dffcdfc62e",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "10230903-6152-4a19-98b5-923c38e68fd1",
        "cursor": {
          "ref": "d53a36e7-567f-4136-865a-cc3b52193473",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ae23f222-d183-4dd7-9ebb-429a1e2cb517"
        },
        "item": {
          "id": "10230903-6152-4a19-98b5-923c38e68fd1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d48d6545-5090-49de-a240-f50fc62d7e78",
          "status": "OK",
          "code": 200,
          "responseTime": 225,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7780f78-6d1a-4e2d-b3fa-b09eb2be2527",
        "cursor": {
          "ref": "38067414-0e68-43d6-8bb7-1dd5b2638d2b",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "fa886fe8-1233-4ff3-883d-09b3f67b652a"
        },
        "item": {
          "id": "a7780f78-6d1a-4e2d-b3fa-b09eb2be2527",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "708c0210-575b-483b-8d5e-92d77e87a1c1",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f0ad06-4ebc-47ef-84a0-08304629fae7",
        "cursor": {
          "ref": "7744b34a-836a-4bc0-b6f8-8a9144d527bd",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2cf5f1a1-7ef8-4e1d-abc2-1c24e69742de"
        },
        "item": {
          "id": "06f0ad06-4ebc-47ef-84a0-08304629fae7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "55bb9047-3aed-4625-8e55-7f0d4ccbbbab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f0ad06-4ebc-47ef-84a0-08304629fae7",
        "cursor": {
          "ref": "7744b34a-836a-4bc0-b6f8-8a9144d527bd",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2cf5f1a1-7ef8-4e1d-abc2-1c24e69742de"
        },
        "item": {
          "id": "06f0ad06-4ebc-47ef-84a0-08304629fae7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "55bb9047-3aed-4625-8e55-7f0d4ccbbbab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d463e546-da51-40f5-94d4-6e711341015f",
        "cursor": {
          "ref": "90073849-a983-4317-ae24-6630cdcf6ad3",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "77b6654a-65ca-46d2-b078-0dede966d1af"
        },
        "item": {
          "id": "d463e546-da51-40f5-94d4-6e711341015f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "72bf57f4-5fce-41ad-8f29-0a4ea768d5e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5947cd3-7f93-40bd-9dc8-cce1639989d9",
        "cursor": {
          "ref": "b39783e0-104b-4c70-95ee-6e7371f06140",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e7c1332f-3bf9-4ddb-8869-120bd5d9bbf6"
        },
        "item": {
          "id": "c5947cd3-7f93-40bd-9dc8-cce1639989d9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3aec74df-5508-429d-bd62-3dd061e4e39a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}