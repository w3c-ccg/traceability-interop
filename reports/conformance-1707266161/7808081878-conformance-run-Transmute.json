{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "59f9ab3d-2a65-412b-a994-b45b4bc23a7c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3aeadb1d-4aca-4cf0-b7fa-5b5ce1e75fb6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "061071f4-b2ba-4b0a-af8a-766234453ae5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e1eed6cf-3c91-4f6f-a3fe-138b9a0157c9"
                }
              }
            ]
          },
          {
            "id": "0db55948-bda1-4a67-a772-430d739f13f6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41ed7ff0-1044-4a2f-af1f-ad1b0a4126a5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "14fc7a86-3dfd-4bbf-b571-ec50512c4a4e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e02f55db-2d55-47f0-85e2-9c22cd298604",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c008d230-2f8f-4691-9811-bf79ee735b5f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9f6937dd-9120-43bb-9dd9-175644a23041",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1734a1f4-5ebb-4b1a-b428-39e055131085",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49e9c802-054b-4b79-8a17-1cd0ab51cae7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5cd30a3b-7235-4653-9d62-4b561f67dbdb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed54864e-fdbb-48ba-b794-3e109e0bb523"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1137893c-88d9-4384-9437-bedcb8d33f72",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71d1c6db-4900-44bd-b9cb-81cdc6606722"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8bca7598-e156-49bd-b4d8-d4ce51b168aa",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c923c07f-abb1-46a5-b726-f678e6f4ed1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b8b355d-149c-4579-af1d-6bf0f9ff93d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5be9354-f49f-4d48-863c-f44d155b2a7a"
            }
          }
        ]
      },
      {
        "id": "2ae45b1d-d2c8-4292-806d-be8e4fa8af21",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cbcf1b97-c1f5-49d1-9321-666b5dea8ffd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc42db9d-8784-4333-98c4-c49a7a4f63a7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e1b42dc6-11b5-4698-8f44-bbd2f0b5f616",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2be0be0-3b72-4349-8fb5-3e2d736e0d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58b7d596-beae-48da-a5bb-f57c8df0cde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7891a39-fe9f-4986-8f19-996842d4e005",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ce57b2-a9ff-4ec1-8c82-e4f4c42dfa64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76d9d01d-e930-41b0-b583-e3b9a5a7acc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e0022b-4f2c-4158-be70-10d424cedb05",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957c3f13-9753-451c-b262-26bec22556bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb510ae2-635f-4b7b-9e74-bf552178ae75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4294a517-c1ad-45c1-a789-3db262ebe8a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f56b46a4-7273-4af6-b969-c27390bb23dc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a85b313-69bd-41ff-a1ca-214d48fca1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d478785-3a82-473b-bd57-07e57a48e480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0a792e-b8c6-4ca4-983f-c38f7e059ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d82e22-3efc-48c4-b8af-1c87c6dad532"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9c3b367a-0d12-4384-8c3d-6ee21a2b232b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28b6c873-e9c8-40f5-8db3-29aedb3a97b1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f60c2738-6fdb-4567-b562-a45ec0114d06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b49d0b68-cb3c-46e1-bd24-6968979adb2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1792925c-5a46-463e-a7b7-87a254893171",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "994d4bc7-7165-4f04-a13c-444b842b3e8e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "161622f2-a365-4872-84b6-5288630b4523",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b207588-520c-43c3-b15f-8f1c6ad423e2"
            }
          }
        ]
      },
      {
        "id": "70191146-b630-4cfa-90cd-944f2ac35849",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6a1dd639-e3c0-48e2-8d68-211257e1a114",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00c42f86-0324-4079-85f0-c84e923ab095",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ac439205-0bb3-4e32-86f6-2268b0c5acba",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264008d2-50a1-4361-9185-145619f658f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fac14d-d3a6-48ff-b7a2-3f0cad2b4c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c0d400-6672-4566-910f-abe18836a570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe13e687-ff71-417a-8fde-b28a50e2b436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2cea6d-ed5d-4d2e-b7a2-44ed2a473b4c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cc21e5-51cf-4f64-87ba-6b7c1f0716d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13535567-dc2a-4d17-ba1f-d3cd097ff6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79474d27-f543-483c-8360-7922a2954632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "697df84a-f6ee-4b0d-8d17-2f50dfd2025b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbc3a99-fbd7-42d8-9059-cbf4778d7a77",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16aa858-3bee-45b9-adf5-d408f4e1c5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3e367c-4ddf-46a9-b594-f9b354e33c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841e3111-926f-4700-8119-594ea03a8c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fffaa0e6-8bfa-462e-ba78-119076a66130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfb4595-766f-407c-b8f5-8ae723502c30",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36df84fb-e941-49fa-a632-5646fcf5c091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcbe5dd4-a14b-4f2a-95b5-f8187f50bb35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2f7ce9-0749-450a-bd51-a7648226e65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "738f89e9-3496-4cd3-b80d-dca7ca0a3e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dc611c-4db9-4cc1-98f6-4a674cc89d63",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58dbcf95-ff92-4fd6-b69f-8ddc52e459ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b45e1f-516e-4f49-bd70-cee732c6b36c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86f800a-722d-4722-8b27-6f785b4fa1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c74f49de-a2cd-4d36-9738-4272a3c650f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb40d98-6801-42c7-91ce-65b58cf1fa16",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06897de-a04e-4c7b-bcaf-5b0b3cc64008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7dd904-0c06-4e95-8858-f60351206f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80b1475-5d63-4a75-b0c5-f2609be44108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "757c9734-fa11-4f47-9e3b-6725e196b727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f47ea9-461d-4d82-8373-dd2bcd259bd3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31058709-7e63-401c-a57f-49a1f88ebc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef408582-8394-4b49-ae18-5dd773138431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5efc93-fe53-4506-9726-c2980b40744e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa786156-308b-4dbe-9220-7a7d59284076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a98026-6a36-4c5c-9f73-2821c7726080",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440d5d08-3943-401e-8581-9b64c56e5044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59db8430-74b0-4b20-a34a-d50859aa4d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177d49f9-7ddb-42b0-b744-fd327397a78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30cf08a1-7720-4215-9177-2d1743f2ce28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd331673-3c02-4139-bca5-5aee2e773973",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48ed16e-7e79-44ab-9b47-82908d089de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e074ea9-1a59-43b7-80f1-710e4f43cc0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e417af-d5a6-4ba9-9958-c9d8f1f3971b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e61af34-f333-42c6-8c7f-068bbf9456bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc12bf5-aa4b-4ec6-8e10-5b1572232804",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b5de8e-e685-420e-950e-6d197ab36832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e556a5-d90b-4803-9c1e-6117a99185cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5edb4f0-ac49-4ba3-a8b6-4fc1c06b03f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41f46fe0-9081-4508-b367-390bb8a52a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8b617b-bdaa-4348-84dd-559b2fc7bb19",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb1888e-6a17-488c-af48-a13649a26607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a42051d-971c-46d8-933a-9a5ec90199fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867e6f9a-7680-496f-89c2-df291f1fbf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81541459-c26c-4d63-893e-305ecbf488ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc721e1b-1c50-4870-92cf-257830b14bb2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd34c5f-5abb-4482-b963-1489dafd5f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9ec997-f672-48b6-ab0b-883c9ab2e418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e8d2de-338b-4129-bcdd-52cff019c08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33394242-67f0-482a-a72c-6fbfa99387a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237f07ab-50ee-4d47-ba26-16e96a1a6b02",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdce43e-cfad-4db6-8be4-fc089e7e07e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e986949-2ac2-4b21-9d74-02ba9ccd0330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ad8e0e-1dc1-4cb3-9fb0-6f61321a3a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1bdde15-985e-43bf-aedf-2f46777a8374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec57e211-ce5c-41f8-a626-2fdf05ba1be1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd57dc8-02ce-4d1d-b6f7-4ad06de1c183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d627f7-e426-4891-9f65-ea9b3286c10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d96d4a-2f0e-416a-9757-0d1a0670f19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e7b0c70-3179-42a9-9c55-0098721bc2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18f9c2b-7607-4998-a351-7317a9cdd57c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144120a8-9b08-4ffb-8858-38094895f4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e674103-3152-4700-a1de-453fdbbfd81e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29657fc4-e553-4fe3-a9c9-5c5c604eba2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7eb1b47d-409c-45f5-bb24-4ee0c3d948af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786567ae-8131-4b97-9ce8-61f72e98ca60",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff6a1e1-0c24-48b3-9ad6-61eb0923b854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b1e454-5ce2-4252-9f90-c7d6fcc02fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f2f11c-d299-4b48-809d-2348f5be9a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9de29b93-f4d6-4fef-a6b2-8103e2bb4300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca7af4f-eb59-4f10-a507-32c1ee24baf9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084146ed-5164-4110-841d-c9741a674fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "049e1b07-3549-490b-8ad8-4588ef929a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22aed5a5-2d39-47cf-b768-4d1e7d9dd700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7572f3f-3ea1-48f5-900c-2d141d504348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8c64f9-50df-4deb-890c-58e9133fa4b9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf0eb22-9f90-4f11-918a-be68d9614439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b127ea6-b9cb-41dc-8c24-34f820ce2854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a3c1ba-50c9-4959-8eaf-4d718064ac33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6be922fe-63a3-4a9d-81d8-9e83bf847bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6dfc787-11ba-4a0f-85f1-0d5e91581a21",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a9c578-baee-4d28-a5f6-3b6a1ecd72db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b66296c-7491-43b8-b38b-26f63874ce04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef6164f-7ec0-44f9-a85b-b0d0f6dcde45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7381a38e-7b4b-43a8-b09a-d78efc80d035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bced58ea-1fda-4e33-9965-3e915ca8c6e0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044a2271-9948-4705-8528-fe692ee0a0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2271b143-51cf-4763-a4ac-9f590ac639a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da40ab3-dc96-4771-9080-05835e915b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4c1506-4f03-4fb4-9b9b-f32e21603510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45b016a-18bf-4692-89e3-665266ffba02",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd88eaf7-1392-4090-a95b-82c5983df9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd559d98-b584-4885-9bd0-09a1b226d5b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23564a90-2a1e-40e3-93aa-d0f63c900430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a7cd210-ff4c-4057-97b5-64d54545853b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757aad75-feb9-45cf-8e48-4f87b8d844c4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4838cc-28f6-41fe-8782-5d23777ae944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3e7475-9fa1-4a3b-b262-3ec0d13190fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c23baa-b3ac-4340-aaaf-7f525b56e176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da72d1ca-d480-489c-b63e-ecaccf82f0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1809f6c3-a379-4682-be7e-b053d606f36d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b634120-87c5-4796-b1f2-f8fc4b61c64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb33260-ba46-4a5e-a187-28917c0247c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e2ebdf-b0a6-4bc2-9620-f06e0441781d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72e9505f-0d95-4b7b-8b09-34fca3f14eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd0d2dd-93f8-4932-a9ac-1fe08f2c1708",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7290efba-3296-4df6-ad87-e6b5c5918378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c28903-04cf-484d-b323-5e33f0a2b0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d989df-6f66-491d-a8ee-48e55e58d532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a672db2-73e6-4678-a326-3f8fe11ca954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f019b39-fc2c-4f61-a250-0ff007aa0a15",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d26963f-8a12-451f-8927-bd5eef6f5f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "262853ea-38b0-47f4-9218-082935a33fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86825a5b-71aa-47db-9283-590f772013d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f29983e-71db-4970-8d08-b18a6be42971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ddfa79-1a2b-4ed0-9151-905021ee31b7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4a3ff8-24bf-49dd-836f-b5ba21aedf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770e79f3-d5aa-4c26-9d4a-ea7bc44354a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212e80b8-830e-4f13-b8ff-7da5d173d81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6d7702-af5b-4c70-813d-32dbae612a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015e97c8-64bb-41ec-8350-498b576a1e03",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36373ed4-ed7e-4aff-afed-b8978e9f4a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ba6298-55fb-49ee-96ba-c21462143712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9310a11f-3c84-470d-80fe-e1d9361803ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c317a422-3e2f-4cbe-a9d8-c36e049aaf70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce35f1ae-873d-4c5f-9a4f-8280186f2dcb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df932673-d1ce-4c33-b444-b7e79020941c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5471e1a4-15b8-4477-a037-8b41846c8ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cf6e3e-7702-4198-8a93-bda3e97e639c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9efb776-0279-4b5d-9f44-bea98558c648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9f6a53-7a5c-4f7e-8e85-dd72abe6a4b2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb12ab8-2b52-4d26-b6e1-74f102361810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bec622c-b3da-4eb4-9315-123da1a1e1c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c881d6c7-939d-4653-b64e-749d1ba486d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17e1246a-1f78-4749-92fa-206049af4617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff921673-6c99-4937-a8b0-89a6c03b0fd8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b05f211-1684-409f-a809-c8b8eb43c987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1886277-fb2d-4473-99be-1194bdad8d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4005c6-6225-4ef3-a026-f8198112ba81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "32da2c59-932d-46d7-adfd-6e8b30ae21aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae27678b-f7eb-49d3-ba9c-7fbebe604e9e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604f2d15-d9f1-42bb-8127-538cdcd3cf82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e02dba-8a10-407f-bac7-fef3bcbad2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57753c3e-7ad4-43ad-bade-75ac2d361d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "45bdad78-eaf8-435c-b67a-0b044c04c5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edf8ea1-0792-44d6-b7eb-5c36fd20e66d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40652ae7-b4af-41a6-802d-0f6d153d7ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7c9669-e8bf-46c3-ba78-066df200e27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851cd6d5-00d8-4c55-8ea2-1c5e0844a893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca256174-f17e-4888-837e-48fa12c4c300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af18924b-5575-465a-b610-a13eb2d7d05f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6185af17-86d4-45a1-8b43-a5be78a90193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe9d80d-78e7-4cb8-8208-e367f6726f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d212bcb4-dee3-4c3b-8184-80f0920c7e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc4305c-bb8f-4c12-92b9-e7a49d21fd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6194dd8-69f1-4f79-8c38-5148ba70131a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9c73e8-6e7d-4e02-928e-c59b0676ea44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbce86f-82e3-4af6-8bb4-57922c19e302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62896f79-b1a1-4a6d-9e13-602f90ee4812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d094e7-61af-4460-bf51-9938f686e18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826ec279-cf87-4810-856f-425a827e3f81",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccc50a7-51d6-43dd-a3c9-8d13d689dd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc80cb1-07d0-4f7a-b089-92c29fa9b1d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cbd98e-2523-4560-b13c-b5715e6e061c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8566b96a-7add-4e53-a8e0-c8cb07804123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da975af-5a46-4710-96b2-427badadad09",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf69fa2-f441-4219-96bb-27a098ab9c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b6b5b26-f7f9-4bbc-a2cd-d731dceaecc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbbc951-d6aa-4e92-8cc0-20ef25a713ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80bc0ad7-846e-4007-8048-81eae221654b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3e9ad6-fead-4447-bc53-2b7ead40405e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b82f69f-8aeb-44da-b46d-ad25fd14a81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e1ef668-0857-497e-80ab-73f1f96cf614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d941269d-814e-4f55-ae8b-3ba47a7d1966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6c4245-1c94-4b8e-a391-dcdfb70a8270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b0176b-4d7c-437b-a2a6-aa14b4d996f0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f746e289-ddbe-4a3d-9036-04b2a08ef3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4f2545-a75d-48be-bac5-949c22b58421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59c7c8a-7e66-44a1-9e69-d297ba86f8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0d32a6-e42a-4686-a82f-0e8f41707b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7b097c-6082-42f5-9ad5-2b6c8c6d7506",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a26c26-5f38-47a6-9f84-e6a749c4b4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966cba9f-dcbd-44e4-88fc-637f18ea0d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c228eb-eb24-4b52-917b-08d94316b9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1893c1ec-bf2c-47a4-b0d1-e89620371aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a13130-3f54-4d74-b954-a577204f1f7c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7dcd570-2f84-4093-8c45-b72a7aa726ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63a014c-a57d-430b-be6e-2ab344551244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe03cf0-d5b3-4bbc-81c2-8fbd4954ec12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2c8fa5-b118-47ab-b275-ae0478e0269f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6adcf2-bbb8-4d74-9cec-0990a0429837",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570ff1a5-ca84-4a97-a8c5-6bb82d23a82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb184f49-bb0e-4d6e-a631-6e7ab5f8233f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d384c5f4-aaef-45ce-bc09-2f8604e470cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b66907a4-9f46-4770-a62c-d982d8e2b0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c74b82-024c-4005-a4cc-082a6ddac81b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e015c7e1-0cae-4cb4-a379-d7144216ef01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62faef8d-b318-4247-aac0-c8bcc8222b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d357b79-bca9-4751-af59-e2a8afbc39c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "da63c45a-cc93-482a-9420-e52b7947e1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24038e5-6556-49c2-a0f3-749eb02da0c1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3904a9a1-cb4a-4b31-9309-82a77a56b093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f62b30-4a24-468d-b279-d5c1d2492a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3b4db0-1f88-4dc7-9f6c-8bfdaf4b35c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "888825c5-ed53-44ac-b734-62718589cdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2327114-6759-4493-a2e8-7922a647b6b9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cd94e2-1a48-488e-a98c-ad2faf21d04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf0a0c0-8f3d-46e3-a778-be3d73a7f75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a5cde6-b9f4-4e3e-8cb5-8e70dda82cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "979e70ee-db4c-4e0b-829b-ff4e7073c2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8eea0e3-8508-405b-9b79-f0a4d1c8cbd1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3497aaba-1063-4890-be93-b105da18caae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fc5ff0-6e3b-4552-93f3-1daa22df1659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a8aef6-be93-4a0b-b8e4-6c4d8fb3ce6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2fdca30-1cd5-4ee9-a1b5-a4ad78cba1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab3e56f-d30d-493e-872a-becae053cbdf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b234915e-81e5-4835-856f-b1080c07dad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d39b947-7f81-4db8-a04c-8063e4b0ede9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79787b48-99a6-4c04-8abf-70a4eaf74a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50195262-1599-4a7c-ade4-53db2e57acd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e946dc-ba73-43c5-95a2-473501438054",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a49bde-7963-4643-82f4-a53fc4f791a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5929d2-39e8-4878-832d-6532edbd826c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd82187-0c5d-487a-bc65-a7473039106d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a80b757a-6bb1-45d3-9166-cf80459ee89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ae26df-836a-4bdf-80ce-21e493896f0e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70df90d8-f049-4598-87c9-70219cd09d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c68748d-cd50-49b1-bbf5-b93a28e96774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7025b7-6e80-4301-b26f-9f8fa7111e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be736eff-41b0-402a-9075-8a9dc871e6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185f3a08-c410-412e-91f4-fdfefb0d04a4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a0b756-3b92-4570-9d11-de9271556347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf632df-e400-45dd-8990-f3b8ff9f97bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e10920-63f9-4470-91b4-51d04def552d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "839594dc-3225-48df-8435-74e0afea1443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6560098-521f-49de-8f2a-ccd7ee028161",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b31d3af-ee49-482f-ae79-990182ca5a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fb6f8d-680f-4d7a-ac64-76941b827a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37a31f3-9ee5-4c0c-a0b4-80f483301ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90bb22af-1646-4ced-bd09-a61d19c985e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a34e3ca-e3ad-44bf-b196-4839c18f707d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5f0725-273f-45f7-93a2-9f5cbc60be09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d952c2c8-76c7-4952-84b7-1285bd27f677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cff5bd-37e9-441b-8dde-e6d6c92471a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa540fa-4b4a-4314-ac56-f6968ed959a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1613f883-e08f-4b8b-8ccc-2a0e36ae843d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837ad356-0160-41c4-b06e-643a66a2cd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b759c4-70d5-4dad-85c5-d8a246a986a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6560b68d-f19f-470c-9bac-7bf43f929eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "df704cd3-e572-4994-b428-4d4291c10c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89633969-c022-4d32-a0b8-a75b851eab3b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c787e8ba-b0e0-4b54-9a35-33d14bdb01c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186ec4e8-2908-4acf-9d9f-19ffac55c49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdaf2ba-e1b6-440d-ae4b-e6bc1ff20e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6efcc4-76ee-4f24-bcfc-2571c9f15965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1516ae97-5735-4ea7-9da7-8a4c3fb1f4cf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eef45d4-b1cc-44c4-bf83-0364e34b9913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d747bfc-a7b4-48c8-bdca-522dfc66e7ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c99cf8-cf33-4a8b-bfbf-3803568a9bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b91169c1-c04f-42db-89d5-784e44631344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2866f2dc-7201-43f1-84ec-644f0fe5a1ab",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114c75e5-ad6e-451b-8abc-0760cc8e7537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859434b8-4b56-426a-926e-9cd27de60ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe657d8-cbd2-417b-8991-719952388f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc168624-30f3-4b3a-b065-701e0b8e0a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650ba0e3-d340-41dd-975e-cfa94c5089d0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c45e292-9d00-4a1d-b064-764df469db41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788f942a-4b81-4755-9568-4a2cc8f5d22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d7b90c-8ba0-4fc3-bb2e-e4dd39c01d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6b017e65-add8-4b02-a402-2c7826d7daf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca0ec1d-53f7-43e8-a8ff-c7362147cd58",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d8ffb5-2ff7-4b03-bf45-e59aed4c2e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4ea27c-581b-4bd7-82f1-23314ab10828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12bad2c-b479-472d-a8a8-046ddd04a0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed7d3ad3-e64d-47f0-bd52-55aec238f98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce33a284-3984-4533-97e6-4e7287468687",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd5b6d5-9f8d-4f88-8211-65afd5597dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a8c8db-eb9c-4597-b362-b8ae56574596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d237cbe-f131-4b7a-b909-391f5a109523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c550c92f-fcb5-46c6-91e4-2ca83560bfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d407a2b-feda-4a11-9457-52cb82742236",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34052ab9-4f12-4b80-9d27-e34a39345b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49db31ba-993e-46a6-b0ee-058c70af7641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b6d1ea-8f90-4be9-947f-32809780767c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f247421e-b552-4420-ad25-dbaa1cf4b25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21716c8-e5e0-4f22-a3fe-8216a1965514",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844fe6ff-d654-4575-8d5d-2ee352eb5cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb0c4b4-8f0f-4117-9ae4-7c841dee20f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72cd934-396e-4869-aae6-945378ac743d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff57195-5929-44a7-88cb-7e6e1ade32b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef0492c-be43-49b6-9a70-5c267b687e8f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c84331-5070-4339-bdb8-837646510d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c7619e-29eb-404e-8ccd-e7bc7cb20b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaff3c49-ca32-4fa0-b51f-1b1bc6268a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e00d1cde-a6a8-497b-aa54-ccea08d5daf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf0dc44-5267-47db-a790-7ec351f77285",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef879c1-8686-479a-874a-0012f3b0e61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7121bf77-ea32-430d-8a21-aafb15e3191f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e07c65-105d-4273-9750-d054026f73b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5117e0f2-9d9e-4145-8fe2-16e229becae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c64294d-e57e-4600-a232-b115cca0ccb7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259aef3d-534b-4ad3-af37-48cfd5175edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a44c700-1ba2-4966-a15e-90017236342a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284b4384-89b4-4b16-9844-035e8fb867f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "69a081f6-2eee-4f5e-9bcd-06e6c293d121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a43dfd-96b2-4c32-b14a-2eb6c92c6195",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b22cec7-54fd-4831-b0db-ae561cf98e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406149bd-9828-41f6-89f5-6a3f0b2ca427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7b0908-a280-4ffb-be5f-0cba2c1f3a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1794cfd-81ef-4d3e-b0ee-12f39a0f161a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba2e805-5d19-4f06-841e-3579453487c2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c392bf2c-b02a-443c-b208-46b0e2dcd958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e0601a3-655a-43d5-98df-d7253e1ca59e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc97d7c-1363-497d-ab80-751a117c6547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e545bb64-1121-47cd-85db-e6e875e3245d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22a0080-1d53-4e5f-b66f-51ba01f86828",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f0863b-92ce-4b53-85ce-7f0e61701808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b038144f-5af3-4fa3-a5e0-7bf2dcd2eb83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83495fd1-5861-416d-b350-7293b0b987e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1f2c43-8e47-4875-86da-7c185b0d1140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7a2235-aa0c-4694-855e-45cd6a555285",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cca31c4-917e-44ff-ac73-d23254e9fd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78164321-8b05-47e7-80f8-77683dc42a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d8a41a-732f-4905-ac58-a4886a4efc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2f27f3-e179-4975-be6d-86af3dacb800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af208a0-7b4d-4a3e-a51a-e6de1aacb2fa",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e5f902-4c51-4711-8c99-2308f80af6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf7aa11-f51a-499d-a66e-aff2a9cd22de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30714e6c-cecc-497e-8e9e-399804d8c8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab91870f-9eff-4e05-8e7e-3add25340f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c458ace2-1d90-49c8-bb28-910899e9f5dc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196ad927-d115-482a-b368-c1603532f5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d32c63-be39-43e0-829e-2db1ed2b5e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a3b583-ac16-48a7-9eda-2183878710ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "01779b08-219b-4458-a3ee-fe060018be93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffd9575-d4f5-423c-88a9-524ed1c8cd3a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e590c1-3cac-48e3-8de8-8b15bfa883fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ce353b-421e-498d-bea1-42f3bd4ba79f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649d0cd1-055a-46f3-a5e8-708da95d268f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "181b1ebb-631e-4dcf-8f0b-50665ec1bd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60302cee-a109-4ddc-b52e-3d872aa11122",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280e4efd-928a-49c3-8870-5e5fe75f6191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909c89a4-3311-4f57-a9cf-51de81586410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56426004-323c-4825-9a21-46961345e031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a8be42-5eb3-4451-a514-005d178d39e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2309fb5e-d1ef-4186-a38a-e908ef1352a7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f383588c-1530-4e99-9849-de5f5d3204be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7764cddf-6045-463a-8938-35f85e13aafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d68085-7448-4451-b9e0-5a82886a1f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a779fcc8-62ce-40cb-b3f9-52873f4e6769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50b2d65-a50a-422b-b216-1bedcaf4917d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223d2ca5-13bc-4f36-8f95-346399096a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5beb545c-b4eb-43eb-91ce-58166341a23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db877c38-fa98-4804-bf86-121057dad27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e254ad27-2fef-4ff1-9e2b-7f578ab8392b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313b9c1e-b825-4cd5-a91a-ac90288b89d2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24195a0-4145-4ba5-8c88-5f60ec2dca7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89016785-0f82-439d-9ece-404388da5f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a595a23f-3781-435b-b828-0bbfebe4ff51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b3cad06-2eba-4389-9742-92acfcc1e6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b14c3f-7518-4fb3-be62-546af46c40f4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f62635-6dc7-424a-a4cb-f2c38c72b7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0faad5-c4a1-4258-814a-a8d47036b687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08221f2-8018-47fc-bdd1-88800b7239cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "518381eb-bad7-4f36-9ea2-16a28697f128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9475178a-d57c-480c-9535-eeb935c4f773",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7000296d-846f-4d7f-a265-14a73cc2b6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a608d1-90c3-4662-8ba1-9db9376676ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36528d9c-590f-4642-a96a-29feeb44fe4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa3aa31-63b5-4fc6-9457-e3a19248163f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1893c0a-a89c-4935-83b3-e65375a5fcb8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc3b6b2-7cbc-452e-a7b7-d11ccfd45638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd9d4b0-0909-4f23-a6f4-8ba8a65af468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37748dca-c6b8-4a1f-8e0c-1ca54be955d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7e3aeb-0674-4b59-9113-5e9bd49e80cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5254e201-bda9-450c-94ef-a85b7365634f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848a6d9c-2900-4110-9cd9-716f522ed6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56aab3f-47e3-4db2-9917-9c7ebb401ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f794f4a-14bc-4400-acc3-7da0b11e474e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af4d6541-6eee-4857-93f3-966ab7121b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58936c6e-78ba-45b4-9d4d-13a56c1080ed",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18f73dc-6ea2-4347-9170-7c6c542f3ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638d3660-4e6d-4553-b93d-8ac9e6b5bae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcc4fd8-2a15-489e-b32d-67dda4b4477c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5efa5ae7-98df-49a0-b12f-e52cacc85a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb11168-e071-42c6-9d81-9cfed941680f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03ae406-fe42-425c-ae6b-a5785e3d24ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a225c7e8-e456-4973-a5da-b87324e7128f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0154a7c-4c26-4d4a-8a73-fd542a7d7c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64ce7ab1-bbea-45eb-aabd-02b88e2198ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e246ac2-407f-4d06-ac74-7aa9e218262e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb674fa-3d54-4e23-a105-aa7187ab51a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679cedf5-44c8-4797-aee4-01e1ff568267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de767e5a-9f2d-4898-aac0-2d6918abe15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "db09f36c-dc8f-4db2-a510-36f89a9cac15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7a3828-6738-4183-925f-767ab581f934",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7515582f-e6fc-4865-ad5c-79ae0e61aa6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45903c3-28d7-4f78-9f36-7438f4f8556e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155cfcc3-9628-4e85-9f45-5ebfeb531d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36f2ce6f-85d6-49d7-9c7b-aa67e7a0f46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e4ee17-6e61-4a95-a766-56e8759b8d40",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3658446-0c93-42b5-8c12-83801e9bf5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df289d9-555e-450d-9d89-7a6f22c98d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67a5aa6-a931-4792-ba5b-133b43b26419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcdc6d07-eeb1-4386-8b32-4898ddaf3bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4db72d2-b479-4ced-8525-3bd972ece8d0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35efc77e-e37c-4570-9278-900a04f194a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfbd12b-0735-425b-908b-3a64990668f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54c9ac0-1058-451d-aa34-1fd9d62487b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7174f4e-91b7-4ff4-a776-9ac404342b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c38351-b3aa-4324-856e-4a9ca5c51120",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4368c12d-cdf6-498a-91db-5b5697f5ca48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a6eadc-b55d-456c-a726-9ec92c6fcc4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389cf972-e44e-479d-848e-d4af6a1382b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd61f2af-3dfe-4628-b2b7-c5a2a0962b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4417a32a-c1f4-4838-ad30-5a899f324eba",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6034ca-1451-4364-a4b6-cbabca460621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2ba66a-0f17-4cdf-adeb-c6d374e44fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8714b67-88cb-40ba-b728-6c3b7132c34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d2498e-1aae-4818-be1e-822813f37535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3811bd-5ce3-43ec-b93f-41a6ae68a4eb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b94d334-d850-4e38-a21a-00c9034e8091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18bd65c5-7ee0-4a94-ae75-e36bea121084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc03b8f3-e997-4cb9-93db-b73f7d4c0cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "84c0d0e0-15fd-4aa3-96da-1f5b7f0bbe13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae261398-391f-4c74-b335-6295491a6d6a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d635d93-6996-4c08-ae66-3d7c800e95aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4367ad-b609-4204-ac6a-1932ffbc69fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c4db56-b9c8-43d2-b091-244446ddf665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "48d6ac13-cfab-4192-8262-09ed5cf512fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39459cc8-05ab-457e-aac2-7e3c2c793470",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3193f4f-2ac4-48a9-8321-5e61cad270e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc48b19-089d-4ae9-9303-07bb0bd18503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee800819-45b5-48d6-b41a-3b77b8dc19c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "540b4c3d-f473-4e07-b6c3-bca74a875b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f6f7f1-8438-4c53-9b6a-ed3cb7141896",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cbb1d3-b1f9-4fd9-bb60-585bd05230e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571a6780-265a-4519-93c3-971170dbcc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aecbcf0-52f5-41a2-bb46-cd4fc73b84b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "597ea36d-7608-4591-8893-8f3ba154c2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7afa5c-436e-414f-9009-b231f360a116",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfc499a-bb00-4627-b4a0-f387a44eeaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30c9d3a-43dc-4d20-a2a3-9fd1b744672b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c19795-d318-431d-8b13-1e1424b3c484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e7669ff-3e81-4ee6-817c-c5bf4c7a8dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f243c495-cf63-4d7b-9ebd-8150d4708f1a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e06757-99de-446b-9808-f91205738800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3140f6a9-457c-464e-a144-55a691151057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d931857-8fbe-41a0-b274-b1174512488b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "75a04212-4f3f-4376-8889-fa861e6daeea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8046cb80-8d1a-4d81-b49b-ab1966fd9aa4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "102f1d06-4fa8-416d-a8b3-0ef53cf9904e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4149abfb-dc84-4523-a6ef-dd790c480c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b510e10-6c09-4b38-8278-8ffec6c5e89c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a407c0-90b5-4665-b7a2-6ab7868e88ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2124ebed-fc5f-441d-ab7c-0d44b39037b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04aef082-8c0f-402b-82cc-0b00e1e4c010",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f0e7b1f-7e7d-48c6-861f-1ff2e4c12518"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf93b261-2472-48f0-8bb8-580fae1cb673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f9d1434-3ec6-4ace-885b-13743e762ab0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1ad072e7-f357-45b4-bbe2-39d3f1bc8bc4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac3d7290-64b3-48c3-9bc1-d3125c0a2816"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4be5621a-7866-4e33-9fd1-adbee01444e4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce8b4d7c-38e7-4fdf-b47d-47b2954a58b2"
                }
              }
            ]
          },
          {
            "id": "899a3253-03fe-405c-b135-7e6be92a616f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "faa7135f-f58a-4ea2-9fa6-df2167fbbb82",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2dd947ac-570e-4c2d-ac5f-140e476fc836",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0c224c-3df7-4480-8e22-44f803872377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "63faec11-5f2a-4294-813d-fabbc24a4a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bd33fd-9601-40b2-a769-e9cb7bb59776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb13b701-84be-4788-8827-8e6a199629c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "954dd532-2e9a-45b3-9192-25affc4cae15",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9e4b50a-0b0c-4321-8d72-6bf9d6cfc2b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbe4eaf5-20a4-4191-8ccd-6ceb33928f26"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39306246-2fa9-4de8-85f3-2ba01f0ba62c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "431a48f9-05cc-4f17-8cfc-92b435115cec"
                    }
                  }
                ]
              },
              {
                "id": "b3858c79-65f7-41b7-978c-27a29e0fef01",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13a0a60c-ed53-4f13-b251-6dc419712240",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fc6107c-6166-4ec6-a60f-7a02080935ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91c5a841-2c2d-46dd-ae11-0378aa79cec1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5e67c34e-326d-478f-b33e-4effdf9458ba"
                    }
                  }
                ]
              },
              {
                "id": "44e00297-0f63-487b-9edc-3a8f419b4045",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30c3ac30-b3d7-45cd-862b-f1cc7db1130e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "acad42bb-a289-466d-8898-4d883a242d29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c12a2440-ab9b-47cd-8fbd-4a9133bea3b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e38001c-2b4b-493a-aa15-34e341b0277e"
                    }
                  }
                ]
              },
              {
                "id": "55a893a0-9f06-4525-bb55-edb2daa01d65",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "825d4e79-8128-4b8d-827d-d9c3a47f9597",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a644750e-35ad-4633-ac36-ccaffa36f371"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc91ef91-a057-4cf9-acf8-dcaaa612c512",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d30884d3-3580-4923-a320-7f11a8dbd613"
                    }
                  }
                ]
              },
              {
                "id": "1dfa9c52-e5e8-48a2-9596-43cc59082486",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22117030-7edb-4bad-9a99-3695c2bde9df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f9c7416-b362-4e37-9a3f-e2f433e6eb15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87dee91c-fe7f-40e4-8bee-46b8747f549d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "262bd66a-3ecd-472b-9c75-5f06bfe0984f"
                    }
                  }
                ]
              },
              {
                "id": "14e5abf6-98d4-4baa-a7c1-47bed6a4efc2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99751105-1fa3-4f2d-ab46-a05ee69a3b39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5df5115-cd49-43e6-a4ae-c91157815fd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "260499b3-4124-40e8-b715-192346a7ed21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a7007231-b075-4544-abfc-868ef48f5f92"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7ec7f1b-d5a1-4840-9d00-8adff324836a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6fb1a4c5-8408-45db-a2d4-bc1f192b769c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "559ee0e3-289c-41e3-80a4-236277c116d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "396d121b-17c9-4b53-a9b2-c09a78dd660c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b83142ae-483d-47ad-aac5-3154383d4984",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3539ef75-f34a-4202-a60d-0056cf94dea7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bc2e69b-bbbe-482c-be3f-455011c8df9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5519da7-890d-49a2-ae4f-4cdccc408987"
            }
          }
        ]
      },
      {
        "id": "c91869e5-837f-40fc-957d-321298619c0b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "132aa9bf-720b-4bc1-a4df-3f57b10b1656",
            "name": "Negative Testing",
            "item": [
              {
                "id": "382bd95a-a9c5-4e13-a059-b32ba062aa25",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc94a692-a0ac-4cc7-83ee-c8773dd371f0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9312d17-4f62-4910-a612-f7ac155fa572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05dc5ec5-ecbb-4a08-a914-5f0fc1717587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aeb6c0b-b631-466b-a78c-387ed0d78525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d17b506b-ea9f-4955-b991-868ee229fab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e0dd22-d03e-4d80-ac1a-3b6d281bec51",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442f9dfb-37a7-46f3-95c9-be411e5c455e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440fbcb4-08ea-4ba2-9d4d-7bf81b31a1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94d7de2-c222-4265-8222-c3d3a751b34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "194b1576-82da-4c54-80e4-9c68cbb5657f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a9660c-7b91-4187-a318-ae7fe233d5f6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec4b0c0-1ae3-4bf5-8cce-93e31715a78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0703c949-70ed-47f5-a7e0-62fb50002b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fcc223-4bff-45a1-8bc7-64b4f730cca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80832a86-5ca5-4294-ae22-f4fd41fd6e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2f0dde-e462-487b-9d49-251b6e34b6c1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefd5541-d3c2-4a3a-9ad4-2f455e6cb742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd189f8-143b-4870-9bd6-d8e5bc245f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e9ab1c-b083-4026-953a-60b17009a1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0124005-a9fc-4712-b39f-25943cd45d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3256b6-ef29-4bdc-b423-8ecb41adb248",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb4277f-341d-4bdb-8285-a21c58eec1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28703e8b-395a-42a1-b434-ca883513b3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66396fec-d2dc-4155-b2c9-00a5eefd1a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59dc6a18-aafc-4dd8-b8f1-fa2678ee080c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643685ff-9956-4872-926b-413481940e06",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea4784c-944b-404d-8b42-06d35778b769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868c2436-5dd9-418d-9f3e-deedde24ca0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f18eb0c-2dd3-403d-ab99-2b7c9d3429c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc78c86-d611-446b-9064-6bcbb556078b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517ce61c-fbe8-48d4-aa50-5017ab6ea8af",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624db606-0618-44b1-801d-d6e3fe961b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c4327e-69a8-4627-b3d3-12e8b5743678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1ca380-43b5-4ae6-a865-abfa4985679d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "37ff0dc6-a730-4a10-a5af-0c57ac056057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0034ef4f-32a8-4136-b74d-bd69ad2e3a8b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373e80c3-8101-4ac0-8014-7adc2ef01fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1d1cc2-8097-4d63-a0ba-d37e29f75d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6cccc9-f182-48e5-aff9-f506a3e0aed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8305d7ae-6b41-473b-bddf-8a2e722db330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211b791c-3a96-47b6-bbf3-3ac830c3fa31",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad47d206-96c8-4e0a-b8fb-c3682ac7356b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adc7d9d-3a29-446d-9afa-f07d595bae2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20ef0e4-8572-462a-9f61-0ba88ea63ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92bf61d6-e4d5-4aee-ae06-b0094236e71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7865df6-31d6-4731-a0a6-0f983e2694ba",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ae1dd1-0e4a-4040-bc5c-9c881c42989e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "388831be-b8c0-41f3-a9a8-2f694d9356c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7085950-9eca-4e23-8887-d284320bbb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9de29cae-bdd6-4e1b-a0d0-0ce1215c9c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8c8741-a77c-453f-9d87-7132be4a1db0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c71ed9-6ca9-4e06-bed2-4b7ac3c50638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def63368-974b-4990-ac4c-c2c83cead479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64bce54-a0c4-4c27-8d58-7de65d241349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "707b7626-82f2-4ef8-a1a3-46f4b2267fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8233a1f2-a0b0-4630-8eab-7da7d50804c5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f76bb0b-49b9-46cd-af4f-f66c0fe89ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24824aa6-a313-43a3-be11-125d2b819fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b556261-af06-4240-b636-21a81fa585b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9699e77f-daed-4ca4-be3d-1c1d165fb0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7998de20-8bcd-4d49-bbee-05a50ce29eeb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00d3d61-3c0d-4b45-9c5c-3fa136c37c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44bb668f-f162-4c11-8e16-f5e4b284e077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073be5b0-3786-42fc-bcfb-46206f071f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e464a8-36a6-4860-a4f5-b7b7d6e2cbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ed1db9-5755-4b1b-9686-9905e9c827a9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bea809-074e-4e44-86d8-ce04c803cdbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9b7ac3-d8d8-4754-aedf-279aa0c87703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59696f5f-58bf-4b53-88ed-2d6122f6c61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "38f5c01b-a9bd-43c1-a2a2-1fdb902bcb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf12912-93f4-41b5-9de0-84020252ba01",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750aed6b-b6b7-4bc8-94b1-e41dc411c1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c18ec6f-fb06-4f2a-a5b6-c7de7ee2961e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f12eb15-eb85-4ed6-bb91-2c3e065923fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f74c186c-0496-4a57-994b-b8a24b6f6a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252fad6c-86b4-4445-b5c6-592e948085e6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229fa29b-0ff4-4a24-8fe8-2791756eedbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f4b235-49b1-489a-b028-784bdb9f5906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4edca8ca-8cc5-43c7-8893-0055483a0590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "59a174b7-8434-44f6-8bf4-7bed7699cb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c776cbf2-f945-4d97-8398-06050648d6e8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef23b6ee-2297-4e35-be2a-5bba7ace7ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf81f3e-31df-4c05-a2ce-c5ef62e855ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b3ae3f-0f7c-40fe-bba3-e32228e0ca9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b357dc20-1393-4738-91bc-d930a9085030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdb8523-70ac-4a87-9939-913d4250143d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0328f31-be3c-4ccc-832f-9bebc2e05dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33824aae-9854-4eb2-95db-97c94b7e70e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b9dbfe-d94d-451e-86e0-18514aff1adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0bafee-d92c-4d51-b6f2-0223630efd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e873d1-b264-422e-8c5c-49e36ae3b38d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2615686-6577-4d99-afcd-c677fc6007ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d78401-3f52-4194-ba92-966cd84a36a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca456c7-e67b-4c93-81bf-63164a219959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2bd5938-be7c-4754-af07-5fc7186e236d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daebe81-664e-46c7-8653-1f25da7d033f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3eb4e89-18ec-4ba8-b210-07df7990408f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640ae54f-d33f-489a-bdf2-b69d6a31d71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbfb354-dc37-454c-89f7-4524497d12df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38df12da-410d-42a1-94c5-437f8bee6530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bb83fe-0291-4319-a450-84efa48b4d0d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247f269e-4921-40c3-99c5-15a2c18c9e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48885058-1d6d-4fcd-af6d-7c6f2b41ebb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef0159e-2470-46bb-8d0b-77bfb0dcb25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b0ca1b4-0fd3-4822-8ed5-303432f7ef01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7180cc1e-04d5-46bb-80ed-e6f414fd7716",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4abd692-87e2-4b62-966f-d5873fc87534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3117073-7f4b-4b79-a051-b42493c5eac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebc01af-2b9c-4caa-be37-0f8b58d0c4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89bf52fc-fda7-4a10-9cd7-8836513523c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92abef7-d517-4287-b714-6c8b9b5dcba7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28aa387-fbe2-492b-99bd-9e8bfde56e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea625c2b-504d-4c75-8153-20eb57d5da2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418f8ad5-fa31-4177-aa25-dcc86dbe8c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "329f1907-0213-40d2-8333-ea9dc96e88b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53515706-065b-4f7d-85ad-362326d095f9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d35b7c1-a8b2-413a-a108-e59ce25ffcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2560c9-6e0f-408e-8b61-4d7e931fe7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76663e39-80aa-4494-98a4-687ed82bf85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a7bb26d-d21e-45d9-9aac-3744f793ad1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62737d5f-cc4d-46b3-a752-7c3c775c56e3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9188a2-27c2-419a-8a03-1a01e6c71285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0844f0-6ee9-44e1-8e3a-db9177a337f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f9b277-5b3d-4063-b8a7-051db40f0ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37df05bd-bbd6-48ef-8c05-c447fd9d7d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e24d31-11c0-4af0-b81a-110148ce7883",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee82fe13-d8bb-4a6e-9c80-4356fd7929b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d045e0f-ff6b-4e2d-8bf3-143325726d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7818627c-33d1-4832-b245-260a442671d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0b622d-d509-4f80-b8ef-7ceccb6e1461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dcdd61-f4f6-4bfe-bbfe-79a3d9bd9da3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11f6006-1bc2-4581-a709-f345c3e37008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c4844f-e57c-43cd-bcb1-9313a19198dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50dafd3-3a26-49fb-8ffe-809319bd1ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2406cb3f-add5-4fba-8da0-a3e5320afc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2264a7d6-65fb-4d28-9c92-fd5d94e1546c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fa530d-06c2-4e03-b794-72c965cd25c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac622069-9c46-4713-8935-f4ae4f3dbc3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c78432-3db0-4e78-810b-9c881308d836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f945edf1-4080-4a7e-9de3-246b092ac536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9dbf9b-1f22-4c57-8de5-dd4ecdee3b6c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f771d770-dad0-4a06-857b-d41d4e3717b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b79388a-8b8c-4166-a89a-f8d77974ff37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6e6ad4-c30a-4168-9565-409dbf737a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "feebf06f-4287-4c4f-8713-551d0cdc9ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c1e225-b144-4310-b8b6-c448316d645d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7eeb9e-5d31-4953-adb4-08ba2063e0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23b9e70-c08f-459d-86bb-af8304e23749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1f10e6-80e9-4315-9111-9efc5de88b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84c85cc3-8269-4b6b-a9d9-5a226a9c430e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeb45e8-c3f0-42c6-ab76-51940c86ff88",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6d5693-1f19-4b86-8fa9-d1b2c46e9e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dded187c-f94f-4a6b-b0f2-df62b0479107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62c1a4c-21fd-4100-988e-161140c1b935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "421e8954-c495-46a4-8b27-ca097fcfc8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d653733-bb2b-43e7-a7c5-49bf2b494f70",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2ad630-3efc-4b99-9c62-ceac62c89540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74071f9c-4c2d-4443-a8d8-a88dde4349c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d90517-d0f1-4d12-a05e-6dff2102f2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "167a2683-5ac2-409f-aaab-af653cc3814d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3324f075-56aa-4a21-b2a2-7680f082e0f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83f804f8-b9c7-40f1-bf41-aaadc0040787",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1de62a2-340b-41f6-8125-4fe15d534108",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d19fb6e3-8718-49a7-8af8-0f6fea2a8b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab36967-53b3-4485-abd6-d9668201b6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70978e9d-0821-4eef-b9e1-a4d695a01605"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "220d3d76-32e3-4e0a-9fec-ced567071cc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed824612-00ed-428a-97be-6374d14dd6fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14933b6f-e1ad-4c43-921d-b2a801359b1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ca0cffe-dd71-49a2-af9f-3be58d9310ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d176bac-bc21-432a-81d3-36c7f2f5e272",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d683d2f1-e509-460e-81d9-69644801db86"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5eb671d-05cc-4a6d-9ce5-0f92862f77db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fec0540a-6c56-4f79-ae26-6ebe5e15d4d1"
            }
          }
        ]
      },
      {
        "id": "b8c8d9ea-ad55-4f99-b6f7-2e8a2bd801ba",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "171a6c21-3bda-4168-9bc5-a6f5096bd813",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2667ff32-4a3e-45a7-9fc9-1fdac25c3ee9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9b158d95-aed2-4f38-ab81-7ab927f271f6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70340b1c-cea3-4b29-8953-b0caadb4e6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6440555-dd37-4ba9-b633-6374d7f60319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe35e04-81fd-4be3-86d2-80761b439784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa186a26-f61a-45b5-9834-973a7e21dcf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8adefbe-1f28-4ddf-a972-2236cc614d44",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7977c6bf-f9ac-40cf-a58a-b03679ffaa7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6520d2ef-ec18-4a0c-a5db-20a8946889f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8e40a6-caed-4f1e-847f-5798d87f89f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cde6b63-6549-457e-a350-cd59533befe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a32d22-d91d-4687-bc82-44a5d2454ee7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a942804e-15c4-4c28-8925-93d6eb3bb58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a052c7-b8f8-4065-876f-decf0618d3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d005cfd-0d6f-4b53-bf98-d558f24538a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae913635-ba75-4973-9cf9-0a1423d9c850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca31fd02-78a6-45da-90ae-6917b03ac296",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45df3e48-7be4-44eb-84e2-67b898615f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82299cc7-0076-4e9b-bcd8-ce8ba931d5fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965e54dc-2ed1-49e2-b9e5-b77ae7ab9f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d1a511-dac0-4652-8dfd-2bed5361d623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271e2b64-688b-4898-8a4c-3999d59847c0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4337c61-fdea-499e-8ea5-bf023d93aafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15e3b4f-74c2-4a60-8520-15c622b6487f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af56bf0-5d44-46f4-9a51-369714473ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d13031c6-cd14-4d69-8cfb-e0c000504050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9666acdd-6c7f-4dff-be27-d86f1e812e1b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ee6318-1370-4a6f-a3c7-756faed19d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522c5188-6dd9-480e-91aa-a4446edad32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5c2194-42fa-4f5b-98b8-d87ef1491896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9caa8b2c-7b52-41b9-babf-4940b368317a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ae0a8a-7718-46cd-9021-6990d5782790",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de67a3e-6436-4341-97e5-f1831557e1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4a4cc5-a179-4bc0-bdb1-d6e1d683dc1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc135c2c-6a27-49a8-9af3-8dc9fb6724e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c590bd2-1f76-4084-9a25-f4ea568b2aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4f9529-9aec-4b41-8e6f-6b39a631cd58",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbda0f7-836e-4c22-800e-dbdba49d9014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b4f1cb-56db-4115-abac-435b5565ab14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf00039-e55c-4ff2-90b5-f0e99c36796b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d64904e0-2ddb-40e9-aca1-b1fbc7714a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da005595-7d45-4e43-9ad5-419b09556b4c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc88b75-bd3d-4179-b936-ee664394b67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3781b48-3f5b-40ca-9326-5ef534434c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5688c38-4e9c-48f0-8e60-3f81269b8d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28c0fb1e-0927-45ce-bfdb-59ed01a2d1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ad3028-0ea0-4ec5-b270-d0f0f57cfe0a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fd5b73-8f50-456a-a01e-6cdb6dc31280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ce607c-b6ec-4d3d-9ccb-74ce83f9a1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c431807b-8dcf-456f-a4ba-cd8212e99f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8afc57-69bb-4612-8c4b-94f507c2adb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bbc1a4-be62-46b5-a7de-31598478b752",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8572b2bb-acb4-482b-b8d7-9f7ae1fca37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf952b4-d08a-4b34-bfc9-2a50353ba8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bc309a-bee4-4d87-8749-98e3881aa9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c05c42-4529-4d51-bcb1-5dcd26754564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e3db43-7fa7-4f1a-a849-ce8011100c09",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8397db-170a-4c72-9c3b-b416aa7071ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a8bd6b7-fc0c-493e-9389-040d7fd00247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b33c89f-1ef2-4dc1-be43-6509de06027d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd28a97-2db5-44f3-8685-4e69058489c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145d8704-cb9b-4107-a635-895a0b080147",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dac7e8-2704-47e6-8a6c-08d78cb47b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b930f7-cc87-42a4-9610-d7ab7e2ae57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08babdb-4b17-4917-9d46-9bc94a1108f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aea9596a-3ca4-4f19-ad1e-b2f9ea1480b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900e253f-e09a-496e-92da-d82a39f202d3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb65194b-dffa-4ae3-a1b7-758a937eded4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "484c9e20-bddc-4d15-b0d9-3acebf24d78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c594e3e-1745-4a7e-bf27-94586d4f44d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c445a712-eb01-48cb-88bd-c7fd8891818c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2888b4-0043-4223-9026-2d50ccda4174",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec952d5d-9307-4cf2-92c5-70acb18caa18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c649c9-b439-4d2e-941f-6c31be9cfcc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af2a62b-3372-4e7f-984f-2746bb20c28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "704cbbd7-07fe-4dcf-85dd-4a8c912be34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c4bd1f-5246-4639-acfa-35fa27abe4d8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5455686-9de2-47a7-86e3-be89ed4e9199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7faeca20-475b-4806-92b6-3ca878a72bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67691733-607c-4d81-9d17-69137242be55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "99f6fb2c-2f29-4d82-b17c-82753a44f4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2cd81b-38fb-4dee-b3ca-429834b6494f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcda389-1a46-4449-a868-cfd4eedd6a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b347f89-dcc4-44fe-949a-bb0355ab1e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4bb011-9de7-4498-94a6-aabd35855983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8020312-e8dd-43fe-9ed0-c7b150efb647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3ee0c3-e0e3-445b-9ca3-a57c068000f5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422726d3-37f6-47d8-9d1f-0da9a7059a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ae2633-0da2-4999-8ebf-2287459f56e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb5eda4-e8c3-4b33-90bb-8d6b02757aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac64521a-9b5e-4172-b977-601cee18639d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9eccd4e-16e2-4c2e-844d-3716f2a482eb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1300e6e5-9e44-4fb8-9453-5b665d94bb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce418ef1-b950-4070-a028-da82952ca77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d88f297-c169-4459-8c60-2b83cb7bc020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9499d011-983d-4655-9117-662d85c6119f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d15e81c-0a6b-4c48-8951-8916d10dd675",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb38303c-7abb-45c8-8dce-45f22c31d342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a89489-2394-4ff6-b35c-adfb915ac920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d26c57-b7a6-4461-b3d6-c3729e2b09c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d91b45b-b019-4ac3-aff4-4702d573ee3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78fde26-37dd-467b-8616-96f8948c869f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af66780d-5506-41ed-9c1e-4b438eb8a313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3fba6c5-a081-49c8-8ffd-c8deb07ebf33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c411d7-fa30-4708-ad3f-4eaa90154634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "208a287f-35bb-4acf-9869-55120590e67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae3ca03-fe2b-44c3-9978-0078edf793e2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd01543c-9bcf-4ad0-853f-09ecc2824a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c46a51-d0d8-4eae-8eea-fa86f900e389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c3eb68-06f4-4846-a1d7-fe85cf34331c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ce54c2-2d9b-4031-9a68-430ccc498303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cd55d7-b575-4896-b2d0-07c4557c63aa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9e2c58-3224-4a1c-a5b5-0e44dbe1b35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f9dcdd-2a12-448e-8cfc-ec6a5c8c9dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0572ee-865b-4a3b-af8e-fbc62728080f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b884c480-0e6a-4286-b444-5a23ae8e0db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441a78ba-1583-4088-bac2-17ea2bc1b572",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96598d5b-a6a3-4b05-b601-512223579d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85444d26-bcb0-4020-9cce-d40e92a5bcc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb76a17-a4dd-4409-97a9-665976e6f989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3c02d5-e387-416f-9532-dc4586789def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05efc37-75c8-4498-b217-548d68152657",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3851534-3fde-434d-8a1b-80bf6e7bbd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141197b5-226a-4186-9d90-76bb92b0f1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539c4ebc-8a27-4ad3-9e56-dab5ce3c9a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d62ffa4a-a7db-4913-b212-01f821451251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9283a9-a57a-4a13-847f-4954fd9c0824",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65853c67-bc9a-45d3-8ab9-d6009ed8499e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7168a186-93e8-496b-bf9d-aec732bc283c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcd27c4-1826-490a-b4ef-421fcd7f544f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6977d06-f535-4c68-a5e4-770f23bd44d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cda8e6-5fe1-46fd-8144-0ffd1b75afd6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d90396-fae5-4946-8829-1ef10f8a422e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb461c5-42f8-41bd-8608-1e0faf13fc70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff919c7-dbdc-4ab8-a9a5-ff7602e13b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a81d3a20-f53f-433e-a597-e6a944ac7916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d77735c-e22c-4d74-860f-a5730de8fc43",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840abf89-ac75-4761-9925-3ef762713ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd63556a-9a34-4858-b981-e26d09d8f08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87dc8269-db15-4c32-b482-f7c2005864f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c66ea3a-23e8-40ce-85ac-0ff9ff386ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044f50c6-7257-4bdf-b08c-64d7a4d424b4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c98805-9fe5-4ba3-b759-f861beb8b01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39483d3-ac8e-4b3b-96ea-c445ea1b0a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4963d88a-6535-48d8-9b69-00df93887e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5149aac5-077f-4e8c-bc3e-aab128c9e8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cac553f-6bb3-401b-b87c-298d7f9e56b7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ab3183-af63-486f-bf09-92c9e3a3ad48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611eb274-aef1-40d9-add3-628d8ac53ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6fca88-2692-462b-a4e0-0670eb3eb7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e100fb9c-3d8f-43e5-a452-363e147d2ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80872a95-687e-4217-840a-282d5851da02",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d6ac29-32b3-4d28-bbc4-1395263b651c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7931c708-e4a5-4d6c-9eae-7a3641b45ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad91ea7-6e07-44fb-bd31-029c87759d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f91caf12-f5b9-4658-9bb2-c389df35932c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1b779b-1f6f-4d9b-955c-e69f0a37db4a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf3f83e-9628-4307-a358-5cd69fbbf3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aec1c75-361d-4053-af4e-cff93226e576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490b4ae5-15e1-4e39-a1d9-134ffe4e84b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a22df93-2509-41b5-b561-19374548167a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9205aa4-446f-4ef8-99be-cc7454d18de6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98d6a62-3c07-4de2-9f29-a3d4789c2119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d48be5dd-88a1-49f3-928e-7ca4f25a965d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88adf7f0-d313-4107-a38c-33b3523d6aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb0f026-bd05-4d58-b401-afaa47a28cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d51eff2-5e2a-41be-adab-813ca9da3ee4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c92bbf3-4f69-4881-ada5-0307f9a674c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2ede0d-3e1c-41cd-b702-bb6c8ab3336f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09e33e7-4614-410a-a353-5f1435723b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64df8b63-b698-42e9-8d6b-88cc79fe1629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1760832-8e63-4a4c-9f15-f2ce6b9ccc7b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246dfef0-a804-4e07-93bd-9868fd2f47d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06784e71-e04e-4589-bb8c-8b4b3ff82def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103772c9-c354-4af8-9816-29a070099980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e1971f2-55b1-4281-85ad-2be143cae0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d342ef25-d8f8-4d67-8a8e-4e12f5905b4b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258350ff-d917-4862-a02f-23b15cbbce29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67a3d1c-49c4-4316-8205-3ced1cd3b718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e53ac0-0870-4c66-891c-ce1be1defa30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e738fc59-1f78-4e65-a168-ad103a3286d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9e5b39-a801-41d3-b43b-f0bc362be001",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f436c99-09f8-419a-82c8-6f671696c8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0da58a-95f9-4e83-afba-716889a1f6c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8572fe-5486-4bc9-9c8c-df7a1300947b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f406fa2-c8d5-471e-9838-06f3b831dc40"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "08bffc2d-2c5f-48f7-bd69-9d8da2968c79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4f4724b-8a85-44d2-bbeb-e214bb935685",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc36d8f-a2f2-4ea8-9603-7b892908ac29",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d26e1628-713e-44f7-8b29-1ce22d557b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa06afc5-026f-41ee-8eb6-baa09f66e0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c598265d-c06c-469d-b378-0804d2012e8a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7d26732-2daf-46a9-b8a9-8fd16c19e790",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b469939-e61c-416c-873e-27c8870974f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7382b81f-b13d-4fbc-8343-63b4edcabd31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abc476b0-4b3d-43ac-8acc-1202f8f43af7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbd07ca6-7c78-4877-aa99-f06dbc2a251e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0963fbe2-9907-41be-8d28-01830e1b9e38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52ddbd9a-11db-430b-94af-9c101c8128ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c32846b-8e95-43e2-bb57-eb8c905f0919"
            }
          }
        ]
      },
      {
        "id": "98c0e0af-ff07-43af-bb72-8c25109dc50d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6f612244-673c-449f-8751-e11a35b0426f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fb818a6-5448-4c8e-b949-a09669b8fcc9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46023d01-f767-484e-88f8-b0e592e1b23d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f32a583-231e-4975-ba82-bd0516dd0ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e52c15-494f-4348-8b10-87a774811807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0ffe1c-fa3a-45d7-ad9f-6da60ea7e4da",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ebcb5c-75e3-4746-ab30-152164c97bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d35b952-f235-4aef-ae92-79f885eb5a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d01f26b-95aa-4f19-a10a-d25a47eeece7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fffc2f-faac-4a40-a26a-aefd5f6682a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6538063f-950d-4cf8-b3e1-d56febda46d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a124e8-7764-4882-aa3e-8f3d61c9711d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8971ba1f-a786-4817-a659-46e345810f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed78c91-dd4c-4d79-9be9-6180bb4985d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0e0853-80bc-4888-a5b9-ffaf34babc6f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a0212c-a19d-431b-96d9-e81d5f62ffcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994b8d58-2e40-429f-b2ba-30c50bc6373b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab8e135-c0e3-4056-9da0-f86ba7f4a799",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e7e592-185d-465d-8e8d-587bc07bf8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c068f338-32ad-4d28-a853-5c5871c2e2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c48613-715d-4be6-86cb-37980cb0dc36",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9baed46-b72f-4467-afe9-1045349ab6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f14980-5c97-4a48-a1d5-274541a42ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56653325-78df-4daa-8fdf-cd05e61c621a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ec4cb2-25e1-4ded-98d5-daa1d53d1035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376b3bfa-5dcb-4991-b482-93a8c0eb515b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fa1fca-4185-4dce-98db-166d4c777262",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12e0eea6-8720-438c-93ec-170d402b3ed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efeda73-f75b-4e98-af10-acf5818ce044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb9cf98-0c03-4786-96f7-328b72481d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e16871d-6609-43e1-88cd-d17063be838b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fc1688-54d1-4691-835a-4930b77188b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2cfbc26-200b-4c07-8ca7-cb23aabfae4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c782e862-9f79-472d-a9cf-7a0f42795abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97ab120-4359-4ec1-9d08-b933eb54a270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560ce4e9-5bbd-4ff4-a0b2-e70fe5892047",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70d4a2b-2260-473f-ac5b-53b88039b5b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f8a6c18-faa1-417c-9f74-8efd9a8b4a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d13c46-dedb-408f-a751-6506af527f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae139a5-e446-4895-9088-6ff3bd5ced7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f80551-c16f-4718-8538-c6ef93ed2f63",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d25167f-ca0d-4d5c-87a2-337049844862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1c5c06-c1fd-481e-a3b1-2817f0c85bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3431f9d4-749a-4fdc-830d-7e7648a0850d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49a0d38-4006-4efb-819a-80db0becaf3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5038fa-20c7-4511-87ac-2fd8197d24d2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc54779-f3ba-4861-a5ac-4be9e819af7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33b9a48-109c-4bb6-8050-ca38158d5179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6dd20d-8963-49fe-8a6d-0c0e1399c274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4862c94-aa2a-4a7a-8438-a85c8dff3f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1daa8bb6-2fea-47f6-b59b-cd0f76e21d86",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32fe74a-71ad-44aa-90ee-fad3d91b0ea5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2ac988c-562d-4122-b6c5-0444cc901453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5528d1d-f940-4c84-bfc1-3097fba6c70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63f43593-b50b-443f-acc6-486d30f65ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc26d96-f2ac-4ca2-a03c-882b5dcbf65f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8821a126-b0fa-4630-b8cc-363052a836fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9ea903a-06ec-4a8f-8ef7-247d44fe3560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9c2a1b-ae8b-48c1-9de2-314ae3cee35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140c3c29-efdd-45bd-ac2d-253be826a495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e33b5c-3fff-4620-9f16-855f99e16bd4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af71145-d066-4423-b67e-566e80d42cac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3deb634-779f-4cb4-9b33-2e1e7f07aeae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6b48ac-dc70-4452-b94e-9ce50e311001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da397e7e-a294-4755-8629-654881312319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51931e5-8210-41f1-8aeb-cd6f78a0b226",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88992ca-b2ee-4526-bf94-5c129e4b0fb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b99dee8a-1099-4299-bf22-2bffd9183682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef483a2-4f51-40dc-8794-e7bf1be1a0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30d4e6e-3c3b-49fe-9934-02e2baac880f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5e1bd4-4252-4e05-bec9-a578e904aef7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19ab5d2-f4b1-46cf-8bd8-00848f9b0429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ea0ad9-ba0e-4bbf-8636-d255048fc89c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fbac5e-1e85-4f7e-b589-fca6bf79f574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d928adfa-bfae-4ef4-9c58-022c3cb8a423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4642e2fa-7f13-4ec7-b1e9-c3bc94d55735",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325569aa-d047-4a50-ba53-be70b46ceea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfaba90-0e3b-4320-99af-ed5731ba2688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "473a2962-e8af-49c3-841e-547adc438f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8e04af-151d-4a1a-9c5b-7b4032865712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f312a1ef-d205-4f04-ae95-21d51df6c737",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8611c34c-c921-4fb5-99c6-0ed7bfecec18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d612246-dbe8-4016-84dc-47120788293f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c77ba85-4a86-46b4-978d-11a86ce25c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4f4a37-fb01-4e4b-8f5c-a3fc77e1eec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04861446-1445-4c3c-ae30-9b80040c6ea7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80935b31-9061-490c-89ad-644a3ac5c573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd6c155-11a5-4480-a0df-8b4b48c71727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97abd73-ef9a-4e6a-ac34-86955105ef49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4095dac-411e-461f-8ded-e832445cf4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cca33af-ab38-4b27-86bd-8b1b5548db65",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac62e3b-dc70-4dac-b4f0-226091a43769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3762d50-ffb2-4b0c-ae64-79f9dba67226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43edbbdb-c2b2-4c5d-9911-08dd746905d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6d33f7-96d3-4d8a-8e7a-7cda0b63ffa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504b0c24-f1f5-4384-9ba8-2b3d2e510042",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667d8293-0373-4b06-afdc-d88841cac0c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1630b527-1731-4ebe-ab84-85329e150c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173c2438-f143-44d7-a0ec-f68ae63e735c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe74d555-73c8-4192-95e3-a26284c70ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db41d529-9037-4ec6-9fe7-927f33140229",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc67bb1e-44dd-4b81-aea8-29ce0478fc90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69e29ef-c1ae-42ed-a7e5-03b3fe8eecf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ad1980-ec67-4849-bac6-696cc184d0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244c4c65-c784-45de-bda2-f21152c94f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f7b5c7-32b7-49b7-be9c-906843ea3864",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f103c6ae-869b-49d1-90af-58c8a86795f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc1433c3-c894-4c13-8449-a6510aae4928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cd6fc0-26bd-41a9-a304-585aaee10e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643715f0-ee90-4273-9a26-311bd4f07e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18eb40fe-8899-4a6c-a527-f111ea4bf22f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299e730c-05ed-4a65-81e9-cea8f8a71b32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7123f6b-3473-442e-8036-b9a46db0f463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "902904a9-28ae-4da5-a44a-0bb8ed9f4433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c220b71-52b7-4432-926c-cbbd56d45ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d01c73-c70d-40a5-82ca-d9466a9b6943",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862c4043-d051-48fa-bfb0-9d9e534143f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342e4448-7970-4a60-b2a7-aa46db938845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7036a5b7-58f6-4a88-a304-7c6b71317e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ea6900-6b7f-43fd-aa9a-0de7aa13b406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec339e7c-46ee-43dc-8579-fea926e46868",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700059f7-7372-4bb2-9f95-c4fe859ea8ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5928202-5cb1-41a3-8d64-f9068a75fa34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e0ec94-fe14-4206-9e91-f7e29f489314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae5355a-f394-409d-a702-3635e98f299d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65066c88-f04f-4ed5-a13b-37c54403d2ed",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6acbc2-c248-471c-a3e3-f92cd53a3e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a73e5e-d4da-40a1-8e46-3e9b0f88bc92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b8a27d-c93c-4544-b35f-2a42e7705a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3378b639-220a-4672-85ff-46da9f9fc847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ef07ea-1db4-4f47-b02a-f0f6a2f691e8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c9e27b-127c-4758-822d-4674e23c9de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2518243-ca64-40b3-aa6c-cd0bb4bc7d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9f1a07-ad3e-46ab-ad93-adc500addd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8204bd56-f525-4f9a-96a5-b0d58fa0c549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4953168a-c44a-4134-8b79-dd5f70a275b0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6782cb-dd26-49f3-9bf0-a4f194f89ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba9ef202-a6a9-4283-8e65-ae7f62d5e473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3002715-00cb-4c49-8342-8483341b08c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ffe0ee1-baf1-46db-9a18-094c04aae594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45105a3a-a7f7-4f1d-ad6a-98b248cf43e8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cc72b5-a1ff-4add-b719-a5a044fccbb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b3a26e9-d633-4179-adce-293d6cca5dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96143af-7a7f-42bc-9f72-45bcc4eb92f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b114d58d-a7bf-46e2-8f22-cd8c9d10f7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372ce6d0-e996-4e34-9b15-30f30b4667ef",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9864a7-947e-4fe4-bff9-9bf8a2939db4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f6ba8f6-e9e7-4b8b-bef7-7ca53433e999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73159226-bc70-42c1-8103-0bea6c561a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ffd645b-413a-4b25-b19f-41798f27c078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4f13b5-7d99-4b75-b20d-a7480009f967",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813dbd7e-bdf7-4494-a5a9-b562a668a4cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "031355f2-064c-485c-82b2-61bed685fb6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d03d1f-e64e-4002-a9e3-a1602fbace11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22ce4a7-daaf-404f-b280-324566a2d978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2727aeae-52ed-40d6-a21e-142646dd4553",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953fcc3c-baf4-4d7e-bbef-5d27a7d217d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "835fc4ed-2391-476f-9f8e-d06a34a9d3aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e405e8-9e9a-461c-8eb2-884abd044f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b14938c-186d-4c30-a12a-ed88f329dd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5169477b-55a9-4613-a554-39bab5060f97",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f3aa57-6fb0-4f0c-97e2-a1f37c11b9a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e7b0eb-ef1e-4185-b160-9394b215fd27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b7dc5c-60aa-4044-ac28-5bdc3ac970d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa07e44-1397-4f9d-8966-7b5a7dd89a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a9537b-7cc0-4b05-a8c7-2ea38ebc5ac7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c154c49c-0982-45b4-a4cc-43e63e664f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a20a19-5bbb-45fa-8c5c-d44e29f21227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d3309b-5f1d-462e-a43d-dc7fa5ee5a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c4df02-3dd7-4f2c-86a5-d92b71a2d375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3430bef8-fbfa-4dfe-bfbc-304fb1b3d1d5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03814a92-91be-4355-80ed-bcd9beb23fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e52b90-2c0c-410d-8a79-2057acd9050a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ae053e-b3f0-4291-8cfb-969604c6ab50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286c5a09-dd16-4836-828a-24d72435d0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d653df12-6fd1-4a52-9b36-955ae35990cd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f71d05-c998-4bec-8d8c-fed938ba2a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa61eda-e759-4b2f-bf6a-e92f12fe7561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44a2038-5f1c-4614-b4ae-f07bba2dd0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf52c84-29b4-4a0e-b570-163ff44a0135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a920feb-fb10-41d2-ad2f-f11ba47c58e7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa371dca-32a9-4364-9862-5de7825db439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e31e1c-1521-46bc-89d6-c5d4f760d7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90786fc-83d6-4f1a-8f0c-99e2749d259d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8906501-be51-4e6f-b09c-b3bc4f0ec41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac724fd-11b0-42b9-a963-3bf27f065192",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0991968-c4be-431e-81b5-f68843c514b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b958eb2-ec83-4739-833b-db4a870fb1fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3defd3-cbfc-4392-8339-9254e5cf3017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8012f68a-2030-4e6a-bf56-d9b26a304dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d597c3b6-fb8d-483b-bfa5-5078db427528",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0486f8bb-3b32-4e18-a0cb-4577e5b2510f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d61d0d-2e2c-4d3a-8911-53c2d9aa6a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f131962d-5808-4ca4-acc4-3af1be43506c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e3bb57b-cccc-4991-8820-d74895ddc20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fcd38a-5cdf-4fd6-8d8a-53b7a42c7426",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f9fbe7-fc8b-42ea-8e5b-9448bf338aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2273b3-e00b-49f3-86d0-06db8a8bb978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82904872-fdab-40fe-adee-37a9435b00e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f18682f-2d08-472e-b41a-62c4b5fc5c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e82a606-95a8-41d3-82df-1841076d0db2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddb5b31-58d7-42c1-b16d-736b0a9bfdca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea52e8a-349d-45d5-9aae-5678e6d8f99f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5baad4e-b874-4a8a-bf44-4084acb6e49b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42a60bf-96bd-432f-8e76-b3f3853dc255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ce8149-cfe7-4269-bcbf-fceb570128f9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83c3195-3a20-4f38-b710-9472b05751e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ad8a52-a896-4c77-9aa3-c33b1f1c392e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c503e88-e5ae-45e2-ba84-36bb2aae50bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb3aaab-0458-4212-a6b6-04e4f9f4e932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b9b43d-a53f-49e6-9829-2ce0d13bf4f0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630696e1-6192-4eee-923f-d4755573a62d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76cc4987-d525-40d4-b80b-abf79c2cd78d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6c157e-4770-41c4-97cb-70e1a66e42c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7c4cc2-198b-4c9f-933a-d14aff32bff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc9ff08-381f-4fbf-bf55-a5534ae4e6d6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e8fe00-5b25-461f-aa22-eea2b380ea2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e7a781-89fb-4c78-a813-32092d2bc474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60fd66a-bb87-46dd-a1e2-7e413ad30caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96947df5-3f51-4af3-b4e4-f21e295d06e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b173e8-8564-4c69-a96a-5ba0036a4596",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a0d898-5261-4f0c-9e82-72c4524aab21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3548eaf6-cb0d-45f2-8ab4-f71ba325064f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1a1f09-2036-4607-b961-420bd7ffbe2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49114985-f808-48b7-9580-4be8af6302ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec69d2bf-ab35-4bf4-bfce-caaf31cf2146",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbd62cc-f7c6-4523-a7bf-8711a35f874c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "783869cc-ed82-4ef5-8530-b3150bdf44bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afafaa23-f54e-4e67-98bb-44f9250457d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a864389-da37-4a57-9794-3fbb540f593c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16992ae7-d180-4d1b-98a0-ba9e6c15ec72",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cce27e-3a8f-4267-971a-1576fae7c3ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38455fd-035e-4fad-8c49-79d31ce66b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8649863f-8c02-4e2b-bcc0-dba460a85871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69166378-3c94-4615-84e6-66c3a4de817f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae178edd-c456-4e9b-8def-b0eeae471fb5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d5192d-7929-4a97-981d-cc89b8d0d11f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68efaa36-4773-4cf1-826e-5bb0d11a14ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc50f0e-0b5a-4f81-9d81-e36707f9a337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def459b2-f26c-4963-9d2f-f47f2585033d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c441c8a-bcce-4469-a3bc-47db7290a505",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076ba79d-2ca2-4531-a4c2-5c882f227c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47abe5f-2419-4c3f-a382-0b5384380c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abca877f-33ed-4e2b-94dd-c665757ac97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e65b13-d1d0-473a-8a10-2273fddc7155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66a1be0-d518-4318-b817-dc15e39c314b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cef9a2-fffc-4bef-8ea5-9fc0507f0c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2072e9c-a7ac-492a-8e35-1bc751276842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3de4c2-8053-4805-a894-768bb3a7549b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9f6e40-b485-4bc4-a571-57c5f52651eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10706b1-c8b1-4612-9ddd-cfb6ef363a70",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349f24e6-d784-4e35-9ebe-192b19d6ec27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a2399b-f3a3-47ba-a066-0c907c8ee98a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e757d2-d5be-47db-93c9-f8c0d3bccc1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120d900e-8849-4ec0-9db0-273a2a5f59f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbae8d1-6fba-4416-a794-a05f9441ad59",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70bd275-2f69-43e0-b39c-f414039f93d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4772ea8-db05-4b11-adb8-92f8d9d4c321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52f43f1-b692-4c33-ab9d-b874bc935ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900b65e2-db16-4f31-aee1-952074d2a63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86be8348-223a-4682-91b2-a512bde23fa9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a2d3ad-c676-4d16-b530-c8943551c5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6995bcfc-14ad-4ba2-bfd0-b9a3508f12e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6b4196-2dda-4218-a655-9446394979e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09ffaf0-028a-44c2-8b6c-bfe7f8f9a5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f8883d-acc8-4953-8eab-072e12896be7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c2e4e6-25a6-4eb4-a375-3f6045c58eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "581f867e-66fd-47b9-a2b2-4b05752f2435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2471a1-32a4-4cd4-95d7-ee6ff9cc57cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca720e38-a3b5-4837-a04f-bb9eea7b0b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b46ffc-bf7d-4bee-9467-b2a5c2eec062",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e445062d-cd1f-43d7-a715-d770af862ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b0782f-f37c-4348-8dcc-bcf0e363ac20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f420049-cb07-47e3-a887-4a139cbe49ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cea6ea6-ff3a-4977-8eba-dcd2df57832f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52ddc3f-0dad-4175-99b0-eb4a6eb8bb0c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c0fdf6-3b54-44c4-a5fb-766aa9a2ba63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63592537-a7c5-444e-820c-9afc38cff025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3721275-0a5c-4d44-bef2-7964ff8e130f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35750004-c2ea-48b4-86e4-524075dd1e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc9cb8e-6282-41f0-98ea-a02173dc7b3e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11b006f-8ec5-4852-924c-97eb4082e3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c321270c-df97-4d99-868d-a5e730f55405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f38899-6ff2-4276-944a-dc00d38388aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc32aa7b-52aa-4baa-ab28-72bafcc71194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d9229a-9a72-4463-a465-dd824ac227c4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6afdce-3e6d-42c1-84fe-5a75fede7720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e14535-b9fa-445d-89f9-7b1aeaf90541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f2e4ff-7f4a-4a60-b558-58ad43f0e589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02dda133-dbe6-4dcf-9695-20d6607fc5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f69ee8-797e-44c3-a3cb-229795e4b1bd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36b0c4a-e1e0-49ff-9ac6-c6667e314e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2e9acd-5179-40db-883c-f103abe033b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65217d2-96cb-4689-9b1e-af850aee30ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38e6420-2096-48eb-8142-6a62364e08de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd395bc3-c967-44f6-b1d7-908b3532c0a8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef687446-f45b-4e6b-9b9b-ec6a8ecfc1a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836023d7-d32e-49c5-ae39-8e7b89fb5263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc9d025-5857-4da2-bee6-8a4b26df5bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5fb1bb2-6989-4c9f-b534-b9131508e673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5186f4fd-1862-4731-b1a6-5a0a43ec0972",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a42ea9-fa92-4759-8927-06d340196184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255d8504-58a5-450b-b24b-9674dfdc3022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8769157-02df-4331-ad9f-a0c48f999652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538b594d-0b84-4f08-9f52-2ecfe2be3256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d356dc-a697-4a16-a582-ceecf7c98bca",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed04017a-68eb-4323-b672-8e1ec4e77e24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d0d4079-e1df-4fb5-8262-373127efd36c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9e31fe-212e-423e-bff3-8b6a4ee66806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8014ef7-16af-44e6-8a52-1bc7db0b2de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b083f0-126f-4f42-aba0-14cd010bb37a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1336f35d-1f5b-49b0-84a0-df01ab8221c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dafcfad-771e-4031-9c0a-0935e9a63045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f65f19-0c87-4ef2-82ab-1897b09d84a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7815eefe-a0d8-4757-a760-5f6c3540948c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e421aaa-db7b-47e5-9d93-3c1b4fa92c15",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab22a23d-868d-41d3-8fc2-7aebd5b425a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc75dd98-68ab-4615-95f1-e0fd18e4627f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd201ca-7e99-4ace-93b5-f050b19d7ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e604cd03-2881-4a07-90d6-4f023b2384d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3ee718-fdba-4aaf-92d3-c8c882dc3023",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b507effa-2287-458f-9edc-33b76975b536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e626ad94-d4f0-4122-9c78-24dc3acfa3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1340e5-e498-4c21-8243-8fa1ee786505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f6ad1d-cc86-4378-90e8-a100ff67d4ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6ae5ba-940b-463a-973a-08cfc3193047",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb176cb-5e96-4001-a394-1c9deb59841c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c6a30c-3c4f-4714-8438-5c1efaa38d9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e981a510-a350-4d78-a6a2-fe1ff1a0c6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe9ce11-6853-462e-9bad-3e33697e0d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b0f181-17f3-407f-9b41-51ef84e11d2b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e9db7b-013b-43bc-a21f-ed0d786d0c3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0319a672-5f4e-4cbc-89f2-839e25dbbf12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c442e393-7e24-4c15-97e7-c468dba77c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533210fe-3a40-45f8-8d63-8588edcbb245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797cedd4-ab38-40a3-83d0-5421eefc35ce",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9751fb6-8eba-4067-8008-da631d458967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebbda823-7423-44ab-b7ce-2ff25b7ef109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7dcf641-cc13-4c7d-b9db-342cd152095b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a77271-6b5e-4b8a-81d9-c628356fec97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9baa4507-bf3b-46e5-8d08-d097f3768137",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5bac6c-1817-496d-873d-c0f4f5de09b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dea2b47f-a289-40b6-b278-22710a04eaf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88e4f91-4232-480b-93ed-9e6d54b6c717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22809ffa-77b3-40d8-9ef4-df3a20466a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287a1098-3ed8-47e0-bae7-160f489ef18c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c281332-65af-4389-b59f-d6080d54d0f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4517127f-1fd0-42bd-9dd0-188d5b9abcb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c97db7-a8a1-4b7e-acd3-0d05c862415b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc59e5ba-d1db-48a6-9637-c1fd29e73d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdcc444b-2d32-4fee-b759-7966c978cce0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912bc2a7-c9a2-455f-8665-93d2d8ee2483",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7478c5-3c37-40e5-b679-e726242d2aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7c0786-0d89-43a0-a7c7-a5d2a39adc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49293d8-9bd8-4f4f-a084-53ea64796cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b6b87d-16a4-432e-ae75-416140015244",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e167e6a-6889-442c-920d-a44650e78c25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5347e10-ec55-48d3-8df4-3d1040bdf0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b5e6a7-5a6f-4f4d-918f-08ed8644bdf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb2f1f9-95d8-4f29-a9b9-52e3f50e3f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777c1d0a-2ed2-4c33-a6f7-a10fb8177a0a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468d42c7-c7d2-4a18-99a4-3f4ca1004a1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3002cc7c-338e-4ad1-bf23-8d467092cab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b80cc49-10a9-4258-867e-0902570e705a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f89bad2-3984-48a9-bc10-3667a273c3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d6e364-e059-4394-bab4-879922205b77",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a94892-d586-4be5-98b5-80ae4b4819f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bc6a5cd-c120-4c8c-81ea-d5ed1b82fd96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dca6176-650e-4ba6-a34a-07e499f6a7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6f6b7e-0be4-40e8-89a4-7db190835919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5efc18e-0174-4285-8e7f-121870a1e8a1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4579823-e88f-4ca5-9a06-6c1a7993f5e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb268af-a59d-4edc-9463-8e9c14e4ce22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2ac395-4b6b-412b-ada2-750eab74f4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016c562c-e037-433e-b627-567743a8ed36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a43d3f3-2333-440a-b3ae-58c794aa3d7b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee30b6f8-8a12-437e-859c-0ed3f6293780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a729e6e3-4a42-4be9-a14d-455c9e079b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b43f4e-2aba-468a-8f79-e1e78b1f39a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5548c6-3d64-42c2-811c-715b49b1d7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba5cceb-d9b7-4389-b453-e040a93980c5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265a05ac-a006-4add-951a-d1353a22c5f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eae6e4f4-f6a4-4237-aa4f-9f0ba5885bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bab3d7-2166-4c7f-be80-962575a864c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0850a4ce-979f-4423-95e9-0e6c4d7b63a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f24b48e-5462-4559-bed1-de77647614c3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed1d128-be1d-4168-a52a-8223c30029ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01adc93b-75a8-43df-8b23-8fdc5be73714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0187cd0d-01ea-43b8-85a0-37f8e58c2e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583124d8-f5ae-492d-866b-16fd56286ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7ada14-7d02-4397-8341-5ff029b0c71b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d61585-7bf7-4662-a350-d1f3a519484e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c672540-4145-4151-b941-65e347b454b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7923197-4d98-4922-989a-f9da57fbee65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26bcbbf5-3e1e-43d9-ae95-04a8045bac2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8330600-a6f1-4292-9e04-88442b0c5c96",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641ffabd-f39b-4c17-bee7-373ed5824a41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e79a4fb-9908-410f-8a72-cc827544c6aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b877678-4354-41bf-b8e3-a3f4545193ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8420724c-9011-4471-abbb-ce5d88f9592e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d9d641-73fa-4bf2-91b1-506da52bb0fc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84291be-4343-4d65-b918-72684e248d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3219deef-1a7e-47c5-8787-d5fb3bf07589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "893358e3-01da-4290-97dd-d51b57a93e25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0937e2-3c5d-4de1-9b7c-2a9d674af437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc700355-7082-4a43-b3e9-6e42898075ae",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7553fde4-8666-487d-92d1-a13a6692717f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94a8da99-09a7-4f0f-b6f0-ee0f1fe9a341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da0cb72-3355-4aae-ab6a-dc2b85d0c19c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a063b787-1f45-4053-b657-b8ef8cdb6e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf48fce2-50bb-4c85-b94b-b41b333df9c6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a270dcc5-234b-4f8e-a269-aacecaf0e0d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "418b7054-11ab-4c62-af79-5354279920ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18fb6304-507f-473f-94a4-17952d57d169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e652371e-5575-4ca1-964c-7ba226b5ffb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a9427a-c5d0-4e32-9673-fbdb11374237",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a695f31-2dde-476f-baa5-f8adbb5c9982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e8b1bb0-74de-463c-902d-2574a08fa6a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae147e7-a4f9-4b83-9c5b-20b07c1bdebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efee74f-b608-4b4a-b0e0-4d584fd7dd01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d4ee50-b691-49b9-83a9-361f873e0e8f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36b534b-c360-4a93-9e77-5f4f1cfcf238",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c2f0d73-cbc1-4ade-a547-b196ea12641b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c41016-b23c-4343-a438-3b1d94d5e887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ebfeca1-a0f4-41f9-a749-ba55e90a1052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819e1b70-f3f2-4e24-ae72-4a8ce635bfd9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c25171-f99d-4438-9b5d-26f28822d22b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edc0ae03-aae3-4bdd-9d49-3356eae66413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13be9d9-5acc-4a32-b450-0ca6554366c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab2e5f1-7e48-43fd-b75c-e944cd48548a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18fcc26-a874-4785-addd-a5b5d7bc085b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719e45d9-277b-424c-956e-0081f016645e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c270e692-d682-452d-8099-b2426334282d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "936637cc-f67c-4490-a6c5-11001b3ff38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477aa038-de25-41b8-8b9e-97eeef0abcca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ceea989-07eb-4fb4-a158-399d74c7892d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6f5cc4-5487-4146-b792-d8c2b8426225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ca0393-545a-4309-af90-43edb0ad072b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d54c92-95c0-4129-b384-9d84e980d452",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb2bf45-1ae0-475c-babd-df93e4d686b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75e805e-b3be-4e88-b677-90da91f71c51",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f317d854-a187-43f4-a201-647ca44e4c7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4a6732-bc49-46b4-8156-ea5ec23c21f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18350f24-3862-47b7-8b56-e3ed28289394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd658b1-8fc0-4b34-a300-5d6617880993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8482fc-decf-46fd-8136-bb8fca42f0ff",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873d7760-58d5-4126-80aa-c3ebd9a02191",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d444c1c-33c4-40bf-bd1c-88697955678c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4a76a0-2236-4558-8f54-fe3a2b9693c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83437482-416b-455b-88e7-2ada1c7c46e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b540a5c-777a-41f4-92c4-51fdde174770",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b34065-bf6d-41db-ba5f-acfd60048e14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c8f0f58-4345-4835-9f1f-3b7382e42105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f59e77-53e2-4719-8720-e61f9143d862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5237d0-dbce-45c2-af24-eb5cc650267a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e833f80-6ccf-4821-8ee9-cda831e12b8e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6346b9e-2473-4be8-8141-0ebf00367b86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1fca763-33be-47d2-8dff-6ea0ff28065b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31429bc-eab1-4466-900f-9e8fe0bfbc4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a75ed4-a741-4ba7-9756-e2d08a118b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac255ba6-b1b2-4d94-85c3-49dbff685712",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdf4690-bf03-4738-9a6e-3b1da40619c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee4f36e3-dc65-414d-b76c-8a3125600593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2cafc1-bda4-470a-b929-80baf166c949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673ad8d6-a2a5-4297-a703-9f2f12951808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ff6322-7704-4713-82d0-3fd0734fcb8f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08ce804-c00c-4b99-9593-3295de707c6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b9a298-2ef3-464b-b27f-98c6b24aade2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12770692-f18b-454d-9444-9d3e46afd64b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf060ec-1253-4cdb-9d4f-3dc32f7b399b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af85e8c1-5a21-463a-b558-d975f04742d8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42389d0-3b98-4ece-84a8-4653005cbe0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "febad3af-f402-46b1-a507-66c86680e9e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6474b79-9bfe-4a95-b4e2-42083fe8e573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a840eebd-99bf-4b61-b0c7-6c30d9b621e6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cbbb535-d74b-4604-b4ec-5c094f8b282e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e4d718c-538e-4edd-aeba-5be0f234d12e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcf98b64-f97e-478f-b9b2-4b155180c790",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e980babb-8c8f-417f-b1ab-b1b45ebf2f74"
                    }
                  }
                ]
              },
              {
                "id": "0ac0f986-f435-4f79-8bb6-3c54e8e4a038",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52085d12-d469-476a-9618-9ca71bacd124",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfe8c56-ede4-4988-a4cc-8298b5779908",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "227fb4ff-361b-4a80-b464-09129fd8d745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7cc8fe-a49e-4b4a-a02b-406f786fc345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da5195d0-7f8d-4c39-b765-1f07bef57e0f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2265278d-b809-418f-bae5-a983498d6ae6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ae53644-0bd1-4e99-8c39-f75f8569fc03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ca56333-2b8d-4e62-abfa-12301cc63dba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2eb0c30-5b4e-45c9-8266-2726d161adf0"
                    }
                  }
                ]
              },
              {
                "id": "850cd5b5-4bb9-4ec7-a6cb-41aad12c8add",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3b363ddb-5974-4ff0-8572-f2b86fe6c06d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2150ea-3ff7-4dd1-9a69-f551604d7681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9a688230-373c-436d-9232-824423fd4ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e03dcec-1cd0-4f2c-b6e3-7a8c7eeec73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169861fc-4d0e-4ab8-b9ce-6b56219a049d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5b8c69c9-6b40-41a3-a0f8-56a04fc911a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6a67d5b5-856f-47d6-b4f5-ed2d1b50706f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e0fd2ff-7c9f-4637-9175-7742f7d40267",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "08154092-462b-43ac-b5a2-992bb1e8916e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89abfa14-919f-48d2-9403-5578416e22c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df254d08-dcae-4985-9f21-9e5ce76c7028"
                    }
                  }
                ]
              },
              {
                "id": "349cfe86-4afd-4be9-813e-7f2032f3e6c4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f59af6c5-6b3b-49a9-b1c8-19983ef780c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fa0b72f9-411b-4570-9dfe-9339df5edbf0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "149fe8d7-b06a-483b-b52f-ce4615504a75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a3fed55-7e8e-4ee4-973b-d425b2c3e7f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71051518-ab46-4d85-aeda-0e92358c9565",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "73b88419-f291-4a62-bf4b-a0229de3460c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9e9ebab-ff61-4bd5-85a0-cef85341e7d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "531c308e-718e-41c6-bea4-ed488f42b7a4"
            }
          }
        ]
      },
      {
        "id": "981fc62d-13c7-4abb-9cd0-ce7fc4d19d66",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a76d47a9-3004-4efd-b2db-ee0f03eac62f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce3f45ae-71fa-47a1-91e9-9c62820f66df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66ac00d2-1ae5-4b86-952a-ae01ca80a0a8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3d2cb3-1810-4531-abc4-3cf5f3148be4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "78c355b5-1b5e-4cf0-b65a-ffa2f3b46cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82232c54-bdac-40c9-b36e-5569e6940a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b07a0c30-23e0-4b27-879c-9d93a285f611"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd639777-b433-47e4-a441-027607907c70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb7ed9b6-6c65-4ea7-9f00-9ee477ac6ad3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90f7df9e-bdf5-41d2-8629-c4aa2d77b7f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce597461-336a-485b-b657-0e6e53e64ff0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48ef6e79-ac48-43af-857f-d5a35d1c16e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "12a0cc31-11f5-40b6-8f33-e006745884c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c37ec74-bf07-4b7d-a06c-7acdc049df4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec3b83d9-2a8e-45b3-bf2c-2141a5f41053"
            }
          }
        ]
      },
      {
        "id": "0777e745-ccee-41a6-964c-ba951e3e0a84",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b9c0bbb5-eed1-41d6-8135-b3eb8178226f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec2d13bc-2ba4-4d6f-9c8a-b3d4bea774cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a251654-62e7-4648-b886-377ff3a4e106",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd72c22-780c-4dc3-9cfe-cb513da94b37",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d56bdba-c5e8-477a-bb37-3b8bdc8d95e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d244443-e28b-4561-8e46-93fc466b729a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2540bad4-bf27-49be-9743-83bd8aa30e5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19d8b939-8993-4a7e-a816-e67e0266e0a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a830fb9e-0720-4e27-86ef-9dbd325adece"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83ee43cf-5b1d-4480-9b49-ea06aedb2d69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f460583f-6958-4f7c-bcc7-630d4674b53b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daebcdd2-e70b-4856-a67a-f597a6462425",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "280d87d2-c73a-4145-b075-59b31718421a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05f7e393-59ee-4c1e-9e11-f06d369220ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7de909d7-3b44-465c-bb73-9c8c1fe35182"
            }
          }
        ]
      },
      {
        "id": "41da531f-d05f-4191-b968-31aedae00a5e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fe69e79a-946e-4659-b287-b3db3cc2fc80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b078d84-f0bb-423a-ac4c-faec8f01b8ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "79278510-f1d9-42aa-8a88-2e770fa34c1e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8915dfb-5970-47e2-a210-ef2ff9aea2ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3351c51b-87e9-45f3-8f36-98db9978ff74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a91218-d4fb-43ed-a38d-ad86c4566331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0202ccf8-8bc2-4768-8506-e8d629685328"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a91e5193-1760-4c99-bfd5-dbf1143ba867",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "589b5dea-cad5-422e-b6a9-dd1ac23c1b1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2f9eeff-6a3e-4113-b3ef-6d1b60e52287",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6a129ed-911f-4a8e-931b-2b29d87f391c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0bd1c752-2a1c-4402-b9f2-d35d76a73dcc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f8625a90-6540-4f48-84e0-60c5d152f9ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2de68f3f-6674-48b0-bf6f-3005a743fea7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a495d2a3-3418-441f-8daa-4b3b56f7147d"
            }
          }
        ]
      },
      {
        "id": "5066fcc6-fb10-468a-b852-fbc44a3490fb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1b5b525b-c4c0-48b9-ad98-93eaaae61351",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2969e21-493f-4ad6-903e-53627070afe4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9b9ab9ff-04a7-4449-97f0-a13453576e91",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc75263c-0245-42ac-af89-ca3455a8ef98",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13844967-3702-4f93-bd82-3e6bd3632175",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.494680851063805,
      "responseMin": 10,
      "responseMax": 862,
      "responseSd": 36.92005413374373,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707265948031,
      "completed": 1707265992408
    },
    "executions": [
      {
        "id": "3aeadb1d-4aca-4cf0-b7fa-5b5ce1e75fb6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d139a5ac-00a3-4a1b-84ca-ab07c000aeca",
          "httpRequestId": "d2d691fb-5399-4a79-aacb-788139f6ae83"
        },
        "item": {
          "id": "3aeadb1d-4aca-4cf0-b7fa-5b5ce1e75fb6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1a57e85d-acfc-4ae3-a9d3-6ec78d055b3d",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "0db55948-bda1-4a67-a772-430d739f13f6",
        "cursor": {
          "ref": "3f6611db-f78a-497a-92bb-97d4dbfd9065",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bf485194-9a52-4b81-a374-d66964a37d49"
        },
        "item": {
          "id": "0db55948-bda1-4a67-a772-430d739f13f6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b36683a7-9c38-44c3-84dc-17e4da1066dd",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "9f6937dd-9120-43bb-9dd9-175644a23041",
        "cursor": {
          "ref": "194d8272-f55d-4c17-8636-a4b2531fa73a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "04fd4254-6cff-43bf-8e4d-2578a2afb8e7"
        },
        "item": {
          "id": "9f6937dd-9120-43bb-9dd9-175644a23041",
          "name": "did_json"
        },
        "response": {
          "id": "5ad70d32-0062-4596-bed5-c333d58e0dda",
          "status": "OK",
          "code": 200,
          "responseTime": 862,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b42dc6-11b5-4698-8f44-bbd2f0b5f616",
        "cursor": {
          "ref": "70ded4aa-9977-4341-85ad-c71bea1a09bf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "42c73239-3def-491a-aeaf-b9203b7eb911"
        },
        "item": {
          "id": "e1b42dc6-11b5-4698-8f44-bbd2f0b5f616",
          "name": "did:invalid"
        },
        "response": {
          "id": "eaf4a100-a3bc-409f-9a8a-2f04332ae64f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b42dc6-11b5-4698-8f44-bbd2f0b5f616",
        "cursor": {
          "ref": "70ded4aa-9977-4341-85ad-c71bea1a09bf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "42c73239-3def-491a-aeaf-b9203b7eb911"
        },
        "item": {
          "id": "e1b42dc6-11b5-4698-8f44-bbd2f0b5f616",
          "name": "did:invalid"
        },
        "response": {
          "id": "eaf4a100-a3bc-409f-9a8a-2f04332ae64f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7891a39-fe9f-4986-8f19-996842d4e005",
        "cursor": {
          "ref": "d3dac51b-8f09-4f81-957d-e2b8a0549aa8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a325bc31-60bf-46af-b00b-2c37b8eeea2b"
        },
        "item": {
          "id": "d7891a39-fe9f-4986-8f19-996842d4e005",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a2df3fe5-0129-4ba5-81fd-2349d39b9f9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7891a39-fe9f-4986-8f19-996842d4e005",
        "cursor": {
          "ref": "d3dac51b-8f09-4f81-957d-e2b8a0549aa8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a325bc31-60bf-46af-b00b-2c37b8eeea2b"
        },
        "item": {
          "id": "d7891a39-fe9f-4986-8f19-996842d4e005",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a2df3fe5-0129-4ba5-81fd-2349d39b9f9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e0022b-4f2c-4158-be70-10d424cedb05",
        "cursor": {
          "ref": "10ddf5bb-7234-48aa-b166-2a3146066182",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7fd52479-0260-459c-aaec-60dc57636935"
        },
        "item": {
          "id": "f3e0022b-4f2c-4158-be70-10d424cedb05",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a9f96041-531f-4d0c-8e44-0b523d64bddf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e0022b-4f2c-4158-be70-10d424cedb05",
        "cursor": {
          "ref": "10ddf5bb-7234-48aa-b166-2a3146066182",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7fd52479-0260-459c-aaec-60dc57636935"
        },
        "item": {
          "id": "f3e0022b-4f2c-4158-be70-10d424cedb05",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a9f96041-531f-4d0c-8e44-0b523d64bddf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56b46a4-7273-4af6-b969-c27390bb23dc",
        "cursor": {
          "ref": "2bd1abba-b26c-47ff-81e7-8522de4a4eeb",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a7799072-a34f-4dc3-9877-97f4d04b156f"
        },
        "item": {
          "id": "f56b46a4-7273-4af6-b969-c27390bb23dc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c32d66d4-9fa6-4389-b814-0a0abcac72db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56b46a4-7273-4af6-b969-c27390bb23dc",
        "cursor": {
          "ref": "2bd1abba-b26c-47ff-81e7-8522de4a4eeb",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a7799072-a34f-4dc3-9877-97f4d04b156f"
        },
        "item": {
          "id": "f56b46a4-7273-4af6-b969-c27390bb23dc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c32d66d4-9fa6-4389-b814-0a0abcac72db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b6c873-e9c8-40f5-8db3-29aedb3a97b1",
        "cursor": {
          "ref": "ed0542cd-36dc-4e60-9001-a454f4ce6a43",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "32003032-a6c9-41d9-96e8-3c8b749e4814"
        },
        "item": {
          "id": "28b6c873-e9c8-40f5-8db3-29aedb3a97b1",
          "name": "identifiers"
        },
        "response": {
          "id": "bd40661c-359a-4d43-8243-4db58045febe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "28b6c873-e9c8-40f5-8db3-29aedb3a97b1",
        "cursor": {
          "ref": "ed0542cd-36dc-4e60-9001-a454f4ce6a43",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "32003032-a6c9-41d9-96e8-3c8b749e4814"
        },
        "item": {
          "id": "28b6c873-e9c8-40f5-8db3-29aedb3a97b1",
          "name": "identifiers"
        },
        "response": {
          "id": "bd40661c-359a-4d43-8243-4db58045febe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ac439205-0bb3-4e32-86f6-2268b0c5acba",
        "cursor": {
          "ref": "6ae72ab7-fa77-4311-be00-6afd7b6d61d8",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b5f72628-41f9-4a7e-be20-575d468cea7b"
        },
        "item": {
          "id": "ac439205-0bb3-4e32-86f6-2268b0c5acba",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5d7a23f9-76be-485d-a2b0-2f041292b33e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac439205-0bb3-4e32-86f6-2268b0c5acba",
        "cursor": {
          "ref": "6ae72ab7-fa77-4311-be00-6afd7b6d61d8",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b5f72628-41f9-4a7e-be20-575d468cea7b"
        },
        "item": {
          "id": "ac439205-0bb3-4e32-86f6-2268b0c5acba",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5d7a23f9-76be-485d-a2b0-2f041292b33e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2cea6d-ed5d-4d2e-b7a2-44ed2a473b4c",
        "cursor": {
          "ref": "bd89aabe-7aca-4ce5-99ae-630cb04a4b33",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "68fef537-158a-4a79-a464-c7a8d824b691"
        },
        "item": {
          "id": "7e2cea6d-ed5d-4d2e-b7a2-44ed2a473b4c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "40d60ce0-e6ec-4af4-9c47-f438a404aa07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2cea6d-ed5d-4d2e-b7a2-44ed2a473b4c",
        "cursor": {
          "ref": "bd89aabe-7aca-4ce5-99ae-630cb04a4b33",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "68fef537-158a-4a79-a464-c7a8d824b691"
        },
        "item": {
          "id": "7e2cea6d-ed5d-4d2e-b7a2-44ed2a473b4c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "40d60ce0-e6ec-4af4-9c47-f438a404aa07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbc3a99-fbd7-42d8-9059-cbf4778d7a77",
        "cursor": {
          "ref": "3fb4749f-d01c-4d5a-ac2c-ad1de0d5d9ff",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "250ae5a1-05f0-4313-a642-201c8bd73f01"
        },
        "item": {
          "id": "fdbc3a99-fbd7-42d8-9059-cbf4778d7a77",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "050a0289-a8b4-4275-b21c-9ad66a23dda6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbc3a99-fbd7-42d8-9059-cbf4778d7a77",
        "cursor": {
          "ref": "3fb4749f-d01c-4d5a-ac2c-ad1de0d5d9ff",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "250ae5a1-05f0-4313-a642-201c8bd73f01"
        },
        "item": {
          "id": "fdbc3a99-fbd7-42d8-9059-cbf4778d7a77",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "050a0289-a8b4-4275-b21c-9ad66a23dda6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfb4595-766f-407c-b8f5-8ae723502c30",
        "cursor": {
          "ref": "8d74b582-e278-4720-875d-9cc96717ce00",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "31421230-a720-45a4-95f0-7998ec74dd57"
        },
        "item": {
          "id": "8cfb4595-766f-407c-b8f5-8ae723502c30",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2f19cc6d-29bb-494c-a43a-e97b37a2bf96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfb4595-766f-407c-b8f5-8ae723502c30",
        "cursor": {
          "ref": "8d74b582-e278-4720-875d-9cc96717ce00",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "31421230-a720-45a4-95f0-7998ec74dd57"
        },
        "item": {
          "id": "8cfb4595-766f-407c-b8f5-8ae723502c30",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2f19cc6d-29bb-494c-a43a-e97b37a2bf96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dc611c-4db9-4cc1-98f6-4a674cc89d63",
        "cursor": {
          "ref": "d3577d89-2078-4516-992f-4a60ceb166e3",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "111c4a24-0894-4447-9fde-ce00a52c5abd"
        },
        "item": {
          "id": "62dc611c-4db9-4cc1-98f6-4a674cc89d63",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "055aabf4-32c9-4983-8d47-f6923f667fc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dc611c-4db9-4cc1-98f6-4a674cc89d63",
        "cursor": {
          "ref": "d3577d89-2078-4516-992f-4a60ceb166e3",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "111c4a24-0894-4447-9fde-ce00a52c5abd"
        },
        "item": {
          "id": "62dc611c-4db9-4cc1-98f6-4a674cc89d63",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "055aabf4-32c9-4983-8d47-f6923f667fc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb40d98-6801-42c7-91ce-65b58cf1fa16",
        "cursor": {
          "ref": "1ef75156-83f7-49af-92af-fe2d7529087e",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4c1883bf-21e8-400d-961e-cc4ccbc35d14"
        },
        "item": {
          "id": "3bb40d98-6801-42c7-91ce-65b58cf1fa16",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "12c78e19-0d96-4546-8cc5-fd1591186eee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb40d98-6801-42c7-91ce-65b58cf1fa16",
        "cursor": {
          "ref": "1ef75156-83f7-49af-92af-fe2d7529087e",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4c1883bf-21e8-400d-961e-cc4ccbc35d14"
        },
        "item": {
          "id": "3bb40d98-6801-42c7-91ce-65b58cf1fa16",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "12c78e19-0d96-4546-8cc5-fd1591186eee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f47ea9-461d-4d82-8373-dd2bcd259bd3",
        "cursor": {
          "ref": "d5e3342a-91a5-4d78-89f3-88abb931d6ee",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a4c299e1-19a0-40f0-b5d0-542e43efa2e3"
        },
        "item": {
          "id": "e9f47ea9-461d-4d82-8373-dd2bcd259bd3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f5ce5113-c8a0-4e6f-b365-fd8c55bb8f5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f47ea9-461d-4d82-8373-dd2bcd259bd3",
        "cursor": {
          "ref": "d5e3342a-91a5-4d78-89f3-88abb931d6ee",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a4c299e1-19a0-40f0-b5d0-542e43efa2e3"
        },
        "item": {
          "id": "e9f47ea9-461d-4d82-8373-dd2bcd259bd3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f5ce5113-c8a0-4e6f-b365-fd8c55bb8f5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a98026-6a36-4c5c-9f73-2821c7726080",
        "cursor": {
          "ref": "1e69b08a-c0b5-47d9-9f81-30666df09893",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "855a0e3f-75c2-40a1-9506-0faa96966c5f"
        },
        "item": {
          "id": "a3a98026-6a36-4c5c-9f73-2821c7726080",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7c1e11b4-1ccf-40b0-9554-e429ea9952b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a98026-6a36-4c5c-9f73-2821c7726080",
        "cursor": {
          "ref": "1e69b08a-c0b5-47d9-9f81-30666df09893",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "855a0e3f-75c2-40a1-9506-0faa96966c5f"
        },
        "item": {
          "id": "a3a98026-6a36-4c5c-9f73-2821c7726080",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7c1e11b4-1ccf-40b0-9554-e429ea9952b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd331673-3c02-4139-bca5-5aee2e773973",
        "cursor": {
          "ref": "d71f043e-669f-4517-bee4-80d34cfcdd29",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4dc2d2ce-a977-4c54-9421-cf40b266121c"
        },
        "item": {
          "id": "cd331673-3c02-4139-bca5-5aee2e773973",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d7e50793-672e-4d21-a39a-73fd2865d4c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd331673-3c02-4139-bca5-5aee2e773973",
        "cursor": {
          "ref": "d71f043e-669f-4517-bee4-80d34cfcdd29",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4dc2d2ce-a977-4c54-9421-cf40b266121c"
        },
        "item": {
          "id": "cd331673-3c02-4139-bca5-5aee2e773973",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d7e50793-672e-4d21-a39a-73fd2865d4c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc12bf5-aa4b-4ec6-8e10-5b1572232804",
        "cursor": {
          "ref": "26dd661c-0857-4fe7-ad7c-4b8b4f5ad2a5",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c73cdff0-ad77-429a-b120-cfa3f432a9a3"
        },
        "item": {
          "id": "dcc12bf5-aa4b-4ec6-8e10-5b1572232804",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "83443a8a-0fda-48fc-850b-4d0143cac17c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc12bf5-aa4b-4ec6-8e10-5b1572232804",
        "cursor": {
          "ref": "26dd661c-0857-4fe7-ad7c-4b8b4f5ad2a5",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c73cdff0-ad77-429a-b120-cfa3f432a9a3"
        },
        "item": {
          "id": "dcc12bf5-aa4b-4ec6-8e10-5b1572232804",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "83443a8a-0fda-48fc-850b-4d0143cac17c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8b617b-bdaa-4348-84dd-559b2fc7bb19",
        "cursor": {
          "ref": "75367c50-5e91-4d8c-a6a3-f3631a032c20",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "31a2496e-09ba-49e6-8d67-c232e51f43c3"
        },
        "item": {
          "id": "2e8b617b-bdaa-4348-84dd-559b2fc7bb19",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "72d9ca7c-341d-41da-b3af-934f5e886654",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8b617b-bdaa-4348-84dd-559b2fc7bb19",
        "cursor": {
          "ref": "75367c50-5e91-4d8c-a6a3-f3631a032c20",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "31a2496e-09ba-49e6-8d67-c232e51f43c3"
        },
        "item": {
          "id": "2e8b617b-bdaa-4348-84dd-559b2fc7bb19",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "72d9ca7c-341d-41da-b3af-934f5e886654",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc721e1b-1c50-4870-92cf-257830b14bb2",
        "cursor": {
          "ref": "181f2bca-241d-4052-aca1-e00505e868d4",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "db643a4a-0040-4d54-98e3-fe6614576998"
        },
        "item": {
          "id": "bc721e1b-1c50-4870-92cf-257830b14bb2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b3d7a043-abd7-4544-ad37-f8e4552fd940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc721e1b-1c50-4870-92cf-257830b14bb2",
        "cursor": {
          "ref": "181f2bca-241d-4052-aca1-e00505e868d4",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "db643a4a-0040-4d54-98e3-fe6614576998"
        },
        "item": {
          "id": "bc721e1b-1c50-4870-92cf-257830b14bb2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b3d7a043-abd7-4544-ad37-f8e4552fd940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237f07ab-50ee-4d47-ba26-16e96a1a6b02",
        "cursor": {
          "ref": "b09f5809-6b49-4570-b341-9f3764cf0201",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e02dbf45-1c38-48e2-aa3c-e6e88e5b260f"
        },
        "item": {
          "id": "237f07ab-50ee-4d47-ba26-16e96a1a6b02",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "973d7a37-ce03-4017-b630-da16f39934e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237f07ab-50ee-4d47-ba26-16e96a1a6b02",
        "cursor": {
          "ref": "b09f5809-6b49-4570-b341-9f3764cf0201",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e02dbf45-1c38-48e2-aa3c-e6e88e5b260f"
        },
        "item": {
          "id": "237f07ab-50ee-4d47-ba26-16e96a1a6b02",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "973d7a37-ce03-4017-b630-da16f39934e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec57e211-ce5c-41f8-a626-2fdf05ba1be1",
        "cursor": {
          "ref": "3926cedf-6a6d-4797-b0e8-8cb086e8b7d7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "170598df-3017-4054-8105-06cf513b1a68"
        },
        "item": {
          "id": "ec57e211-ce5c-41f8-a626-2fdf05ba1be1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "93beb1f9-9e44-4040-8567-1d7c60dfccb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec57e211-ce5c-41f8-a626-2fdf05ba1be1",
        "cursor": {
          "ref": "3926cedf-6a6d-4797-b0e8-8cb086e8b7d7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "170598df-3017-4054-8105-06cf513b1a68"
        },
        "item": {
          "id": "ec57e211-ce5c-41f8-a626-2fdf05ba1be1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "93beb1f9-9e44-4040-8567-1d7c60dfccb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18f9c2b-7607-4998-a351-7317a9cdd57c",
        "cursor": {
          "ref": "3d198ced-2f94-47ef-b49a-a2a7f66d440d",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "286a05c6-1d04-4112-82ec-d600c43beb6e"
        },
        "item": {
          "id": "a18f9c2b-7607-4998-a351-7317a9cdd57c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4adbbf18-b5e0-4704-a141-1fc381f87713",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18f9c2b-7607-4998-a351-7317a9cdd57c",
        "cursor": {
          "ref": "3d198ced-2f94-47ef-b49a-a2a7f66d440d",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "286a05c6-1d04-4112-82ec-d600c43beb6e"
        },
        "item": {
          "id": "a18f9c2b-7607-4998-a351-7317a9cdd57c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4adbbf18-b5e0-4704-a141-1fc381f87713",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786567ae-8131-4b97-9ce8-61f72e98ca60",
        "cursor": {
          "ref": "89580ca4-1267-4eca-a97e-aeba5eac75b9",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8e5bf62b-611c-4434-8e9e-c1106c38f4b6"
        },
        "item": {
          "id": "786567ae-8131-4b97-9ce8-61f72e98ca60",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1016e642-1880-4157-a58d-b3f353a74ac3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786567ae-8131-4b97-9ce8-61f72e98ca60",
        "cursor": {
          "ref": "89580ca4-1267-4eca-a97e-aeba5eac75b9",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8e5bf62b-611c-4434-8e9e-c1106c38f4b6"
        },
        "item": {
          "id": "786567ae-8131-4b97-9ce8-61f72e98ca60",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1016e642-1880-4157-a58d-b3f353a74ac3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca7af4f-eb59-4f10-a507-32c1ee24baf9",
        "cursor": {
          "ref": "7320750b-7a51-45e3-88ce-ea9c0b38cd65",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1db7ba9b-e773-4c68-bd08-72ae64de4e89"
        },
        "item": {
          "id": "bca7af4f-eb59-4f10-a507-32c1ee24baf9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f723e95d-afdc-46b8-966d-9724af319799",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca7af4f-eb59-4f10-a507-32c1ee24baf9",
        "cursor": {
          "ref": "7320750b-7a51-45e3-88ce-ea9c0b38cd65",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1db7ba9b-e773-4c68-bd08-72ae64de4e89"
        },
        "item": {
          "id": "bca7af4f-eb59-4f10-a507-32c1ee24baf9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f723e95d-afdc-46b8-966d-9724af319799",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8c64f9-50df-4deb-890c-58e9133fa4b9",
        "cursor": {
          "ref": "379953a1-fd48-444f-97e7-9f8dde61c8db",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "183dd184-4c44-40bd-bec1-c3e26201d2d1"
        },
        "item": {
          "id": "4e8c64f9-50df-4deb-890c-58e9133fa4b9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1ec2e5e4-2121-4d03-badf-18a6535e4eec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8c64f9-50df-4deb-890c-58e9133fa4b9",
        "cursor": {
          "ref": "379953a1-fd48-444f-97e7-9f8dde61c8db",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "183dd184-4c44-40bd-bec1-c3e26201d2d1"
        },
        "item": {
          "id": "4e8c64f9-50df-4deb-890c-58e9133fa4b9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1ec2e5e4-2121-4d03-badf-18a6535e4eec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6dfc787-11ba-4a0f-85f1-0d5e91581a21",
        "cursor": {
          "ref": "47ff662c-e1ec-4f12-b1f2-fe2865b3b992",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7219b6fb-b25c-4bb6-aa12-a0b2370327a9"
        },
        "item": {
          "id": "c6dfc787-11ba-4a0f-85f1-0d5e91581a21",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6c81218e-3307-4966-b9ed-25f50931cbb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6dfc787-11ba-4a0f-85f1-0d5e91581a21",
        "cursor": {
          "ref": "47ff662c-e1ec-4f12-b1f2-fe2865b3b992",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7219b6fb-b25c-4bb6-aa12-a0b2370327a9"
        },
        "item": {
          "id": "c6dfc787-11ba-4a0f-85f1-0d5e91581a21",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6c81218e-3307-4966-b9ed-25f50931cbb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bced58ea-1fda-4e33-9965-3e915ca8c6e0",
        "cursor": {
          "ref": "dfea6efb-e7ab-415c-a28e-097a97ed3a2a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ac0da528-d598-4895-bf00-8d3ea1e30960"
        },
        "item": {
          "id": "bced58ea-1fda-4e33-9965-3e915ca8c6e0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8c8d18a2-b0f0-4204-99e6-ef91e776a858",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bced58ea-1fda-4e33-9965-3e915ca8c6e0",
        "cursor": {
          "ref": "dfea6efb-e7ab-415c-a28e-097a97ed3a2a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ac0da528-d598-4895-bf00-8d3ea1e30960"
        },
        "item": {
          "id": "bced58ea-1fda-4e33-9965-3e915ca8c6e0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8c8d18a2-b0f0-4204-99e6-ef91e776a858",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45b016a-18bf-4692-89e3-665266ffba02",
        "cursor": {
          "ref": "04968642-d0c8-4d49-bcda-554fbcd74a56",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "940de571-f022-49c9-ac72-8bc2bf39207d"
        },
        "item": {
          "id": "a45b016a-18bf-4692-89e3-665266ffba02",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "584872df-132a-4365-ab78-51671c0e4e62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45b016a-18bf-4692-89e3-665266ffba02",
        "cursor": {
          "ref": "04968642-d0c8-4d49-bcda-554fbcd74a56",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "940de571-f022-49c9-ac72-8bc2bf39207d"
        },
        "item": {
          "id": "a45b016a-18bf-4692-89e3-665266ffba02",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "584872df-132a-4365-ab78-51671c0e4e62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757aad75-feb9-45cf-8e48-4f87b8d844c4",
        "cursor": {
          "ref": "bcac04d7-2414-4b6f-acfe-922c37c20676",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6b70dabf-5676-4b8c-a933-44e56255cee2"
        },
        "item": {
          "id": "757aad75-feb9-45cf-8e48-4f87b8d844c4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8e33a797-615e-43b6-9c50-e6c8d2241089",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757aad75-feb9-45cf-8e48-4f87b8d844c4",
        "cursor": {
          "ref": "bcac04d7-2414-4b6f-acfe-922c37c20676",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6b70dabf-5676-4b8c-a933-44e56255cee2"
        },
        "item": {
          "id": "757aad75-feb9-45cf-8e48-4f87b8d844c4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8e33a797-615e-43b6-9c50-e6c8d2241089",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1809f6c3-a379-4682-be7e-b053d606f36d",
        "cursor": {
          "ref": "29c9c4c6-cdbf-4867-98f7-659752d93397",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "783a8e93-b7c4-4e27-8e9b-edb1808cc257"
        },
        "item": {
          "id": "1809f6c3-a379-4682-be7e-b053d606f36d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "03cf09e6-5481-49f2-9692-a150adba1173",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1809f6c3-a379-4682-be7e-b053d606f36d",
        "cursor": {
          "ref": "29c9c4c6-cdbf-4867-98f7-659752d93397",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "783a8e93-b7c4-4e27-8e9b-edb1808cc257"
        },
        "item": {
          "id": "1809f6c3-a379-4682-be7e-b053d606f36d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "03cf09e6-5481-49f2-9692-a150adba1173",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd0d2dd-93f8-4932-a9ac-1fe08f2c1708",
        "cursor": {
          "ref": "43d5f465-af02-4507-a4d8-5fc2d5e87ed2",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "56d7d517-f237-4435-90e4-9c3be17b0647"
        },
        "item": {
          "id": "2dd0d2dd-93f8-4932-a9ac-1fe08f2c1708",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1e9ca04c-ac1e-4d19-a2ef-ccb404a68a9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd0d2dd-93f8-4932-a9ac-1fe08f2c1708",
        "cursor": {
          "ref": "43d5f465-af02-4507-a4d8-5fc2d5e87ed2",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "56d7d517-f237-4435-90e4-9c3be17b0647"
        },
        "item": {
          "id": "2dd0d2dd-93f8-4932-a9ac-1fe08f2c1708",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1e9ca04c-ac1e-4d19-a2ef-ccb404a68a9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f019b39-fc2c-4f61-a250-0ff007aa0a15",
        "cursor": {
          "ref": "2e98d310-5f15-4344-9d5a-d98a1f8d3aba",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3c44488f-408c-455a-82ed-b87400c740fc"
        },
        "item": {
          "id": "6f019b39-fc2c-4f61-a250-0ff007aa0a15",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9409ddcc-0137-42d9-a845-9d71c0fad360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f019b39-fc2c-4f61-a250-0ff007aa0a15",
        "cursor": {
          "ref": "2e98d310-5f15-4344-9d5a-d98a1f8d3aba",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3c44488f-408c-455a-82ed-b87400c740fc"
        },
        "item": {
          "id": "6f019b39-fc2c-4f61-a250-0ff007aa0a15",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9409ddcc-0137-42d9-a845-9d71c0fad360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ddfa79-1a2b-4ed0-9151-905021ee31b7",
        "cursor": {
          "ref": "b717e755-6515-4af5-99b4-e79b0ac13009",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "78891966-a16a-4752-8749-27981fe47253"
        },
        "item": {
          "id": "c5ddfa79-1a2b-4ed0-9151-905021ee31b7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "99b9fa7e-0b17-4010-8c90-d67dcb270a0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ddfa79-1a2b-4ed0-9151-905021ee31b7",
        "cursor": {
          "ref": "b717e755-6515-4af5-99b4-e79b0ac13009",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "78891966-a16a-4752-8749-27981fe47253"
        },
        "item": {
          "id": "c5ddfa79-1a2b-4ed0-9151-905021ee31b7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "99b9fa7e-0b17-4010-8c90-d67dcb270a0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015e97c8-64bb-41ec-8350-498b576a1e03",
        "cursor": {
          "ref": "75ea3892-374b-4de2-8ec0-9bf173803ca4",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4565046f-5145-4f6e-8426-2bb03e1a3e14"
        },
        "item": {
          "id": "015e97c8-64bb-41ec-8350-498b576a1e03",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a9f92923-5d3b-47fc-ab9a-7592b03c932d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015e97c8-64bb-41ec-8350-498b576a1e03",
        "cursor": {
          "ref": "75ea3892-374b-4de2-8ec0-9bf173803ca4",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4565046f-5145-4f6e-8426-2bb03e1a3e14"
        },
        "item": {
          "id": "015e97c8-64bb-41ec-8350-498b576a1e03",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a9f92923-5d3b-47fc-ab9a-7592b03c932d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce35f1ae-873d-4c5f-9a4f-8280186f2dcb",
        "cursor": {
          "ref": "aa80d097-dd9d-41a9-9263-4bc04724e110",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e4787237-2b24-4d63-a1fc-7572a9c20776"
        },
        "item": {
          "id": "ce35f1ae-873d-4c5f-9a4f-8280186f2dcb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7a5d5dbd-dd4e-491a-87c8-f83dde9576cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce35f1ae-873d-4c5f-9a4f-8280186f2dcb",
        "cursor": {
          "ref": "aa80d097-dd9d-41a9-9263-4bc04724e110",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e4787237-2b24-4d63-a1fc-7572a9c20776"
        },
        "item": {
          "id": "ce35f1ae-873d-4c5f-9a4f-8280186f2dcb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7a5d5dbd-dd4e-491a-87c8-f83dde9576cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9f6a53-7a5c-4f7e-8e85-dd72abe6a4b2",
        "cursor": {
          "ref": "db56a64c-f426-474e-bf7d-9480435fdb87",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "42734663-0636-4865-bf53-62eba76eb0a7"
        },
        "item": {
          "id": "6b9f6a53-7a5c-4f7e-8e85-dd72abe6a4b2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "300503ef-811b-4ab0-b3c7-6545262e0373",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9f6a53-7a5c-4f7e-8e85-dd72abe6a4b2",
        "cursor": {
          "ref": "db56a64c-f426-474e-bf7d-9480435fdb87",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "42734663-0636-4865-bf53-62eba76eb0a7"
        },
        "item": {
          "id": "6b9f6a53-7a5c-4f7e-8e85-dd72abe6a4b2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "300503ef-811b-4ab0-b3c7-6545262e0373",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff921673-6c99-4937-a8b0-89a6c03b0fd8",
        "cursor": {
          "ref": "16e26e4b-c8ce-41da-93ba-4e7603a28f65",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "32d5b41e-4c2f-4f58-969b-2eb5d6c5619e"
        },
        "item": {
          "id": "ff921673-6c99-4937-a8b0-89a6c03b0fd8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ac9ca86d-1414-466b-a381-e88d400488c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff921673-6c99-4937-a8b0-89a6c03b0fd8",
        "cursor": {
          "ref": "16e26e4b-c8ce-41da-93ba-4e7603a28f65",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "32d5b41e-4c2f-4f58-969b-2eb5d6c5619e"
        },
        "item": {
          "id": "ff921673-6c99-4937-a8b0-89a6c03b0fd8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ac9ca86d-1414-466b-a381-e88d400488c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae27678b-f7eb-49d3-ba9c-7fbebe604e9e",
        "cursor": {
          "ref": "5b7c8007-d1bc-42ef-8cd4-7aa7435b0d4e",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "40484392-6c61-4f81-aadd-603ae968734a"
        },
        "item": {
          "id": "ae27678b-f7eb-49d3-ba9c-7fbebe604e9e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6c2ba155-eba6-41a6-8ceb-17958bc32020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae27678b-f7eb-49d3-ba9c-7fbebe604e9e",
        "cursor": {
          "ref": "5b7c8007-d1bc-42ef-8cd4-7aa7435b0d4e",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "40484392-6c61-4f81-aadd-603ae968734a"
        },
        "item": {
          "id": "ae27678b-f7eb-49d3-ba9c-7fbebe604e9e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6c2ba155-eba6-41a6-8ceb-17958bc32020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edf8ea1-0792-44d6-b7eb-5c36fd20e66d",
        "cursor": {
          "ref": "3d4e31c1-9d63-4b92-8e0a-fc54a14f0f41",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c59cabe9-e9be-4ced-b8e1-715e55ccd940"
        },
        "item": {
          "id": "1edf8ea1-0792-44d6-b7eb-5c36fd20e66d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7b18d653-2d18-4617-9eca-c79d363c2b2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edf8ea1-0792-44d6-b7eb-5c36fd20e66d",
        "cursor": {
          "ref": "3d4e31c1-9d63-4b92-8e0a-fc54a14f0f41",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c59cabe9-e9be-4ced-b8e1-715e55ccd940"
        },
        "item": {
          "id": "1edf8ea1-0792-44d6-b7eb-5c36fd20e66d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7b18d653-2d18-4617-9eca-c79d363c2b2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af18924b-5575-465a-b610-a13eb2d7d05f",
        "cursor": {
          "ref": "e86a4a64-6692-4def-90f1-751d32694a02",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e73baf9a-1e05-4294-98e2-e2a98dcf7d5e"
        },
        "item": {
          "id": "af18924b-5575-465a-b610-a13eb2d7d05f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9823d003-be8c-421a-910e-3cb610edb202",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af18924b-5575-465a-b610-a13eb2d7d05f",
        "cursor": {
          "ref": "e86a4a64-6692-4def-90f1-751d32694a02",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e73baf9a-1e05-4294-98e2-e2a98dcf7d5e"
        },
        "item": {
          "id": "af18924b-5575-465a-b610-a13eb2d7d05f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9823d003-be8c-421a-910e-3cb610edb202",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6194dd8-69f1-4f79-8c38-5148ba70131a",
        "cursor": {
          "ref": "b52cdb9f-76b6-47ff-aebf-52d6a7876148",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cfd345ca-86e5-4606-8233-0cadf56118c9"
        },
        "item": {
          "id": "d6194dd8-69f1-4f79-8c38-5148ba70131a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e7eca486-666e-4bc2-87ba-970ad0181d4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6194dd8-69f1-4f79-8c38-5148ba70131a",
        "cursor": {
          "ref": "b52cdb9f-76b6-47ff-aebf-52d6a7876148",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cfd345ca-86e5-4606-8233-0cadf56118c9"
        },
        "item": {
          "id": "d6194dd8-69f1-4f79-8c38-5148ba70131a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e7eca486-666e-4bc2-87ba-970ad0181d4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826ec279-cf87-4810-856f-425a827e3f81",
        "cursor": {
          "ref": "78fb43a7-a2ed-400e-9672-a1f7b4151499",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "26fddc76-90fe-4453-bbb5-f237afaf894d"
        },
        "item": {
          "id": "826ec279-cf87-4810-856f-425a827e3f81",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4f9eeb48-2430-4300-8ea7-74fa9c1f2998",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826ec279-cf87-4810-856f-425a827e3f81",
        "cursor": {
          "ref": "78fb43a7-a2ed-400e-9672-a1f7b4151499",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "26fddc76-90fe-4453-bbb5-f237afaf894d"
        },
        "item": {
          "id": "826ec279-cf87-4810-856f-425a827e3f81",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4f9eeb48-2430-4300-8ea7-74fa9c1f2998",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da975af-5a46-4710-96b2-427badadad09",
        "cursor": {
          "ref": "ed77f8f9-78e4-4432-8c0f-5cf30554f8a0",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "abfb5717-2f84-4656-ac67-c58160263e9e"
        },
        "item": {
          "id": "4da975af-5a46-4710-96b2-427badadad09",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9d1156e3-3466-4ec8-a883-0b098a021868",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da975af-5a46-4710-96b2-427badadad09",
        "cursor": {
          "ref": "ed77f8f9-78e4-4432-8c0f-5cf30554f8a0",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "abfb5717-2f84-4656-ac67-c58160263e9e"
        },
        "item": {
          "id": "4da975af-5a46-4710-96b2-427badadad09",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9d1156e3-3466-4ec8-a883-0b098a021868",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3e9ad6-fead-4447-bc53-2b7ead40405e",
        "cursor": {
          "ref": "90a872a7-2553-4e21-b230-183e52cc0b6e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ed0dfcbb-c461-4515-973f-bbbc54e57fba"
        },
        "item": {
          "id": "2a3e9ad6-fead-4447-bc53-2b7ead40405e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c4a5985a-b2fc-4a72-b6f7-bb110f092755",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3e9ad6-fead-4447-bc53-2b7ead40405e",
        "cursor": {
          "ref": "90a872a7-2553-4e21-b230-183e52cc0b6e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ed0dfcbb-c461-4515-973f-bbbc54e57fba"
        },
        "item": {
          "id": "2a3e9ad6-fead-4447-bc53-2b7ead40405e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c4a5985a-b2fc-4a72-b6f7-bb110f092755",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b0176b-4d7c-437b-a2a6-aa14b4d996f0",
        "cursor": {
          "ref": "e9e358ba-8917-4732-8f7d-181d0fe21bf0",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b4411106-bd90-48b4-bbc7-46f628fb4745"
        },
        "item": {
          "id": "47b0176b-4d7c-437b-a2a6-aa14b4d996f0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "046250b4-fc19-4064-94fc-893cd7119ace",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b0176b-4d7c-437b-a2a6-aa14b4d996f0",
        "cursor": {
          "ref": "e9e358ba-8917-4732-8f7d-181d0fe21bf0",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b4411106-bd90-48b4-bbc7-46f628fb4745"
        },
        "item": {
          "id": "47b0176b-4d7c-437b-a2a6-aa14b4d996f0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "046250b4-fc19-4064-94fc-893cd7119ace",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7b097c-6082-42f5-9ad5-2b6c8c6d7506",
        "cursor": {
          "ref": "1c3d42a0-9e54-4aae-aa60-ed2568d52eaf",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c06c46ef-abd1-48dd-9350-7bfd293af908"
        },
        "item": {
          "id": "cb7b097c-6082-42f5-9ad5-2b6c8c6d7506",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a0bf30f7-0e70-41e2-8033-697bd46b1fc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7b097c-6082-42f5-9ad5-2b6c8c6d7506",
        "cursor": {
          "ref": "1c3d42a0-9e54-4aae-aa60-ed2568d52eaf",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c06c46ef-abd1-48dd-9350-7bfd293af908"
        },
        "item": {
          "id": "cb7b097c-6082-42f5-9ad5-2b6c8c6d7506",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a0bf30f7-0e70-41e2-8033-697bd46b1fc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a13130-3f54-4d74-b954-a577204f1f7c",
        "cursor": {
          "ref": "a71469c2-e59e-43e2-b5ef-6c42d26dd35d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c03360d9-f3c0-4711-8572-b349b9d61f92"
        },
        "item": {
          "id": "d4a13130-3f54-4d74-b954-a577204f1f7c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "887f9663-39f9-4a34-b6e6-7ce56fb0a3e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a13130-3f54-4d74-b954-a577204f1f7c",
        "cursor": {
          "ref": "a71469c2-e59e-43e2-b5ef-6c42d26dd35d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c03360d9-f3c0-4711-8572-b349b9d61f92"
        },
        "item": {
          "id": "d4a13130-3f54-4d74-b954-a577204f1f7c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "887f9663-39f9-4a34-b6e6-7ce56fb0a3e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6adcf2-bbb8-4d74-9cec-0990a0429837",
        "cursor": {
          "ref": "ad5a6cd7-4679-490b-9eea-43f6c7d47249",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3285c96b-56a7-4be1-a0ca-96b827f2d2d9"
        },
        "item": {
          "id": "1a6adcf2-bbb8-4d74-9cec-0990a0429837",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b525b75e-9fd5-450b-bd43-938a87797de8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6adcf2-bbb8-4d74-9cec-0990a0429837",
        "cursor": {
          "ref": "ad5a6cd7-4679-490b-9eea-43f6c7d47249",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3285c96b-56a7-4be1-a0ca-96b827f2d2d9"
        },
        "item": {
          "id": "1a6adcf2-bbb8-4d74-9cec-0990a0429837",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b525b75e-9fd5-450b-bd43-938a87797de8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c74b82-024c-4005-a4cc-082a6ddac81b",
        "cursor": {
          "ref": "1226e68e-b168-4fbc-9a8c-1eac8570cd9b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b6e41efc-ae47-4a99-8aff-a5992e3d33c1"
        },
        "item": {
          "id": "21c74b82-024c-4005-a4cc-082a6ddac81b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "18b33dd1-8379-4fcb-8cd5-acae1570bc28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c74b82-024c-4005-a4cc-082a6ddac81b",
        "cursor": {
          "ref": "1226e68e-b168-4fbc-9a8c-1eac8570cd9b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b6e41efc-ae47-4a99-8aff-a5992e3d33c1"
        },
        "item": {
          "id": "21c74b82-024c-4005-a4cc-082a6ddac81b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "18b33dd1-8379-4fcb-8cd5-acae1570bc28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24038e5-6556-49c2-a0f3-749eb02da0c1",
        "cursor": {
          "ref": "799101a9-1ca7-4ee9-8586-bad5dff9ec95",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d29745e7-0e92-40e3-a6d1-d541dcb8e062"
        },
        "item": {
          "id": "f24038e5-6556-49c2-a0f3-749eb02da0c1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b48eac92-eb0a-4cbe-a889-fb49f6e1c5b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24038e5-6556-49c2-a0f3-749eb02da0c1",
        "cursor": {
          "ref": "799101a9-1ca7-4ee9-8586-bad5dff9ec95",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d29745e7-0e92-40e3-a6d1-d541dcb8e062"
        },
        "item": {
          "id": "f24038e5-6556-49c2-a0f3-749eb02da0c1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b48eac92-eb0a-4cbe-a889-fb49f6e1c5b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2327114-6759-4493-a2e8-7922a647b6b9",
        "cursor": {
          "ref": "b96b2b2f-7f15-4c27-b0ee-72c6ce4121d6",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5754b885-8f9a-469d-9bd4-625f73e58bb8"
        },
        "item": {
          "id": "a2327114-6759-4493-a2e8-7922a647b6b9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1d10e610-8729-4003-9a8c-2fba2534220a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2327114-6759-4493-a2e8-7922a647b6b9",
        "cursor": {
          "ref": "b96b2b2f-7f15-4c27-b0ee-72c6ce4121d6",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5754b885-8f9a-469d-9bd4-625f73e58bb8"
        },
        "item": {
          "id": "a2327114-6759-4493-a2e8-7922a647b6b9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1d10e610-8729-4003-9a8c-2fba2534220a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8eea0e3-8508-405b-9b79-f0a4d1c8cbd1",
        "cursor": {
          "ref": "357122cf-a1a8-4222-8b10-a857b3da7bf4",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "07d1128b-e0bd-460c-a330-1f86031c8011"
        },
        "item": {
          "id": "e8eea0e3-8508-405b-9b79-f0a4d1c8cbd1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3445220e-f27d-4a9f-a8f8-6ded8abee8c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8eea0e3-8508-405b-9b79-f0a4d1c8cbd1",
        "cursor": {
          "ref": "357122cf-a1a8-4222-8b10-a857b3da7bf4",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "07d1128b-e0bd-460c-a330-1f86031c8011"
        },
        "item": {
          "id": "e8eea0e3-8508-405b-9b79-f0a4d1c8cbd1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3445220e-f27d-4a9f-a8f8-6ded8abee8c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab3e56f-d30d-493e-872a-becae053cbdf",
        "cursor": {
          "ref": "7bf0a0a0-ef03-454a-a337-e19541d4d7a5",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c14b674d-b461-4794-b5a4-de7da22af2d6"
        },
        "item": {
          "id": "3ab3e56f-d30d-493e-872a-becae053cbdf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6adb535b-b887-441c-9578-99f05bc2b2c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab3e56f-d30d-493e-872a-becae053cbdf",
        "cursor": {
          "ref": "7bf0a0a0-ef03-454a-a337-e19541d4d7a5",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c14b674d-b461-4794-b5a4-de7da22af2d6"
        },
        "item": {
          "id": "3ab3e56f-d30d-493e-872a-becae053cbdf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6adb535b-b887-441c-9578-99f05bc2b2c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e946dc-ba73-43c5-95a2-473501438054",
        "cursor": {
          "ref": "a14205c6-c05d-465a-a7d9-0ea5ed0243a6",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7463a572-1205-4d57-8e83-a8fc02f6a7d3"
        },
        "item": {
          "id": "23e946dc-ba73-43c5-95a2-473501438054",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5e7e789f-2f55-44a1-9f72-8cfd0c30b86c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e946dc-ba73-43c5-95a2-473501438054",
        "cursor": {
          "ref": "a14205c6-c05d-465a-a7d9-0ea5ed0243a6",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7463a572-1205-4d57-8e83-a8fc02f6a7d3"
        },
        "item": {
          "id": "23e946dc-ba73-43c5-95a2-473501438054",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5e7e789f-2f55-44a1-9f72-8cfd0c30b86c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ae26df-836a-4bdf-80ce-21e493896f0e",
        "cursor": {
          "ref": "46d84fe6-b49e-4361-82d3-e4c2a1ba76b7",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "67522edf-b136-4d3f-a1ad-e49ed0490579"
        },
        "item": {
          "id": "c6ae26df-836a-4bdf-80ce-21e493896f0e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cef43589-4dca-450d-9faf-1f6248cf4681",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ae26df-836a-4bdf-80ce-21e493896f0e",
        "cursor": {
          "ref": "46d84fe6-b49e-4361-82d3-e4c2a1ba76b7",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "67522edf-b136-4d3f-a1ad-e49ed0490579"
        },
        "item": {
          "id": "c6ae26df-836a-4bdf-80ce-21e493896f0e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cef43589-4dca-450d-9faf-1f6248cf4681",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185f3a08-c410-412e-91f4-fdfefb0d04a4",
        "cursor": {
          "ref": "f5d08da3-9419-4ec4-b7c0-b4ffd2422b49",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4ce71859-014a-447e-b111-14232f144676"
        },
        "item": {
          "id": "185f3a08-c410-412e-91f4-fdfefb0d04a4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "81a9b9f4-0241-4224-bc09-76a772171f60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185f3a08-c410-412e-91f4-fdfefb0d04a4",
        "cursor": {
          "ref": "f5d08da3-9419-4ec4-b7c0-b4ffd2422b49",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4ce71859-014a-447e-b111-14232f144676"
        },
        "item": {
          "id": "185f3a08-c410-412e-91f4-fdfefb0d04a4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "81a9b9f4-0241-4224-bc09-76a772171f60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6560098-521f-49de-8f2a-ccd7ee028161",
        "cursor": {
          "ref": "26b47848-48e2-4e64-80e7-786b3d5bf4d5",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "19f342ee-051d-4769-ab08-45b554c09bf2"
        },
        "item": {
          "id": "e6560098-521f-49de-8f2a-ccd7ee028161",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7859d4e9-092f-4628-9877-b77265af0717",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6560098-521f-49de-8f2a-ccd7ee028161",
        "cursor": {
          "ref": "26b47848-48e2-4e64-80e7-786b3d5bf4d5",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "19f342ee-051d-4769-ab08-45b554c09bf2"
        },
        "item": {
          "id": "e6560098-521f-49de-8f2a-ccd7ee028161",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7859d4e9-092f-4628-9877-b77265af0717",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a34e3ca-e3ad-44bf-b196-4839c18f707d",
        "cursor": {
          "ref": "35fec595-8d66-4465-ad66-9e6e384689bd",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f0bd7041-8ad5-48d6-8c67-617fc9666d00"
        },
        "item": {
          "id": "6a34e3ca-e3ad-44bf-b196-4839c18f707d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fbb4b91d-595e-412d-b6c3-9a474c500fad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a34e3ca-e3ad-44bf-b196-4839c18f707d",
        "cursor": {
          "ref": "35fec595-8d66-4465-ad66-9e6e384689bd",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f0bd7041-8ad5-48d6-8c67-617fc9666d00"
        },
        "item": {
          "id": "6a34e3ca-e3ad-44bf-b196-4839c18f707d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fbb4b91d-595e-412d-b6c3-9a474c500fad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1613f883-e08f-4b8b-8ccc-2a0e36ae843d",
        "cursor": {
          "ref": "d5a98b7b-1bf5-420a-83a2-ed3bba9ce3fe",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "93b77bf8-8955-4398-ba52-90b50a848b1e"
        },
        "item": {
          "id": "1613f883-e08f-4b8b-8ccc-2a0e36ae843d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "897ff723-3ea5-4ef8-ac8a-e2bb0ac621a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1613f883-e08f-4b8b-8ccc-2a0e36ae843d",
        "cursor": {
          "ref": "d5a98b7b-1bf5-420a-83a2-ed3bba9ce3fe",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "93b77bf8-8955-4398-ba52-90b50a848b1e"
        },
        "item": {
          "id": "1613f883-e08f-4b8b-8ccc-2a0e36ae843d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "897ff723-3ea5-4ef8-ac8a-e2bb0ac621a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89633969-c022-4d32-a0b8-a75b851eab3b",
        "cursor": {
          "ref": "35de133a-4dec-4848-b1ff-847a80681ef8",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1e82ee7a-54bb-4847-8a7f-018a3950ee77"
        },
        "item": {
          "id": "89633969-c022-4d32-a0b8-a75b851eab3b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dc557dab-b24b-422a-8c44-0a935aabb072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89633969-c022-4d32-a0b8-a75b851eab3b",
        "cursor": {
          "ref": "35de133a-4dec-4848-b1ff-847a80681ef8",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1e82ee7a-54bb-4847-8a7f-018a3950ee77"
        },
        "item": {
          "id": "89633969-c022-4d32-a0b8-a75b851eab3b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dc557dab-b24b-422a-8c44-0a935aabb072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1516ae97-5735-4ea7-9da7-8a4c3fb1f4cf",
        "cursor": {
          "ref": "af0c385b-81f4-4364-956b-a3a03dd744f7",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9d596879-3e9c-4ee8-aec1-50014df0ff43"
        },
        "item": {
          "id": "1516ae97-5735-4ea7-9da7-8a4c3fb1f4cf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5f02ef66-0169-4f26-bd28-6aa23f23865e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1516ae97-5735-4ea7-9da7-8a4c3fb1f4cf",
        "cursor": {
          "ref": "af0c385b-81f4-4364-956b-a3a03dd744f7",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9d596879-3e9c-4ee8-aec1-50014df0ff43"
        },
        "item": {
          "id": "1516ae97-5735-4ea7-9da7-8a4c3fb1f4cf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5f02ef66-0169-4f26-bd28-6aa23f23865e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2866f2dc-7201-43f1-84ec-644f0fe5a1ab",
        "cursor": {
          "ref": "1f878a08-9499-492d-a26d-edc5cdd048ea",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ab973835-bd11-403c-8300-c5de3fd350a4"
        },
        "item": {
          "id": "2866f2dc-7201-43f1-84ec-644f0fe5a1ab",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6c7ae5e6-08e7-4254-8288-de730026b09b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2866f2dc-7201-43f1-84ec-644f0fe5a1ab",
        "cursor": {
          "ref": "1f878a08-9499-492d-a26d-edc5cdd048ea",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ab973835-bd11-403c-8300-c5de3fd350a4"
        },
        "item": {
          "id": "2866f2dc-7201-43f1-84ec-644f0fe5a1ab",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6c7ae5e6-08e7-4254-8288-de730026b09b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650ba0e3-d340-41dd-975e-cfa94c5089d0",
        "cursor": {
          "ref": "fe0d2983-da82-471c-afdc-6446e12b6627",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cda6df3e-a8af-4fa5-982b-377103765097"
        },
        "item": {
          "id": "650ba0e3-d340-41dd-975e-cfa94c5089d0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "51780d2d-f4d6-4b7f-a61d-629c2b807a70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650ba0e3-d340-41dd-975e-cfa94c5089d0",
        "cursor": {
          "ref": "fe0d2983-da82-471c-afdc-6446e12b6627",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cda6df3e-a8af-4fa5-982b-377103765097"
        },
        "item": {
          "id": "650ba0e3-d340-41dd-975e-cfa94c5089d0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "51780d2d-f4d6-4b7f-a61d-629c2b807a70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca0ec1d-53f7-43e8-a8ff-c7362147cd58",
        "cursor": {
          "ref": "43909a3f-cab9-4f3b-b3a0-91c1b4468c04",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "09adffa9-de8d-4c3b-ade2-7d925c5a2044"
        },
        "item": {
          "id": "9ca0ec1d-53f7-43e8-a8ff-c7362147cd58",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ace4c4b8-b418-4e5f-8064-4d2a01499e70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca0ec1d-53f7-43e8-a8ff-c7362147cd58",
        "cursor": {
          "ref": "43909a3f-cab9-4f3b-b3a0-91c1b4468c04",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "09adffa9-de8d-4c3b-ade2-7d925c5a2044"
        },
        "item": {
          "id": "9ca0ec1d-53f7-43e8-a8ff-c7362147cd58",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ace4c4b8-b418-4e5f-8064-4d2a01499e70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce33a284-3984-4533-97e6-4e7287468687",
        "cursor": {
          "ref": "20a962aa-c8ac-4496-8207-f54be7c5ddfc",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5bb1b2fb-05b1-4cc5-a132-a482d9b8a312"
        },
        "item": {
          "id": "ce33a284-3984-4533-97e6-4e7287468687",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "508aff1b-02d4-4712-abdd-f777519fa5be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce33a284-3984-4533-97e6-4e7287468687",
        "cursor": {
          "ref": "20a962aa-c8ac-4496-8207-f54be7c5ddfc",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5bb1b2fb-05b1-4cc5-a132-a482d9b8a312"
        },
        "item": {
          "id": "ce33a284-3984-4533-97e6-4e7287468687",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "508aff1b-02d4-4712-abdd-f777519fa5be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d407a2b-feda-4a11-9457-52cb82742236",
        "cursor": {
          "ref": "1490536c-28ba-4693-814b-a5842aae4202",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "401166a6-34b0-4b4a-bad4-8031ca4d2a2f"
        },
        "item": {
          "id": "2d407a2b-feda-4a11-9457-52cb82742236",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8c5d1f91-ac25-45f4-a543-39e6cf1c9172",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d407a2b-feda-4a11-9457-52cb82742236",
        "cursor": {
          "ref": "1490536c-28ba-4693-814b-a5842aae4202",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "401166a6-34b0-4b4a-bad4-8031ca4d2a2f"
        },
        "item": {
          "id": "2d407a2b-feda-4a11-9457-52cb82742236",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8c5d1f91-ac25-45f4-a543-39e6cf1c9172",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21716c8-e5e0-4f22-a3fe-8216a1965514",
        "cursor": {
          "ref": "acadd6dc-686b-43e9-b2a6-26bd66ffb0b2",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "deeefcc3-2150-4281-8eb2-80ccdc1e0e93"
        },
        "item": {
          "id": "b21716c8-e5e0-4f22-a3fe-8216a1965514",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d578c9c5-0cda-4b90-9a47-77455219bd3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21716c8-e5e0-4f22-a3fe-8216a1965514",
        "cursor": {
          "ref": "acadd6dc-686b-43e9-b2a6-26bd66ffb0b2",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "deeefcc3-2150-4281-8eb2-80ccdc1e0e93"
        },
        "item": {
          "id": "b21716c8-e5e0-4f22-a3fe-8216a1965514",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d578c9c5-0cda-4b90-9a47-77455219bd3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef0492c-be43-49b6-9a70-5c267b687e8f",
        "cursor": {
          "ref": "df4e90db-0599-4ac8-bdb3-59cffaedca30",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "67d77d3c-9747-47e6-b3b1-f3e0bfc58ff5"
        },
        "item": {
          "id": "0ef0492c-be43-49b6-9a70-5c267b687e8f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d3692542-4d61-41b1-a71c-a35bd2796db8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef0492c-be43-49b6-9a70-5c267b687e8f",
        "cursor": {
          "ref": "df4e90db-0599-4ac8-bdb3-59cffaedca30",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "67d77d3c-9747-47e6-b3b1-f3e0bfc58ff5"
        },
        "item": {
          "id": "0ef0492c-be43-49b6-9a70-5c267b687e8f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d3692542-4d61-41b1-a71c-a35bd2796db8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf0dc44-5267-47db-a790-7ec351f77285",
        "cursor": {
          "ref": "b1f14336-a84a-4a93-94ee-9080ff185dbe",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "aa47f9ff-ae48-49f2-937a-8f0639b6df8f"
        },
        "item": {
          "id": "cdf0dc44-5267-47db-a790-7ec351f77285",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "66782401-4b79-4d32-b6e4-db7bfdef058e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf0dc44-5267-47db-a790-7ec351f77285",
        "cursor": {
          "ref": "b1f14336-a84a-4a93-94ee-9080ff185dbe",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "aa47f9ff-ae48-49f2-937a-8f0639b6df8f"
        },
        "item": {
          "id": "cdf0dc44-5267-47db-a790-7ec351f77285",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "66782401-4b79-4d32-b6e4-db7bfdef058e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c64294d-e57e-4600-a232-b115cca0ccb7",
        "cursor": {
          "ref": "dda8f37e-8ce5-4ed2-93bf-01b9dea3ad52",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "58007cdf-933a-4b50-b87a-dcd0f4aea9ad"
        },
        "item": {
          "id": "2c64294d-e57e-4600-a232-b115cca0ccb7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fc768dcb-106d-4ceb-beb0-4b0feafdad72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c64294d-e57e-4600-a232-b115cca0ccb7",
        "cursor": {
          "ref": "dda8f37e-8ce5-4ed2-93bf-01b9dea3ad52",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "58007cdf-933a-4b50-b87a-dcd0f4aea9ad"
        },
        "item": {
          "id": "2c64294d-e57e-4600-a232-b115cca0ccb7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fc768dcb-106d-4ceb-beb0-4b0feafdad72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a43dfd-96b2-4c32-b14a-2eb6c92c6195",
        "cursor": {
          "ref": "8b5f1610-a780-410f-b6a7-d89445cdf0d9",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "42f0cd75-8166-4a4d-a5ff-34261376f741"
        },
        "item": {
          "id": "04a43dfd-96b2-4c32-b14a-2eb6c92c6195",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cce4a85a-b9e9-4dc9-ae3e-62881317ee23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a43dfd-96b2-4c32-b14a-2eb6c92c6195",
        "cursor": {
          "ref": "8b5f1610-a780-410f-b6a7-d89445cdf0d9",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "42f0cd75-8166-4a4d-a5ff-34261376f741"
        },
        "item": {
          "id": "04a43dfd-96b2-4c32-b14a-2eb6c92c6195",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cce4a85a-b9e9-4dc9-ae3e-62881317ee23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba2e805-5d19-4f06-841e-3579453487c2",
        "cursor": {
          "ref": "e571455a-9207-4a2f-ac43-187f871d0a13",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "baad913e-3617-4e46-a14f-3ee988bec68e"
        },
        "item": {
          "id": "7ba2e805-5d19-4f06-841e-3579453487c2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b74a7bef-cead-4f28-8c77-a462e624775f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba2e805-5d19-4f06-841e-3579453487c2",
        "cursor": {
          "ref": "e571455a-9207-4a2f-ac43-187f871d0a13",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "baad913e-3617-4e46-a14f-3ee988bec68e"
        },
        "item": {
          "id": "7ba2e805-5d19-4f06-841e-3579453487c2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b74a7bef-cead-4f28-8c77-a462e624775f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22a0080-1d53-4e5f-b66f-51ba01f86828",
        "cursor": {
          "ref": "7a07ba36-5284-4bd3-96a7-a0be4179bd9c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e82f3396-7661-4e32-8838-38b5b09bed38"
        },
        "item": {
          "id": "c22a0080-1d53-4e5f-b66f-51ba01f86828",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d8dd2ab2-071d-4d7c-8f0a-86fd3ce6bcb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22a0080-1d53-4e5f-b66f-51ba01f86828",
        "cursor": {
          "ref": "7a07ba36-5284-4bd3-96a7-a0be4179bd9c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e82f3396-7661-4e32-8838-38b5b09bed38"
        },
        "item": {
          "id": "c22a0080-1d53-4e5f-b66f-51ba01f86828",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d8dd2ab2-071d-4d7c-8f0a-86fd3ce6bcb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7a2235-aa0c-4694-855e-45cd6a555285",
        "cursor": {
          "ref": "9bd37ba3-2658-4189-a7dd-c54652d2be72",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3794707b-89ce-489c-95f6-765913e815a8"
        },
        "item": {
          "id": "3e7a2235-aa0c-4694-855e-45cd6a555285",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3c8fdc41-d769-42ec-b389-26b7ea8f73ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7a2235-aa0c-4694-855e-45cd6a555285",
        "cursor": {
          "ref": "9bd37ba3-2658-4189-a7dd-c54652d2be72",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3794707b-89ce-489c-95f6-765913e815a8"
        },
        "item": {
          "id": "3e7a2235-aa0c-4694-855e-45cd6a555285",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3c8fdc41-d769-42ec-b389-26b7ea8f73ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af208a0-7b4d-4a3e-a51a-e6de1aacb2fa",
        "cursor": {
          "ref": "461d2e70-738b-48de-9e2b-ab0ed57274de",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "22a34345-9d89-48c3-8985-f0e6494b9c42"
        },
        "item": {
          "id": "0af208a0-7b4d-4a3e-a51a-e6de1aacb2fa",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fa79e35a-3016-4636-93d7-7959f7a6a0d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af208a0-7b4d-4a3e-a51a-e6de1aacb2fa",
        "cursor": {
          "ref": "461d2e70-738b-48de-9e2b-ab0ed57274de",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "22a34345-9d89-48c3-8985-f0e6494b9c42"
        },
        "item": {
          "id": "0af208a0-7b4d-4a3e-a51a-e6de1aacb2fa",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fa79e35a-3016-4636-93d7-7959f7a6a0d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c458ace2-1d90-49c8-bb28-910899e9f5dc",
        "cursor": {
          "ref": "18868d4c-2bd2-44f6-9a8f-645ac543f7eb",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eeca88b1-232b-4f9c-8164-6aaebd44026e"
        },
        "item": {
          "id": "c458ace2-1d90-49c8-bb28-910899e9f5dc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f36677de-fb6d-4c44-87a8-fc0b454cc1b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c458ace2-1d90-49c8-bb28-910899e9f5dc",
        "cursor": {
          "ref": "18868d4c-2bd2-44f6-9a8f-645ac543f7eb",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eeca88b1-232b-4f9c-8164-6aaebd44026e"
        },
        "item": {
          "id": "c458ace2-1d90-49c8-bb28-910899e9f5dc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f36677de-fb6d-4c44-87a8-fc0b454cc1b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffd9575-d4f5-423c-88a9-524ed1c8cd3a",
        "cursor": {
          "ref": "f592d3c0-f375-4632-a928-ceee4716400a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "32398cc7-7f64-4e5a-ac8e-d0020da57892"
        },
        "item": {
          "id": "4ffd9575-d4f5-423c-88a9-524ed1c8cd3a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0e65c3eb-7bb9-4d81-bf4d-98cd97b27f7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffd9575-d4f5-423c-88a9-524ed1c8cd3a",
        "cursor": {
          "ref": "f592d3c0-f375-4632-a928-ceee4716400a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "32398cc7-7f64-4e5a-ac8e-d0020da57892"
        },
        "item": {
          "id": "4ffd9575-d4f5-423c-88a9-524ed1c8cd3a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0e65c3eb-7bb9-4d81-bf4d-98cd97b27f7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60302cee-a109-4ddc-b52e-3d872aa11122",
        "cursor": {
          "ref": "55cc4ae5-783c-461f-8925-f17d886894f3",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7d698b31-42b2-4460-930f-63577f667707"
        },
        "item": {
          "id": "60302cee-a109-4ddc-b52e-3d872aa11122",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0b3130ee-ca42-45c2-8bbe-c2ca5f01b9c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60302cee-a109-4ddc-b52e-3d872aa11122",
        "cursor": {
          "ref": "55cc4ae5-783c-461f-8925-f17d886894f3",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7d698b31-42b2-4460-930f-63577f667707"
        },
        "item": {
          "id": "60302cee-a109-4ddc-b52e-3d872aa11122",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0b3130ee-ca42-45c2-8bbe-c2ca5f01b9c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2309fb5e-d1ef-4186-a38a-e908ef1352a7",
        "cursor": {
          "ref": "6f2305fe-150c-40ad-8f6f-9ddeba5dc380",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "75a8ccaf-9730-4d08-9f5f-2007b2754114"
        },
        "item": {
          "id": "2309fb5e-d1ef-4186-a38a-e908ef1352a7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "118a2038-b754-42d4-8006-d5759aa586cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2309fb5e-d1ef-4186-a38a-e908ef1352a7",
        "cursor": {
          "ref": "6f2305fe-150c-40ad-8f6f-9ddeba5dc380",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "75a8ccaf-9730-4d08-9f5f-2007b2754114"
        },
        "item": {
          "id": "2309fb5e-d1ef-4186-a38a-e908ef1352a7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "118a2038-b754-42d4-8006-d5759aa586cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50b2d65-a50a-422b-b216-1bedcaf4917d",
        "cursor": {
          "ref": "e32b3fdf-0d9f-479c-a3b7-09a5736eb4c0",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1829dd41-b1eb-4980-8334-6e82f5cdc1db"
        },
        "item": {
          "id": "c50b2d65-a50a-422b-b216-1bedcaf4917d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3929648a-382b-415c-8e51-9823b58a57c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50b2d65-a50a-422b-b216-1bedcaf4917d",
        "cursor": {
          "ref": "e32b3fdf-0d9f-479c-a3b7-09a5736eb4c0",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1829dd41-b1eb-4980-8334-6e82f5cdc1db"
        },
        "item": {
          "id": "c50b2d65-a50a-422b-b216-1bedcaf4917d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3929648a-382b-415c-8e51-9823b58a57c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313b9c1e-b825-4cd5-a91a-ac90288b89d2",
        "cursor": {
          "ref": "7841354b-c818-4d51-add6-c1419f54b8c3",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "900c4ab4-0e25-46d2-a390-1d233298d030"
        },
        "item": {
          "id": "313b9c1e-b825-4cd5-a91a-ac90288b89d2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4fe18a0c-0a96-48aa-91ec-f310f2756fc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313b9c1e-b825-4cd5-a91a-ac90288b89d2",
        "cursor": {
          "ref": "7841354b-c818-4d51-add6-c1419f54b8c3",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "900c4ab4-0e25-46d2-a390-1d233298d030"
        },
        "item": {
          "id": "313b9c1e-b825-4cd5-a91a-ac90288b89d2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4fe18a0c-0a96-48aa-91ec-f310f2756fc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b14c3f-7518-4fb3-be62-546af46c40f4",
        "cursor": {
          "ref": "cb4d5fef-aee6-4f19-b045-c7940b24759a",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7e6f8965-6018-46ac-a4c9-913b285dfb43"
        },
        "item": {
          "id": "a1b14c3f-7518-4fb3-be62-546af46c40f4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8e63e32d-85b1-4faf-8e12-24f12b020319",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b14c3f-7518-4fb3-be62-546af46c40f4",
        "cursor": {
          "ref": "cb4d5fef-aee6-4f19-b045-c7940b24759a",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7e6f8965-6018-46ac-a4c9-913b285dfb43"
        },
        "item": {
          "id": "a1b14c3f-7518-4fb3-be62-546af46c40f4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8e63e32d-85b1-4faf-8e12-24f12b020319",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9475178a-d57c-480c-9535-eeb935c4f773",
        "cursor": {
          "ref": "15cc62e3-99be-4561-a671-ef947607cfa3",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a854dfa9-6477-4649-93e1-9a51469ce930"
        },
        "item": {
          "id": "9475178a-d57c-480c-9535-eeb935c4f773",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3fba31c7-9af1-40ce-b7fe-8ed3a985448c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9475178a-d57c-480c-9535-eeb935c4f773",
        "cursor": {
          "ref": "15cc62e3-99be-4561-a671-ef947607cfa3",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a854dfa9-6477-4649-93e1-9a51469ce930"
        },
        "item": {
          "id": "9475178a-d57c-480c-9535-eeb935c4f773",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3fba31c7-9af1-40ce-b7fe-8ed3a985448c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1893c0a-a89c-4935-83b3-e65375a5fcb8",
        "cursor": {
          "ref": "9f3cf837-29bd-4a6a-8203-9eebe096de49",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "24a9df3b-605e-4edf-99ca-fd93e5e459cd"
        },
        "item": {
          "id": "f1893c0a-a89c-4935-83b3-e65375a5fcb8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "46a90c88-a9a1-4551-9386-82369a3750a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1893c0a-a89c-4935-83b3-e65375a5fcb8",
        "cursor": {
          "ref": "9f3cf837-29bd-4a6a-8203-9eebe096de49",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "24a9df3b-605e-4edf-99ca-fd93e5e459cd"
        },
        "item": {
          "id": "f1893c0a-a89c-4935-83b3-e65375a5fcb8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "46a90c88-a9a1-4551-9386-82369a3750a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5254e201-bda9-450c-94ef-a85b7365634f",
        "cursor": {
          "ref": "6ba2207b-8a8e-4a5a-aad5-ab6bd1d8584c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2146f67d-c089-4927-b8d0-fdf8684f00ed"
        },
        "item": {
          "id": "5254e201-bda9-450c-94ef-a85b7365634f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "be33cac1-fb27-450a-aa2e-baa449333ae8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5254e201-bda9-450c-94ef-a85b7365634f",
        "cursor": {
          "ref": "6ba2207b-8a8e-4a5a-aad5-ab6bd1d8584c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2146f67d-c089-4927-b8d0-fdf8684f00ed"
        },
        "item": {
          "id": "5254e201-bda9-450c-94ef-a85b7365634f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "be33cac1-fb27-450a-aa2e-baa449333ae8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58936c6e-78ba-45b4-9d4d-13a56c1080ed",
        "cursor": {
          "ref": "95b5f4a9-e335-4077-a7f8-0265ce667ed2",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f8e8da04-6168-4eae-99bc-4f835bef28b1"
        },
        "item": {
          "id": "58936c6e-78ba-45b4-9d4d-13a56c1080ed",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1b9afdc0-d05e-4757-ad26-4d247cd94a1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58936c6e-78ba-45b4-9d4d-13a56c1080ed",
        "cursor": {
          "ref": "95b5f4a9-e335-4077-a7f8-0265ce667ed2",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f8e8da04-6168-4eae-99bc-4f835bef28b1"
        },
        "item": {
          "id": "58936c6e-78ba-45b4-9d4d-13a56c1080ed",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1b9afdc0-d05e-4757-ad26-4d247cd94a1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb11168-e071-42c6-9d81-9cfed941680f",
        "cursor": {
          "ref": "b94f9d09-7754-40f0-aa98-24ac35e73774",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d073b9e4-8e08-4739-a989-52228313f246"
        },
        "item": {
          "id": "aeb11168-e071-42c6-9d81-9cfed941680f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c78444a9-7441-4370-9c30-299e0755c15a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb11168-e071-42c6-9d81-9cfed941680f",
        "cursor": {
          "ref": "b94f9d09-7754-40f0-aa98-24ac35e73774",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d073b9e4-8e08-4739-a989-52228313f246"
        },
        "item": {
          "id": "aeb11168-e071-42c6-9d81-9cfed941680f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c78444a9-7441-4370-9c30-299e0755c15a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e246ac2-407f-4d06-ac74-7aa9e218262e",
        "cursor": {
          "ref": "a7098921-138e-4270-8c22-55c9d4e5ccc6",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0d677d8d-d3b4-4d6a-833d-3d61f7b5265f"
        },
        "item": {
          "id": "2e246ac2-407f-4d06-ac74-7aa9e218262e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "613a0699-b93a-44b5-b9e6-1ba68011051c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e246ac2-407f-4d06-ac74-7aa9e218262e",
        "cursor": {
          "ref": "a7098921-138e-4270-8c22-55c9d4e5ccc6",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0d677d8d-d3b4-4d6a-833d-3d61f7b5265f"
        },
        "item": {
          "id": "2e246ac2-407f-4d06-ac74-7aa9e218262e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "613a0699-b93a-44b5-b9e6-1ba68011051c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7a3828-6738-4183-925f-767ab581f934",
        "cursor": {
          "ref": "aee9180c-2e81-4eb4-84dd-0677175f0ec5",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b4505820-1ace-402e-8c44-a06fb77abcc2"
        },
        "item": {
          "id": "df7a3828-6738-4183-925f-767ab581f934",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "baedb166-1c81-40ba-8cdb-e27363d08b74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7a3828-6738-4183-925f-767ab581f934",
        "cursor": {
          "ref": "aee9180c-2e81-4eb4-84dd-0677175f0ec5",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b4505820-1ace-402e-8c44-a06fb77abcc2"
        },
        "item": {
          "id": "df7a3828-6738-4183-925f-767ab581f934",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "baedb166-1c81-40ba-8cdb-e27363d08b74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e4ee17-6e61-4a95-a766-56e8759b8d40",
        "cursor": {
          "ref": "81215db1-50cb-40d1-8149-9ea4410edfb3",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2129cd83-ea57-45df-969e-34e37f587ea1"
        },
        "item": {
          "id": "77e4ee17-6e61-4a95-a766-56e8759b8d40",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "33149fbc-180b-44e9-97dd-c231ad68e199",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e4ee17-6e61-4a95-a766-56e8759b8d40",
        "cursor": {
          "ref": "81215db1-50cb-40d1-8149-9ea4410edfb3",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2129cd83-ea57-45df-969e-34e37f587ea1"
        },
        "item": {
          "id": "77e4ee17-6e61-4a95-a766-56e8759b8d40",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "33149fbc-180b-44e9-97dd-c231ad68e199",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4db72d2-b479-4ced-8525-3bd972ece8d0",
        "cursor": {
          "ref": "4a020e27-c4f0-4c14-8379-e90b4c53b21c",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "51b45c8f-c900-4e34-ba38-733fbed3680e"
        },
        "item": {
          "id": "b4db72d2-b479-4ced-8525-3bd972ece8d0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "21a024a1-cfb1-4bd6-859c-06f2a5f44e12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4db72d2-b479-4ced-8525-3bd972ece8d0",
        "cursor": {
          "ref": "4a020e27-c4f0-4c14-8379-e90b4c53b21c",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "51b45c8f-c900-4e34-ba38-733fbed3680e"
        },
        "item": {
          "id": "b4db72d2-b479-4ced-8525-3bd972ece8d0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "21a024a1-cfb1-4bd6-859c-06f2a5f44e12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c38351-b3aa-4324-856e-4a9ca5c51120",
        "cursor": {
          "ref": "883b3f6d-a7fd-45ca-a243-9603d7eecca4",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0193ea23-0956-4f01-9ec3-1d66105a805c"
        },
        "item": {
          "id": "03c38351-b3aa-4324-856e-4a9ca5c51120",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "163c9b64-dec1-4d79-b612-1bfa5c1381a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c38351-b3aa-4324-856e-4a9ca5c51120",
        "cursor": {
          "ref": "883b3f6d-a7fd-45ca-a243-9603d7eecca4",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0193ea23-0956-4f01-9ec3-1d66105a805c"
        },
        "item": {
          "id": "03c38351-b3aa-4324-856e-4a9ca5c51120",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "163c9b64-dec1-4d79-b612-1bfa5c1381a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4417a32a-c1f4-4838-ad30-5a899f324eba",
        "cursor": {
          "ref": "a9cb1641-c055-4760-9eb3-afc93344d58c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7889ae23-361b-4d42-872b-7b822217ece4"
        },
        "item": {
          "id": "4417a32a-c1f4-4838-ad30-5a899f324eba",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c0bcf574-c952-43cf-93e1-b424b89eb4a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4417a32a-c1f4-4838-ad30-5a899f324eba",
        "cursor": {
          "ref": "a9cb1641-c055-4760-9eb3-afc93344d58c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7889ae23-361b-4d42-872b-7b822217ece4"
        },
        "item": {
          "id": "4417a32a-c1f4-4838-ad30-5a899f324eba",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c0bcf574-c952-43cf-93e1-b424b89eb4a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3811bd-5ce3-43ec-b93f-41a6ae68a4eb",
        "cursor": {
          "ref": "8e7a4905-7928-483f-9fa6-7a667f797d77",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "bc26553f-9b37-4ea4-a2f0-5a52c7840b3d"
        },
        "item": {
          "id": "9f3811bd-5ce3-43ec-b93f-41a6ae68a4eb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a408930f-83a2-4e54-ba8b-fc62d633a866",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3811bd-5ce3-43ec-b93f-41a6ae68a4eb",
        "cursor": {
          "ref": "8e7a4905-7928-483f-9fa6-7a667f797d77",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "bc26553f-9b37-4ea4-a2f0-5a52c7840b3d"
        },
        "item": {
          "id": "9f3811bd-5ce3-43ec-b93f-41a6ae68a4eb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a408930f-83a2-4e54-ba8b-fc62d633a866",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae261398-391f-4c74-b335-6295491a6d6a",
        "cursor": {
          "ref": "4b38597a-c5e2-4b0a-ab3c-6d31b4f75e29",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1c235428-3f14-44a5-845a-f655f61164a8"
        },
        "item": {
          "id": "ae261398-391f-4c74-b335-6295491a6d6a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "17b4d8f5-32cc-4ab6-b89c-9bc4305fc9a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae261398-391f-4c74-b335-6295491a6d6a",
        "cursor": {
          "ref": "4b38597a-c5e2-4b0a-ab3c-6d31b4f75e29",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1c235428-3f14-44a5-845a-f655f61164a8"
        },
        "item": {
          "id": "ae261398-391f-4c74-b335-6295491a6d6a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "17b4d8f5-32cc-4ab6-b89c-9bc4305fc9a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39459cc8-05ab-457e-aac2-7e3c2c793470",
        "cursor": {
          "ref": "c2ce97d3-ca60-4220-b8ad-ed96e46c286c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6b3676f7-0d99-4898-807d-38b522eeb76d"
        },
        "item": {
          "id": "39459cc8-05ab-457e-aac2-7e3c2c793470",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "353b9563-8f43-440e-be4f-9bdbdc575a1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39459cc8-05ab-457e-aac2-7e3c2c793470",
        "cursor": {
          "ref": "c2ce97d3-ca60-4220-b8ad-ed96e46c286c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6b3676f7-0d99-4898-807d-38b522eeb76d"
        },
        "item": {
          "id": "39459cc8-05ab-457e-aac2-7e3c2c793470",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "353b9563-8f43-440e-be4f-9bdbdc575a1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f6f7f1-8438-4c53-9b6a-ed3cb7141896",
        "cursor": {
          "ref": "63728042-7112-47b7-ada7-b15fbcdff7d9",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7bd2078a-3fd2-42e5-89c0-af1329ba7558"
        },
        "item": {
          "id": "40f6f7f1-8438-4c53-9b6a-ed3cb7141896",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "71e96c89-3e2c-4339-a599-2407e79e9a1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f6f7f1-8438-4c53-9b6a-ed3cb7141896",
        "cursor": {
          "ref": "63728042-7112-47b7-ada7-b15fbcdff7d9",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7bd2078a-3fd2-42e5-89c0-af1329ba7558"
        },
        "item": {
          "id": "40f6f7f1-8438-4c53-9b6a-ed3cb7141896",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "71e96c89-3e2c-4339-a599-2407e79e9a1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7afa5c-436e-414f-9009-b231f360a116",
        "cursor": {
          "ref": "26ab2e17-4c58-4238-8251-1c6c2fe7f32e",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0b026668-a5d3-4337-80f1-2d0d69c46d75"
        },
        "item": {
          "id": "cc7afa5c-436e-414f-9009-b231f360a116",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6c427673-3497-4d7a-9431-5b139153d257",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7afa5c-436e-414f-9009-b231f360a116",
        "cursor": {
          "ref": "26ab2e17-4c58-4238-8251-1c6c2fe7f32e",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0b026668-a5d3-4337-80f1-2d0d69c46d75"
        },
        "item": {
          "id": "cc7afa5c-436e-414f-9009-b231f360a116",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6c427673-3497-4d7a-9431-5b139153d257",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f243c495-cf63-4d7b-9ebd-8150d4708f1a",
        "cursor": {
          "ref": "3521da74-25cb-4ae3-88a2-c3597f8a46cf",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6f557854-b519-4fa5-a681-1e23091743f8"
        },
        "item": {
          "id": "f243c495-cf63-4d7b-9ebd-8150d4708f1a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "88869a0f-cd0b-4543-b4aa-1bceb0b99310",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f243c495-cf63-4d7b-9ebd-8150d4708f1a",
        "cursor": {
          "ref": "3521da74-25cb-4ae3-88a2-c3597f8a46cf",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6f557854-b519-4fa5-a681-1e23091743f8"
        },
        "item": {
          "id": "f243c495-cf63-4d7b-9ebd-8150d4708f1a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "88869a0f-cd0b-4543-b4aa-1bceb0b99310",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102f1d06-4fa8-416d-a8b3-0ef53cf9904e",
        "cursor": {
          "ref": "50d083de-8aa2-46ba-b416-9e840acc5cf6",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6256f24a-fc8f-4d4c-be30-d19694e529b4"
        },
        "item": {
          "id": "102f1d06-4fa8-416d-a8b3-0ef53cf9904e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fa9c948d-5978-4264-bf25-3f8436532bb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102f1d06-4fa8-416d-a8b3-0ef53cf9904e",
        "cursor": {
          "ref": "50d083de-8aa2-46ba-b416-9e840acc5cf6",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6256f24a-fc8f-4d4c-be30-d19694e529b4"
        },
        "item": {
          "id": "102f1d06-4fa8-416d-a8b3-0ef53cf9904e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fa9c948d-5978-4264-bf25-3f8436532bb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd947ac-570e-4c2d-ac5f-140e476fc836",
        "cursor": {
          "ref": "73d61698-92a3-40a6-8959-048b5f91fa35",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "232ff712-1da9-4a86-aaba-8c89efa0e9d4"
        },
        "item": {
          "id": "2dd947ac-570e-4c2d-ac5f-140e476fc836",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "128c5191-aae9-438e-b1ad-62c83d09f819",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "2dd947ac-570e-4c2d-ac5f-140e476fc836",
        "cursor": {
          "ref": "73d61698-92a3-40a6-8959-048b5f91fa35",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "232ff712-1da9-4a86-aaba-8c89efa0e9d4"
        },
        "item": {
          "id": "2dd947ac-570e-4c2d-ac5f-140e476fc836",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "128c5191-aae9-438e-b1ad-62c83d09f819",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "954dd532-2e9a-45b3-9192-25affc4cae15",
        "cursor": {
          "ref": "0157a879-ecd2-404a-b942-cb8031a49a5b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8dfa0727-757d-4207-99c5-ff82b16871cf"
        },
        "item": {
          "id": "954dd532-2e9a-45b3-9192-25affc4cae15",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9ea3572c-85c4-430b-a673-6c62218ab268",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "954dd532-2e9a-45b3-9192-25affc4cae15",
        "cursor": {
          "ref": "0157a879-ecd2-404a-b942-cb8031a49a5b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8dfa0727-757d-4207-99c5-ff82b16871cf"
        },
        "item": {
          "id": "954dd532-2e9a-45b3-9192-25affc4cae15",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9ea3572c-85c4-430b-a673-6c62218ab268",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "b3858c79-65f7-41b7-978c-27a29e0fef01",
        "cursor": {
          "ref": "1cc18081-bfa8-4f21-b78c-0478be7e93fd",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ccf24989-1ade-4d0f-83fe-e59687abc2fb"
        },
        "item": {
          "id": "b3858c79-65f7-41b7-978c-27a29e0fef01",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f43bfbb9-7b5c-4b13-b1c9-5a578f9d0465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "b3858c79-65f7-41b7-978c-27a29e0fef01",
        "cursor": {
          "ref": "1cc18081-bfa8-4f21-b78c-0478be7e93fd",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ccf24989-1ade-4d0f-83fe-e59687abc2fb"
        },
        "item": {
          "id": "b3858c79-65f7-41b7-978c-27a29e0fef01",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f43bfbb9-7b5c-4b13-b1c9-5a578f9d0465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "44e00297-0f63-487b-9edc-3a8f419b4045",
        "cursor": {
          "ref": "07577d7a-89c6-4d44-b1c3-49da59bebebb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ba12ff71-7d3e-4afc-b45b-b9935f34979a"
        },
        "item": {
          "id": "44e00297-0f63-487b-9edc-3a8f419b4045",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b70a9151-6950-4197-8e18-723353ca3865",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "44e00297-0f63-487b-9edc-3a8f419b4045",
        "cursor": {
          "ref": "07577d7a-89c6-4d44-b1c3-49da59bebebb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ba12ff71-7d3e-4afc-b45b-b9935f34979a"
        },
        "item": {
          "id": "44e00297-0f63-487b-9edc-3a8f419b4045",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b70a9151-6950-4197-8e18-723353ca3865",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "55a893a0-9f06-4525-bb55-edb2daa01d65",
        "cursor": {
          "ref": "f30fd3dc-632b-4b5f-b129-8b7f65708a74",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b2ad67a2-4bba-4bd6-a407-2329889c5b91"
        },
        "item": {
          "id": "55a893a0-9f06-4525-bb55-edb2daa01d65",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "dd81ad97-aaea-49ac-bf39-c1c607f5f7dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "55a893a0-9f06-4525-bb55-edb2daa01d65",
        "cursor": {
          "ref": "f30fd3dc-632b-4b5f-b129-8b7f65708a74",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b2ad67a2-4bba-4bd6-a407-2329889c5b91"
        },
        "item": {
          "id": "55a893a0-9f06-4525-bb55-edb2daa01d65",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "dd81ad97-aaea-49ac-bf39-c1c607f5f7dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "1dfa9c52-e5e8-48a2-9596-43cc59082486",
        "cursor": {
          "ref": "1189f223-f9d4-4af2-814d-0ecc48acd88c",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "548cb3ed-b798-483d-b260-31bd56a98b1e"
        },
        "item": {
          "id": "1dfa9c52-e5e8-48a2-9596-43cc59082486",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "505eb57d-fc6e-4cde-98b5-d96b33e9b7d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1dfa9c52-e5e8-48a2-9596-43cc59082486",
        "cursor": {
          "ref": "1189f223-f9d4-4af2-814d-0ecc48acd88c",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "548cb3ed-b798-483d-b260-31bd56a98b1e"
        },
        "item": {
          "id": "1dfa9c52-e5e8-48a2-9596-43cc59082486",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "505eb57d-fc6e-4cde-98b5-d96b33e9b7d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "14e5abf6-98d4-4baa-a7c1-47bed6a4efc2",
        "cursor": {
          "ref": "c9b8dd7a-3211-4c49-8670-5563dc61bbc9",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "76a8a2b5-5714-4e35-b95e-947f38ab7acb"
        },
        "item": {
          "id": "14e5abf6-98d4-4baa-a7c1-47bed6a4efc2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2247cd49-6d3a-4e1f-891b-60fa0c9ab89d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "14e5abf6-98d4-4baa-a7c1-47bed6a4efc2",
        "cursor": {
          "ref": "c9b8dd7a-3211-4c49-8670-5563dc61bbc9",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "76a8a2b5-5714-4e35-b95e-947f38ab7acb"
        },
        "item": {
          "id": "14e5abf6-98d4-4baa-a7c1-47bed6a4efc2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2247cd49-6d3a-4e1f-891b-60fa0c9ab89d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "cc94a692-a0ac-4cc7-83ee-c8773dd371f0",
        "cursor": {
          "ref": "920ffea1-0568-4ec8-a5d6-01024e219375",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6418d558-9acf-48d1-8e91-20605ebfaa6e"
        },
        "item": {
          "id": "cc94a692-a0ac-4cc7-83ee-c8773dd371f0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3062e826-2b69-4896-be6a-99f02bf51c8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc94a692-a0ac-4cc7-83ee-c8773dd371f0",
        "cursor": {
          "ref": "920ffea1-0568-4ec8-a5d6-01024e219375",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6418d558-9acf-48d1-8e91-20605ebfaa6e"
        },
        "item": {
          "id": "cc94a692-a0ac-4cc7-83ee-c8773dd371f0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3062e826-2b69-4896-be6a-99f02bf51c8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e0dd22-d03e-4d80-ac1a-3b6d281bec51",
        "cursor": {
          "ref": "4be3fabd-1fd8-453a-a171-8c23d60a7461",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "755e75f8-76e7-4557-9632-e1e5dfa662e3"
        },
        "item": {
          "id": "a6e0dd22-d03e-4d80-ac1a-3b6d281bec51",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cb9c9d59-73f8-4987-9b17-7ca07ea9dc6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e0dd22-d03e-4d80-ac1a-3b6d281bec51",
        "cursor": {
          "ref": "4be3fabd-1fd8-453a-a171-8c23d60a7461",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "755e75f8-76e7-4557-9632-e1e5dfa662e3"
        },
        "item": {
          "id": "a6e0dd22-d03e-4d80-ac1a-3b6d281bec51",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cb9c9d59-73f8-4987-9b17-7ca07ea9dc6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a9660c-7b91-4187-a318-ae7fe233d5f6",
        "cursor": {
          "ref": "9089e508-d679-4b68-b71d-33728ba66965",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4d674c56-3053-413f-b358-25faf2fcf2be"
        },
        "item": {
          "id": "f3a9660c-7b91-4187-a318-ae7fe233d5f6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "20ceff73-7f24-402d-b15b-23b3e437fbab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a9660c-7b91-4187-a318-ae7fe233d5f6",
        "cursor": {
          "ref": "9089e508-d679-4b68-b71d-33728ba66965",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4d674c56-3053-413f-b358-25faf2fcf2be"
        },
        "item": {
          "id": "f3a9660c-7b91-4187-a318-ae7fe233d5f6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "20ceff73-7f24-402d-b15b-23b3e437fbab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2f0dde-e462-487b-9d49-251b6e34b6c1",
        "cursor": {
          "ref": "79c8b0ba-30cd-464e-98a3-d194d9869bcf",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fd423bc1-5aa9-488d-80fb-b510fcd9f3e8"
        },
        "item": {
          "id": "eb2f0dde-e462-487b-9d49-251b6e34b6c1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "89c6f9b9-8f0a-4cf3-8acf-88d2c3b8f521",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2f0dde-e462-487b-9d49-251b6e34b6c1",
        "cursor": {
          "ref": "79c8b0ba-30cd-464e-98a3-d194d9869bcf",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fd423bc1-5aa9-488d-80fb-b510fcd9f3e8"
        },
        "item": {
          "id": "eb2f0dde-e462-487b-9d49-251b6e34b6c1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "89c6f9b9-8f0a-4cf3-8acf-88d2c3b8f521",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3256b6-ef29-4bdc-b423-8ecb41adb248",
        "cursor": {
          "ref": "5028a60b-cdf8-430f-892d-04c72ffd0e2b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3ab811e3-f96a-4985-91ba-1cdffc2fb3c2"
        },
        "item": {
          "id": "0a3256b6-ef29-4bdc-b423-8ecb41adb248",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3547aeea-fcf9-47b8-a2e4-bf83000b4fa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3256b6-ef29-4bdc-b423-8ecb41adb248",
        "cursor": {
          "ref": "5028a60b-cdf8-430f-892d-04c72ffd0e2b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3ab811e3-f96a-4985-91ba-1cdffc2fb3c2"
        },
        "item": {
          "id": "0a3256b6-ef29-4bdc-b423-8ecb41adb248",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3547aeea-fcf9-47b8-a2e4-bf83000b4fa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643685ff-9956-4872-926b-413481940e06",
        "cursor": {
          "ref": "dbe1867d-1d6a-4be1-bca1-f5f10a399e9c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "98f56bbf-5d78-4526-8c84-44f7fd7382b2"
        },
        "item": {
          "id": "643685ff-9956-4872-926b-413481940e06",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c6fa8542-4f22-4893-8ce1-6a1ddff5feae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643685ff-9956-4872-926b-413481940e06",
        "cursor": {
          "ref": "dbe1867d-1d6a-4be1-bca1-f5f10a399e9c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "98f56bbf-5d78-4526-8c84-44f7fd7382b2"
        },
        "item": {
          "id": "643685ff-9956-4872-926b-413481940e06",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c6fa8542-4f22-4893-8ce1-6a1ddff5feae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517ce61c-fbe8-48d4-aa50-5017ab6ea8af",
        "cursor": {
          "ref": "bfea57d4-e856-4353-9126-4c47be0ca4fe",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8b4a080a-072c-452b-8fd1-3494253569b7"
        },
        "item": {
          "id": "517ce61c-fbe8-48d4-aa50-5017ab6ea8af",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e3725384-399f-405b-900f-1daf552c384a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517ce61c-fbe8-48d4-aa50-5017ab6ea8af",
        "cursor": {
          "ref": "bfea57d4-e856-4353-9126-4c47be0ca4fe",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8b4a080a-072c-452b-8fd1-3494253569b7"
        },
        "item": {
          "id": "517ce61c-fbe8-48d4-aa50-5017ab6ea8af",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e3725384-399f-405b-900f-1daf552c384a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0034ef4f-32a8-4136-b74d-bd69ad2e3a8b",
        "cursor": {
          "ref": "a006d609-64c9-43d7-9bfc-89bf696e7602",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7b805007-374c-4368-a8ba-591bb64673c3"
        },
        "item": {
          "id": "0034ef4f-32a8-4136-b74d-bd69ad2e3a8b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "396eadb0-af0e-489e-981f-1ecdd28eebb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0034ef4f-32a8-4136-b74d-bd69ad2e3a8b",
        "cursor": {
          "ref": "a006d609-64c9-43d7-9bfc-89bf696e7602",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7b805007-374c-4368-a8ba-591bb64673c3"
        },
        "item": {
          "id": "0034ef4f-32a8-4136-b74d-bd69ad2e3a8b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "396eadb0-af0e-489e-981f-1ecdd28eebb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211b791c-3a96-47b6-bbf3-3ac830c3fa31",
        "cursor": {
          "ref": "e02805a9-c240-4ff0-9de3-7d1e7a351736",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bb93ba8d-664b-48d2-a60c-6fa8ebb7cde8"
        },
        "item": {
          "id": "211b791c-3a96-47b6-bbf3-3ac830c3fa31",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c92673e5-1651-421b-b1ad-46ebfd866eb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211b791c-3a96-47b6-bbf3-3ac830c3fa31",
        "cursor": {
          "ref": "e02805a9-c240-4ff0-9de3-7d1e7a351736",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bb93ba8d-664b-48d2-a60c-6fa8ebb7cde8"
        },
        "item": {
          "id": "211b791c-3a96-47b6-bbf3-3ac830c3fa31",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c92673e5-1651-421b-b1ad-46ebfd866eb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7865df6-31d6-4731-a0a6-0f983e2694ba",
        "cursor": {
          "ref": "7a5a89c1-9d70-4ced-8c99-c5a5445558c7",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d6eb33bc-40f5-4dbb-9e29-3125eb67ac87"
        },
        "item": {
          "id": "c7865df6-31d6-4731-a0a6-0f983e2694ba",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dcc578d5-48ad-4a53-b22a-3a03bfeb9e9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7865df6-31d6-4731-a0a6-0f983e2694ba",
        "cursor": {
          "ref": "7a5a89c1-9d70-4ced-8c99-c5a5445558c7",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d6eb33bc-40f5-4dbb-9e29-3125eb67ac87"
        },
        "item": {
          "id": "c7865df6-31d6-4731-a0a6-0f983e2694ba",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dcc578d5-48ad-4a53-b22a-3a03bfeb9e9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8c8741-a77c-453f-9d87-7132be4a1db0",
        "cursor": {
          "ref": "d3e05112-3e55-4b12-84cf-1a3b88942d60",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e7df2a20-57fd-4c48-9b79-adbf0667b7bc"
        },
        "item": {
          "id": "1c8c8741-a77c-453f-9d87-7132be4a1db0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ac8bece0-2265-4b59-9f24-930899872ff3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8c8741-a77c-453f-9d87-7132be4a1db0",
        "cursor": {
          "ref": "d3e05112-3e55-4b12-84cf-1a3b88942d60",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e7df2a20-57fd-4c48-9b79-adbf0667b7bc"
        },
        "item": {
          "id": "1c8c8741-a77c-453f-9d87-7132be4a1db0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ac8bece0-2265-4b59-9f24-930899872ff3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8233a1f2-a0b0-4630-8eab-7da7d50804c5",
        "cursor": {
          "ref": "0d77a4c2-b796-4c63-b1b3-bf76ba9e32e1",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "804cc81a-bd03-46cc-85d6-fdcbca5287c7"
        },
        "item": {
          "id": "8233a1f2-a0b0-4630-8eab-7da7d50804c5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8bc26db2-0c60-4534-a5e9-cc09f1d5bde4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8233a1f2-a0b0-4630-8eab-7da7d50804c5",
        "cursor": {
          "ref": "0d77a4c2-b796-4c63-b1b3-bf76ba9e32e1",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "804cc81a-bd03-46cc-85d6-fdcbca5287c7"
        },
        "item": {
          "id": "8233a1f2-a0b0-4630-8eab-7da7d50804c5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8bc26db2-0c60-4534-a5e9-cc09f1d5bde4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7998de20-8bcd-4d49-bbee-05a50ce29eeb",
        "cursor": {
          "ref": "9e94caf3-9546-496a-9512-37eb02dd26f8",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cba3f270-9a84-45c3-a41c-67eb3887ebfc"
        },
        "item": {
          "id": "7998de20-8bcd-4d49-bbee-05a50ce29eeb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f00bf720-20f9-468e-b0d7-c6db2df2f73a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7998de20-8bcd-4d49-bbee-05a50ce29eeb",
        "cursor": {
          "ref": "9e94caf3-9546-496a-9512-37eb02dd26f8",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cba3f270-9a84-45c3-a41c-67eb3887ebfc"
        },
        "item": {
          "id": "7998de20-8bcd-4d49-bbee-05a50ce29eeb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f00bf720-20f9-468e-b0d7-c6db2df2f73a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ed1db9-5755-4b1b-9686-9905e9c827a9",
        "cursor": {
          "ref": "a5714786-7626-45df-8431-e9237b3d1d5e",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f848c2c8-040f-46a4-af64-e15a0ea0831e"
        },
        "item": {
          "id": "70ed1db9-5755-4b1b-9686-9905e9c827a9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6b6deec9-f740-4080-a01e-c1e0db631757",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ed1db9-5755-4b1b-9686-9905e9c827a9",
        "cursor": {
          "ref": "a5714786-7626-45df-8431-e9237b3d1d5e",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f848c2c8-040f-46a4-af64-e15a0ea0831e"
        },
        "item": {
          "id": "70ed1db9-5755-4b1b-9686-9905e9c827a9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6b6deec9-f740-4080-a01e-c1e0db631757",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf12912-93f4-41b5-9de0-84020252ba01",
        "cursor": {
          "ref": "6d9da3ff-24cc-4ef6-86a9-1d11d58faf82",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fd03e88a-9e5f-4038-9f53-8633e738df78"
        },
        "item": {
          "id": "ccf12912-93f4-41b5-9de0-84020252ba01",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "090dfdf9-4d3f-4e7b-b744-5f327fb6d349",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf12912-93f4-41b5-9de0-84020252ba01",
        "cursor": {
          "ref": "6d9da3ff-24cc-4ef6-86a9-1d11d58faf82",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fd03e88a-9e5f-4038-9f53-8633e738df78"
        },
        "item": {
          "id": "ccf12912-93f4-41b5-9de0-84020252ba01",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "090dfdf9-4d3f-4e7b-b744-5f327fb6d349",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252fad6c-86b4-4445-b5c6-592e948085e6",
        "cursor": {
          "ref": "20625209-0fb8-4f03-adcf-b86476e5d8e9",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a74f0c3d-9020-4ed4-a4a0-20f5cbbe1a6b"
        },
        "item": {
          "id": "252fad6c-86b4-4445-b5c6-592e948085e6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b822f9d6-480f-47bd-ba07-25e88fe93ba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252fad6c-86b4-4445-b5c6-592e948085e6",
        "cursor": {
          "ref": "20625209-0fb8-4f03-adcf-b86476e5d8e9",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a74f0c3d-9020-4ed4-a4a0-20f5cbbe1a6b"
        },
        "item": {
          "id": "252fad6c-86b4-4445-b5c6-592e948085e6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b822f9d6-480f-47bd-ba07-25e88fe93ba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c776cbf2-f945-4d97-8398-06050648d6e8",
        "cursor": {
          "ref": "d4e084b3-c01d-4942-8e69-686422f9ba06",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b3c1d0a7-09cf-4155-9e8c-295509d2ee9b"
        },
        "item": {
          "id": "c776cbf2-f945-4d97-8398-06050648d6e8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4ba2bb0f-5a11-4adf-862d-f45bcefab90a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c776cbf2-f945-4d97-8398-06050648d6e8",
        "cursor": {
          "ref": "d4e084b3-c01d-4942-8e69-686422f9ba06",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b3c1d0a7-09cf-4155-9e8c-295509d2ee9b"
        },
        "item": {
          "id": "c776cbf2-f945-4d97-8398-06050648d6e8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4ba2bb0f-5a11-4adf-862d-f45bcefab90a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdb8523-70ac-4a87-9939-913d4250143d",
        "cursor": {
          "ref": "79ab5f0e-1208-42aa-8e51-4bf8cd1e28b4",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "54f2f992-7877-4e7e-b2c3-5167cb0a565c"
        },
        "item": {
          "id": "1fdb8523-70ac-4a87-9939-913d4250143d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "92219031-a0f0-471e-b635-69d9dbe5ac1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdb8523-70ac-4a87-9939-913d4250143d",
        "cursor": {
          "ref": "79ab5f0e-1208-42aa-8e51-4bf8cd1e28b4",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "54f2f992-7877-4e7e-b2c3-5167cb0a565c"
        },
        "item": {
          "id": "1fdb8523-70ac-4a87-9939-913d4250143d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "92219031-a0f0-471e-b635-69d9dbe5ac1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e873d1-b264-422e-8c5c-49e36ae3b38d",
        "cursor": {
          "ref": "be83a33b-2ebc-4dee-b758-40db096be338",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1d1fae77-92b7-45aa-96b1-89f9b30b123d"
        },
        "item": {
          "id": "c8e873d1-b264-422e-8c5c-49e36ae3b38d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ddcf1979-c47b-44d9-9a1e-8b32142ea2bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e873d1-b264-422e-8c5c-49e36ae3b38d",
        "cursor": {
          "ref": "be83a33b-2ebc-4dee-b758-40db096be338",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1d1fae77-92b7-45aa-96b1-89f9b30b123d"
        },
        "item": {
          "id": "c8e873d1-b264-422e-8c5c-49e36ae3b38d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ddcf1979-c47b-44d9-9a1e-8b32142ea2bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6daebe81-664e-46c7-8653-1f25da7d033f",
        "cursor": {
          "ref": "2ed77c31-40e8-4fcb-9e9f-a60e2f79a202",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1a37a80a-0ea7-4ec4-a414-737f5310afe9"
        },
        "item": {
          "id": "6daebe81-664e-46c7-8653-1f25da7d033f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f663ea80-596e-4f60-ae4a-5dd817df3721",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6daebe81-664e-46c7-8653-1f25da7d033f",
        "cursor": {
          "ref": "2ed77c31-40e8-4fcb-9e9f-a60e2f79a202",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1a37a80a-0ea7-4ec4-a414-737f5310afe9"
        },
        "item": {
          "id": "6daebe81-664e-46c7-8653-1f25da7d033f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f663ea80-596e-4f60-ae4a-5dd817df3721",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bb83fe-0291-4319-a450-84efa48b4d0d",
        "cursor": {
          "ref": "b56b7652-c1e0-4d71-8e0a-10a86dfeb7ac",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0a65ae13-1964-4e73-8b4f-8a17c64391af"
        },
        "item": {
          "id": "c3bb83fe-0291-4319-a450-84efa48b4d0d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "758e0460-b2bb-4c55-9ab4-033f915b8ef7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bb83fe-0291-4319-a450-84efa48b4d0d",
        "cursor": {
          "ref": "b56b7652-c1e0-4d71-8e0a-10a86dfeb7ac",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0a65ae13-1964-4e73-8b4f-8a17c64391af"
        },
        "item": {
          "id": "c3bb83fe-0291-4319-a450-84efa48b4d0d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "758e0460-b2bb-4c55-9ab4-033f915b8ef7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7180cc1e-04d5-46bb-80ed-e6f414fd7716",
        "cursor": {
          "ref": "2b3a2e53-24d8-4ba2-86d0-492cf0e1f4fa",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c0d5d910-2bdf-4599-8718-ab6518dbc394"
        },
        "item": {
          "id": "7180cc1e-04d5-46bb-80ed-e6f414fd7716",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "abb1fd33-08d1-4465-9c1b-dafbd0bfeb5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7180cc1e-04d5-46bb-80ed-e6f414fd7716",
        "cursor": {
          "ref": "2b3a2e53-24d8-4ba2-86d0-492cf0e1f4fa",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c0d5d910-2bdf-4599-8718-ab6518dbc394"
        },
        "item": {
          "id": "7180cc1e-04d5-46bb-80ed-e6f414fd7716",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "abb1fd33-08d1-4465-9c1b-dafbd0bfeb5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92abef7-d517-4287-b714-6c8b9b5dcba7",
        "cursor": {
          "ref": "598a90c3-d7d4-4230-ae4e-117f2d4fda88",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "58c50c36-0a8a-485b-90d9-34ff4394e8bd"
        },
        "item": {
          "id": "b92abef7-d517-4287-b714-6c8b9b5dcba7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b21e06fa-a0c6-423d-8686-8b53a07f7e36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92abef7-d517-4287-b714-6c8b9b5dcba7",
        "cursor": {
          "ref": "598a90c3-d7d4-4230-ae4e-117f2d4fda88",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "58c50c36-0a8a-485b-90d9-34ff4394e8bd"
        },
        "item": {
          "id": "b92abef7-d517-4287-b714-6c8b9b5dcba7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b21e06fa-a0c6-423d-8686-8b53a07f7e36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53515706-065b-4f7d-85ad-362326d095f9",
        "cursor": {
          "ref": "b66b4ef6-a289-494d-9046-8262a34e1324",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "29ff1555-f589-489c-860d-ab1b72ca9d27"
        },
        "item": {
          "id": "53515706-065b-4f7d-85ad-362326d095f9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d98364d5-d85b-4e59-a4a9-31cc58886abc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53515706-065b-4f7d-85ad-362326d095f9",
        "cursor": {
          "ref": "b66b4ef6-a289-494d-9046-8262a34e1324",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "29ff1555-f589-489c-860d-ab1b72ca9d27"
        },
        "item": {
          "id": "53515706-065b-4f7d-85ad-362326d095f9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d98364d5-d85b-4e59-a4a9-31cc58886abc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62737d5f-cc4d-46b3-a752-7c3c775c56e3",
        "cursor": {
          "ref": "1d71a666-26ab-4a3e-96c2-9a409380d1d4",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "44e394ba-4cff-424b-94f5-1efd7b0bd71e"
        },
        "item": {
          "id": "62737d5f-cc4d-46b3-a752-7c3c775c56e3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1936cb42-ddd7-48ec-9112-c6e3dde8034b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62737d5f-cc4d-46b3-a752-7c3c775c56e3",
        "cursor": {
          "ref": "1d71a666-26ab-4a3e-96c2-9a409380d1d4",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "44e394ba-4cff-424b-94f5-1efd7b0bd71e"
        },
        "item": {
          "id": "62737d5f-cc4d-46b3-a752-7c3c775c56e3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1936cb42-ddd7-48ec-9112-c6e3dde8034b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e24d31-11c0-4af0-b81a-110148ce7883",
        "cursor": {
          "ref": "568b9018-9ddf-4596-a50b-9e056d6eb817",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7046edab-ffa4-4bab-bfa5-dc56f626abc0"
        },
        "item": {
          "id": "67e24d31-11c0-4af0-b81a-110148ce7883",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3422ec90-5336-42d7-9e60-7925902dfa2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e24d31-11c0-4af0-b81a-110148ce7883",
        "cursor": {
          "ref": "568b9018-9ddf-4596-a50b-9e056d6eb817",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7046edab-ffa4-4bab-bfa5-dc56f626abc0"
        },
        "item": {
          "id": "67e24d31-11c0-4af0-b81a-110148ce7883",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3422ec90-5336-42d7-9e60-7925902dfa2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78dcdd61-f4f6-4bfe-bbfe-79a3d9bd9da3",
        "cursor": {
          "ref": "775e2d54-df37-49bc-9cb7-9d7326fdbb2a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9f05af67-f7d3-4d3d-bab3-f52a43b9efd9"
        },
        "item": {
          "id": "78dcdd61-f4f6-4bfe-bbfe-79a3d9bd9da3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "455ea770-8ae5-4252-8bd3-d71a9785fb6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78dcdd61-f4f6-4bfe-bbfe-79a3d9bd9da3",
        "cursor": {
          "ref": "775e2d54-df37-49bc-9cb7-9d7326fdbb2a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9f05af67-f7d3-4d3d-bab3-f52a43b9efd9"
        },
        "item": {
          "id": "78dcdd61-f4f6-4bfe-bbfe-79a3d9bd9da3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "455ea770-8ae5-4252-8bd3-d71a9785fb6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2264a7d6-65fb-4d28-9c92-fd5d94e1546c",
        "cursor": {
          "ref": "e1593b59-dd1b-4c9e-b5d4-89f22b8cbb28",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1b29743c-b106-4ab5-a0df-d400f7a82bac"
        },
        "item": {
          "id": "2264a7d6-65fb-4d28-9c92-fd5d94e1546c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a468f033-e550-40c6-bd2c-89452bfc7799",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2264a7d6-65fb-4d28-9c92-fd5d94e1546c",
        "cursor": {
          "ref": "e1593b59-dd1b-4c9e-b5d4-89f22b8cbb28",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1b29743c-b106-4ab5-a0df-d400f7a82bac"
        },
        "item": {
          "id": "2264a7d6-65fb-4d28-9c92-fd5d94e1546c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a468f033-e550-40c6-bd2c-89452bfc7799",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9dbf9b-1f22-4c57-8de5-dd4ecdee3b6c",
        "cursor": {
          "ref": "bf8daa4e-16d3-4a89-b80b-46f4a45ad295",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "918e01d3-8c0f-48f7-bac1-21968768146f"
        },
        "item": {
          "id": "aa9dbf9b-1f22-4c57-8de5-dd4ecdee3b6c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f5f51ffe-7f5e-450c-9ba2-f02a9a861a0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9dbf9b-1f22-4c57-8de5-dd4ecdee3b6c",
        "cursor": {
          "ref": "bf8daa4e-16d3-4a89-b80b-46f4a45ad295",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "918e01d3-8c0f-48f7-bac1-21968768146f"
        },
        "item": {
          "id": "aa9dbf9b-1f22-4c57-8de5-dd4ecdee3b6c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f5f51ffe-7f5e-450c-9ba2-f02a9a861a0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c1e225-b144-4310-b8b6-c448316d645d",
        "cursor": {
          "ref": "c8e950e4-260f-4517-b759-ff69bb0210dc",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3264cee4-2d1e-432d-b6b8-4b20be836568"
        },
        "item": {
          "id": "16c1e225-b144-4310-b8b6-c448316d645d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b45b46d4-8a5b-4112-918a-b2a204bed1d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c1e225-b144-4310-b8b6-c448316d645d",
        "cursor": {
          "ref": "c8e950e4-260f-4517-b759-ff69bb0210dc",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3264cee4-2d1e-432d-b6b8-4b20be836568"
        },
        "item": {
          "id": "16c1e225-b144-4310-b8b6-c448316d645d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b45b46d4-8a5b-4112-918a-b2a204bed1d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeb45e8-c3f0-42c6-ab76-51940c86ff88",
        "cursor": {
          "ref": "2c2f98dd-4bcb-4ec7-b07f-54754392661e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "080e29c8-9da9-44e5-aabc-40acc6c78d33"
        },
        "item": {
          "id": "aeeb45e8-c3f0-42c6-ab76-51940c86ff88",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f82b6297-79d3-414f-b0fc-d7a2ec63bf1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeb45e8-c3f0-42c6-ab76-51940c86ff88",
        "cursor": {
          "ref": "2c2f98dd-4bcb-4ec7-b07f-54754392661e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "080e29c8-9da9-44e5-aabc-40acc6c78d33"
        },
        "item": {
          "id": "aeeb45e8-c3f0-42c6-ab76-51940c86ff88",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f82b6297-79d3-414f-b0fc-d7a2ec63bf1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d653733-bb2b-43e7-a7c5-49bf2b494f70",
        "cursor": {
          "ref": "8f43b330-269e-4a5c-a34f-f282b18c25ab",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0cedac9d-58ef-4324-915a-261caa184e8f"
        },
        "item": {
          "id": "0d653733-bb2b-43e7-a7c5-49bf2b494f70",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4256ac52-097c-4ae6-b53e-4f76e9162daf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d653733-bb2b-43e7-a7c5-49bf2b494f70",
        "cursor": {
          "ref": "8f43b330-269e-4a5c-a34f-f282b18c25ab",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0cedac9d-58ef-4324-915a-261caa184e8f"
        },
        "item": {
          "id": "0d653733-bb2b-43e7-a7c5-49bf2b494f70",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4256ac52-097c-4ae6-b53e-4f76e9162daf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f804f8-b9c7-40f1-bf41-aaadc0040787",
        "cursor": {
          "ref": "e154518c-620a-4d1f-bc5c-3af9008ea6e3",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "909df2db-dcf3-4107-a3d9-35fea65cc816"
        },
        "item": {
          "id": "83f804f8-b9c7-40f1-bf41-aaadc0040787",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fc6762a5-bacb-4c09-99ad-0acf906ebdfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f804f8-b9c7-40f1-bf41-aaadc0040787",
        "cursor": {
          "ref": "e154518c-620a-4d1f-bc5c-3af9008ea6e3",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "909df2db-dcf3-4107-a3d9-35fea65cc816"
        },
        "item": {
          "id": "83f804f8-b9c7-40f1-bf41-aaadc0040787",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fc6762a5-bacb-4c09-99ad-0acf906ebdfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b158d95-aed2-4f38-ab81-7ab927f271f6",
        "cursor": {
          "ref": "3e7299f2-de12-4d7d-9420-01cc9dc6a22c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "188a3a8d-c0aa-4f80-9d36-a4a8b2a40c88"
        },
        "item": {
          "id": "9b158d95-aed2-4f38-ab81-7ab927f271f6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e95dd0eb-6266-4e3b-b94e-803d53cfd95b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b158d95-aed2-4f38-ab81-7ab927f271f6",
        "cursor": {
          "ref": "3e7299f2-de12-4d7d-9420-01cc9dc6a22c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "188a3a8d-c0aa-4f80-9d36-a4a8b2a40c88"
        },
        "item": {
          "id": "9b158d95-aed2-4f38-ab81-7ab927f271f6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e95dd0eb-6266-4e3b-b94e-803d53cfd95b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8adefbe-1f28-4ddf-a972-2236cc614d44",
        "cursor": {
          "ref": "e4dd1370-200c-4cdb-b75f-db1f512d22c9",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e16f3741-89ea-4804-873f-864f3f5e41af"
        },
        "item": {
          "id": "f8adefbe-1f28-4ddf-a972-2236cc614d44",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2210208f-eb80-4b3e-8bca-41dc91b5a750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8adefbe-1f28-4ddf-a972-2236cc614d44",
        "cursor": {
          "ref": "e4dd1370-200c-4cdb-b75f-db1f512d22c9",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e16f3741-89ea-4804-873f-864f3f5e41af"
        },
        "item": {
          "id": "f8adefbe-1f28-4ddf-a972-2236cc614d44",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2210208f-eb80-4b3e-8bca-41dc91b5a750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a32d22-d91d-4687-bc82-44a5d2454ee7",
        "cursor": {
          "ref": "3ebcd380-1b5f-4cff-814f-4da397ca8e58",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "704bbd40-5751-46bc-80b5-9d14e339aca7"
        },
        "item": {
          "id": "d6a32d22-d91d-4687-bc82-44a5d2454ee7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "307eeff1-04f0-4b55-96c9-980ec8b2ca51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a32d22-d91d-4687-bc82-44a5d2454ee7",
        "cursor": {
          "ref": "3ebcd380-1b5f-4cff-814f-4da397ca8e58",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "704bbd40-5751-46bc-80b5-9d14e339aca7"
        },
        "item": {
          "id": "d6a32d22-d91d-4687-bc82-44a5d2454ee7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "307eeff1-04f0-4b55-96c9-980ec8b2ca51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca31fd02-78a6-45da-90ae-6917b03ac296",
        "cursor": {
          "ref": "45763d24-14e6-48aa-8d95-e8899fca36cb",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0fa7466b-8c1b-4984-b7be-4cd4a1fdab0f"
        },
        "item": {
          "id": "ca31fd02-78a6-45da-90ae-6917b03ac296",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab19dcfa-676d-4098-a9df-e8b61f851e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca31fd02-78a6-45da-90ae-6917b03ac296",
        "cursor": {
          "ref": "45763d24-14e6-48aa-8d95-e8899fca36cb",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0fa7466b-8c1b-4984-b7be-4cd4a1fdab0f"
        },
        "item": {
          "id": "ca31fd02-78a6-45da-90ae-6917b03ac296",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab19dcfa-676d-4098-a9df-e8b61f851e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271e2b64-688b-4898-8a4c-3999d59847c0",
        "cursor": {
          "ref": "9923752d-932f-4075-9e34-15fbf1d4ebe2",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "195c940e-a715-4440-a8b1-66773a0da911"
        },
        "item": {
          "id": "271e2b64-688b-4898-8a4c-3999d59847c0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cc3db3e3-178c-40d8-ab9a-544f91c06626",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271e2b64-688b-4898-8a4c-3999d59847c0",
        "cursor": {
          "ref": "9923752d-932f-4075-9e34-15fbf1d4ebe2",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "195c940e-a715-4440-a8b1-66773a0da911"
        },
        "item": {
          "id": "271e2b64-688b-4898-8a4c-3999d59847c0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cc3db3e3-178c-40d8-ab9a-544f91c06626",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9666acdd-6c7f-4dff-be27-d86f1e812e1b",
        "cursor": {
          "ref": "fe68c16d-feaa-4ba1-83dd-ffb08ff572cc",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "572b449a-d539-4c5b-ae14-f6e7aa7807e3"
        },
        "item": {
          "id": "9666acdd-6c7f-4dff-be27-d86f1e812e1b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "50836ded-dfa2-424f-8315-d1901ae7d369",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9666acdd-6c7f-4dff-be27-d86f1e812e1b",
        "cursor": {
          "ref": "fe68c16d-feaa-4ba1-83dd-ffb08ff572cc",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "572b449a-d539-4c5b-ae14-f6e7aa7807e3"
        },
        "item": {
          "id": "9666acdd-6c7f-4dff-be27-d86f1e812e1b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "50836ded-dfa2-424f-8315-d1901ae7d369",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ae0a8a-7718-46cd-9021-6990d5782790",
        "cursor": {
          "ref": "8afabc2e-f414-4c04-8d01-e43f0db0c893",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "faa47dc8-d5fd-4971-b7c3-82fa78f85e1b"
        },
        "item": {
          "id": "65ae0a8a-7718-46cd-9021-6990d5782790",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dab7e83c-e90a-4c50-a8bb-aa8c954f192e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ae0a8a-7718-46cd-9021-6990d5782790",
        "cursor": {
          "ref": "8afabc2e-f414-4c04-8d01-e43f0db0c893",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "faa47dc8-d5fd-4971-b7c3-82fa78f85e1b"
        },
        "item": {
          "id": "65ae0a8a-7718-46cd-9021-6990d5782790",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dab7e83c-e90a-4c50-a8bb-aa8c954f192e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4f9529-9aec-4b41-8e6f-6b39a631cd58",
        "cursor": {
          "ref": "6ec1be57-6455-44fa-b61f-3489655db6e5",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a66eb849-1b42-4c86-afb3-d6af7b76a7bf"
        },
        "item": {
          "id": "3e4f9529-9aec-4b41-8e6f-6b39a631cd58",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e14dd9d5-77a5-47c7-bfc0-42294db2d619",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4f9529-9aec-4b41-8e6f-6b39a631cd58",
        "cursor": {
          "ref": "6ec1be57-6455-44fa-b61f-3489655db6e5",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a66eb849-1b42-4c86-afb3-d6af7b76a7bf"
        },
        "item": {
          "id": "3e4f9529-9aec-4b41-8e6f-6b39a631cd58",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e14dd9d5-77a5-47c7-bfc0-42294db2d619",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da005595-7d45-4e43-9ad5-419b09556b4c",
        "cursor": {
          "ref": "f1ff2c70-d30e-4140-ac6e-bc74ff1f17ef",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "45ce0743-17b8-408f-a548-3657a5a55d7b"
        },
        "item": {
          "id": "da005595-7d45-4e43-9ad5-419b09556b4c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c7908432-dd70-4b97-9fec-e5b6f8264fae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da005595-7d45-4e43-9ad5-419b09556b4c",
        "cursor": {
          "ref": "f1ff2c70-d30e-4140-ac6e-bc74ff1f17ef",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "45ce0743-17b8-408f-a548-3657a5a55d7b"
        },
        "item": {
          "id": "da005595-7d45-4e43-9ad5-419b09556b4c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c7908432-dd70-4b97-9fec-e5b6f8264fae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ad3028-0ea0-4ec5-b270-d0f0f57cfe0a",
        "cursor": {
          "ref": "71402874-d7bb-4a3a-a5d0-a39e7874af95",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4efc4cca-6a76-4a10-bcc2-05cbd7fd2f52"
        },
        "item": {
          "id": "b8ad3028-0ea0-4ec5-b270-d0f0f57cfe0a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3105de10-3878-453c-899f-5589f1066f29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ad3028-0ea0-4ec5-b270-d0f0f57cfe0a",
        "cursor": {
          "ref": "71402874-d7bb-4a3a-a5d0-a39e7874af95",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4efc4cca-6a76-4a10-bcc2-05cbd7fd2f52"
        },
        "item": {
          "id": "b8ad3028-0ea0-4ec5-b270-d0f0f57cfe0a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3105de10-3878-453c-899f-5589f1066f29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bbc1a4-be62-46b5-a7de-31598478b752",
        "cursor": {
          "ref": "7db23ac9-4745-494b-af45-ee7545ae9838",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f5e501d4-1b39-44a0-b94c-b191f7d285fa"
        },
        "item": {
          "id": "d3bbc1a4-be62-46b5-a7de-31598478b752",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6db98398-1128-44bd-8e81-390dc1a4da1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bbc1a4-be62-46b5-a7de-31598478b752",
        "cursor": {
          "ref": "7db23ac9-4745-494b-af45-ee7545ae9838",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f5e501d4-1b39-44a0-b94c-b191f7d285fa"
        },
        "item": {
          "id": "d3bbc1a4-be62-46b5-a7de-31598478b752",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6db98398-1128-44bd-8e81-390dc1a4da1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e3db43-7fa7-4f1a-a849-ce8011100c09",
        "cursor": {
          "ref": "24db28c9-7734-4aaa-a93c-330c7b1a1024",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "153465b9-2545-4c86-af3d-20a7ec0e7d77"
        },
        "item": {
          "id": "c9e3db43-7fa7-4f1a-a849-ce8011100c09",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cf8b9630-45ef-4acd-a81a-664f22ceab36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e3db43-7fa7-4f1a-a849-ce8011100c09",
        "cursor": {
          "ref": "24db28c9-7734-4aaa-a93c-330c7b1a1024",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "153465b9-2545-4c86-af3d-20a7ec0e7d77"
        },
        "item": {
          "id": "c9e3db43-7fa7-4f1a-a849-ce8011100c09",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cf8b9630-45ef-4acd-a81a-664f22ceab36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145d8704-cb9b-4107-a635-895a0b080147",
        "cursor": {
          "ref": "a732a61c-a232-4693-ad03-00f7bae7f878",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "97931105-eea7-4a35-a1d6-a8fee8a22269"
        },
        "item": {
          "id": "145d8704-cb9b-4107-a635-895a0b080147",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "25b05cca-3df3-4885-b135-d355f264a255",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145d8704-cb9b-4107-a635-895a0b080147",
        "cursor": {
          "ref": "a732a61c-a232-4693-ad03-00f7bae7f878",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "97931105-eea7-4a35-a1d6-a8fee8a22269"
        },
        "item": {
          "id": "145d8704-cb9b-4107-a635-895a0b080147",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "25b05cca-3df3-4885-b135-d355f264a255",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900e253f-e09a-496e-92da-d82a39f202d3",
        "cursor": {
          "ref": "057c15d4-ff79-4cae-a933-8184f50a52bb",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6d70d70f-0ce1-4665-ada9-6fe25acc9d72"
        },
        "item": {
          "id": "900e253f-e09a-496e-92da-d82a39f202d3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "63071fd4-4116-48a1-bed5-0d6b3b4b1729",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900e253f-e09a-496e-92da-d82a39f202d3",
        "cursor": {
          "ref": "057c15d4-ff79-4cae-a933-8184f50a52bb",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6d70d70f-0ce1-4665-ada9-6fe25acc9d72"
        },
        "item": {
          "id": "900e253f-e09a-496e-92da-d82a39f202d3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "63071fd4-4116-48a1-bed5-0d6b3b4b1729",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2888b4-0043-4223-9026-2d50ccda4174",
        "cursor": {
          "ref": "63809334-70e2-4747-baef-8ed7bdac082b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "20cdf849-eaa3-4e72-80ce-a97805b65c2b"
        },
        "item": {
          "id": "8e2888b4-0043-4223-9026-2d50ccda4174",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "72c2fb3b-459e-41d9-a894-61e485e080ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2888b4-0043-4223-9026-2d50ccda4174",
        "cursor": {
          "ref": "63809334-70e2-4747-baef-8ed7bdac082b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "20cdf849-eaa3-4e72-80ce-a97805b65c2b"
        },
        "item": {
          "id": "8e2888b4-0043-4223-9026-2d50ccda4174",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "72c2fb3b-459e-41d9-a894-61e485e080ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c4bd1f-5246-4639-acfa-35fa27abe4d8",
        "cursor": {
          "ref": "47aaf132-42b5-421b-b891-0ba0446cb572",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dcf6705a-78ee-4051-afcc-fb9e5051764b"
        },
        "item": {
          "id": "e6c4bd1f-5246-4639-acfa-35fa27abe4d8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5b3b73d7-0166-40ab-9d4f-f78d22bec45a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c4bd1f-5246-4639-acfa-35fa27abe4d8",
        "cursor": {
          "ref": "47aaf132-42b5-421b-b891-0ba0446cb572",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dcf6705a-78ee-4051-afcc-fb9e5051764b"
        },
        "item": {
          "id": "e6c4bd1f-5246-4639-acfa-35fa27abe4d8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5b3b73d7-0166-40ab-9d4f-f78d22bec45a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2cd81b-38fb-4dee-b3ca-429834b6494f",
        "cursor": {
          "ref": "1ad3532c-f081-4b99-a978-cfe7d3072a35",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "389b0103-5527-4dc4-a2f7-44978991af1c"
        },
        "item": {
          "id": "dd2cd81b-38fb-4dee-b3ca-429834b6494f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6287110a-77c3-44c0-a816-49b4cdbc3615",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2cd81b-38fb-4dee-b3ca-429834b6494f",
        "cursor": {
          "ref": "1ad3532c-f081-4b99-a978-cfe7d3072a35",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "389b0103-5527-4dc4-a2f7-44978991af1c"
        },
        "item": {
          "id": "dd2cd81b-38fb-4dee-b3ca-429834b6494f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6287110a-77c3-44c0-a816-49b4cdbc3615",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3ee0c3-e0e3-445b-9ca3-a57c068000f5",
        "cursor": {
          "ref": "315acb6a-65e4-427c-95c7-ead727cf1a47",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "32470892-0ff2-427a-b07e-d54a49918537"
        },
        "item": {
          "id": "cf3ee0c3-e0e3-445b-9ca3-a57c068000f5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "10e0b6de-33a9-4056-a27e-074cefb53e6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3ee0c3-e0e3-445b-9ca3-a57c068000f5",
        "cursor": {
          "ref": "315acb6a-65e4-427c-95c7-ead727cf1a47",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "32470892-0ff2-427a-b07e-d54a49918537"
        },
        "item": {
          "id": "cf3ee0c3-e0e3-445b-9ca3-a57c068000f5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "10e0b6de-33a9-4056-a27e-074cefb53e6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9eccd4e-16e2-4c2e-844d-3716f2a482eb",
        "cursor": {
          "ref": "5533b5e0-fbd2-46c5-b701-855b10c69947",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2c118cd2-fdce-4450-9089-bcd8d6625620"
        },
        "item": {
          "id": "c9eccd4e-16e2-4c2e-844d-3716f2a482eb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9550a2bb-70d6-4562-bfc9-66fcd8875197",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9eccd4e-16e2-4c2e-844d-3716f2a482eb",
        "cursor": {
          "ref": "5533b5e0-fbd2-46c5-b701-855b10c69947",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2c118cd2-fdce-4450-9089-bcd8d6625620"
        },
        "item": {
          "id": "c9eccd4e-16e2-4c2e-844d-3716f2a482eb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9550a2bb-70d6-4562-bfc9-66fcd8875197",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d15e81c-0a6b-4c48-8951-8916d10dd675",
        "cursor": {
          "ref": "cc456151-f6fa-43c7-b8b8-8b5cdb28bfff",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "87211f46-c677-4505-a91d-9343f721eaa2"
        },
        "item": {
          "id": "4d15e81c-0a6b-4c48-8951-8916d10dd675",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "100cbfea-6216-4e84-af8c-39234ad846f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d15e81c-0a6b-4c48-8951-8916d10dd675",
        "cursor": {
          "ref": "cc456151-f6fa-43c7-b8b8-8b5cdb28bfff",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "87211f46-c677-4505-a91d-9343f721eaa2"
        },
        "item": {
          "id": "4d15e81c-0a6b-4c48-8951-8916d10dd675",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "100cbfea-6216-4e84-af8c-39234ad846f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78fde26-37dd-467b-8616-96f8948c869f",
        "cursor": {
          "ref": "5756a396-c3d7-46f1-adbd-8f4e6375c695",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "344af6c9-c90a-4a32-ab10-5727b532636b"
        },
        "item": {
          "id": "e78fde26-37dd-467b-8616-96f8948c869f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8cebfde4-488b-4325-b5d8-0c47c8d6747e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78fde26-37dd-467b-8616-96f8948c869f",
        "cursor": {
          "ref": "5756a396-c3d7-46f1-adbd-8f4e6375c695",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "344af6c9-c90a-4a32-ab10-5727b532636b"
        },
        "item": {
          "id": "e78fde26-37dd-467b-8616-96f8948c869f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8cebfde4-488b-4325-b5d8-0c47c8d6747e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae3ca03-fe2b-44c3-9978-0078edf793e2",
        "cursor": {
          "ref": "d3410714-11c6-46db-9b9a-2e01552565b3",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4d018943-10cf-488c-8175-89b1a41a1477"
        },
        "item": {
          "id": "cae3ca03-fe2b-44c3-9978-0078edf793e2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c318cdb4-0425-4909-95c1-3812814717e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae3ca03-fe2b-44c3-9978-0078edf793e2",
        "cursor": {
          "ref": "d3410714-11c6-46db-9b9a-2e01552565b3",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4d018943-10cf-488c-8175-89b1a41a1477"
        },
        "item": {
          "id": "cae3ca03-fe2b-44c3-9978-0078edf793e2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c318cdb4-0425-4909-95c1-3812814717e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cd55d7-b575-4896-b2d0-07c4557c63aa",
        "cursor": {
          "ref": "6e88d729-53f3-4bfb-82b3-40bdc4a29a25",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "87bd9d27-b990-4b0c-ac06-12c5b9638d7e"
        },
        "item": {
          "id": "12cd55d7-b575-4896-b2d0-07c4557c63aa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b44e2215-25ac-42a2-9505-18dbe8d6e5f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cd55d7-b575-4896-b2d0-07c4557c63aa",
        "cursor": {
          "ref": "6e88d729-53f3-4bfb-82b3-40bdc4a29a25",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "87bd9d27-b990-4b0c-ac06-12c5b9638d7e"
        },
        "item": {
          "id": "12cd55d7-b575-4896-b2d0-07c4557c63aa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b44e2215-25ac-42a2-9505-18dbe8d6e5f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441a78ba-1583-4088-bac2-17ea2bc1b572",
        "cursor": {
          "ref": "756e05f7-9907-49e6-98ff-11069f40d6c6",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "26c8843a-c4ac-414a-a227-3ed50f792043"
        },
        "item": {
          "id": "441a78ba-1583-4088-bac2-17ea2bc1b572",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "69e9ba01-8ce1-49f9-8217-19dc1416809f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441a78ba-1583-4088-bac2-17ea2bc1b572",
        "cursor": {
          "ref": "756e05f7-9907-49e6-98ff-11069f40d6c6",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "26c8843a-c4ac-414a-a227-3ed50f792043"
        },
        "item": {
          "id": "441a78ba-1583-4088-bac2-17ea2bc1b572",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "69e9ba01-8ce1-49f9-8217-19dc1416809f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05efc37-75c8-4498-b217-548d68152657",
        "cursor": {
          "ref": "508e1056-fb85-42aa-9593-e08508084fc5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7b586fd8-436f-45b7-8caf-c94c84750dfd"
        },
        "item": {
          "id": "e05efc37-75c8-4498-b217-548d68152657",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ad4e7f1f-bc79-4f4b-8ad5-b470844e1ca7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05efc37-75c8-4498-b217-548d68152657",
        "cursor": {
          "ref": "508e1056-fb85-42aa-9593-e08508084fc5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7b586fd8-436f-45b7-8caf-c94c84750dfd"
        },
        "item": {
          "id": "e05efc37-75c8-4498-b217-548d68152657",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ad4e7f1f-bc79-4f4b-8ad5-b470844e1ca7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9283a9-a57a-4a13-847f-4954fd9c0824",
        "cursor": {
          "ref": "c293ac1c-c67f-4e04-995a-c90f9ff84e18",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c7ad7774-f3dd-497e-adb6-5fe808cf6286"
        },
        "item": {
          "id": "fc9283a9-a57a-4a13-847f-4954fd9c0824",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7e7f4360-c4b8-4598-89dc-23c11f5656d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9283a9-a57a-4a13-847f-4954fd9c0824",
        "cursor": {
          "ref": "c293ac1c-c67f-4e04-995a-c90f9ff84e18",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c7ad7774-f3dd-497e-adb6-5fe808cf6286"
        },
        "item": {
          "id": "fc9283a9-a57a-4a13-847f-4954fd9c0824",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7e7f4360-c4b8-4598-89dc-23c11f5656d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76cda8e6-5fe1-46fd-8144-0ffd1b75afd6",
        "cursor": {
          "ref": "fd57af39-1107-4a26-bd00-d40d9e283c6b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f5dbe739-7ea7-416f-a0ab-3d00085a422f"
        },
        "item": {
          "id": "76cda8e6-5fe1-46fd-8144-0ffd1b75afd6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2f530639-9bfe-45dd-a552-f7bf4a6c8de9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76cda8e6-5fe1-46fd-8144-0ffd1b75afd6",
        "cursor": {
          "ref": "fd57af39-1107-4a26-bd00-d40d9e283c6b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f5dbe739-7ea7-416f-a0ab-3d00085a422f"
        },
        "item": {
          "id": "76cda8e6-5fe1-46fd-8144-0ffd1b75afd6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2f530639-9bfe-45dd-a552-f7bf4a6c8de9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d77735c-e22c-4d74-860f-a5730de8fc43",
        "cursor": {
          "ref": "076f47c3-8431-463b-be62-03cd657cd60c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b8a74ca9-168f-4142-8bc8-da6be6af2d77"
        },
        "item": {
          "id": "0d77735c-e22c-4d74-860f-a5730de8fc43",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "462e8db8-5dd2-4740-b0d2-7548faecfe1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d77735c-e22c-4d74-860f-a5730de8fc43",
        "cursor": {
          "ref": "076f47c3-8431-463b-be62-03cd657cd60c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b8a74ca9-168f-4142-8bc8-da6be6af2d77"
        },
        "item": {
          "id": "0d77735c-e22c-4d74-860f-a5730de8fc43",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "462e8db8-5dd2-4740-b0d2-7548faecfe1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044f50c6-7257-4bdf-b08c-64d7a4d424b4",
        "cursor": {
          "ref": "79789181-7eab-4779-9c21-8950725d655f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a24bbb27-aab2-4b17-9682-2e40361a0f7b"
        },
        "item": {
          "id": "044f50c6-7257-4bdf-b08c-64d7a4d424b4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "229d0bc2-3128-4425-95dc-d920339f503c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044f50c6-7257-4bdf-b08c-64d7a4d424b4",
        "cursor": {
          "ref": "79789181-7eab-4779-9c21-8950725d655f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a24bbb27-aab2-4b17-9682-2e40361a0f7b"
        },
        "item": {
          "id": "044f50c6-7257-4bdf-b08c-64d7a4d424b4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "229d0bc2-3128-4425-95dc-d920339f503c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cac553f-6bb3-401b-b87c-298d7f9e56b7",
        "cursor": {
          "ref": "7832a672-642e-4172-bb62-38f0b4c0c7c2",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0d0067e4-2adf-4067-bcd8-9612a48e1d23"
        },
        "item": {
          "id": "3cac553f-6bb3-401b-b87c-298d7f9e56b7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "700fd2f9-534a-4a50-9777-d64584e61d91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cac553f-6bb3-401b-b87c-298d7f9e56b7",
        "cursor": {
          "ref": "7832a672-642e-4172-bb62-38f0b4c0c7c2",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0d0067e4-2adf-4067-bcd8-9612a48e1d23"
        },
        "item": {
          "id": "3cac553f-6bb3-401b-b87c-298d7f9e56b7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "700fd2f9-534a-4a50-9777-d64584e61d91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80872a95-687e-4217-840a-282d5851da02",
        "cursor": {
          "ref": "3cec458c-e3c2-4bec-9477-e063bc9be1ad",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "af19ce2c-6bca-4928-a97c-065ae2e94678"
        },
        "item": {
          "id": "80872a95-687e-4217-840a-282d5851da02",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "21f2c43c-0761-4115-8c33-20f899730d8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80872a95-687e-4217-840a-282d5851da02",
        "cursor": {
          "ref": "3cec458c-e3c2-4bec-9477-e063bc9be1ad",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "af19ce2c-6bca-4928-a97c-065ae2e94678"
        },
        "item": {
          "id": "80872a95-687e-4217-840a-282d5851da02",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "21f2c43c-0761-4115-8c33-20f899730d8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1b779b-1f6f-4d9b-955c-e69f0a37db4a",
        "cursor": {
          "ref": "6cc1faff-94f4-471d-b837-d17c47764e2a",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a3dcfbcb-f1ca-457a-9c16-1e50444d89ef"
        },
        "item": {
          "id": "1b1b779b-1f6f-4d9b-955c-e69f0a37db4a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "582593f7-24a9-47b1-906c-382fb90ccb3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1b779b-1f6f-4d9b-955c-e69f0a37db4a",
        "cursor": {
          "ref": "6cc1faff-94f4-471d-b837-d17c47764e2a",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a3dcfbcb-f1ca-457a-9c16-1e50444d89ef"
        },
        "item": {
          "id": "1b1b779b-1f6f-4d9b-955c-e69f0a37db4a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "582593f7-24a9-47b1-906c-382fb90ccb3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9205aa4-446f-4ef8-99be-cc7454d18de6",
        "cursor": {
          "ref": "2471d339-0520-4b42-bc27-25e3c2a0b079",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "28ac3199-2037-410d-8fc6-19ef5c416d95"
        },
        "item": {
          "id": "b9205aa4-446f-4ef8-99be-cc7454d18de6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9430c25c-e166-4639-8679-95cc52367fbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9205aa4-446f-4ef8-99be-cc7454d18de6",
        "cursor": {
          "ref": "2471d339-0520-4b42-bc27-25e3c2a0b079",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "28ac3199-2037-410d-8fc6-19ef5c416d95"
        },
        "item": {
          "id": "b9205aa4-446f-4ef8-99be-cc7454d18de6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9430c25c-e166-4639-8679-95cc52367fbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d51eff2-5e2a-41be-adab-813ca9da3ee4",
        "cursor": {
          "ref": "342c2a55-fa46-46ed-9398-dac6c3256f11",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2875934a-1485-49bc-9958-9a891dc61ff4"
        },
        "item": {
          "id": "6d51eff2-5e2a-41be-adab-813ca9da3ee4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ac50cd2c-7a78-4655-95a6-9e5e26da3825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d51eff2-5e2a-41be-adab-813ca9da3ee4",
        "cursor": {
          "ref": "342c2a55-fa46-46ed-9398-dac6c3256f11",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2875934a-1485-49bc-9958-9a891dc61ff4"
        },
        "item": {
          "id": "6d51eff2-5e2a-41be-adab-813ca9da3ee4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ac50cd2c-7a78-4655-95a6-9e5e26da3825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1760832-8e63-4a4c-9f15-f2ce6b9ccc7b",
        "cursor": {
          "ref": "88bf2a35-596d-4d64-bdf1-1b7f601ec042",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "299d4b2d-e378-4bc3-8193-883d402851b0"
        },
        "item": {
          "id": "d1760832-8e63-4a4c-9f15-f2ce6b9ccc7b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5c16084d-d617-4f16-84ab-e2104053503d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1760832-8e63-4a4c-9f15-f2ce6b9ccc7b",
        "cursor": {
          "ref": "88bf2a35-596d-4d64-bdf1-1b7f601ec042",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "299d4b2d-e378-4bc3-8193-883d402851b0"
        },
        "item": {
          "id": "d1760832-8e63-4a4c-9f15-f2ce6b9ccc7b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5c16084d-d617-4f16-84ab-e2104053503d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d342ef25-d8f8-4d67-8a8e-4e12f5905b4b",
        "cursor": {
          "ref": "81ef0bbf-7964-4d3a-8b54-de38bf30f0f4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5933880c-d0bd-4938-acc0-4806b5673501"
        },
        "item": {
          "id": "d342ef25-d8f8-4d67-8a8e-4e12f5905b4b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9118a036-e64d-4a23-b12a-c1a9276f87a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d342ef25-d8f8-4d67-8a8e-4e12f5905b4b",
        "cursor": {
          "ref": "81ef0bbf-7964-4d3a-8b54-de38bf30f0f4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5933880c-d0bd-4938-acc0-4806b5673501"
        },
        "item": {
          "id": "d342ef25-d8f8-4d67-8a8e-4e12f5905b4b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9118a036-e64d-4a23-b12a-c1a9276f87a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9e5b39-a801-41d3-b43b-f0bc362be001",
        "cursor": {
          "ref": "46445b18-7538-4fb4-bf13-fbb7648a3eb4",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3695a0fc-c7f6-41ba-832e-8f7389c95207"
        },
        "item": {
          "id": "ea9e5b39-a801-41d3-b43b-f0bc362be001",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5242869d-0d3e-48ff-ad65-5f73bb3daeb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9e5b39-a801-41d3-b43b-f0bc362be001",
        "cursor": {
          "ref": "46445b18-7538-4fb4-bf13-fbb7648a3eb4",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3695a0fc-c7f6-41ba-832e-8f7389c95207"
        },
        "item": {
          "id": "ea9e5b39-a801-41d3-b43b-f0bc362be001",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5242869d-0d3e-48ff-ad65-5f73bb3daeb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f4724b-8a85-44d2-bbeb-e214bb935685",
        "cursor": {
          "ref": "fa7de1d4-027a-4aa2-ae23-2211e34aa17b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8a0afc27-48a4-45a6-bc9e-8e6af421b8c7"
        },
        "item": {
          "id": "f4f4724b-8a85-44d2-bbeb-e214bb935685",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0c2f9e6f-6cb6-4e51-b6c1-a0fa4153739b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f4724b-8a85-44d2-bbeb-e214bb935685",
        "cursor": {
          "ref": "fa7de1d4-027a-4aa2-ae23-2211e34aa17b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8a0afc27-48a4-45a6-bc9e-8e6af421b8c7"
        },
        "item": {
          "id": "f4f4724b-8a85-44d2-bbeb-e214bb935685",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0c2f9e6f-6cb6-4e51-b6c1-a0fa4153739b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46023d01-f767-484e-88f8-b0e592e1b23d",
        "cursor": {
          "ref": "dcd858a8-203a-4d0a-aee1-cc61a428c199",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4f7758da-d69b-4dd5-a825-e265ee4de25b"
        },
        "item": {
          "id": "46023d01-f767-484e-88f8-b0e592e1b23d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "342fcc78-4a01-4a20-901f-5a9e4899107f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46023d01-f767-484e-88f8-b0e592e1b23d",
        "cursor": {
          "ref": "dcd858a8-203a-4d0a-aee1-cc61a428c199",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4f7758da-d69b-4dd5-a825-e265ee4de25b"
        },
        "item": {
          "id": "46023d01-f767-484e-88f8-b0e592e1b23d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "342fcc78-4a01-4a20-901f-5a9e4899107f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0ffe1c-fa3a-45d7-ad9f-6da60ea7e4da",
        "cursor": {
          "ref": "53e41fcb-b666-411d-9e13-8ddee97e1008",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c47bc3d3-29a1-4273-99ab-cb4b1adfc9d7"
        },
        "item": {
          "id": "be0ffe1c-fa3a-45d7-ad9f-6da60ea7e4da",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "35ae921d-b36a-408d-912b-7d9a5c09d11a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0ffe1c-fa3a-45d7-ad9f-6da60ea7e4da",
        "cursor": {
          "ref": "53e41fcb-b666-411d-9e13-8ddee97e1008",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c47bc3d3-29a1-4273-99ab-cb4b1adfc9d7"
        },
        "item": {
          "id": "be0ffe1c-fa3a-45d7-ad9f-6da60ea7e4da",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "35ae921d-b36a-408d-912b-7d9a5c09d11a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d01f26b-95aa-4f19-a10a-d25a47eeece7",
        "cursor": {
          "ref": "fc3ecec8-d9c1-48af-bc45-a8b9f25b9cea",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7f996de3-1437-45cf-919f-b963ab67e7b4"
        },
        "item": {
          "id": "6d01f26b-95aa-4f19-a10a-d25a47eeece7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9c3255f5-80be-4893-ba26-8d0f9dfba88c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d01f26b-95aa-4f19-a10a-d25a47eeece7",
        "cursor": {
          "ref": "fc3ecec8-d9c1-48af-bc45-a8b9f25b9cea",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7f996de3-1437-45cf-919f-b963ab67e7b4"
        },
        "item": {
          "id": "6d01f26b-95aa-4f19-a10a-d25a47eeece7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9c3255f5-80be-4893-ba26-8d0f9dfba88c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a124e8-7764-4882-aa3e-8f3d61c9711d",
        "cursor": {
          "ref": "7ae20087-fbf1-4f1e-adb5-7a29a9a295b8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a63fc6da-75cc-44e2-8d0d-491bdce41a94"
        },
        "item": {
          "id": "b9a124e8-7764-4882-aa3e-8f3d61c9711d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "117dc2bd-90e8-45eb-8456-81b716474eb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a124e8-7764-4882-aa3e-8f3d61c9711d",
        "cursor": {
          "ref": "7ae20087-fbf1-4f1e-adb5-7a29a9a295b8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a63fc6da-75cc-44e2-8d0d-491bdce41a94"
        },
        "item": {
          "id": "b9a124e8-7764-4882-aa3e-8f3d61c9711d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "117dc2bd-90e8-45eb-8456-81b716474eb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0e0853-80bc-4888-a5b9-ffaf34babc6f",
        "cursor": {
          "ref": "74ed6110-8aca-4d5a-93c2-5e401f51874f",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "53f4fabb-1191-4772-b30e-bca3b4bf0097"
        },
        "item": {
          "id": "3f0e0853-80bc-4888-a5b9-ffaf34babc6f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "258995c3-700c-454a-aa9c-fd6994d70a95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0e0853-80bc-4888-a5b9-ffaf34babc6f",
        "cursor": {
          "ref": "74ed6110-8aca-4d5a-93c2-5e401f51874f",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "53f4fabb-1191-4772-b30e-bca3b4bf0097"
        },
        "item": {
          "id": "3f0e0853-80bc-4888-a5b9-ffaf34babc6f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "258995c3-700c-454a-aa9c-fd6994d70a95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab8e135-c0e3-4056-9da0-f86ba7f4a799",
        "cursor": {
          "ref": "31eec533-7fb5-4075-ac67-372ffdf1ab9f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e4ff7f12-4082-42b5-9313-c29434c3a6cb"
        },
        "item": {
          "id": "8ab8e135-c0e3-4056-9da0-f86ba7f4a799",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9ed68d93-edd9-413a-a969-4dda7bdb4e1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab8e135-c0e3-4056-9da0-f86ba7f4a799",
        "cursor": {
          "ref": "31eec533-7fb5-4075-ac67-372ffdf1ab9f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e4ff7f12-4082-42b5-9313-c29434c3a6cb"
        },
        "item": {
          "id": "8ab8e135-c0e3-4056-9da0-f86ba7f4a799",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9ed68d93-edd9-413a-a969-4dda7bdb4e1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c48613-715d-4be6-86cb-37980cb0dc36",
        "cursor": {
          "ref": "9d8298ff-266c-41a0-8dcf-25aa9bd0f0b2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "39edc9f2-cfc5-40aa-9979-6ddb036aa2d9"
        },
        "item": {
          "id": "69c48613-715d-4be6-86cb-37980cb0dc36",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d337ebc0-3928-415c-ae16-52a2488f59cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c48613-715d-4be6-86cb-37980cb0dc36",
        "cursor": {
          "ref": "9d8298ff-266c-41a0-8dcf-25aa9bd0f0b2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "39edc9f2-cfc5-40aa-9979-6ddb036aa2d9"
        },
        "item": {
          "id": "69c48613-715d-4be6-86cb-37980cb0dc36",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d337ebc0-3928-415c-ae16-52a2488f59cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376b3bfa-5dcb-4991-b482-93a8c0eb515b",
        "cursor": {
          "ref": "3f42551a-5b33-4798-b285-e82626aab6c5",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8d3ead38-e4c6-49aa-bf07-64b220732896"
        },
        "item": {
          "id": "376b3bfa-5dcb-4991-b482-93a8c0eb515b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f93db38f-dcd6-4d2a-a941-2c9f88a46943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376b3bfa-5dcb-4991-b482-93a8c0eb515b",
        "cursor": {
          "ref": "3f42551a-5b33-4798-b285-e82626aab6c5",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8d3ead38-e4c6-49aa-bf07-64b220732896"
        },
        "item": {
          "id": "376b3bfa-5dcb-4991-b482-93a8c0eb515b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f93db38f-dcd6-4d2a-a941-2c9f88a46943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e16871d-6609-43e1-88cd-d17063be838b",
        "cursor": {
          "ref": "a05559f8-f8ed-4321-877a-f1028c10a31a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d2039410-e51e-4ff0-9eeb-d60ddc0d1530"
        },
        "item": {
          "id": "0e16871d-6609-43e1-88cd-d17063be838b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "080206a3-81c2-49f3-982f-2c6133e034b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e16871d-6609-43e1-88cd-d17063be838b",
        "cursor": {
          "ref": "a05559f8-f8ed-4321-877a-f1028c10a31a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d2039410-e51e-4ff0-9eeb-d60ddc0d1530"
        },
        "item": {
          "id": "0e16871d-6609-43e1-88cd-d17063be838b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "080206a3-81c2-49f3-982f-2c6133e034b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560ce4e9-5bbd-4ff4-a0b2-e70fe5892047",
        "cursor": {
          "ref": "b7cae96a-9c48-49f0-a1d0-60511aee900a",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e33d3f5b-5ea7-4c83-9ad7-0448d1542961"
        },
        "item": {
          "id": "560ce4e9-5bbd-4ff4-a0b2-e70fe5892047",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bba8e200-b560-4509-8bd4-4f7ac6ffff50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560ce4e9-5bbd-4ff4-a0b2-e70fe5892047",
        "cursor": {
          "ref": "b7cae96a-9c48-49f0-a1d0-60511aee900a",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e33d3f5b-5ea7-4c83-9ad7-0448d1542961"
        },
        "item": {
          "id": "560ce4e9-5bbd-4ff4-a0b2-e70fe5892047",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bba8e200-b560-4509-8bd4-4f7ac6ffff50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f80551-c16f-4718-8538-c6ef93ed2f63",
        "cursor": {
          "ref": "0be6059b-b9e5-4199-901d-5831cb52485a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cc3e9e40-4aab-4f7f-ade1-61190c43dde2"
        },
        "item": {
          "id": "36f80551-c16f-4718-8538-c6ef93ed2f63",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6f267003-b1f1-452d-8d61-ab1c48a46396",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f80551-c16f-4718-8538-c6ef93ed2f63",
        "cursor": {
          "ref": "0be6059b-b9e5-4199-901d-5831cb52485a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cc3e9e40-4aab-4f7f-ade1-61190c43dde2"
        },
        "item": {
          "id": "36f80551-c16f-4718-8538-c6ef93ed2f63",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6f267003-b1f1-452d-8d61-ab1c48a46396",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5038fa-20c7-4511-87ac-2fd8197d24d2",
        "cursor": {
          "ref": "058866ed-299c-46d5-bc33-80dbfbb9c4e2",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5337aa11-c729-4c56-8c01-55307fec3633"
        },
        "item": {
          "id": "da5038fa-20c7-4511-87ac-2fd8197d24d2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b08666ca-1001-4510-9908-ee0d54d8c1a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5038fa-20c7-4511-87ac-2fd8197d24d2",
        "cursor": {
          "ref": "058866ed-299c-46d5-bc33-80dbfbb9c4e2",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5337aa11-c729-4c56-8c01-55307fec3633"
        },
        "item": {
          "id": "da5038fa-20c7-4511-87ac-2fd8197d24d2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b08666ca-1001-4510-9908-ee0d54d8c1a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1daa8bb6-2fea-47f6-b59b-cd0f76e21d86",
        "cursor": {
          "ref": "0fd9a655-447d-4a96-a300-a43df2774b81",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "797e3816-5814-4d3e-bd11-a8e4e7d3bf92"
        },
        "item": {
          "id": "1daa8bb6-2fea-47f6-b59b-cd0f76e21d86",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d20b1dd7-d842-4262-9b2c-3c68b9508e6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1daa8bb6-2fea-47f6-b59b-cd0f76e21d86",
        "cursor": {
          "ref": "0fd9a655-447d-4a96-a300-a43df2774b81",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "797e3816-5814-4d3e-bd11-a8e4e7d3bf92"
        },
        "item": {
          "id": "1daa8bb6-2fea-47f6-b59b-cd0f76e21d86",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d20b1dd7-d842-4262-9b2c-3c68b9508e6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc26d96-f2ac-4ca2-a03c-882b5dcbf65f",
        "cursor": {
          "ref": "a7636bc6-fdfe-4cad-99bc-0f03b1b68cc8",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f5663416-5131-4513-aa6d-bc0a897c1fc1"
        },
        "item": {
          "id": "2cc26d96-f2ac-4ca2-a03c-882b5dcbf65f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e1846ef3-7233-4a0b-b791-26d07451c4ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc26d96-f2ac-4ca2-a03c-882b5dcbf65f",
        "cursor": {
          "ref": "a7636bc6-fdfe-4cad-99bc-0f03b1b68cc8",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f5663416-5131-4513-aa6d-bc0a897c1fc1"
        },
        "item": {
          "id": "2cc26d96-f2ac-4ca2-a03c-882b5dcbf65f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e1846ef3-7233-4a0b-b791-26d07451c4ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e33b5c-3fff-4620-9f16-855f99e16bd4",
        "cursor": {
          "ref": "52df77b5-d345-4163-ad07-6aa4f6c2eb55",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3a02cc69-1db8-4e64-8497-1358b4cf8ecb"
        },
        "item": {
          "id": "58e33b5c-3fff-4620-9f16-855f99e16bd4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "814d8c17-df88-44cf-a530-9c3fd054ed71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e33b5c-3fff-4620-9f16-855f99e16bd4",
        "cursor": {
          "ref": "52df77b5-d345-4163-ad07-6aa4f6c2eb55",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3a02cc69-1db8-4e64-8497-1358b4cf8ecb"
        },
        "item": {
          "id": "58e33b5c-3fff-4620-9f16-855f99e16bd4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "814d8c17-df88-44cf-a530-9c3fd054ed71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51931e5-8210-41f1-8aeb-cd6f78a0b226",
        "cursor": {
          "ref": "25b3338c-3a0f-4f62-b811-70bad3c93ee5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5cb60d2a-b240-4717-b897-e9800900d738"
        },
        "item": {
          "id": "e51931e5-8210-41f1-8aeb-cd6f78a0b226",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b392e7ce-36c8-4cb5-8402-730c132366e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51931e5-8210-41f1-8aeb-cd6f78a0b226",
        "cursor": {
          "ref": "25b3338c-3a0f-4f62-b811-70bad3c93ee5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5cb60d2a-b240-4717-b897-e9800900d738"
        },
        "item": {
          "id": "e51931e5-8210-41f1-8aeb-cd6f78a0b226",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b392e7ce-36c8-4cb5-8402-730c132366e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5e1bd4-4252-4e05-bec9-a578e904aef7",
        "cursor": {
          "ref": "6341bcd4-f7cc-4206-87e3-3ed8621e8a74",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0f827eda-b159-45fb-95ce-bd19e5a6d637"
        },
        "item": {
          "id": "ea5e1bd4-4252-4e05-bec9-a578e904aef7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2e8d67ae-8ec3-4190-baba-20cf74f180c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5e1bd4-4252-4e05-bec9-a578e904aef7",
        "cursor": {
          "ref": "6341bcd4-f7cc-4206-87e3-3ed8621e8a74",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0f827eda-b159-45fb-95ce-bd19e5a6d637"
        },
        "item": {
          "id": "ea5e1bd4-4252-4e05-bec9-a578e904aef7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2e8d67ae-8ec3-4190-baba-20cf74f180c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4642e2fa-7f13-4ec7-b1e9-c3bc94d55735",
        "cursor": {
          "ref": "ac87f9dd-5986-48b3-bf70-59a1aa8b7d6f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a8033850-5a27-4216-9828-4928f30ad45f"
        },
        "item": {
          "id": "4642e2fa-7f13-4ec7-b1e9-c3bc94d55735",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "48671be9-01a8-4407-b179-b2a00a9988ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4642e2fa-7f13-4ec7-b1e9-c3bc94d55735",
        "cursor": {
          "ref": "ac87f9dd-5986-48b3-bf70-59a1aa8b7d6f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a8033850-5a27-4216-9828-4928f30ad45f"
        },
        "item": {
          "id": "4642e2fa-7f13-4ec7-b1e9-c3bc94d55735",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "48671be9-01a8-4407-b179-b2a00a9988ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f312a1ef-d205-4f04-ae95-21d51df6c737",
        "cursor": {
          "ref": "3c4db81d-7d64-47cd-b66c-395f96c9f049",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1f112a05-d324-454f-aeb6-58083bbeefe3"
        },
        "item": {
          "id": "f312a1ef-d205-4f04-ae95-21d51df6c737",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6f665c33-b7f0-4487-b80a-ff2b6fee63fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f312a1ef-d205-4f04-ae95-21d51df6c737",
        "cursor": {
          "ref": "3c4db81d-7d64-47cd-b66c-395f96c9f049",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1f112a05-d324-454f-aeb6-58083bbeefe3"
        },
        "item": {
          "id": "f312a1ef-d205-4f04-ae95-21d51df6c737",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6f665c33-b7f0-4487-b80a-ff2b6fee63fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04861446-1445-4c3c-ae30-9b80040c6ea7",
        "cursor": {
          "ref": "c870d24a-effa-4b4f-89e7-9310fe3d0731",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0f42fd1d-4b2c-4f0c-8dcd-ef7d9a281184"
        },
        "item": {
          "id": "04861446-1445-4c3c-ae30-9b80040c6ea7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cb64d573-da91-44b0-833c-badba33b7d9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04861446-1445-4c3c-ae30-9b80040c6ea7",
        "cursor": {
          "ref": "c870d24a-effa-4b4f-89e7-9310fe3d0731",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0f42fd1d-4b2c-4f0c-8dcd-ef7d9a281184"
        },
        "item": {
          "id": "04861446-1445-4c3c-ae30-9b80040c6ea7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cb64d573-da91-44b0-833c-badba33b7d9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cca33af-ab38-4b27-86bd-8b1b5548db65",
        "cursor": {
          "ref": "46b0d627-d33a-4611-9a67-0c2337f49627",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0fbbb3c3-4f3c-4ff7-a29a-987f7a604357"
        },
        "item": {
          "id": "4cca33af-ab38-4b27-86bd-8b1b5548db65",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b29fbfc8-8fc5-487d-b179-9eea91d078b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cca33af-ab38-4b27-86bd-8b1b5548db65",
        "cursor": {
          "ref": "46b0d627-d33a-4611-9a67-0c2337f49627",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0fbbb3c3-4f3c-4ff7-a29a-987f7a604357"
        },
        "item": {
          "id": "4cca33af-ab38-4b27-86bd-8b1b5548db65",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b29fbfc8-8fc5-487d-b179-9eea91d078b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504b0c24-f1f5-4384-9ba8-2b3d2e510042",
        "cursor": {
          "ref": "54e5da77-9d18-4221-bccc-1031b2bc8ece",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c654b9e4-1e34-4a07-8271-9a23027813b7"
        },
        "item": {
          "id": "504b0c24-f1f5-4384-9ba8-2b3d2e510042",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ca6bfca9-a567-4179-8fd9-bc5d8fe5f77b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504b0c24-f1f5-4384-9ba8-2b3d2e510042",
        "cursor": {
          "ref": "54e5da77-9d18-4221-bccc-1031b2bc8ece",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c654b9e4-1e34-4a07-8271-9a23027813b7"
        },
        "item": {
          "id": "504b0c24-f1f5-4384-9ba8-2b3d2e510042",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ca6bfca9-a567-4179-8fd9-bc5d8fe5f77b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db41d529-9037-4ec6-9fe7-927f33140229",
        "cursor": {
          "ref": "41a40d9c-9a45-4319-9ae5-9a775ebc5e4b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "900f8e34-72d2-4e27-8e3e-887fe0cc5cba"
        },
        "item": {
          "id": "db41d529-9037-4ec6-9fe7-927f33140229",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b23c67ca-da65-4a3d-a518-cb8818716c96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db41d529-9037-4ec6-9fe7-927f33140229",
        "cursor": {
          "ref": "41a40d9c-9a45-4319-9ae5-9a775ebc5e4b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "900f8e34-72d2-4e27-8e3e-887fe0cc5cba"
        },
        "item": {
          "id": "db41d529-9037-4ec6-9fe7-927f33140229",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b23c67ca-da65-4a3d-a518-cb8818716c96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f7b5c7-32b7-49b7-be9c-906843ea3864",
        "cursor": {
          "ref": "6c89e6bc-5262-4406-855e-4dcbdab290a5",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f40909c2-f68f-45ba-98d1-37087af74f05"
        },
        "item": {
          "id": "e1f7b5c7-32b7-49b7-be9c-906843ea3864",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "471f20a9-e9d7-4ffc-bcb2-5612dad89352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f7b5c7-32b7-49b7-be9c-906843ea3864",
        "cursor": {
          "ref": "6c89e6bc-5262-4406-855e-4dcbdab290a5",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f40909c2-f68f-45ba-98d1-37087af74f05"
        },
        "item": {
          "id": "e1f7b5c7-32b7-49b7-be9c-906843ea3864",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "471f20a9-e9d7-4ffc-bcb2-5612dad89352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18eb40fe-8899-4a6c-a527-f111ea4bf22f",
        "cursor": {
          "ref": "d00524d1-57db-465c-9a78-3f72a5c620cc",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "48098f84-171a-4291-92df-8cf9c9c711d9"
        },
        "item": {
          "id": "18eb40fe-8899-4a6c-a527-f111ea4bf22f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d05f9572-938b-4b10-8039-0a3c3618c8a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18eb40fe-8899-4a6c-a527-f111ea4bf22f",
        "cursor": {
          "ref": "d00524d1-57db-465c-9a78-3f72a5c620cc",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "48098f84-171a-4291-92df-8cf9c9c711d9"
        },
        "item": {
          "id": "18eb40fe-8899-4a6c-a527-f111ea4bf22f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d05f9572-938b-4b10-8039-0a3c3618c8a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d01c73-c70d-40a5-82ca-d9466a9b6943",
        "cursor": {
          "ref": "ff671a6a-fc80-4859-a73f-dcc3dd4ef785",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "08410805-0076-463d-ab68-c694cef1e520"
        },
        "item": {
          "id": "54d01c73-c70d-40a5-82ca-d9466a9b6943",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6d16f13b-e83f-4cff-aa2a-10f222e1d62d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d01c73-c70d-40a5-82ca-d9466a9b6943",
        "cursor": {
          "ref": "ff671a6a-fc80-4859-a73f-dcc3dd4ef785",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "08410805-0076-463d-ab68-c694cef1e520"
        },
        "item": {
          "id": "54d01c73-c70d-40a5-82ca-d9466a9b6943",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6d16f13b-e83f-4cff-aa2a-10f222e1d62d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec339e7c-46ee-43dc-8579-fea926e46868",
        "cursor": {
          "ref": "6dcac679-b1ae-488a-8ef2-5ab434040de8",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8a2a2b16-c223-4130-b54c-4d8a9b7d0fe2"
        },
        "item": {
          "id": "ec339e7c-46ee-43dc-8579-fea926e46868",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "acda0f1d-b796-4734-bcfe-d4f5e6a1a619",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec339e7c-46ee-43dc-8579-fea926e46868",
        "cursor": {
          "ref": "6dcac679-b1ae-488a-8ef2-5ab434040de8",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8a2a2b16-c223-4130-b54c-4d8a9b7d0fe2"
        },
        "item": {
          "id": "ec339e7c-46ee-43dc-8579-fea926e46868",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "acda0f1d-b796-4734-bcfe-d4f5e6a1a619",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65066c88-f04f-4ed5-a13b-37c54403d2ed",
        "cursor": {
          "ref": "c95189ed-4655-44ce-899a-ee028243698e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "165e817d-7969-46bc-8644-f5a6913634a4"
        },
        "item": {
          "id": "65066c88-f04f-4ed5-a13b-37c54403d2ed",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2992bada-06b0-45b1-8283-28d738291da3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65066c88-f04f-4ed5-a13b-37c54403d2ed",
        "cursor": {
          "ref": "c95189ed-4655-44ce-899a-ee028243698e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "165e817d-7969-46bc-8644-f5a6913634a4"
        },
        "item": {
          "id": "65066c88-f04f-4ed5-a13b-37c54403d2ed",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2992bada-06b0-45b1-8283-28d738291da3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ef07ea-1db4-4f47-b02a-f0f6a2f691e8",
        "cursor": {
          "ref": "c78b7a2d-23d5-4230-99e2-521f4c361546",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "877b5c4c-4a1b-46dc-aea9-6ed7918a3fbb"
        },
        "item": {
          "id": "60ef07ea-1db4-4f47-b02a-f0f6a2f691e8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b09744e2-a1ed-435c-8a4d-ef7fbfbf9282",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ef07ea-1db4-4f47-b02a-f0f6a2f691e8",
        "cursor": {
          "ref": "c78b7a2d-23d5-4230-99e2-521f4c361546",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "877b5c4c-4a1b-46dc-aea9-6ed7918a3fbb"
        },
        "item": {
          "id": "60ef07ea-1db4-4f47-b02a-f0f6a2f691e8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b09744e2-a1ed-435c-8a4d-ef7fbfbf9282",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4953168a-c44a-4134-8b79-dd5f70a275b0",
        "cursor": {
          "ref": "1feee2b8-f728-4382-bc64-b250dd04428f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f8bbcdd5-3c1a-499c-b290-ac518468d783"
        },
        "item": {
          "id": "4953168a-c44a-4134-8b79-dd5f70a275b0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0c02bd62-0bbc-47fa-b444-0e70ec4f2e18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4953168a-c44a-4134-8b79-dd5f70a275b0",
        "cursor": {
          "ref": "1feee2b8-f728-4382-bc64-b250dd04428f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f8bbcdd5-3c1a-499c-b290-ac518468d783"
        },
        "item": {
          "id": "4953168a-c44a-4134-8b79-dd5f70a275b0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0c02bd62-0bbc-47fa-b444-0e70ec4f2e18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45105a3a-a7f7-4f1d-ad6a-98b248cf43e8",
        "cursor": {
          "ref": "52426fb6-f567-425c-809b-37b168236de8",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c34f05e0-fbd5-4509-bf2f-5d919bdaebd6"
        },
        "item": {
          "id": "45105a3a-a7f7-4f1d-ad6a-98b248cf43e8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "193b4fac-18b6-4345-8676-9e5dac71d8fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45105a3a-a7f7-4f1d-ad6a-98b248cf43e8",
        "cursor": {
          "ref": "52426fb6-f567-425c-809b-37b168236de8",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c34f05e0-fbd5-4509-bf2f-5d919bdaebd6"
        },
        "item": {
          "id": "45105a3a-a7f7-4f1d-ad6a-98b248cf43e8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "193b4fac-18b6-4345-8676-9e5dac71d8fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372ce6d0-e996-4e34-9b15-30f30b4667ef",
        "cursor": {
          "ref": "e281fb1d-c611-4ee6-ac68-d5c520057e83",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f4dee1ed-9ac3-404c-b8a9-06f314c4e5c3"
        },
        "item": {
          "id": "372ce6d0-e996-4e34-9b15-30f30b4667ef",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c449e462-314a-4635-a12c-351f912407e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372ce6d0-e996-4e34-9b15-30f30b4667ef",
        "cursor": {
          "ref": "e281fb1d-c611-4ee6-ac68-d5c520057e83",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f4dee1ed-9ac3-404c-b8a9-06f314c4e5c3"
        },
        "item": {
          "id": "372ce6d0-e996-4e34-9b15-30f30b4667ef",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c449e462-314a-4635-a12c-351f912407e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4f13b5-7d99-4b75-b20d-a7480009f967",
        "cursor": {
          "ref": "520a6ae8-1f4b-4ce1-8177-3eafdad4a418",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9342a6ba-c277-47ab-93a0-c13822109a2b"
        },
        "item": {
          "id": "cd4f13b5-7d99-4b75-b20d-a7480009f967",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "337bedcf-ec1b-473a-8414-0085fb801251",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4f13b5-7d99-4b75-b20d-a7480009f967",
        "cursor": {
          "ref": "520a6ae8-1f4b-4ce1-8177-3eafdad4a418",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9342a6ba-c277-47ab-93a0-c13822109a2b"
        },
        "item": {
          "id": "cd4f13b5-7d99-4b75-b20d-a7480009f967",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "337bedcf-ec1b-473a-8414-0085fb801251",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2727aeae-52ed-40d6-a21e-142646dd4553",
        "cursor": {
          "ref": "c8e92f51-bae5-4951-8089-c247eba5a48e",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e4ed94d4-9b89-4456-8700-4de5c6650f79"
        },
        "item": {
          "id": "2727aeae-52ed-40d6-a21e-142646dd4553",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4a571088-cbc1-4938-81a2-6e743da829c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2727aeae-52ed-40d6-a21e-142646dd4553",
        "cursor": {
          "ref": "c8e92f51-bae5-4951-8089-c247eba5a48e",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e4ed94d4-9b89-4456-8700-4de5c6650f79"
        },
        "item": {
          "id": "2727aeae-52ed-40d6-a21e-142646dd4553",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4a571088-cbc1-4938-81a2-6e743da829c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5169477b-55a9-4613-a554-39bab5060f97",
        "cursor": {
          "ref": "41b91a9f-5712-4485-ab2a-47c04e606a3d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "78d06910-ef54-49a5-8dc9-b0778c014d31"
        },
        "item": {
          "id": "5169477b-55a9-4613-a554-39bab5060f97",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f6bb65b3-4e21-45c0-ad5f-37265718cade",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5169477b-55a9-4613-a554-39bab5060f97",
        "cursor": {
          "ref": "41b91a9f-5712-4485-ab2a-47c04e606a3d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "78d06910-ef54-49a5-8dc9-b0778c014d31"
        },
        "item": {
          "id": "5169477b-55a9-4613-a554-39bab5060f97",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f6bb65b3-4e21-45c0-ad5f-37265718cade",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a9537b-7cc0-4b05-a8c7-2ea38ebc5ac7",
        "cursor": {
          "ref": "408f4ab2-6dd1-49b7-83f3-3ade25b33745",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "215d938f-6815-463c-ba36-5064725e8b66"
        },
        "item": {
          "id": "99a9537b-7cc0-4b05-a8c7-2ea38ebc5ac7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ad565d0c-964e-4357-8f40-2f009fa7e1b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a9537b-7cc0-4b05-a8c7-2ea38ebc5ac7",
        "cursor": {
          "ref": "408f4ab2-6dd1-49b7-83f3-3ade25b33745",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "215d938f-6815-463c-ba36-5064725e8b66"
        },
        "item": {
          "id": "99a9537b-7cc0-4b05-a8c7-2ea38ebc5ac7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ad565d0c-964e-4357-8f40-2f009fa7e1b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3430bef8-fbfa-4dfe-bfbc-304fb1b3d1d5",
        "cursor": {
          "ref": "44766f92-9723-4cdb-9dc2-dfa0b9a41e9d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7107b98c-ee29-4873-ad77-73623dbe2cb2"
        },
        "item": {
          "id": "3430bef8-fbfa-4dfe-bfbc-304fb1b3d1d5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7de79c39-14ee-4991-a6a0-f71a391daa7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3430bef8-fbfa-4dfe-bfbc-304fb1b3d1d5",
        "cursor": {
          "ref": "44766f92-9723-4cdb-9dc2-dfa0b9a41e9d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7107b98c-ee29-4873-ad77-73623dbe2cb2"
        },
        "item": {
          "id": "3430bef8-fbfa-4dfe-bfbc-304fb1b3d1d5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7de79c39-14ee-4991-a6a0-f71a391daa7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d653df12-6fd1-4a52-9b36-955ae35990cd",
        "cursor": {
          "ref": "3a6fa2b5-e1aa-427e-a291-d16b6dec4761",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "efc5d377-3486-4cfa-8a7a-75c06819cba2"
        },
        "item": {
          "id": "d653df12-6fd1-4a52-9b36-955ae35990cd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "781ed56c-c930-48cf-b9dc-c3e1495d264d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d653df12-6fd1-4a52-9b36-955ae35990cd",
        "cursor": {
          "ref": "3a6fa2b5-e1aa-427e-a291-d16b6dec4761",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "efc5d377-3486-4cfa-8a7a-75c06819cba2"
        },
        "item": {
          "id": "d653df12-6fd1-4a52-9b36-955ae35990cd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "781ed56c-c930-48cf-b9dc-c3e1495d264d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a920feb-fb10-41d2-ad2f-f11ba47c58e7",
        "cursor": {
          "ref": "a7b46146-606c-4c36-bf3f-7c38450b3cb8",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "eaf89d37-5289-4ead-ad05-ee43134b8c37"
        },
        "item": {
          "id": "4a920feb-fb10-41d2-ad2f-f11ba47c58e7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b86aa34a-bbca-44e2-b6ec-6057d604b580",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a920feb-fb10-41d2-ad2f-f11ba47c58e7",
        "cursor": {
          "ref": "a7b46146-606c-4c36-bf3f-7c38450b3cb8",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "eaf89d37-5289-4ead-ad05-ee43134b8c37"
        },
        "item": {
          "id": "4a920feb-fb10-41d2-ad2f-f11ba47c58e7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b86aa34a-bbca-44e2-b6ec-6057d604b580",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac724fd-11b0-42b9-a963-3bf27f065192",
        "cursor": {
          "ref": "fda16e3f-b181-4232-a2e9-95a82fe29165",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "37a5d444-dab9-494c-8026-20df320ea54b"
        },
        "item": {
          "id": "9ac724fd-11b0-42b9-a963-3bf27f065192",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "823cd71f-3912-46c0-a60a-0cefda936e70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac724fd-11b0-42b9-a963-3bf27f065192",
        "cursor": {
          "ref": "fda16e3f-b181-4232-a2e9-95a82fe29165",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "37a5d444-dab9-494c-8026-20df320ea54b"
        },
        "item": {
          "id": "9ac724fd-11b0-42b9-a963-3bf27f065192",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "823cd71f-3912-46c0-a60a-0cefda936e70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d597c3b6-fb8d-483b-bfa5-5078db427528",
        "cursor": {
          "ref": "b597e41d-f243-45fe-a7d8-dcb76a6d585d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "96d2fce9-a1af-4e02-816f-c7e0e7183aa1"
        },
        "item": {
          "id": "d597c3b6-fb8d-483b-bfa5-5078db427528",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1a9f48b3-ab28-41b1-b2cc-0e7ffce22d2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d597c3b6-fb8d-483b-bfa5-5078db427528",
        "cursor": {
          "ref": "b597e41d-f243-45fe-a7d8-dcb76a6d585d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "96d2fce9-a1af-4e02-816f-c7e0e7183aa1"
        },
        "item": {
          "id": "d597c3b6-fb8d-483b-bfa5-5078db427528",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1a9f48b3-ab28-41b1-b2cc-0e7ffce22d2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fcd38a-5cdf-4fd6-8d8a-53b7a42c7426",
        "cursor": {
          "ref": "c9bf049a-cb50-43a2-a8b6-1477cc24a41b",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1b0b0692-51ed-4121-9f55-33324d33f235"
        },
        "item": {
          "id": "e2fcd38a-5cdf-4fd6-8d8a-53b7a42c7426",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "12fb2b70-8b58-41e3-aca1-ee19aeed0fdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fcd38a-5cdf-4fd6-8d8a-53b7a42c7426",
        "cursor": {
          "ref": "c9bf049a-cb50-43a2-a8b6-1477cc24a41b",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1b0b0692-51ed-4121-9f55-33324d33f235"
        },
        "item": {
          "id": "e2fcd38a-5cdf-4fd6-8d8a-53b7a42c7426",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "12fb2b70-8b58-41e3-aca1-ee19aeed0fdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e82a606-95a8-41d3-82df-1841076d0db2",
        "cursor": {
          "ref": "8d2023f1-ecf7-4d02-8675-6b82a6a1fe6b",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "44829f5b-872b-442c-9133-908c3c87e527"
        },
        "item": {
          "id": "2e82a606-95a8-41d3-82df-1841076d0db2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bb5e44d9-0cc2-46de-944f-5f50ffec8a21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e82a606-95a8-41d3-82df-1841076d0db2",
        "cursor": {
          "ref": "8d2023f1-ecf7-4d02-8675-6b82a6a1fe6b",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "44829f5b-872b-442c-9133-908c3c87e527"
        },
        "item": {
          "id": "2e82a606-95a8-41d3-82df-1841076d0db2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bb5e44d9-0cc2-46de-944f-5f50ffec8a21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ce8149-cfe7-4269-bcbf-fceb570128f9",
        "cursor": {
          "ref": "d5a3dad5-ac7a-404c-a5d4-618252071cfd",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "32cf28c6-9aab-4e7d-b213-ff1b2fd54646"
        },
        "item": {
          "id": "86ce8149-cfe7-4269-bcbf-fceb570128f9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "49db9669-0aaa-464c-8008-bff5803e72da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ce8149-cfe7-4269-bcbf-fceb570128f9",
        "cursor": {
          "ref": "d5a3dad5-ac7a-404c-a5d4-618252071cfd",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "32cf28c6-9aab-4e7d-b213-ff1b2fd54646"
        },
        "item": {
          "id": "86ce8149-cfe7-4269-bcbf-fceb570128f9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "49db9669-0aaa-464c-8008-bff5803e72da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b9b43d-a53f-49e6-9829-2ce0d13bf4f0",
        "cursor": {
          "ref": "ccb62fb4-ef4c-40ed-9448-a62a2d928bba",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "658273c7-8dd1-4bb0-a0c9-ca830b4eb2d0"
        },
        "item": {
          "id": "f2b9b43d-a53f-49e6-9829-2ce0d13bf4f0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7203e1ba-5131-4564-a601-1826ee7d36ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b9b43d-a53f-49e6-9829-2ce0d13bf4f0",
        "cursor": {
          "ref": "ccb62fb4-ef4c-40ed-9448-a62a2d928bba",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "658273c7-8dd1-4bb0-a0c9-ca830b4eb2d0"
        },
        "item": {
          "id": "f2b9b43d-a53f-49e6-9829-2ce0d13bf4f0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7203e1ba-5131-4564-a601-1826ee7d36ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc9ff08-381f-4fbf-bf55-a5534ae4e6d6",
        "cursor": {
          "ref": "f218695d-1975-43dd-a9b5-51a742eee0f5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d52e4957-d48a-4a40-bb7f-cee7f52f9231"
        },
        "item": {
          "id": "1bc9ff08-381f-4fbf-bf55-a5534ae4e6d6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "97a9bfad-b731-4d14-bbe3-bf3321548480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc9ff08-381f-4fbf-bf55-a5534ae4e6d6",
        "cursor": {
          "ref": "f218695d-1975-43dd-a9b5-51a742eee0f5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d52e4957-d48a-4a40-bb7f-cee7f52f9231"
        },
        "item": {
          "id": "1bc9ff08-381f-4fbf-bf55-a5534ae4e6d6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "97a9bfad-b731-4d14-bbe3-bf3321548480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b173e8-8564-4c69-a96a-5ba0036a4596",
        "cursor": {
          "ref": "4c6d08d8-91fb-496b-a90b-995880c3e1f2",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e00e43f2-86fe-4b84-aa37-09914d300ab5"
        },
        "item": {
          "id": "99b173e8-8564-4c69-a96a-5ba0036a4596",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a84c5ddd-e36f-4863-a76d-9bb1495408db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b173e8-8564-4c69-a96a-5ba0036a4596",
        "cursor": {
          "ref": "4c6d08d8-91fb-496b-a90b-995880c3e1f2",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e00e43f2-86fe-4b84-aa37-09914d300ab5"
        },
        "item": {
          "id": "99b173e8-8564-4c69-a96a-5ba0036a4596",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a84c5ddd-e36f-4863-a76d-9bb1495408db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec69d2bf-ab35-4bf4-bfce-caaf31cf2146",
        "cursor": {
          "ref": "12ae41bb-e8d2-4906-bfb0-94f2e1426bc7",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e753f571-c5df-49bc-adc3-554ad602c199"
        },
        "item": {
          "id": "ec69d2bf-ab35-4bf4-bfce-caaf31cf2146",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c67b4412-1344-45fd-aa9d-e8c9fd1cedce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec69d2bf-ab35-4bf4-bfce-caaf31cf2146",
        "cursor": {
          "ref": "12ae41bb-e8d2-4906-bfb0-94f2e1426bc7",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e753f571-c5df-49bc-adc3-554ad602c199"
        },
        "item": {
          "id": "ec69d2bf-ab35-4bf4-bfce-caaf31cf2146",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c67b4412-1344-45fd-aa9d-e8c9fd1cedce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16992ae7-d180-4d1b-98a0-ba9e6c15ec72",
        "cursor": {
          "ref": "30669ada-76c0-4a1a-8da2-df0b142528ee",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4447e0d9-2e0b-4ab2-b582-12c95d8b6a56"
        },
        "item": {
          "id": "16992ae7-d180-4d1b-98a0-ba9e6c15ec72",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4e4c07a8-5af3-415b-9579-57c0aba7af1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16992ae7-d180-4d1b-98a0-ba9e6c15ec72",
        "cursor": {
          "ref": "30669ada-76c0-4a1a-8da2-df0b142528ee",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4447e0d9-2e0b-4ab2-b582-12c95d8b6a56"
        },
        "item": {
          "id": "16992ae7-d180-4d1b-98a0-ba9e6c15ec72",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4e4c07a8-5af3-415b-9579-57c0aba7af1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae178edd-c456-4e9b-8def-b0eeae471fb5",
        "cursor": {
          "ref": "b3963e98-65d9-48dc-a110-35d678efc1f6",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0f033d5f-3230-424f-818e-312a7dc0b195"
        },
        "item": {
          "id": "ae178edd-c456-4e9b-8def-b0eeae471fb5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3abd680f-0bcc-4cf9-9774-54eaeef1b85a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae178edd-c456-4e9b-8def-b0eeae471fb5",
        "cursor": {
          "ref": "b3963e98-65d9-48dc-a110-35d678efc1f6",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0f033d5f-3230-424f-818e-312a7dc0b195"
        },
        "item": {
          "id": "ae178edd-c456-4e9b-8def-b0eeae471fb5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3abd680f-0bcc-4cf9-9774-54eaeef1b85a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c441c8a-bcce-4469-a3bc-47db7290a505",
        "cursor": {
          "ref": "cac9ccba-7001-4629-b36c-a10ed2b63d52",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9fe43071-3f5f-47c7-b1f1-d608b65c9e8b"
        },
        "item": {
          "id": "7c441c8a-bcce-4469-a3bc-47db7290a505",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f9c9aeb6-c8e3-4dd8-a976-9e62c0463595",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c441c8a-bcce-4469-a3bc-47db7290a505",
        "cursor": {
          "ref": "cac9ccba-7001-4629-b36c-a10ed2b63d52",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9fe43071-3f5f-47c7-b1f1-d608b65c9e8b"
        },
        "item": {
          "id": "7c441c8a-bcce-4469-a3bc-47db7290a505",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f9c9aeb6-c8e3-4dd8-a976-9e62c0463595",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66a1be0-d518-4318-b817-dc15e39c314b",
        "cursor": {
          "ref": "fd0d8c23-8286-40d3-8e4a-6e611c7e2399",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d360418d-5e41-4e62-81ce-bbf7dcf71ecf"
        },
        "item": {
          "id": "a66a1be0-d518-4318-b817-dc15e39c314b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9e0e1425-81b5-4971-b914-fb601a55656a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66a1be0-d518-4318-b817-dc15e39c314b",
        "cursor": {
          "ref": "fd0d8c23-8286-40d3-8e4a-6e611c7e2399",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d360418d-5e41-4e62-81ce-bbf7dcf71ecf"
        },
        "item": {
          "id": "a66a1be0-d518-4318-b817-dc15e39c314b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9e0e1425-81b5-4971-b914-fb601a55656a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10706b1-c8b1-4612-9ddd-cfb6ef363a70",
        "cursor": {
          "ref": "db043ae9-bfdf-4258-a442-c1a2162aab4d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0ba1b690-0d3d-41bb-b0bf-ed2c14e839c0"
        },
        "item": {
          "id": "e10706b1-c8b1-4612-9ddd-cfb6ef363a70",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cec8b1e9-1570-43dc-9585-ad94f3bab4ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10706b1-c8b1-4612-9ddd-cfb6ef363a70",
        "cursor": {
          "ref": "db043ae9-bfdf-4258-a442-c1a2162aab4d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0ba1b690-0d3d-41bb-b0bf-ed2c14e839c0"
        },
        "item": {
          "id": "e10706b1-c8b1-4612-9ddd-cfb6ef363a70",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cec8b1e9-1570-43dc-9585-ad94f3bab4ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbae8d1-6fba-4416-a794-a05f9441ad59",
        "cursor": {
          "ref": "9c232cad-7fb6-41bf-85f6-05215115b3d5",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3a97d0eb-5ade-449f-8417-09db1ed5d016"
        },
        "item": {
          "id": "dbbae8d1-6fba-4416-a794-a05f9441ad59",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5ab4a191-ae48-4a2f-aba1-38c164aef853",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbae8d1-6fba-4416-a794-a05f9441ad59",
        "cursor": {
          "ref": "9c232cad-7fb6-41bf-85f6-05215115b3d5",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3a97d0eb-5ade-449f-8417-09db1ed5d016"
        },
        "item": {
          "id": "dbbae8d1-6fba-4416-a794-a05f9441ad59",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5ab4a191-ae48-4a2f-aba1-38c164aef853",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86be8348-223a-4682-91b2-a512bde23fa9",
        "cursor": {
          "ref": "da0a1e81-2c9c-4fa5-8594-050d31853990",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b995df24-2d2e-4ba7-8e57-2ee92b6e9f6e"
        },
        "item": {
          "id": "86be8348-223a-4682-91b2-a512bde23fa9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "04b69d8a-69d0-4228-811e-be2c7a715d51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86be8348-223a-4682-91b2-a512bde23fa9",
        "cursor": {
          "ref": "da0a1e81-2c9c-4fa5-8594-050d31853990",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b995df24-2d2e-4ba7-8e57-2ee92b6e9f6e"
        },
        "item": {
          "id": "86be8348-223a-4682-91b2-a512bde23fa9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "04b69d8a-69d0-4228-811e-be2c7a715d51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f8883d-acc8-4953-8eab-072e12896be7",
        "cursor": {
          "ref": "ed6f5859-9629-4b25-bdce-2b15fc21c871",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "915c5dc6-984e-4286-88a4-a027a4289778"
        },
        "item": {
          "id": "40f8883d-acc8-4953-8eab-072e12896be7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "66faa9e1-00d5-4686-89a5-5ef944b291b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f8883d-acc8-4953-8eab-072e12896be7",
        "cursor": {
          "ref": "ed6f5859-9629-4b25-bdce-2b15fc21c871",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "915c5dc6-984e-4286-88a4-a027a4289778"
        },
        "item": {
          "id": "40f8883d-acc8-4953-8eab-072e12896be7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "66faa9e1-00d5-4686-89a5-5ef944b291b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b46ffc-bf7d-4bee-9467-b2a5c2eec062",
        "cursor": {
          "ref": "6a7446d1-bbfa-45f6-8339-5a51e3c2ed2e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "aa6e5ce7-d8a3-4d3c-a319-8bcf5eb1b488"
        },
        "item": {
          "id": "91b46ffc-bf7d-4bee-9467-b2a5c2eec062",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a0c3fcbd-afdd-4c36-a8c8-f3a79d87aa13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b46ffc-bf7d-4bee-9467-b2a5c2eec062",
        "cursor": {
          "ref": "6a7446d1-bbfa-45f6-8339-5a51e3c2ed2e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "aa6e5ce7-d8a3-4d3c-a319-8bcf5eb1b488"
        },
        "item": {
          "id": "91b46ffc-bf7d-4bee-9467-b2a5c2eec062",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a0c3fcbd-afdd-4c36-a8c8-f3a79d87aa13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52ddc3f-0dad-4175-99b0-eb4a6eb8bb0c",
        "cursor": {
          "ref": "384eee03-23f4-41ca-960f-2b65becf86af",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7a574aed-bc42-49c4-ad2e-f6c5a5c2ac95"
        },
        "item": {
          "id": "b52ddc3f-0dad-4175-99b0-eb4a6eb8bb0c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "61923068-bf66-40be-9f5b-e026d8b21c0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52ddc3f-0dad-4175-99b0-eb4a6eb8bb0c",
        "cursor": {
          "ref": "384eee03-23f4-41ca-960f-2b65becf86af",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7a574aed-bc42-49c4-ad2e-f6c5a5c2ac95"
        },
        "item": {
          "id": "b52ddc3f-0dad-4175-99b0-eb4a6eb8bb0c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "61923068-bf66-40be-9f5b-e026d8b21c0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc9cb8e-6282-41f0-98ea-a02173dc7b3e",
        "cursor": {
          "ref": "0fedf6ac-2d3a-44fa-afc3-7f2d9db5013b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5f3e2f44-e267-4766-baad-588435589bf5"
        },
        "item": {
          "id": "1cc9cb8e-6282-41f0-98ea-a02173dc7b3e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9a5c19fd-5281-4a0c-b4c8-d26ad56573f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc9cb8e-6282-41f0-98ea-a02173dc7b3e",
        "cursor": {
          "ref": "0fedf6ac-2d3a-44fa-afc3-7f2d9db5013b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5f3e2f44-e267-4766-baad-588435589bf5"
        },
        "item": {
          "id": "1cc9cb8e-6282-41f0-98ea-a02173dc7b3e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9a5c19fd-5281-4a0c-b4c8-d26ad56573f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d9229a-9a72-4463-a465-dd824ac227c4",
        "cursor": {
          "ref": "045faedd-7b01-49b3-a233-f94e110fdb60",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "894925ea-cb35-48f0-a4c5-eb81090a8455"
        },
        "item": {
          "id": "62d9229a-9a72-4463-a465-dd824ac227c4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "38041aa9-4cb3-479b-b882-afa37fbf5e22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d9229a-9a72-4463-a465-dd824ac227c4",
        "cursor": {
          "ref": "045faedd-7b01-49b3-a233-f94e110fdb60",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "894925ea-cb35-48f0-a4c5-eb81090a8455"
        },
        "item": {
          "id": "62d9229a-9a72-4463-a465-dd824ac227c4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "38041aa9-4cb3-479b-b882-afa37fbf5e22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f69ee8-797e-44c3-a3cb-229795e4b1bd",
        "cursor": {
          "ref": "e94bddc0-42ef-44cc-b310-9686f9e9b251",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "07f8d543-86b8-4bda-b5db-cc0566c94513"
        },
        "item": {
          "id": "28f69ee8-797e-44c3-a3cb-229795e4b1bd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f3aa7074-3eb5-4b9c-b091-2c60b72ea672",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f69ee8-797e-44c3-a3cb-229795e4b1bd",
        "cursor": {
          "ref": "e94bddc0-42ef-44cc-b310-9686f9e9b251",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "07f8d543-86b8-4bda-b5db-cc0566c94513"
        },
        "item": {
          "id": "28f69ee8-797e-44c3-a3cb-229795e4b1bd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f3aa7074-3eb5-4b9c-b091-2c60b72ea672",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd395bc3-c967-44f6-b1d7-908b3532c0a8",
        "cursor": {
          "ref": "575ad51c-7f0c-4ab3-ae30-35cd4932ddea",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7ef58fda-92ab-4399-b1b7-6750c4046d61"
        },
        "item": {
          "id": "bd395bc3-c967-44f6-b1d7-908b3532c0a8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "925b3f3d-e053-4d54-87a7-eca933ae3218",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd395bc3-c967-44f6-b1d7-908b3532c0a8",
        "cursor": {
          "ref": "575ad51c-7f0c-4ab3-ae30-35cd4932ddea",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7ef58fda-92ab-4399-b1b7-6750c4046d61"
        },
        "item": {
          "id": "bd395bc3-c967-44f6-b1d7-908b3532c0a8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "925b3f3d-e053-4d54-87a7-eca933ae3218",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5186f4fd-1862-4731-b1a6-5a0a43ec0972",
        "cursor": {
          "ref": "1c2bfb06-720e-451c-a7c3-56d896d070f3",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "498b68df-ba9c-4165-86ee-e5da1330cd80"
        },
        "item": {
          "id": "5186f4fd-1862-4731-b1a6-5a0a43ec0972",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "888143d2-9254-4e69-8dee-772bef3287ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5186f4fd-1862-4731-b1a6-5a0a43ec0972",
        "cursor": {
          "ref": "1c2bfb06-720e-451c-a7c3-56d896d070f3",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "498b68df-ba9c-4165-86ee-e5da1330cd80"
        },
        "item": {
          "id": "5186f4fd-1862-4731-b1a6-5a0a43ec0972",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "888143d2-9254-4e69-8dee-772bef3287ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d356dc-a697-4a16-a582-ceecf7c98bca",
        "cursor": {
          "ref": "10ca55aa-9c6a-4e87-859b-1b172fe0dccc",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "21e02daf-3699-489d-a916-28a89b9c3233"
        },
        "item": {
          "id": "98d356dc-a697-4a16-a582-ceecf7c98bca",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "34ec63e1-b5d8-4e40-8796-7302279364f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d356dc-a697-4a16-a582-ceecf7c98bca",
        "cursor": {
          "ref": "10ca55aa-9c6a-4e87-859b-1b172fe0dccc",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "21e02daf-3699-489d-a916-28a89b9c3233"
        },
        "item": {
          "id": "98d356dc-a697-4a16-a582-ceecf7c98bca",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "34ec63e1-b5d8-4e40-8796-7302279364f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b083f0-126f-4f42-aba0-14cd010bb37a",
        "cursor": {
          "ref": "4ce3e68d-af43-4a75-9e75-0fa1a7747c60",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "79d70f09-4fcd-4c28-9e75-57fe3294f09c"
        },
        "item": {
          "id": "88b083f0-126f-4f42-aba0-14cd010bb37a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a637057f-1bcc-4f3e-8c21-f9c9861f3501",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b083f0-126f-4f42-aba0-14cd010bb37a",
        "cursor": {
          "ref": "4ce3e68d-af43-4a75-9e75-0fa1a7747c60",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "79d70f09-4fcd-4c28-9e75-57fe3294f09c"
        },
        "item": {
          "id": "88b083f0-126f-4f42-aba0-14cd010bb37a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a637057f-1bcc-4f3e-8c21-f9c9861f3501",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e421aaa-db7b-47e5-9d93-3c1b4fa92c15",
        "cursor": {
          "ref": "ab5f5647-89e9-43d1-9901-a3ae8e6f5f68",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "66b3a9c1-8f27-4d04-88f8-a5a6529363d0"
        },
        "item": {
          "id": "1e421aaa-db7b-47e5-9d93-3c1b4fa92c15",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7ef9d807-5b0d-4dc0-a799-66902b08599d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e421aaa-db7b-47e5-9d93-3c1b4fa92c15",
        "cursor": {
          "ref": "ab5f5647-89e9-43d1-9901-a3ae8e6f5f68",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "66b3a9c1-8f27-4d04-88f8-a5a6529363d0"
        },
        "item": {
          "id": "1e421aaa-db7b-47e5-9d93-3c1b4fa92c15",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7ef9d807-5b0d-4dc0-a799-66902b08599d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3ee718-fdba-4aaf-92d3-c8c882dc3023",
        "cursor": {
          "ref": "8caf3c18-5e7f-456a-a33b-aa73263bf64f",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "10ba1616-d2f7-4d32-9ed0-c38994477907"
        },
        "item": {
          "id": "7c3ee718-fdba-4aaf-92d3-c8c882dc3023",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e9dea146-d500-41c9-b372-1e93d68bcafe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3ee718-fdba-4aaf-92d3-c8c882dc3023",
        "cursor": {
          "ref": "8caf3c18-5e7f-456a-a33b-aa73263bf64f",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "10ba1616-d2f7-4d32-9ed0-c38994477907"
        },
        "item": {
          "id": "7c3ee718-fdba-4aaf-92d3-c8c882dc3023",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e9dea146-d500-41c9-b372-1e93d68bcafe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6ae5ba-940b-463a-973a-08cfc3193047",
        "cursor": {
          "ref": "7e64a127-8512-425b-b380-5820a6e0695d",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "45dd75ff-0562-4f0e-b668-2b7876ddaa9d"
        },
        "item": {
          "id": "4c6ae5ba-940b-463a-973a-08cfc3193047",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7c8b84e5-f2c5-4be9-b0f7-f6a4267573af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6ae5ba-940b-463a-973a-08cfc3193047",
        "cursor": {
          "ref": "7e64a127-8512-425b-b380-5820a6e0695d",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "45dd75ff-0562-4f0e-b668-2b7876ddaa9d"
        },
        "item": {
          "id": "4c6ae5ba-940b-463a-973a-08cfc3193047",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7c8b84e5-f2c5-4be9-b0f7-f6a4267573af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b0f181-17f3-407f-9b41-51ef84e11d2b",
        "cursor": {
          "ref": "490a0b4c-120c-4b3a-b4c9-6fef61df7c5f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1dbc28ac-e481-4a12-9db0-f622effc0d46"
        },
        "item": {
          "id": "24b0f181-17f3-407f-9b41-51ef84e11d2b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a4cf4635-f872-49a8-8a5d-2af89bea3596",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b0f181-17f3-407f-9b41-51ef84e11d2b",
        "cursor": {
          "ref": "490a0b4c-120c-4b3a-b4c9-6fef61df7c5f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1dbc28ac-e481-4a12-9db0-f622effc0d46"
        },
        "item": {
          "id": "24b0f181-17f3-407f-9b41-51ef84e11d2b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a4cf4635-f872-49a8-8a5d-2af89bea3596",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797cedd4-ab38-40a3-83d0-5421eefc35ce",
        "cursor": {
          "ref": "2ee3135a-d5cf-43b3-aaac-b1092ec6e3e4",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b5d37532-8d4f-4b5a-b11b-eaacf19edc49"
        },
        "item": {
          "id": "797cedd4-ab38-40a3-83d0-5421eefc35ce",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c79d5b80-a322-4006-9745-af86e5c00b28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797cedd4-ab38-40a3-83d0-5421eefc35ce",
        "cursor": {
          "ref": "2ee3135a-d5cf-43b3-aaac-b1092ec6e3e4",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b5d37532-8d4f-4b5a-b11b-eaacf19edc49"
        },
        "item": {
          "id": "797cedd4-ab38-40a3-83d0-5421eefc35ce",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c79d5b80-a322-4006-9745-af86e5c00b28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9baa4507-bf3b-46e5-8d08-d097f3768137",
        "cursor": {
          "ref": "b25ed7f8-190e-496a-a3ed-0958bca895a7",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "34c41422-f8b3-4b8a-a719-0c83c13e1505"
        },
        "item": {
          "id": "9baa4507-bf3b-46e5-8d08-d097f3768137",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1a8a311a-0480-451f-8b1d-f1c438eb7ef3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9baa4507-bf3b-46e5-8d08-d097f3768137",
        "cursor": {
          "ref": "b25ed7f8-190e-496a-a3ed-0958bca895a7",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "34c41422-f8b3-4b8a-a719-0c83c13e1505"
        },
        "item": {
          "id": "9baa4507-bf3b-46e5-8d08-d097f3768137",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1a8a311a-0480-451f-8b1d-f1c438eb7ef3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287a1098-3ed8-47e0-bae7-160f489ef18c",
        "cursor": {
          "ref": "4d2d1dbd-5df0-4212-a7fb-5568007b4593",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5e105462-d84b-41bf-b718-6c8b472576ea"
        },
        "item": {
          "id": "287a1098-3ed8-47e0-bae7-160f489ef18c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "986a22f7-269e-4f1e-975e-2fd4c58a47fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287a1098-3ed8-47e0-bae7-160f489ef18c",
        "cursor": {
          "ref": "4d2d1dbd-5df0-4212-a7fb-5568007b4593",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5e105462-d84b-41bf-b718-6c8b472576ea"
        },
        "item": {
          "id": "287a1098-3ed8-47e0-bae7-160f489ef18c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "986a22f7-269e-4f1e-975e-2fd4c58a47fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcc444b-2d32-4fee-b759-7966c978cce0",
        "cursor": {
          "ref": "d9c865f6-f24d-4afd-9563-1c7e5d26d6eb",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fe253606-7c90-41ab-9847-f59b845029a5"
        },
        "item": {
          "id": "fdcc444b-2d32-4fee-b759-7966c978cce0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d46662f8-aab7-442c-8882-628b51b38279",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcc444b-2d32-4fee-b759-7966c978cce0",
        "cursor": {
          "ref": "d9c865f6-f24d-4afd-9563-1c7e5d26d6eb",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fe253606-7c90-41ab-9847-f59b845029a5"
        },
        "item": {
          "id": "fdcc444b-2d32-4fee-b759-7966c978cce0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d46662f8-aab7-442c-8882-628b51b38279",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b6b87d-16a4-432e-ae75-416140015244",
        "cursor": {
          "ref": "b741c679-ba3f-49c6-9ad5-5b10ad533be6",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6e811bd7-8f8b-4a14-80e9-dc65aac58c1f"
        },
        "item": {
          "id": "58b6b87d-16a4-432e-ae75-416140015244",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0bbfab4b-5cbe-4703-a8fe-0f48e74b65c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b6b87d-16a4-432e-ae75-416140015244",
        "cursor": {
          "ref": "b741c679-ba3f-49c6-9ad5-5b10ad533be6",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6e811bd7-8f8b-4a14-80e9-dc65aac58c1f"
        },
        "item": {
          "id": "58b6b87d-16a4-432e-ae75-416140015244",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0bbfab4b-5cbe-4703-a8fe-0f48e74b65c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777c1d0a-2ed2-4c33-a6f7-a10fb8177a0a",
        "cursor": {
          "ref": "47b67ce2-1e95-45ed-80e9-b4cd0a3c5da5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "cd76315a-d497-4087-b57a-86d52d280e8d"
        },
        "item": {
          "id": "777c1d0a-2ed2-4c33-a6f7-a10fb8177a0a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "af44c08b-5fc4-44d1-ac87-e3702a23915b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777c1d0a-2ed2-4c33-a6f7-a10fb8177a0a",
        "cursor": {
          "ref": "47b67ce2-1e95-45ed-80e9-b4cd0a3c5da5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "cd76315a-d497-4087-b57a-86d52d280e8d"
        },
        "item": {
          "id": "777c1d0a-2ed2-4c33-a6f7-a10fb8177a0a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "af44c08b-5fc4-44d1-ac87-e3702a23915b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d6e364-e059-4394-bab4-879922205b77",
        "cursor": {
          "ref": "73ea9f31-379f-4aa8-97b7-1122df64d3ff",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "12c8dc0f-4ab1-49f3-ac72-5def9c7f8c4d"
        },
        "item": {
          "id": "d0d6e364-e059-4394-bab4-879922205b77",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cfc68124-1e99-46af-9e58-35608cf49c2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d6e364-e059-4394-bab4-879922205b77",
        "cursor": {
          "ref": "73ea9f31-379f-4aa8-97b7-1122df64d3ff",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "12c8dc0f-4ab1-49f3-ac72-5def9c7f8c4d"
        },
        "item": {
          "id": "d0d6e364-e059-4394-bab4-879922205b77",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cfc68124-1e99-46af-9e58-35608cf49c2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5efc18e-0174-4285-8e7f-121870a1e8a1",
        "cursor": {
          "ref": "e758815f-23b3-483b-95f3-b912233e29ca",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bd150915-7230-4ea3-86f9-8fd5e7c4ade5"
        },
        "item": {
          "id": "c5efc18e-0174-4285-8e7f-121870a1e8a1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bbfe5eaf-657c-4a13-a577-2c3fcc13dbd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5efc18e-0174-4285-8e7f-121870a1e8a1",
        "cursor": {
          "ref": "e758815f-23b3-483b-95f3-b912233e29ca",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bd150915-7230-4ea3-86f9-8fd5e7c4ade5"
        },
        "item": {
          "id": "c5efc18e-0174-4285-8e7f-121870a1e8a1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bbfe5eaf-657c-4a13-a577-2c3fcc13dbd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a43d3f3-2333-440a-b3ae-58c794aa3d7b",
        "cursor": {
          "ref": "16c2e91f-a473-4236-b513-3a5f087ce3a5",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "37032f01-7d29-42d4-92fd-5503d93397b8"
        },
        "item": {
          "id": "2a43d3f3-2333-440a-b3ae-58c794aa3d7b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fa84ec0a-92c0-44cb-8e13-ccd6e5d8208f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a43d3f3-2333-440a-b3ae-58c794aa3d7b",
        "cursor": {
          "ref": "16c2e91f-a473-4236-b513-3a5f087ce3a5",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "37032f01-7d29-42d4-92fd-5503d93397b8"
        },
        "item": {
          "id": "2a43d3f3-2333-440a-b3ae-58c794aa3d7b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fa84ec0a-92c0-44cb-8e13-ccd6e5d8208f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba5cceb-d9b7-4389-b453-e040a93980c5",
        "cursor": {
          "ref": "e9982f4e-e169-4e81-a272-9300ea8d227b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1aee7e3a-9360-472a-bf61-437fe5893467"
        },
        "item": {
          "id": "fba5cceb-d9b7-4389-b453-e040a93980c5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7c4a68e0-4af2-469a-a5f3-63b568318f68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba5cceb-d9b7-4389-b453-e040a93980c5",
        "cursor": {
          "ref": "e9982f4e-e169-4e81-a272-9300ea8d227b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1aee7e3a-9360-472a-bf61-437fe5893467"
        },
        "item": {
          "id": "fba5cceb-d9b7-4389-b453-e040a93980c5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7c4a68e0-4af2-469a-a5f3-63b568318f68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f24b48e-5462-4559-bed1-de77647614c3",
        "cursor": {
          "ref": "389a6ea9-cc06-4cfa-8ab5-580af730a127",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7ef1c690-6d05-4ab7-add6-811e81f48731"
        },
        "item": {
          "id": "7f24b48e-5462-4559-bed1-de77647614c3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "aadad1cb-8d4d-4f29-8d2d-9d6b80f5fcb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f24b48e-5462-4559-bed1-de77647614c3",
        "cursor": {
          "ref": "389a6ea9-cc06-4cfa-8ab5-580af730a127",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7ef1c690-6d05-4ab7-add6-811e81f48731"
        },
        "item": {
          "id": "7f24b48e-5462-4559-bed1-de77647614c3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "aadad1cb-8d4d-4f29-8d2d-9d6b80f5fcb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7ada14-7d02-4397-8341-5ff029b0c71b",
        "cursor": {
          "ref": "0a6fd2ea-6508-495b-8ace-bcccf772d563",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ec89b906-75a1-4993-b996-78c6af94bc48"
        },
        "item": {
          "id": "ac7ada14-7d02-4397-8341-5ff029b0c71b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2753a380-99da-47bc-9363-843d90780836",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7ada14-7d02-4397-8341-5ff029b0c71b",
        "cursor": {
          "ref": "0a6fd2ea-6508-495b-8ace-bcccf772d563",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ec89b906-75a1-4993-b996-78c6af94bc48"
        },
        "item": {
          "id": "ac7ada14-7d02-4397-8341-5ff029b0c71b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2753a380-99da-47bc-9363-843d90780836",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8330600-a6f1-4292-9e04-88442b0c5c96",
        "cursor": {
          "ref": "949d4d21-386f-42c6-8ee1-a7d18c21f60e",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "714ce307-e061-4a55-a768-8af525795fee"
        },
        "item": {
          "id": "c8330600-a6f1-4292-9e04-88442b0c5c96",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1645c6b4-6ba0-4dda-a482-ee4e3068e490",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8330600-a6f1-4292-9e04-88442b0c5c96",
        "cursor": {
          "ref": "949d4d21-386f-42c6-8ee1-a7d18c21f60e",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "714ce307-e061-4a55-a768-8af525795fee"
        },
        "item": {
          "id": "c8330600-a6f1-4292-9e04-88442b0c5c96",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1645c6b4-6ba0-4dda-a482-ee4e3068e490",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d9d641-73fa-4bf2-91b1-506da52bb0fc",
        "cursor": {
          "ref": "82a0dad0-1acc-4362-a4b4-93e5badd5a02",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7dc93cdf-f147-42c7-9ce2-d595cd6958af"
        },
        "item": {
          "id": "56d9d641-73fa-4bf2-91b1-506da52bb0fc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ccd8038a-60a6-43fd-a1d3-a981514a250b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d9d641-73fa-4bf2-91b1-506da52bb0fc",
        "cursor": {
          "ref": "82a0dad0-1acc-4362-a4b4-93e5badd5a02",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7dc93cdf-f147-42c7-9ce2-d595cd6958af"
        },
        "item": {
          "id": "56d9d641-73fa-4bf2-91b1-506da52bb0fc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ccd8038a-60a6-43fd-a1d3-a981514a250b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc700355-7082-4a43-b3e9-6e42898075ae",
        "cursor": {
          "ref": "b6092ba5-af52-4c8d-b364-6a6c7c782f13",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "270bd0ec-bb98-4e76-8306-7a70ce07c843"
        },
        "item": {
          "id": "bc700355-7082-4a43-b3e9-6e42898075ae",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f55924cc-c85b-4bbe-8602-19b61a46bbed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc700355-7082-4a43-b3e9-6e42898075ae",
        "cursor": {
          "ref": "b6092ba5-af52-4c8d-b364-6a6c7c782f13",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "270bd0ec-bb98-4e76-8306-7a70ce07c843"
        },
        "item": {
          "id": "bc700355-7082-4a43-b3e9-6e42898075ae",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f55924cc-c85b-4bbe-8602-19b61a46bbed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf48fce2-50bb-4c85-b94b-b41b333df9c6",
        "cursor": {
          "ref": "39ebd978-e9a9-426e-baef-d9ae3f7c42fc",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7eb88f9d-9df5-453b-b5b3-61246e7b97dd"
        },
        "item": {
          "id": "cf48fce2-50bb-4c85-b94b-b41b333df9c6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "35975db0-4e8c-4093-806f-5fd3ed737893",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf48fce2-50bb-4c85-b94b-b41b333df9c6",
        "cursor": {
          "ref": "39ebd978-e9a9-426e-baef-d9ae3f7c42fc",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7eb88f9d-9df5-453b-b5b3-61246e7b97dd"
        },
        "item": {
          "id": "cf48fce2-50bb-4c85-b94b-b41b333df9c6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "35975db0-4e8c-4093-806f-5fd3ed737893",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a9427a-c5d0-4e32-9673-fbdb11374237",
        "cursor": {
          "ref": "38935c9b-adb5-4456-b699-9b678f0e37af",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8ee2e8b3-65c3-4472-a92e-1b114a41cd0d"
        },
        "item": {
          "id": "19a9427a-c5d0-4e32-9673-fbdb11374237",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "00de7fa0-5e17-4d35-a118-bf5fc77947bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a9427a-c5d0-4e32-9673-fbdb11374237",
        "cursor": {
          "ref": "38935c9b-adb5-4456-b699-9b678f0e37af",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8ee2e8b3-65c3-4472-a92e-1b114a41cd0d"
        },
        "item": {
          "id": "19a9427a-c5d0-4e32-9673-fbdb11374237",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "00de7fa0-5e17-4d35-a118-bf5fc77947bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d4ee50-b691-49b9-83a9-361f873e0e8f",
        "cursor": {
          "ref": "5a8e6a61-421e-4d10-bc37-3626c650136c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7ac727da-8c15-4bb5-ae47-ae304e9b7163"
        },
        "item": {
          "id": "36d4ee50-b691-49b9-83a9-361f873e0e8f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2c67acc8-1b56-4fe4-b94f-88150aba5503",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d4ee50-b691-49b9-83a9-361f873e0e8f",
        "cursor": {
          "ref": "5a8e6a61-421e-4d10-bc37-3626c650136c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7ac727da-8c15-4bb5-ae47-ae304e9b7163"
        },
        "item": {
          "id": "36d4ee50-b691-49b9-83a9-361f873e0e8f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2c67acc8-1b56-4fe4-b94f-88150aba5503",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819e1b70-f3f2-4e24-ae72-4a8ce635bfd9",
        "cursor": {
          "ref": "00f28390-4deb-433b-984e-5c72f743dd80",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "4766bf0e-53dd-41dd-a344-e540272b05f7"
        },
        "item": {
          "id": "819e1b70-f3f2-4e24-ae72-4a8ce635bfd9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "039f72fe-241a-41cd-be46-f9845779e904",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819e1b70-f3f2-4e24-ae72-4a8ce635bfd9",
        "cursor": {
          "ref": "00f28390-4deb-433b-984e-5c72f743dd80",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "4766bf0e-53dd-41dd-a344-e540272b05f7"
        },
        "item": {
          "id": "819e1b70-f3f2-4e24-ae72-4a8ce635bfd9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "039f72fe-241a-41cd-be46-f9845779e904",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18fcc26-a874-4785-addd-a5b5d7bc085b",
        "cursor": {
          "ref": "aa8fa0d1-9608-4883-a93a-f18d324fe67a",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a7e12877-f048-492f-999f-7aa1baeaeca0"
        },
        "item": {
          "id": "e18fcc26-a874-4785-addd-a5b5d7bc085b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b3b48e56-61f5-4166-bb12-7d6270c7418e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18fcc26-a874-4785-addd-a5b5d7bc085b",
        "cursor": {
          "ref": "aa8fa0d1-9608-4883-a93a-f18d324fe67a",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a7e12877-f048-492f-999f-7aa1baeaeca0"
        },
        "item": {
          "id": "e18fcc26-a874-4785-addd-a5b5d7bc085b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b3b48e56-61f5-4166-bb12-7d6270c7418e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ceea989-07eb-4fb4-a158-399d74c7892d",
        "cursor": {
          "ref": "c6887a77-02b2-4efd-ba30-3f04534ac9ba",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5032c9b9-27cb-4148-94e7-b893107f1ed3"
        },
        "item": {
          "id": "0ceea989-07eb-4fb4-a158-399d74c7892d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2dfa2dd9-e394-4479-9fa4-edc32675e9f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ceea989-07eb-4fb4-a158-399d74c7892d",
        "cursor": {
          "ref": "c6887a77-02b2-4efd-ba30-3f04534ac9ba",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5032c9b9-27cb-4148-94e7-b893107f1ed3"
        },
        "item": {
          "id": "0ceea989-07eb-4fb4-a158-399d74c7892d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2dfa2dd9-e394-4479-9fa4-edc32675e9f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75e805e-b3be-4e88-b677-90da91f71c51",
        "cursor": {
          "ref": "8e92d03e-80bb-495b-92b9-c1b923c8b2f0",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1a1df57a-4658-4f2c-83ef-d8b79ca012f2"
        },
        "item": {
          "id": "c75e805e-b3be-4e88-b677-90da91f71c51",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e599ef7e-b0ab-4606-abd2-40518b674589",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75e805e-b3be-4e88-b677-90da91f71c51",
        "cursor": {
          "ref": "8e92d03e-80bb-495b-92b9-c1b923c8b2f0",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1a1df57a-4658-4f2c-83ef-d8b79ca012f2"
        },
        "item": {
          "id": "c75e805e-b3be-4e88-b677-90da91f71c51",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e599ef7e-b0ab-4606-abd2-40518b674589",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8482fc-decf-46fd-8136-bb8fca42f0ff",
        "cursor": {
          "ref": "9285df03-fb6c-4f45-86fc-d5e5b640328d",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "64db410f-505f-420a-9bc6-28b2bc49e864"
        },
        "item": {
          "id": "bb8482fc-decf-46fd-8136-bb8fca42f0ff",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f8ba9ddd-7501-48bf-92be-19066176a3a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8482fc-decf-46fd-8136-bb8fca42f0ff",
        "cursor": {
          "ref": "9285df03-fb6c-4f45-86fc-d5e5b640328d",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "64db410f-505f-420a-9bc6-28b2bc49e864"
        },
        "item": {
          "id": "bb8482fc-decf-46fd-8136-bb8fca42f0ff",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f8ba9ddd-7501-48bf-92be-19066176a3a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b540a5c-777a-41f4-92c4-51fdde174770",
        "cursor": {
          "ref": "c0984517-4f30-42ac-a51d-10f95d3b69c0",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7a691334-10a6-43f8-a07d-f89326b19a9b"
        },
        "item": {
          "id": "6b540a5c-777a-41f4-92c4-51fdde174770",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "904e9285-e0f4-4400-85fe-078d5de569c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b540a5c-777a-41f4-92c4-51fdde174770",
        "cursor": {
          "ref": "c0984517-4f30-42ac-a51d-10f95d3b69c0",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7a691334-10a6-43f8-a07d-f89326b19a9b"
        },
        "item": {
          "id": "6b540a5c-777a-41f4-92c4-51fdde174770",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "904e9285-e0f4-4400-85fe-078d5de569c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e833f80-6ccf-4821-8ee9-cda831e12b8e",
        "cursor": {
          "ref": "b9ec627b-5192-4830-8ba0-6c91dd38d1ce",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b0a93b72-5ca1-475a-80ed-41cca5b05749"
        },
        "item": {
          "id": "1e833f80-6ccf-4821-8ee9-cda831e12b8e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1cd2a546-5dd2-4885-b141-9f59fac93ec2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e833f80-6ccf-4821-8ee9-cda831e12b8e",
        "cursor": {
          "ref": "b9ec627b-5192-4830-8ba0-6c91dd38d1ce",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b0a93b72-5ca1-475a-80ed-41cca5b05749"
        },
        "item": {
          "id": "1e833f80-6ccf-4821-8ee9-cda831e12b8e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1cd2a546-5dd2-4885-b141-9f59fac93ec2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac255ba6-b1b2-4d94-85c3-49dbff685712",
        "cursor": {
          "ref": "286f29db-9352-4660-ba29-d88f8bb28a5e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4436abb9-bb50-4e1b-9af2-a45db96f30e8"
        },
        "item": {
          "id": "ac255ba6-b1b2-4d94-85c3-49dbff685712",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3f431333-7f0e-49ce-aeff-eb4abac37c77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac255ba6-b1b2-4d94-85c3-49dbff685712",
        "cursor": {
          "ref": "286f29db-9352-4660-ba29-d88f8bb28a5e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4436abb9-bb50-4e1b-9af2-a45db96f30e8"
        },
        "item": {
          "id": "ac255ba6-b1b2-4d94-85c3-49dbff685712",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3f431333-7f0e-49ce-aeff-eb4abac37c77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ff6322-7704-4713-82d0-3fd0734fcb8f",
        "cursor": {
          "ref": "c5b1fe40-84ae-4716-bf3d-c7ca08308127",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "14a4b299-1034-4c9a-a224-7df6fa568793"
        },
        "item": {
          "id": "c3ff6322-7704-4713-82d0-3fd0734fcb8f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dca11af0-4e28-4ab5-8d9e-3af2433531eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ff6322-7704-4713-82d0-3fd0734fcb8f",
        "cursor": {
          "ref": "c5b1fe40-84ae-4716-bf3d-c7ca08308127",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "14a4b299-1034-4c9a-a224-7df6fa568793"
        },
        "item": {
          "id": "c3ff6322-7704-4713-82d0-3fd0734fcb8f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dca11af0-4e28-4ab5-8d9e-3af2433531eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af85e8c1-5a21-463a-b558-d975f04742d8",
        "cursor": {
          "ref": "a7f245ee-daa6-49f6-b971-4736a3ba9cb9",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "c4b2eddc-11c9-4bd4-8cc1-e9d88df16827"
        },
        "item": {
          "id": "af85e8c1-5a21-463a-b558-d975f04742d8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9dc4ef65-472e-40c4-b204-e3cdf4cf118d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af85e8c1-5a21-463a-b558-d975f04742d8",
        "cursor": {
          "ref": "a7f245ee-daa6-49f6-b971-4736a3ba9cb9",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "c4b2eddc-11c9-4bd4-8cc1-e9d88df16827"
        },
        "item": {
          "id": "af85e8c1-5a21-463a-b558-d975f04742d8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9dc4ef65-472e-40c4-b204-e3cdf4cf118d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52085d12-d469-476a-9618-9ca71bacd124",
        "cursor": {
          "ref": "b443d290-57fc-443e-bc51-3feea71251d3",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b9a9bc88-3a5f-4244-92fa-d0215fe166ec"
        },
        "item": {
          "id": "52085d12-d469-476a-9618-9ca71bacd124",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d216099a-8eb4-40d9-a9d9-1774051714f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52085d12-d469-476a-9618-9ca71bacd124",
        "cursor": {
          "ref": "b443d290-57fc-443e-bc51-3feea71251d3",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b9a9bc88-3a5f-4244-92fa-d0215fe166ec"
        },
        "item": {
          "id": "52085d12-d469-476a-9618-9ca71bacd124",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d216099a-8eb4-40d9-a9d9-1774051714f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b363ddb-5974-4ff0-8572-f2b86fe6c06d",
        "cursor": {
          "ref": "43afb8c3-ec8e-4558-8dea-cb155fe6a212",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c0e11e59-fd14-46b8-ac86-1705ee400a48"
        },
        "item": {
          "id": "3b363ddb-5974-4ff0-8572-f2b86fe6c06d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8615abfe-e9dd-42f0-b2ba-ed34142a53c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "3b363ddb-5974-4ff0-8572-f2b86fe6c06d",
        "cursor": {
          "ref": "43afb8c3-ec8e-4558-8dea-cb155fe6a212",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c0e11e59-fd14-46b8-ac86-1705ee400a48"
        },
        "item": {
          "id": "3b363ddb-5974-4ff0-8572-f2b86fe6c06d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8615abfe-e9dd-42f0-b2ba-ed34142a53c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "6a67d5b5-856f-47d6-b4f5-ed2d1b50706f",
        "cursor": {
          "ref": "731fbd17-06ee-492b-9513-a81bd17db2fc",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "57467c86-add9-43f9-ab39-6e3081be14da"
        },
        "item": {
          "id": "6a67d5b5-856f-47d6-b4f5-ed2d1b50706f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b182e4c1-1190-402a-a519-522e280a8c54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "6a67d5b5-856f-47d6-b4f5-ed2d1b50706f",
        "cursor": {
          "ref": "731fbd17-06ee-492b-9513-a81bd17db2fc",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "57467c86-add9-43f9-ab39-6e3081be14da"
        },
        "item": {
          "id": "6a67d5b5-856f-47d6-b4f5-ed2d1b50706f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b182e4c1-1190-402a-a519-522e280a8c54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "349cfe86-4afd-4be9-813e-7f2032f3e6c4",
        "cursor": {
          "ref": "426a248a-9ca9-443b-863f-371c81391c6f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8b9d1239-4b4c-4be1-8822-dbfe436b20ba"
        },
        "item": {
          "id": "349cfe86-4afd-4be9-813e-7f2032f3e6c4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dd31025e-f458-49e2-9383-edcb7c578d3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "349cfe86-4afd-4be9-813e-7f2032f3e6c4",
        "cursor": {
          "ref": "426a248a-9ca9-443b-863f-371c81391c6f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8b9d1239-4b4c-4be1-8822-dbfe436b20ba"
        },
        "item": {
          "id": "349cfe86-4afd-4be9-813e-7f2032f3e6c4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dd31025e-f458-49e2-9383-edcb7c578d3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "66ac00d2-1ae5-4b86-952a-ae01ca80a0a8",
        "cursor": {
          "ref": "6753b6bc-4646-4bca-b0c7-b7d7839d9912",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "934c39e6-9968-4ecc-bd45-b8d54f5ede9e"
        },
        "item": {
          "id": "66ac00d2-1ae5-4b86-952a-ae01ca80a0a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e1ff33f8-c782-4b85-a667-f3c506044518",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ac00d2-1ae5-4b86-952a-ae01ca80a0a8",
        "cursor": {
          "ref": "6753b6bc-4646-4bca-b0c7-b7d7839d9912",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "934c39e6-9968-4ecc-bd45-b8d54f5ede9e"
        },
        "item": {
          "id": "66ac00d2-1ae5-4b86-952a-ae01ca80a0a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e1ff33f8-c782-4b85-a667-f3c506044518",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ac00d2-1ae5-4b86-952a-ae01ca80a0a8",
        "cursor": {
          "ref": "6753b6bc-4646-4bca-b0c7-b7d7839d9912",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "934c39e6-9968-4ecc-bd45-b8d54f5ede9e"
        },
        "item": {
          "id": "66ac00d2-1ae5-4b86-952a-ae01ca80a0a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e1ff33f8-c782-4b85-a667-f3c506044518",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a251654-62e7-4648-b886-377ff3a4e106",
        "cursor": {
          "ref": "d4d8e72e-37ec-499b-ba7f-7fe3bcc7a86c",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d1a3add7-e64d-4d7b-86a2-cd91f6eb0677"
        },
        "item": {
          "id": "0a251654-62e7-4648-b886-377ff3a4e106",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1088719a-5e63-4ad3-8472-4f1db402c526",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a251654-62e7-4648-b886-377ff3a4e106",
        "cursor": {
          "ref": "d4d8e72e-37ec-499b-ba7f-7fe3bcc7a86c",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d1a3add7-e64d-4d7b-86a2-cd91f6eb0677"
        },
        "item": {
          "id": "0a251654-62e7-4648-b886-377ff3a4e106",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1088719a-5e63-4ad3-8472-4f1db402c526",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79278510-f1d9-42aa-8a88-2e770fa34c1e",
        "cursor": {
          "ref": "89f9ca27-eb7b-4d75-82aa-57b48b77e1ed",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "cad23532-d48a-48e4-a0d6-2ecb38111bf3"
        },
        "item": {
          "id": "79278510-f1d9-42aa-8a88-2e770fa34c1e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7d457ef1-e16b-48a9-aa22-d472720d2b9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79278510-f1d9-42aa-8a88-2e770fa34c1e",
        "cursor": {
          "ref": "89f9ca27-eb7b-4d75-82aa-57b48b77e1ed",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "cad23532-d48a-48e4-a0d6-2ecb38111bf3"
        },
        "item": {
          "id": "79278510-f1d9-42aa-8a88-2e770fa34c1e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7d457ef1-e16b-48a9-aa22-d472720d2b9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}