{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a98cb452-3790-4246-a535-c6d36a38b583",
        "name": "Clear Cache",
        "item": [
          {
            "id": "23335aab-dd5b-49a7-9a79-dd26665e4326",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a584ec15-4598-404c-be75-0d6ad3d71986",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c81b1deb-ea84-4a9a-8a19-34959950fb74"
                }
              }
            ]
          },
          {
            "id": "f59efcf8-437e-421e-a66d-b0807e1e0700",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "314ec15f-6f09-4912-b467-cf7d02b344f3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "46644f53-875f-45f9-87fe-01be015916f4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "066a96e5-b47c-49a3-9b42-02e587291ba9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "abfcd404-d481-4093-8860-dccb604398f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc95e4f7-4646-4d26-8b47-68e91d9810d5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1d0d87f-31db-4a20-af65-0948a18ed92d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa7f13e9-8cb3-4866-8a1b-584645b0e2b6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e4d8b4d8-5178-4381-bad1-511e9e8bb1f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e1fee7b-eb44-439a-9125-3ed245c4774b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9a7d51ab-0a60-4860-8e04-c8da427f7c35",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c993927f-a806-47d3-a734-2fea3a6fb10c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68bedb3d-878b-4682-b297-dc0925a8f40b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "caffa003-1b79-4c57-94de-93681c8f02fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7c67160-6d71-4b6b-96a6-31f87b99bef5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f39d761-877a-42f2-9d9d-fee98330448b"
            }
          }
        ]
      },
      {
        "id": "702ff04c-4138-444d-9bb7-43857d6ddf59",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d4b2ead7-c8a2-4c91-911a-6a2f6e4b0bc1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94c3081d-9bc3-4267-b0b1-b8f4901f5ff3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a903d9f0-9b8b-4c85-ba25-450abc1af3d1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f46f1ca-0466-4741-a7be-c0b1f621bfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da10131c-a300-47f8-a890-e972fb9a600f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998f14d0-7fed-471f-bfa6-83c56510b110",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfd5c9e-f7ab-42e1-85f9-1aa894355e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cbdb968-affa-4853-a6cc-5f015102fb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1d8940-fa83-4c37-950f-34ac0dd28c2c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1b4960-ac88-4c2c-8c0d-e6bdf7ed7d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77b53a33-f7ed-4c45-bb0b-893e291df091"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b713b6b9-9ec2-4889-a278-509292ffb0d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12b44b1b-f7df-4bd5-807c-79b74d803885",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5182e5-5f24-4c3b-ba76-258ea66a3136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0caa47bb-b77e-4f54-af6c-1b16a4adb398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e52b7b-1efb-4fb2-bf11-c153b7a2d6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c98983c-3921-440b-a44c-959707264384"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "446bb31e-c36d-4ee4-9f03-21ecd60d2fc6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "24d67baf-927c-49cc-9884-9a86744b5007",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06ecde9d-1347-491d-8c08-74a8de3cafd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dcf7ca4d-5cde-458f-841b-88267d2ae46d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "463c84f1-5dc3-4cd8-8b00-3bd9618efc89",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "af529c81-7832-4ba3-87f1-53083f4fe1fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ef5f1ac-cd3f-4127-979b-2f98dc0f0452",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c12980f-b78b-42be-befe-f2126f2276f9"
            }
          }
        ]
      },
      {
        "id": "cffad04e-ea35-4913-92e0-2c1e985d30fd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ff49b7ab-b584-4bbf-b52b-bf82b6cb3823",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9340af61-e6eb-44d9-9adc-69f743f6f0a7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f8ba208e-f126-46a3-a6d0-454f4df89594",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b20821-eaca-4633-a73b-6308cc693fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937de65c-aa98-4f75-8497-7354630a4477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf889fe-4f56-46fc-ae89-5fc2d20bc78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c7284d5-10ba-441f-a460-647f2069b2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4896ca14-3879-4377-9724-460047be42eb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55e7d0a-6de6-4264-8965-e8e8e7c45705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ea7c73-9928-458a-a3b3-b2b1b8051aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5718bc48-8947-410d-9a51-28f860ffd0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99225003-6645-49f8-b21c-8af448cb2f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a122d7-770c-4f4c-8f21-d369e19fa48a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598d64dd-106a-403d-9599-0e461ac948b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de892ddc-b92c-4233-a11f-af1a6a5a11dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb541ba4-58c1-49a5-a854-f1ce723ccea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24027f34-30b8-41f3-a467-99c696c13d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e70f0b-b690-460b-8e9f-c8fff075f042",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d9456a-0e80-4cfc-b20f-cef2a5adcf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc1fe0d-bb46-457a-81a8-d92a45d5fce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d763bb43-fa8e-4805-a8e7-7a3f1053606b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3d80803-951c-4be9-9476-a50c82c0d65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec5dcce-323d-4f06-b787-fcc0aa4e7a70",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06fada8-b858-4fd0-8756-e5aa4a765331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8d7dae-f34b-4116-b96a-6003017202fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc0be9f-2621-457e-b0a4-3edd27326d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81718a9b-8065-49f4-bf2e-61ee38fdcff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2e8d26-75d2-4bba-87ce-c428255b9ca8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26b503f-3da9-435f-939c-84ca6a3d9922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e7fdcd-b259-4f88-8b1f-e1f338ef9482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30691b6e-33f1-420e-94fc-8f04f739b52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8952ae34-6339-4e4d-8fdb-5b04b63a2ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950d4790-6ae0-4c8c-8def-167254200917",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6eaec6-3757-4ff5-b7b4-dd9c9b72f0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495481b7-ba9f-4b7c-bdbb-2e8d1bf2937b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aeb8f21-a099-4402-a2ab-add2928f9367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc11d11d-4095-4de4-a0dd-8c6af94cbfaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bd223f-f00f-475d-bc76-bff59ba81aaa",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d569548-6572-4890-965c-b390b305e2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b51a48-517d-4d64-9872-cc1016d2c768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0035dcd-8b14-4b4a-8665-fa0c1fa2cd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7a6a522-e388-4a64-be13-798f5cd67222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41542e90-04c7-4d9f-91d2-496628c61e4b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f3c6e6-732e-48ca-8650-71b857f8bdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99b57e7-3c3a-4864-8041-25bce1f4b657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe005f1-3a67-41a4-9977-9b478856812b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86ec60ac-5e00-4d31-a26c-4b351d4fc4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bdd9e5-b172-4f7e-a84b-af840a19f2ff",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bf9552-9e83-411d-94d4-8278a4bf0c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba6c5ee-eeaf-45a5-88db-28e5f1c4b6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a62839-eb06-4fa7-8bab-25dc8c49fee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "996cc343-ad5d-47d6-a29a-10a58e39cf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266afa2a-69a5-4dca-8379-09ff88865b0b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e06cb89-2c6c-4a92-aa82-e8177836010b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834575fa-3889-478d-81b9-601dcefea734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263f484c-866e-49f5-bb57-f95bee715732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cc42d53-4771-429c-a98b-ba810cd639be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386fcffe-546a-4f31-bddc-3382fdcbf7de",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec05f70-6619-4e2b-9f7e-bf25ba869ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf2a4ac-3ce9-4b5c-90b2-606b6ab9b1d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc32ad24-1a5f-469e-b778-41ff67f6e325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a17957d-ad09-49b2-ba11-74dfb0e4c775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51780e8-6e10-4b83-99b9-4ff94e599a92",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458981c2-df4c-4bad-bb4e-2ff4143c97ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440edd6f-c72b-43d1-88dd-c4428bbb675e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f045b875-c70a-4421-9248-4bf40488ed0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5fcb512-c45b-4af5-9405-3cfb327ba173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87548956-61ad-4f7c-a66c-913f5088a953",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6708b12-d3db-4b63-beb6-6cf4a65c02ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9d9d9d-9731-49e9-9f0c-a1d5202f79a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4449e69f-6ffe-40b1-8e19-cad7c34943c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec229b66-eedf-49e2-b7bd-22c1150036ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957b2295-926e-4c15-8605-10b9357d943b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f00f1cf-63ff-4080-8875-3225c8aa8df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbf6ebc-86de-416d-83a2-3cfd0fe9a095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374163fc-49ad-45f4-b816-ab9398e0edf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6648d90a-0ee9-4574-a9d6-312400d1c4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c86df9-592e-4047-816a-d15f7671ab7c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7064bc-4629-4e4c-aedb-3e545817be30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca988857-8c0a-47e9-9e5f-eae5006e0f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c5b33f-fe83-4c7c-afb1-475a588c1856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19becd50-010d-48a0-91bf-b15b719de0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb905f1-8056-4bb5-ae20-c361aad58606",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f3c0ba-a359-47af-83f8-390f427fc2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e49a549-a6ed-4e0e-a17e-1a3ab072aad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bca31be-2569-483c-a728-7bb3a5506351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0b59697-3165-4fa6-a9aa-9b2fbe7b6898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3be52d4-c214-4453-af80-86d40eade35d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038b5683-4d2b-4022-b3ce-2b158e7e1231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76a2159-a138-47c8-b30a-74d16a9c2215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6566944c-f55e-4dc0-9373-848ac638b935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "97158bfe-21f0-4ba7-a449-631ce0922256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e98be5f-96bc-401f-baf4-9f4e492a4e40",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459ef36c-f612-4e04-b787-cfcca30165ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d21b31a-2d03-4075-a5dd-9696837be720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7488c0ed-edd8-4f82-892b-9969883470fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a365be-1b1d-4e34-ae93-14519e1961a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b53da0-5a37-4856-bcfb-00908672853d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8b591e-ed25-407a-b5ba-8f2d57455fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f9a781-b5db-468e-82f2-5973a22a636b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e7bb13-e1d5-4cdb-b442-8bc1d40741df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39bc6a89-dad8-4b3c-b9a4-4c8168c49a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1195c605-54ea-470f-8107-479770181fa1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470f254e-2b10-47c2-b283-29b3301c88c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6490af83-a48d-4e0c-aa59-ac0035dc2a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c32b287-8883-4a64-9cc1-7893aef64c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b05e825a-dbe5-400f-8efd-38e75109157f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bab979-a621-46a0-a253-e8063a387d42",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e115752-3fda-43c9-8c5a-287cfd144d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5421c711-3e79-4e90-a1f1-86e5e2af5a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a61f86d-6b3d-4ba7-9c16-c34ba82e8768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55bb2401-c30a-4fb1-a093-49d616c64f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8078e708-6ba4-4cae-b508-1203e49dfc52",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28b6d59-a1e1-4079-9880-fa1d25caab80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e95854-ca09-4893-b510-dd0cf33c4482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cddb04e-e811-4f03-a34c-703c98958cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "acc9a899-4509-41f7-bda4-e9b5839f86d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c3b5ea-0906-423a-b3df-06f4124fc003",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bb4b02-58b7-4e3c-9dea-5693bda2aaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9828339-a981-4a15-96ac-9e3b29d41021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6921097d-4c2f-4834-bd3e-2b14bcfdf9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "14cfed16-6c7d-424f-bc85-800663f99e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3c3343-0d3b-4621-9774-5b8e86914579",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25a2dfc-7eb7-44c2-835b-44911a525b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "958b7a48-55f2-4623-b1ff-e3a3a077e3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38034bb-76d5-44ad-a41f-5151db2f7a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd622b3-e556-4597-b109-5e3aa83e2dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14dbc55-786a-403d-bebc-46399d7e1cea",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e56d735-e2f2-4cca-861e-faaad95acb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a59db9-1107-4736-8ba2-4db077d0d040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508ef495-0a4b-4295-8105-7b28c3e8f204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a1747b-7896-492c-938c-ff2aaefdd9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3de3be3-1833-427d-930a-e5016bffff3f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218912ba-884a-4ed0-9713-dd0ec61939cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5f5ce9-8ac4-4953-ae0c-406369ede077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690e9b98-cc21-41e9-8ad1-9864bc0e202f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e60d62-2103-4557-9c7a-7975bcd546a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae28657-9f24-44bd-8a3f-cc92dcef0866",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a06b7c8-e0cb-4e67-8bb8-b8a49095c7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d9c0c3-3835-4d91-bced-1caa3e5fa5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1987a9c1-1534-4fb5-961e-dc196850fdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39985d3b-1c4b-40ef-bda4-c59a82507c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6f9686-d4f9-4b6b-9176-72600eb7ba3f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c1d682-a26d-4ac5-9b01-bfa2634c4b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd90a393-d266-4ee7-9524-9c071d4beee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886ecf71-dbb7-4bf3-b753-f09f565e2a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "572c98d9-6fed-4b06-a298-036ebffb3cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e075791-f3ca-4f4b-8e26-3d090cf21734",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974b06ee-9793-4797-b44a-417981ff48bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538e8469-0c13-4a47-a5b8-0eb5a3406c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34459ba0-a47b-4c6f-b41f-977de32d4808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "33542192-8b72-4018-95c7-02ebb94ac58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1b2744-ee8c-44e5-9096-f0010303fa02",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "013edc2c-190c-412a-8115-6c02d3f12ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2bd2480-b6db-4548-bace-8261c0154875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e074b3-874c-410c-a036-516af8b123fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "453c74e0-08e8-4181-95db-ab45e2215272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89909d5-b256-4bb8-8be6-a2414552793c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86293717-e8b7-4e4a-a551-b4724026639b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3cca2e-ef2b-43e9-8d18-d5826e2d71bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a664be-86e3-4aad-9f05-f3222ce52440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "600c4950-0cfe-4f74-8c97-6d8ea876e376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255cc6cb-67e6-4825-92be-9648b5ebae2f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a16f4d9-5d50-4d55-badd-3e59c27b7919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886adb79-9f44-4762-86c5-f4585b8716c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610ce1ce-ff9f-4738-9f36-633a455983a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af1db799-6057-4c7b-a36a-98d9ce3ddeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef999cf8-3d9b-475e-863a-c3105af96775",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071a659f-b68b-409c-8c06-8c6a16be8b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290c8b86-bfb0-4c92-9b2c-053d4c9df006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb67e14-ce1b-4120-9ed0-ec9c2020d099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34773d40-0894-427a-b32e-a1cd0b913d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c992ed-1083-42e3-9956-53531a6dbc3b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68b6a5d-7ebf-4e18-9ce1-dfde486d2279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832d2752-d8ec-4fd9-8e59-9a3ff3999a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49be02f-86d9-4b5d-9a4e-25aec496780f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "521f7f90-5f50-40c5-8c6a-737b5cef7ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f43831-6f0f-4a93-b2d4-9d8e780f4a26",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a788a8-bf54-4800-8beb-947756ddf0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5918ce55-04c2-4af2-9f25-b0ca90e036df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f47c15b-b482-43a6-9cf8-bd679dc6c6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff30136-2a87-417f-a560-2154641cc595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec6d97d-14f4-4e7e-a3c2-aa17ca5ac725",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6feb9f50-4ea8-411b-ad95-b637d22d933b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468b9af8-1296-4c9e-bc74-cadd3fddc8ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42858e4-d508-4cb1-961e-71428b3f1463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e82b2a70-83d7-4b30-842d-c127bff4f5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c840917-a877-4a72-929e-e2307044bb5d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d516502-5d78-4544-9666-50ac7e7f4a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d8791b-77ed-4cf1-9755-412d9676a86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c313d8c-aa9f-4ac8-8cbf-92021bdbb6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2866a7-b3a3-4b70-a1b9-81af8e35a154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7867533-e7c9-4965-b2fd-b5a3981b6760",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e2f9bd-55fd-4633-b29d-593813d6622c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd7abe1-e00d-4346-8bb0-b59cfea75666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87edddc6-8e2c-414e-bd17-b2bbb7375592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fedff32-66ed-406f-951f-696831a40f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5442c92-5d5d-40a0-aeee-2dcd201118dd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911a6e91-3f38-4c15-8491-a43beb3fb08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb7f76f0-3139-4eca-bea6-289883f14478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5baff86e-be54-4dac-8f72-69ff32c4bcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d1bdc1-6e08-49bd-8c23-812d3476e877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23e3a66-1324-45c3-ba05-b2c3cd9e0a7d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524eec82-acaf-43d4-92f2-7c565bd9b634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbd9d06-d48d-4bd5-bbfa-2923d66a92ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adaf9a41-9f02-4c06-93f5-6bd0947778b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "74e02dd2-bdea-422c-8341-b0ecd58e90da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afea0df3-8537-4260-a904-6dd587475c13",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f983ffc2-b3e4-43aa-b38e-1a43222c9947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51219715-face-4f66-a78b-c552e90b732c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5500c1eb-a401-4a15-92ba-cc9c6516ce86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "dc65ced1-86b1-453a-bfc9-4bf9ab816e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92312f09-e3d6-4654-98f6-615ddf11da8c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8eb8a1-4d5c-41a9-b7a9-8d3e2ce760cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5898bc-1eca-4809-8ced-e800ee766adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33479734-812b-43f5-9040-3adfd9194116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a507e82-e4e3-43e8-86fc-b9222e454a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b9da83-14c1-458f-b412-2da3fea62162",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67915a9-fa57-4f57-a848-e3a329913ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab4b9fe2-19bf-46a6-b1f5-3c2f785f6feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fff6d4-8d20-40e6-8037-bc75dedb9dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "70860476-9eee-48d6-b4b0-0b23eba28565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c528aa0e-1e23-4158-8ca6-29813b83b7e2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a190458-9ca3-4dd8-a823-36ebb5035e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1c8658-b255-4e2b-8706-6f772bec18ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48137fce-5f19-4e90-8f03-f871e4048ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1373f07f-20b1-445e-a9e1-232bd6c442bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333fde08-6d58-4aa0-ad74-e534a3d83659",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85734e1a-c85b-4237-ab43-11d4f5aaa4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6460338b-4d42-4fb1-a2a8-7e8206f1565b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399d4f32-2f7e-4eca-b727-98bad77c7717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8417c33-0f5f-4f7d-acf4-c9511ed3ab17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d37c60e-b972-44f5-a559-dcebf9734a6d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3f7a66-5444-445c-84cc-509173af4df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7ba59b-1fc4-4e90-917d-eae269f9eae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e6cf77-e36d-4387-9257-06ea85d282e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71c18aed-4bb9-49a2-ae30-5fd8e899416d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39563c2-e9df-45b6-ad09-f2415aef19f7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ba5c37-57f1-426b-aa80-610964242280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd86aa6-31d1-4aef-a8e7-ce716c1dee96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf20f3e4-0c3e-4d2a-a5bf-d27ed5c75565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a88ade77-a2ca-479f-83ff-bf4f6dc39d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc33f411-4f6d-4eca-a7df-497745331bb4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b753c4-fcf7-4f2a-bc77-b6cf1216544f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3563aa60-79fb-47ad-b3ce-a4f53a0f4f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e260b6-d88b-4eb4-b88e-b281d06838a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac58c20-098b-4191-808a-99efbd711081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd0b1aa-f65b-45ad-838f-970f6b9ace00",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4328d3a0-7295-420d-ad85-f610080bfb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb9cea9-e449-4d02-8b3d-1c7a37ed13fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5da3bfa-6727-4519-ae8a-01fba49538c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "789d2675-7ce8-4224-a150-d16f8ea5729d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666b5158-54a5-466c-b73e-53161d9aff12",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010d42b1-7b6a-4863-a290-c7ee1d2f61cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1cfc82-0c09-4e82-b740-f812de51b73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4a1840-8aca-446c-861e-be47ff3ccf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8bcc9f-f0aa-4f53-9229-2256628b9c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7620cbbc-f08b-410b-8575-3ee61bb1ea75",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5053cf01-8567-41d0-ac27-0f0f4b8d6442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06aef9e5-2ff7-4a48-a5ae-f7fb4182e96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e766f55-bca9-4fe0-ac82-14dbdc2aac8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb04f332-e00e-46bb-a2c5-8c43a0345b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e62a8e-cf72-4106-a820-19d579ff0dc7",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cb780e-fd6e-442f-94de-c16d1944aa43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125f2b56-477d-42c1-9a89-e3c4fc61160e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612e12dc-b232-49ba-8e8f-d781ef6ef1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aad64245-e741-4ca6-ab44-922c16835f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2418f70a-f517-4383-ae65-5e7301817d2d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffedcb8-aacb-464e-a2b1-613a98099c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b398ae13-c149-4ae6-9177-78989255e9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cb071f-389d-436a-a2db-81efc9900aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "128cb7a5-b1ca-4d5e-956c-be3d88e1584b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405132a6-6026-4313-aa65-4b86c3f4921e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a81bf3-7979-4d2d-8ac9-41a97bfa39e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc65db9c-45d2-4fbf-9803-9c24d5cf04de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c36c7c-4af6-4b9a-942c-31aaf598d8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97ced3ae-ad8f-427f-9703-e0ab0258a08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05052a68-4927-4f43-bf5a-d86d1261a680",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3ba154-a1c6-49dc-8e0d-7b6b01405d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3853cd-2048-483e-81b8-396accb0183b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb6b21a-ddb7-429e-8e91-c177910bbf10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2e0888b8-91c8-435a-b802-cf6cf01503fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0ba6bf-135e-45da-b659-361c865d9853",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f83272a-fc20-4f8a-af44-ae6e621f46d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b592cb82-8f82-45d1-95de-6d65b712f5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63102f08-b9c3-402f-b2fa-ab5f997d3c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4469667a-6208-47c4-8769-e406db7b1b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16e850e-6642-4c4c-a8a0-20df60a401ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eceb4e1-4678-4d6d-a3cd-3b7bf8b5554b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03bc0be8-24a7-4174-a729-42f89e7a70bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebac3746-02fd-416c-b279-f82f52c39359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e49b57-8b4d-4044-8a5d-0c78d7ab4ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbd3c1f-b999-42a5-b393-0aab0a00c8e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845f16b7-3a82-4c73-a867-91e479ba8533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a09d84-9d4c-44d7-914c-88a66d481014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7066ebf8-8bf1-4613-9ea4-de4e84f4969e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5802316e-33e6-47e0-a040-7d46900c09f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433a8fca-bb03-4e81-b323-7385b37a9a8c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63be24ff-6dfc-49a1-90e6-f87986e0422f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fdba3a-6e85-439d-8e74-6e5f5c9ac0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23554e3-e449-418a-8d05-2b49a10d01c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee6a81c3-105f-4905-961a-99dd33cd4d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37c9391-06db-4c22-9e39-af37ac8ff261",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3962e12-c249-41b9-be3c-df8d864eb7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1035741d-763c-458c-af31-224a512c0f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad907789-07ee-4897-8ce8-7c5e25db0ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a8902d-2849-4207-babe-a96a88bdf786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e960eb-8013-4b1c-9796-bab67ed60195",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bffb21-7a38-4eda-a202-b7d3303f4eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc8928c-c3e7-48f7-9353-c7dde69d8907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fd784c-54a5-4ae8-82c6-0b4efa1980af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff0b121-423f-41fa-b54a-e7e6da2404bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f643b5b-115e-43b6-8ebd-08ccf29aa39d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16603820-4363-471a-b94e-a542024294f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619257f1-4e24-448d-b70e-97928ec88989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083e15e5-2ffa-479d-8aed-49f83b46a309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e11cd6ab-86ad-4184-ab52-b43a58a6ef8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ee3c0f-bf71-472d-b11c-7e854f16494a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eec7d6a-56a3-452f-85c3-d16d27bbdbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c801c6-d34b-4e5c-8ffa-00c4121e1cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed226f7-8499-44db-9e9c-da381668c135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3635212f-6b1c-453c-aca8-aa7fe481fdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c843bd5b-f34b-477d-bec6-fee2245577b5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86116ca-4bbf-4757-b7df-e1410e14d4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23432b64-4855-453d-8796-c65fd1296af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746d9f7b-fd2b-40a0-a9ca-d8c7182b3653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7356934b-1421-414b-a980-e6fd196f185c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9758e06-b2c2-4ae5-a8f3-00511e89e4d2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b8cf6e-ed5d-48b2-b764-ebf631af6d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1528bda-349c-4f44-a76b-6936ed922d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb79bc51-3848-4f28-abb2-bc6b97eb05ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0822f311-8736-4039-aa74-bcaec2abfc09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e8d0e3-9e5b-4fcb-bd5e-7583451c8ac2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f06a45f-6b99-47da-a931-ecaa98b4c30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4759ff30-4136-4438-ba31-8264e2654801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49be4ca-8697-45fc-9e78-1b7023e06f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "073cd63e-f6c9-44d8-a747-7c480523e9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b7c70b-b392-49b5-93da-4604a0da5516",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd12b99f-93c2-4b91-9430-e14c8710152f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d8308a-42f9-49cc-af86-26c46f86b43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f62590-5483-49dd-bae9-89a151d02c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9c7c0b-ccc4-4996-bdf9-8ffdc3ff068a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a53f7a-af6c-4115-aa81-b4950a8223b4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aaa2503-b57b-4ba7-a4e0-db01183fd94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4adaef52-dd94-4cf4-afbc-b5ef8e9b84c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338108e5-0e09-447c-ac5d-9f2216386b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "16371e39-d247-4deb-a217-2d979d045f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd336ae-0256-459b-af68-4c5d1450bf26",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fafd7b-8602-48bc-9a93-34190ed9c095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32b7309-1234-4427-88c6-000e1047c5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066e48f3-7f21-4f83-88a6-243f79b56e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6ae6b7-9c92-4557-b901-6991f26e960c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e97d9d-9491-4d00-b034-b83a14485ae2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d636adfb-a37e-4a49-a3fb-8b2f50b3d624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b3e183-a4ea-469b-b4b0-9954894b8c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97af9d10-f0ae-4000-946b-920d866be421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f84c357-05e6-4ab6-bc13-06a7b5d0be77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6231858e-c05f-4d0a-95c0-7bdd49134186",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e69623d-03e6-4994-b41d-4b3257f3bbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce164a4-cb0f-498f-a41c-2942cbd368c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1e6911-637b-4046-882e-41cf8c93235f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46d12829-b3b2-4f05-b7c8-74feeb124552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f408df64-4004-4d42-ba4f-5f93c97efcb0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da61756-1853-4cdf-8621-4f2cdc6ca52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc593f2-15e2-4e65-87db-0d388c3936cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691bf4a0-4c68-47ad-95e7-003a2c2e3e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ebf388f-25c2-43d0-a040-20de0a49bb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33b05d0-c9fb-41e4-a095-165a5d5d2e2b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e173f968-ea27-463c-8184-98ec07f5c5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd77664-c9a7-408e-851f-d7820f5a502b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec16816-eb62-4160-85c1-0cb77d074a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98831c28-1ab9-43c0-8b33-2f54a815d5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd53c8f3-6111-4262-b246-373d81807239",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b51b88-f886-4971-a44a-ea221577af7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b603b388-7435-4723-ad3b-425a364534ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fd6ea0-03ae-42aa-81a8-d73b9f33c438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc26846e-0c4b-405a-96c3-3513daa42606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e978c469-bbd3-49b5-afd6-fa3671d68540",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e672b1-7e4a-4647-8129-eefc3a46a47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53125002-f118-4352-98d8-c34d44ef5787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386b5c41-f69d-4a7d-9728-a046c0b31863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57c3303d-9fd3-4374-a88c-2e09aacf3278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39e5a49-1def-4df6-90fb-f7f3cade8201",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70634af1-e8ae-43cc-a890-8e153bd98d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab989901-4dc5-45fe-a9b3-7bbc4fdeb474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32546ceb-b6b1-4959-8c63-f5ecf339cd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "630421e3-7a78-44a5-9e89-e5d8abc2bf94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed6edaa-5112-4374-93f4-c6b57679bfac",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed156431-ed8c-400c-af73-77392c32dfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21dd48c-066b-4a2e-b3b4-80551b583621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b93ae95-f9fa-47fd-8a7b-45d43f1a0534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c7b807-923f-49fa-8e5e-897da37408c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d983c230-caee-403d-8f10-dab226f07691",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb543a87-f8fe-4f1a-8739-83e859c98542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9ad0f7-4692-43a0-a02d-0535ec3566bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481d7bb9-a1c7-40a5-99e0-661864f72682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e431eaa2-4b38-4f6a-b916-7696e4ba34e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241d5d22-7063-440b-a0c5-4e3c85005cf5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147e5ca7-9aa2-484f-976f-0bf8823f2330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a63fd4-a3c5-41b2-b094-f15e0bcdb36c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049d80d1-20a2-4ccf-9361-8249b9fb6009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d07f8909-2936-4425-b9ce-18ea0defedd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ed2ca4-903f-40fb-8216-d00c96466338",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f6a3b1-04e3-48d8-8f5b-78973aa3bdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc17f2a3-a75c-469c-947b-cc6a57b32549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbf7d34-a8eb-460c-a8ad-5f4163f8a0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b69bfd-6bad-485a-b413-9dd718103d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdab8e7-73b5-4d06-9608-5b536e4879ed",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b59c86a-e668-46e2-8389-880eae581fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1531065-e447-49b2-bddb-2333c955b898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d1f881-d0af-4d6d-9820-5c6a3a9de45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f1986a9-8b5c-4441-a0ce-d9480dbc8bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c18ae4e-079f-46b0-bc3a-b2c84e625518",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbb8fae-9b00-4d49-9d07-5a3a1a788561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc84234-dd55-4443-b479-8dca35916177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbd848e-8258-4603-a83e-d3fb95af393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b67875-6a99-43dd-85df-db81dcf8790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e156cb-e25a-46ec-bcad-ef18322e9343",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7c397f-602c-4895-b05f-5cbda5630e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2585b99d-151f-4c97-ba9b-72abfa4ac01b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58528fea-1539-42a7-84c5-a3b5c6f752a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f67735ad-62ad-4011-ba20-1069d2a8d260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224e1a13-4894-4326-b388-b5f709c2ac97",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b5c1fc-4480-4f60-8220-f85f9c683efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7314cf2-2ae9-4168-9e4c-f58ca3d565bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ba7352-9c9b-41ea-a39a-0ee6fc903321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8da2299-20e2-4407-928a-29b712c0fa3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ad6bdb-b4ac-43b8-abee-275f923d1f22",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5459a719-e35e-467c-a1a8-21d512776c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b029054-2836-45ad-9935-b498c32b2743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdd0a14-637f-43d1-83a8-b54152128d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2eaa18-0d38-4817-ab89-fc08f2b532f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd03d907-98c7-4266-ab3a-d2f02c0dabf5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2a0a5e-134b-467b-8958-6b7aaf266680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71363942-a53b-4720-8435-eeb6f0b7a816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15c260b-3e2a-42e4-bcbc-6b80e2b2a7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "32c4af6d-2a6c-4bc3-bdc2-ec5ae89c5609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758936e9-857a-4322-a4e2-45e6e5d570df",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383413f7-3d2e-4c89-a6c7-2e674017772a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d517a965-4a49-4a7f-a05a-b67d95327486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc6da36-ded4-4956-976d-8beb0872df2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed2c8a8-cea4-4153-8866-5cd9cc92abef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b659785e-bdb4-45a7-9bde-becedd585fb5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd53a4f-c359-44c7-be88-2f1b34422f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2efa8996-89c4-4b2f-a6c7-d4de0ddf6a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b640ffd2-059c-4eaf-b507-8b8578452e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "af77b30b-9620-44e9-a69b-0b41320c1645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1679e9d-750d-433d-bd84-67b89b4eea68",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acb9f8b-12c5-48a9-be16-4bc3d1480a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d14dcbd-85e6-4335-89a1-44703682fbe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ce6d04-8aa7-402f-ba9d-3f67461e45ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "05bb431e-6d4f-4a01-bc2e-33cc48877571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd96311b-e59c-42ce-a28d-6206b3ec62ee",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6e9551-849a-4172-8e1c-0a84e7d3f615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2633520b-a799-4282-b524-668231a18f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163008e1-838b-41a4-9313-66edbe7f1976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "359830e2-44dd-4d8e-8aa5-49180e1a47a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fd12d6-1471-4af6-b0f2-6b438eea97af",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa23305-e0ac-41fc-898e-db841734b096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d560505f-87cf-48fc-a44a-56da687abee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c960c647-e52d-48ad-9c7c-1039b085f693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1de4dc93-12ed-4c0f-b78a-1a61947964a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9e0a42df-58da-4f01-aef3-5823b012e65e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5475c39-e584-4156-b114-4010afa722a7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c32a940-887c-4c7c-a55f-b86aaa13fa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87730246-aae6-4276-8072-e63e8d3a88ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dce9e2-eb98-425f-bf60-c708852ad12a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c236248-eb66-41eb-9896-d5bffa631d89"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f29316d-3a61-47a5-a1c0-649e54223935",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dc2e1dd-061a-4f00-a05d-91a3eca9a053"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09007bbe-411a-464f-8de1-b83edac6b6b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75511c95-b253-4ac9-9310-6deb8a7428a2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6c214ccd-91a8-4c95-8a6b-681ad4d9d6fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44de5790-b871-40ea-94b2-f3a4f197f1d1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0802ec75-0c25-47d5-a083-2d2fe0697a5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3ccead2-93d3-4115-ae41-48adc110e640"
                }
              }
            ]
          },
          {
            "id": "f7f6a988-5785-4629-ba97-85885bc01a5f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "99edb5da-949c-4b32-ab19-9a5edb30131b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1969e112-be9d-485b-bd67-61ed7c9d5a2a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9010a8aa-91c2-4b7b-85d9-6c9f510afa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6aad7478-9aa8-4655-b715-c8316f152d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525a0b76-5cab-42ea-86ad-d4030d5f0361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f560a64-270c-4be4-80bf-68fefba88638"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fabe97c8-1308-438d-a1e6-5d2c51160c9b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c116e7cf-b555-4538-8f4e-b9166b0ade0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b606196a-81bd-487d-9198-d1e55661d1f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf2bd902-72f0-4420-9dc1-771b2bbc4bd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6f2f1016-96b4-4600-809e-393d19fb58c8"
                    }
                  }
                ]
              },
              {
                "id": "479e0105-b8e8-4654-ab3b-e9f418522968",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b69e771c-8f37-4e0e-aca9-19ef825d514a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "99de30c1-f3be-4be9-9f58-b707d384e697"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34e2224b-1557-4e62-88f8-0f7b15b81611",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "77a61570-d227-4be7-93a0-407f5bcb941e"
                    }
                  }
                ]
              },
              {
                "id": "aa06db8e-cc3d-444e-b043-2d8c2c46783d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0456e2af-e8ad-433a-8d16-a9ef374b537e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db8133e5-d4d8-47a4-b4c1-5ea443f3e5f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3bbccf0-9602-48cc-be0c-f60b27bf9526",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a6d9aac-66bf-4c86-b005-5ce32d073141"
                    }
                  }
                ]
              },
              {
                "id": "c547e0ad-997c-43be-a695-1cae04cd5d70",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0293bb5f-27bc-4bce-b852-155d3d72f193",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "520de800-b179-45bb-a5c8-8f7f44b573bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b27d15d-1c1b-47eb-805b-f5e05fffac0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4dd0675c-d4ee-4546-ac38-73756720f2b0"
                    }
                  }
                ]
              },
              {
                "id": "bc8be632-1873-45fe-bd7b-b77983d179af",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69c6285a-5ad2-4446-9d74-a843b968ee4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "376ee62c-2d3e-4336-b7e8-02cd9f0ba828"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "248b8a6c-f09e-43e5-bbec-188ae9754940",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "658d826f-ff3d-407a-954f-8a68d4fc8cda"
                    }
                  }
                ]
              },
              {
                "id": "2b25ea67-eb9e-4281-98d5-a0590cb3e93a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "affd63fc-b269-4e6a-9d99-17a862f7474b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37d2e377-2495-4fb0-8610-c8b5aca9f3f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1b0b342-2839-435e-8553-ae6786c0fef7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e0161835-4ff4-4056-8de0-d1cc2dd82046"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "529762d3-44a5-4f99-9d8f-dcefebbf75aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49351aae-a028-42e0-b54a-4bd0e6f622b6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "95f1b9d1-436a-44a5-8a9d-3bedca63bb75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19fc31eb-dbfb-4530-bc51-6d29447fe60d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92f65bdf-c830-4e38-a8ff-bec7903cd54a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "35f9aedc-56cd-432e-a12a-5ceeee8f8464"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89d7be89-a7ef-495c-b81e-34bbf76356b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "404e4ea6-fd43-43fa-bc40-fe0eaa1b9bba"
            }
          }
        ]
      },
      {
        "id": "9a8fee3e-4b71-4b6e-a032-7d9df52742b5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a99190cd-c98c-4ae4-ad22-d479619c46d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0d2c6e14-2824-4b51-82e6-93d7409b6b82",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "76e95e3a-885f-417f-94eb-84ec131d7ede",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d4a237-57ac-4df2-b79d-8421d9617001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "715d2072-8a98-4e12-89ef-7cb60a651b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74b5c10-4309-43ee-8050-e407d9b6d2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f420460f-db26-4284-ba7d-6acb8ba152f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81c3c42-27aa-42d3-a26a-3650525e5d79",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e77d0c0-534e-48d9-afe1-e651ce211916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d916fe7c-ba94-49ea-926c-e57ac08c2dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42348d99-da29-4d4d-a5bc-4d29b8ea3656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d727373e-0f1f-47bb-a308-34d1991cb8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c68881-24fd-47c1-893f-0d6af515988d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ab3a42-625a-46da-8301-d6f8bb72b6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a593e4c1-b497-4123-94d1-6096442acfa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec3cb2a-9920-439a-b650-e5da8a2903ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70397f7d-62cd-4802-8adc-e6ae5564c2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c84517-2e16-46fc-91dc-fc374c1ab460",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ead617-c3a7-4176-a471-012aae296077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bc6d85-2bdc-4be7-b67b-c0714c257e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf2e562-bf11-401f-ae3e-3d63016b4cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bafda79-533f-4526-9115-744ec6548601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f543a782-ac7b-4668-a5ff-0c0ad38f736a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b86a50-92b5-4245-b159-154e2f01be9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4ae6f1-fb0a-497f-b12e-259cafde86dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379a0145-ef9b-4cea-b254-ae6507ad21df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38af159d-9a1f-420a-bc7b-bb1025b99f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04d21d7-760c-484e-b6c3-7a8f71805af9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7893d29-27c3-474b-8c71-defdc31c9104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de4c33f-e994-42d5-83ed-b0dc2516bc85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1683a2f-e81d-455e-9bb6-4f21ca042f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f830971c-a1a7-4f57-9e20-ba541764d409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff4fe0c-4a59-4cc1-8ff6-a2a8737be072",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b7eb28-3c4d-4305-ad81-089e64ba146a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79252467-d538-4adb-8251-846ef8aa55ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906d7961-2ed6-44f2-b09b-77c8750059d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4abf6885-ed43-431b-8b1b-9420e81fbfe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd57424-94e8-4b51-a391-d40b3fb67d83",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b804ae15-8586-4eea-a2ba-b4da2b312015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37028bb-5a49-4a99-be7f-15ccb4612cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcb008c-0e9f-4747-892c-59d940fabe6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44a6d3b0-556c-4de1-b859-90c1690c8d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3392da89-793c-4805-83e7-91687cde2f4d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d0ef2d-94d0-4d00-a331-0865aed26966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221d437e-d593-43f4-a068-bbe5b4c97925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c75140-0066-41ca-b6e5-03825133139f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bdc84b5-562b-42e5-8c7b-06bfa9f98959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beef94a1-e520-4973-8373-3fab479b2f73",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73057bea-9f5b-4a83-813c-e783a938f216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a784dd6-6286-4643-ab3e-e2a0a8db6f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6f31fd-0a59-4b02-a14e-bb8abc7521dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ada020a-4022-412e-8741-ab94a1bee16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbbf1f6-9037-45d6-a4cd-1024f0c3a75d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4319336-1732-4727-b431-6eb5aea1c9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67356368-0871-45d8-a96e-1789d17ff244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f412364d-2122-4a0c-a7bd-aa9f905709c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0fdf77-4af1-467f-82d1-5778fe60f58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27dccde-4784-4470-a3c2-b7e836b28d2f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c629059f-ffd3-4973-a06b-c08e12316c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ebfc1c7-6032-4a4b-85af-595da7322dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f258158-d187-462c-931c-f702e25ecd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f91b7264-ffdc-4b5e-a25d-dff602572765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c2ba7d-4a3a-423f-9304-e9ef130d1676",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e73e44-e8e2-4508-b800-a6275b91e74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429f509f-7a87-433f-bc39-addae2cb2c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09fa5ff-fcd4-4cd2-aee2-375a7a79ac1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "15cd73d3-bb63-4dda-9320-1dbf5cb6a02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8f55e9-f700-40af-97f3-c516662fbc09",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb07c2db-f17b-4248-8f15-6986ee41c6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371c999d-220d-4171-9001-49779e74f8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62dfffe9-a47d-48a4-926d-b3294c1bd39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7dac852-02c0-420c-8f13-ba18b9c03cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b57496-12c8-40a9-9978-92264de7f9ff",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9412005d-d496-4f22-b51c-ad5293fa2dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bda9a2-ed3a-48bd-81cb-6fe72564c9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83eeb15-1222-44c8-b364-6d66ce477688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0e8e49-55b9-424c-a522-91e4e8391895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995f9239-53a7-43fb-9b3b-e80c9eb56fb8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44188adb-344f-4f91-99de-c6e7d4b7f293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b321bc6-06e2-4ba0-b316-0cf4c7cc63bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789fe155-318b-488d-8f75-065f94bb482f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "35562ca2-30a7-47c7-874e-92552384450b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717497e7-ff4f-48c8-b71f-762030492d53",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c3b866-fdb1-45c1-b00b-d547db21cd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0b722a-fc32-4da7-afec-33e3644323fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8210c9c7-d082-4c01-b43b-6509dc4e49d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b652590a-70d4-4b05-87ca-766f5f499b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48713f2-ad48-437c-ae9a-9cfd993ff012",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eeb24ba-f2e8-4d3b-a9b4-afe4cdd0dd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4131fbf6-4768-433a-8930-2cf99c98dc0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73c7fc0-3857-4331-adde-dbc2b3922c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "55b61d1c-09eb-4105-97e8-44fd1f547c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b592717d-aac5-465c-9edf-ae599f600988",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74588ffb-87ad-4bdf-af42-9900ee2b1a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ddd179f-fece-4e19-8f9a-01d2de07846d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae59891-9412-4565-8ab6-db5b5e6b1b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "448858c2-a27c-4d66-916a-59e8cb8e80de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae03d208-7e32-457b-ace5-ee672a1368be",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac7db34-ecf4-4277-abfb-d49dabab3738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f6207a-daca-4cd9-9716-4b2cae41a51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dade7cd-d738-4c66-8fea-6bea420bd441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "195ddee3-91ee-4028-a855-ea9705ae76fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2740e7c3-157e-4a19-8a38-3e08c8bd67a6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc2e173-c231-44c3-bac7-ebeeb9db74fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb12422e-1fab-43a9-bf66-aad25162b642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3b16fe-27d2-4ded-bf7e-4bbd612b58e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f88de724-a7dc-4d3b-8313-70883a1bc7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1404ef28-7caa-4dd8-a92d-7c7422bbfa27",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401cb8a7-3c4b-4313-9bd5-349022aabbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af38d7f-5c53-4592-8f9c-86d4eeb3873a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca89b4b-8e73-4b60-bcfb-a7b3b6e0607d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9e0708-d5de-4137-80b6-8dd67c4108a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1effc8-1088-4a4e-a2bb-9c5093d7d77c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6006316c-f37a-48bc-96f6-01dbdaf8655c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96192cfc-c63e-4bce-813c-f4038989235c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04c0cbd-9249-4d73-b806-b935b4a8a1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d89f69-09e3-4d9f-9ef1-9267a1412caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4077428c-a3d5-4a58-9ca2-896a5b1a8d88",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d6a397-8c55-46e5-aba2-7e1516c22f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfaf43ec-f6b2-4a1c-b1c9-119c0a2d3ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371f97eb-1ca5-4214-bf0d-4d0dbbad8c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa412c6-10d5-4bb5-917e-e9a0a0e98a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac905ba-d692-4d1b-9ac2-6c4a1d093253",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "127ef45b-fec6-4023-8854-9b1c76699eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd094d9-a3ed-4ede-a85c-52095e8d3ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c5e63b-55dc-4dcd-a6ae-c8545bcc558f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89a6e8fa-b192-4b8f-aa45-e98b41b3c52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906731b3-5c8b-4b59-8928-9ac120de8611",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2df219e-92d6-4271-9dbe-b475c5fc203b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a26740-e62b-41e4-8fdc-eb2cc362e314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e2bbe2-8a95-47de-8ce1-a7ecf7ae82af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aefca36-a0ba-4caa-add5-1c698b87bd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ffed79-c560-4421-8902-6cf2a4212146",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a87ada-3419-4090-9a18-bc52a04c8510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e47ef3d-e15b-47ec-9e3e-1c05379852c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8699186e-2852-480d-893c-78171693ed55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89f94c64-6927-45fc-b159-238dec85ef18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad06c8fb-46c0-4f99-948c-5ad1e561afbf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76ae32e-b655-4972-b21a-c8242630a2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a81c9f25-9b25-4b17-aee8-2f73ecd69d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8e56f1-67ff-421c-b333-9ae12d7152ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f579aad7-a135-4f37-837e-690824741ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76840c6b-1042-4f58-9375-548edf4c41a4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315fde1f-d988-4f4f-95cf-1a309588cd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cc7fdb-30c2-4998-9566-7f86954679a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a432723f-f4d5-476e-8fb5-9ab6d3407699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd57496f-77a6-4308-b795-a43b98361a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07ba5e4-b07b-4484-ae7f-8d1d1b36a2f7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1ddaea-4a6d-47a6-b1b1-9f300eaaf84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f09732-4e8a-439c-8d25-e5c2f31fcd68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502e042e-2887-4d92-83d4-9f60e3fe9d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67b91db0-47de-4724-8e3b-6a374971de85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bd8a25-85ae-4c5b-8804-b4a936ad0896",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d235f8-38eb-46a5-830f-975caf92c7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b4d98c-e433-4ad3-a626-250385039b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddda4855-ff01-407b-9871-59dec6c7330e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd25b71e-7f4a-46f5-904a-3a772087d300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7353502-8f2f-4f79-8a8c-ff22ca94fac0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0686e20-a6f5-468e-88e3-4d842b4a78a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86343deb-aa3b-48d6-be1b-4f761a49fd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d730b4-9fa3-42b6-8619-a5ac28910c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf54004-e75f-4fb5-950a-435b6cabb077"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d8ebb15-8e8c-4496-b1a9-2daa3e338a86",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7a8d6a4-7dff-4da4-8470-e89458aa6a79",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4ddc1e-5b00-4cf6-8e3a-2a15aaf53059",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6a99101c-0c6e-44da-a1cd-f90c84b4c13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fa9afa-4230-4d7c-81dc-a3bc45362c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46590029-4a09-4c93-9044-7b5105e32ea8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d31758ee-5cc1-4abb-830e-6141e2c2212d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74b28d97-7812-4c33-8d29-d0a018881af1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "436482a9-2872-4396-b877-d8ddc93e4db9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8386d3c9-48f1-4deb-a105-a66199ed6a34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "988f1453-abb9-4ce0-83d6-673000de824b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8b75eb6c-3d67-43a6-8890-63814c66b709"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73395f4a-a0bd-4e30-ad4f-7907d292288c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5aaa4c70-3d92-442c-af46-4a83f1a0ddea"
            }
          }
        ]
      },
      {
        "id": "d133b859-6d4b-4d80-a127-2c5944fd925c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "52add893-b8d9-416a-9b4c-0cfcd2c532bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7bf55150-1b7b-48df-8cbf-1fcba8aad7c7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7226bdb9-62ce-4b49-99f1-8ebdf804ec43",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7479db-b208-47c6-91f1-af07a745039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a433257d-3203-46a3-b2ce-aaf5560d602f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71faefed-7713-4a0e-94d0-c67ce48e2bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "760341e0-6b23-407b-bcbe-666f79cfd0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73de720-5288-4063-9100-8a20456062cb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4058568e-72ec-4af7-ab61-7674f6490896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934cc9c3-46e8-4258-9347-deabe4fcafcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e751e0cd-e272-43e0-8336-cbf330888e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "137a8861-a6c6-4f86-8a0f-4eec3756fd0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd141084-d6b3-4791-a879-f8f65d00032b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05623875-57da-4d05-a603-3d102cd9cfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff229e9-82c5-4c03-a954-d614701a8ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c508bc0-0082-4458-b21b-3b55ba7f5dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dde851f-bc55-44af-90d7-5d67f87984e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b8c460-f9a7-4738-8b22-9ee73ce532d7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a67033-553e-432f-bdde-423f4ad6a824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa3a2db-0892-44b3-a00d-28a8bda9352d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556b87f8-41d4-4a67-8e91-e6f4c010a594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36dd9a68-a25c-4b95-b20e-f7e2ae851671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd369da8-8a16-4cd0-a642-c736c6914f5a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819f7cab-00ad-41ec-9ebf-8e48c7804e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12bee964-18cf-4cdb-93e9-f745beab4a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224d4518-a5b4-4327-a804-53ff82d7b4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9545617-a07d-485e-afc5-a35ec97411b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b6efd5-fe50-4df2-b50b-d4bff2b58b0d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a640f351-e1e0-4123-ac37-dff028b38827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d885ba85-0aa3-49f0-894f-84fb8336e934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b107fd5-fd07-4cc6-92f4-deff891cb803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dad75ba-542d-452c-855f-1bfb3fe19734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e483f380-67b6-4359-9c41-2f480a116730",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2580894d-cd8e-453d-9221-4e36abce86bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fcca10-28fc-4367-87af-a59ea3a16580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2347a7-586f-4e7d-8a72-2704b6572fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c955f0c2-746d-46de-a2e0-2bd404b5a45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c744d98-466a-4ed0-b231-cf1718418787",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fb606c-e89b-4c43-a690-22c0a0728934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d3852f-3914-4849-825f-d193ded150ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ad5e5d-3d59-4336-acc9-e1b1ebbb4efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf5f745-0b2f-4832-a8ec-ea9ff08217d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db31eb7e-0f43-48ff-b85c-c4f2fd999314",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03daccb3-8abc-4718-b997-bc73cdaca93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad03d4c7-d20c-48d2-b678-09da73f45692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2996bc-db86-44f9-8e7e-36f8103c7cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2931d08-ecce-4b58-9e21-a3fd95983b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ef834d-135c-4f40-a64f-24150b5758cd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7ab349-321d-401f-ae48-9256e236da6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854ac7c5-c7bb-45e2-b220-ba9a6661df29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54b2aaf-7323-4672-8252-4a91c49843b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2fb354-dbf8-4dc6-9cff-ee2bbd26d36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233545e1-b51a-4704-b7fd-35d5a8faa60c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4ea532-a2ae-4d5c-bf98-13a5cb8dd229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d47170-5609-461c-bbc1-98255f297119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfd77e0-e5b1-4833-8dfe-7bbc2c88653d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "725d99ce-7d12-4976-8958-b526da9a7bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818039b5-1eb4-496a-b5d9-2f17766d6ccc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4a4f88-974a-4822-91cb-7502128d31e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87883590-737c-4f1c-b220-d7a170a3efba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f20ae72-7429-436c-a1f1-f0cc2dc959e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02febb78-d151-4537-98d4-a2b8e65278fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b874d6-a6ab-4c89-9eec-5b96c228e80c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc678e5-f2c5-44d8-9752-1fd50531e517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8110cf-e8c8-424f-89b9-70b76fdb0e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b96e609-9017-4ee7-8031-0e26c86cd8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09098f21-334c-421f-a8bd-c9fe3fd434a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12f6080-3967-473a-a27d-4fe3a1a68750",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d15a06-d812-4563-9f2c-1910c3895311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a342d73d-50d7-4616-949e-3f0ecbf8cc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1d44d7-e4d6-4f0b-a8a2-d9ac81750edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e36643-6ba4-4d43-a4d8-cbab7c7ee9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb09fe51-06a0-4931-a07b-17f4110a78e9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "758b0793-5f62-45db-8d88-9fd994a081b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b785e99-7332-4f41-889b-ae188f024b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c862fc-8523-4452-9a5b-46276caf6ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "574d5310-1778-4a03-8f9e-136505e6c6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb727bdd-5c18-4076-95df-3af1407ba4b6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db0fb12-03d5-456a-bf33-e8a45c49f917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea34c13d-319c-4af7-bd17-8734a804f5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5ebcc7-b208-4770-ab0e-9058aab0e68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e53b14b6-a45e-45ad-bed5-7ae57fd30c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf04833-0b59-4fa3-ae2e-7dffa7f145f2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c16dd2-6165-43f3-ae79-25f67906c13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1743e450-1d7c-42bf-9439-129a375aa952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1742e055-511e-44d0-a47e-a95e0b34fe85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9afdd45e-db96-4570-9e28-581d9d8cc83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8987fd-c6f4-4907-95cd-76e1cd0789e0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85733590-4251-4899-955b-f0d4a3bf7ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ff26dc-895c-4eab-b4ef-d232a7363903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3cfdb0-0fbc-4dba-8137-340dfb319ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d41be4-4baa-41d5-bcb6-694bf4b7eb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84947c98-ce62-43d9-96d7-9103b4ecb850",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5deee2-f49f-4e9c-b6c8-0bc66c36d7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de13c467-71f7-4ce1-93b0-e4cf2a347c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2b3965-22ea-49de-be03-ad7b41c81b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5641cfdd-889e-40b1-bc24-e3b16e75fa32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724d3090-17b4-43c6-b005-d27bf5240710",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d03313-c450-415b-9cb3-dd336d71174c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a191c67a-5abf-4e73-b013-40408d2db511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7005668-3433-4c55-a217-2c28f7f40b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b6cdc6-9423-46be-9398-e90bbffbe468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fa52cb-cd04-4532-a374-92e7fb729ff8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504e7222-e276-42a1-b54c-93d5440be219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd0de23-1c28-4d52-902a-6f2f774b44dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec077ff-d698-4ba3-9044-0e161f69209b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43f53b6a-6f23-4915-9f0d-ee12a29e36e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64905e41-756f-468e-add6-9273d7c72c90",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6643512b-e30c-48ac-8cc6-d323cd04468d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "296bf395-97ce-40a0-880c-88efaa558446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282f47db-e4ef-4973-b922-2732f0aa58cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d5b1c6-b7c6-4812-8239-ede941b0cfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b0945a-d78c-4302-8fbc-e463531c712e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca9bba1-9458-4ec3-ad06-5839e8a9f5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4b1836-a8a8-4b5b-bb83-11ad7a8a4743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b6580e-ff8d-4d39-88ac-a86e00c73e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "049e6a4f-4cfa-47e1-8bd8-1acd75b87178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d825ab2b-3b3a-45ca-93eb-3644938a63ba",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6658cc4-bc9a-4819-aaec-196c4b81cfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2141a0-71da-4282-b10f-c504cbceab90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73889e80-668e-4e9b-ace8-1833e5c0b28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0c629f0-3707-49a7-9755-0da00a855d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449270d3-096d-4c83-b1da-a634e1243224",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b75dd8-bf1f-4b28-b106-d4992d548a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a306f9-1c63-421f-8577-ac29ab1f7356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2079d45c-60a3-41c7-b1dc-7ed0cde3689f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "808a5044-5c79-44c3-a947-2ad57be3e5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be6b377-a589-4ef7-bba9-a7ee89c69249",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe1797f-b26e-4dd5-a358-03ea74da2ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fce32b9-fec0-4c35-95d4-7c3f99cd27e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1c3857-7a7b-45fb-b132-338812ba16b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7fcb8b1-d49a-4861-8bdd-dc2ddbf448d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318cd718-90ab-4ae1-968c-597f1d327298",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0481d6c8-33c2-488d-aaca-e333962ed26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0559005-11a2-4038-8e8a-d6cc28a19e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e1bdd5-af14-4d73-bb0e-996fa694811c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cfde75a-5dbb-4879-8a1d-d5542e1796ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1274161d-f289-48e7-a2da-1d6c9a3c986b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "009b843b-5ced-4885-9ddf-e74297880020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d81ac02-baf2-423a-a057-5e09af0184aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd827e5-f783-4b47-ad1b-e091739e52c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "886fe0d1-b140-4322-a962-c6489854bd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38348be9-ca5a-4571-ad0c-ee7ba6a6c50b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8a5e0e-380f-4745-a1fc-fe8af00983b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809a4083-a2eb-4726-a921-1d139d90b122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca403fad-d2c4-40b9-b649-578d0aff74bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb17920-1193-4be2-a9c0-b0a88785ce20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1258c13d-616a-45fd-803e-1cb901d2919d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5af5f5-c3c3-4832-8865-aa95b4f17677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b86903-324e-4d80-baac-3cef41281814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51affe13-3fb6-41b8-942b-ebf643f26add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19b579dc-3df3-45b2-a9b3-b5ca078790bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b174df-b256-4626-8c20-2047e2a04f8d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36a5710-b9eb-4532-86a3-dbfa657a3bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78602d27-7cf0-425d-9f2d-fad8167f487c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0820c494-942e-4ee1-9f33-3eedda488e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c435ea-957d-4c71-9c5a-2a14f8f98452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d52225-d474-46df-85c5-7144e8bba1cc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbead92-312f-46a7-a6e5-e878210e9c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb659f4-cd3b-4280-a179-c4fce0c9575c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e0ae7a-817c-4c83-af16-3c905d68dfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6f4ca2-8dea-4a6e-9ea1-499bc3e157d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf743d6e-ce5a-4c9a-a112-c756a22a91f7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6e5263-310e-4f35-8f49-21258d9406eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c66aaf3-fe20-4843-9743-8b09db3c7ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85af8082-a1c5-4c16-90b6-59449ae28b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e657071-0c70-4b05-9a9c-f9eba85fc840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd81b17-dd05-42a0-a863-6c25f159ff40",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c1a466-21d0-4a06-afc6-735c000f922b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4dffe1f-9a74-40c3-8d69-ef3f0fd52f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de9df57-8b44-464d-958d-c62f36b6b305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42643005-e112-4a46-83da-f877750ee410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f340ac65-e98d-4362-8313-629d5a6f1b51",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6f5772-6664-4b77-8e09-84914dee4474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6981222c-c2c4-4462-908f-123053b0ff8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a33f63a-363a-445b-aab3-83b970b1644c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e30fe646-a3b7-4fad-9ca6-9df133529489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d39bf8f-b56b-4f56-8564-e7ccf1261940",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a130c807-6fde-4eeb-9fc3-ac6c1d05db75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600612b9-80e1-4412-9939-34aeab067c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168c9811-06dc-4f4c-a9ee-5e82b2502bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f266edd7-22d9-4b3b-b108-52babe795a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c6f2c8-c941-4254-ab1a-f69c510471e3",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba109e9b-85a8-42a8-ae4b-5c6fce6fba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cec9ff7-a30c-4160-9a43-8c3254d657f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd7ac9b-69c7-4ba0-bf1a-dff023063e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a420a49-36f0-4736-994e-e5e637686f3c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0f5ec82b-f9d2-41cb-bef5-c4206793bd70",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90f36f70-a9b0-4f5d-abe0-4ce61c207f5c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2643660-2cbe-4d1a-9a7b-2bae0b6bc8b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "769c4494-30d6-4250-813c-fc82d10e9a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3106aa05-a7aa-4315-b791-c83ea3071556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f435f8c6-0845-448c-a83a-c4dd59d87780"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73582571-69c2-41d5-9be3-e5137a200d09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fd5d594-b3b6-462e-afbd-b1e97f1b8777"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f917135f-f37d-4837-aa8f-ba2957f5bb97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdc631c3-00df-4606-858e-57be25770fd5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d87ce12-23a8-4c14-91f8-2619e50f4dfa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3319ae41-3b5f-4a3d-b38f-2d3654ee9ed3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88e4ca5c-6725-435c-8296-66b5ec1f937e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec0d1d5b-002d-4d28-b313-c4873434f213"
            }
          }
        ]
      },
      {
        "id": "67cb381c-e13b-48e6-a166-dd670b5d7a68",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6cb72ed5-2d78-473a-8122-8df68bdeea88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9fae56c3-16b6-469b-a6bb-7e45f5ee9d32",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e911e7fb-87bd-4695-a030-afb12a336d2f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e02803-0bf0-4e45-b742-e75bf5a5be54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f22c3c-4306-498a-8d5b-b7bf86b70e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bcfe00-ee99-41a7-841a-a9440ba93e67",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b212a7aa-ff5f-4068-8821-2326ebe2e0b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af56dcfb-ae60-479f-be4c-40eb199a868a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4e39b7-2ad8-4999-a189-173f865b2015",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52173c2-5e83-414b-bc48-8d1ffd874507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbdde0dc-e3e8-4410-a14d-30158353088e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c595efd1-a5db-4545-bcea-c6ef1e069513",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48866024-9bc8-48bf-84e9-584c17eb5b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8214d082-5697-42cf-bd3f-2494305a3e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8fac91-2f0f-4a9c-b616-f7ba03b52e50",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c392152-c81f-47fe-b3c1-beefa87bcbfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8387e2e-862b-4612-a482-547346f3c311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107db1e5-a1e4-421e-b601-6ce482299aac",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94403b6-b2ae-4315-a2a2-779406907b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0882730c-c28e-42f3-9059-d4b330bbe8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe43eae-b5b5-42fe-8cf4-4d4e7608e579",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51db0cde-0fd9-4229-a279-937fb0d265aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72a5521-24f7-4c3f-b425-9c79a707890c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6358ca7b-863d-442a-a402-5dab5738b901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d2ebdd-84af-4d24-b70d-82bd0f49468a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d2d497-9201-4991-9829-84679830713a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70310525-85f1-496c-90a6-131387ae3f36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e549bdd-d562-4191-9a62-d161feb4736d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e79668-dcec-4e5b-94b3-e5c47c4f2c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fdceae-f041-4d85-8518-bd79ee8737d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70e2d9f-0b05-47e4-af0d-43df4a1c2b5f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604407d2-6e58-4a32-926e-db45998c99be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2235caf1-fbbd-4937-8d5a-df6669102933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e14380-a3cc-46b3-bfe2-e0cfaaf2d3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce2f223-48fa-4dbe-8baf-7e09a3fa45d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b90fde-561c-48df-84bc-6655475ea26f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88fa2a8-6d3c-4425-943f-671ef8265b60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfa7fa6c-3551-4eed-9ba9-6bcf14e82929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f814214-95e3-474c-a66b-ed0f00a077fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da451109-32f5-457a-9d23-b1b651d19bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65fd59e-7286-4c70-980c-188ced7d4f66",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d6409e-0b22-4d9d-9d9c-83280374226a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c25bda7-330a-4de9-bfc0-06a410731245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80193d1e-e7bb-428a-800e-630c56ebb103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de025e0c-9d2b-4be7-b546-572c59692e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1a39c2-2e85-4888-847f-f22adb77381a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6eb0a88-9ef1-47cf-b15d-e2c7d7bba432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9489cd6b-7946-46d5-abce-89bc20e249f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5f2df6-3e64-4ca6-8913-156f7559fc1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c069f1db-0770-4be7-979a-8673e55b9980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a3a3db-02b3-4c84-be40-4bac728e1120",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40072263-8ab2-4f76-899a-fbeff8d4dc3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9442ecbf-4b11-425c-b730-6240c328f9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557aacd3-ade4-41b3-b1bf-76bba62f3292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83242376-a692-4159-93ac-123f74ea2192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98ba706-4082-4b39-8ce7-1e2d7a1c5848",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d960d21-cc4f-42ac-874b-258d608210e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a4761c2-3ef2-40f3-b212-2a5be949f464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a104405f-61b3-4c1b-b784-902120b7622e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ac69e0-ae5b-409d-8c5b-1a4f793aa2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a2fc02-81b7-42fe-bb1c-0125655bb86e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738863b9-cb9d-46b2-a807-b6919a004352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad16399-c4e6-433a-8c9f-2f6db1d63f3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aef2513-cb4b-434c-9499-79418aba6d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326a33b8-7437-4e67-aa59-b9e07330ce1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d306daf-76cd-412a-b6c5-f4f35195ff9e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4a8c03-b787-4349-8d37-b47e667e68b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "540b14f4-9dc2-427d-8e37-1a8f7f077306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "203dce7f-dd15-4f9d-96c6-4c221b2d06bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ca72bb-f239-4a47-bee3-a7d51ff8300c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78a6d9f-f6bb-4360-8051-a7ecb1658835",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b5098c-9b09-429d-8c10-6d98e862419c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ad6b25-01ab-4898-8215-ad35f9cebb58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197bdf79-5e97-4c7e-98d2-fd4ff8fcf288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858a9b11-1adb-4043-af26-548c512b2006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ccde2b-e877-493f-9250-ba93a6da2ab1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fb3ccb-54c6-441f-a295-a1f5bea0f5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ed608c-8188-4085-8949-2590caf2d6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09417721-02c8-440c-9782-1962cb9cdfb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9ff281-86e7-4a67-97c4-ab3c426569ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689aa692-6ad5-4fb0-9443-a0adbaae1ed7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1bf552-f476-46c1-bc06-bb62ee877ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ec8db8-ff7d-4669-82ca-5e92af844657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb14c644-236a-4842-8c74-952b177d6296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b1f3bf-d7f7-4483-9fd9-fd522cb6feaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ca6a6b-8950-48fc-b905-e23c6cfaca8b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f0a835-9534-48db-9c4f-b7846d725204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4981fcac-e5bd-4ca7-9573-8af76df56530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdef9272-9bb0-430d-8a1c-61a29116c14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e16559c-483a-4caa-81dd-95d398723348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c807330-3d5b-425f-b000-62d6a1732570",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29638aa0-54e5-4e98-9f77-a692cfb016fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63f183a-a827-4c8c-a8df-7404cb6f7bf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9760da-c6e9-4797-9817-5f298c9b171a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012a5d6c-932d-41dc-9e86-ffdaea36d21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706835f6-e6aa-4183-a0db-c61045286408",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912ca18e-a3d2-4780-a774-cee2b9e9d9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05b4d27-0d16-4a2c-ba67-15beba79ba86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09de775-ae43-4726-96a6-573eb328997a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9535f170-3e58-4fe1-9593-a09c60e21f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591c1b8a-8abf-4d97-8b61-7bb3fc405c86",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2bcfc1-5bff-448d-b803-8cd98158f856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483e1d97-c74e-454d-baff-7128bd8c6507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5990261b-0f0e-46e8-a796-9be5f7570cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be95403c-8db3-455a-9ec9-29f3b29303b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710b2e17-56d2-4ace-8c1c-a163ebbd6490",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7016012b-ce58-48f8-b944-ce43409a58dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a67bc95-4e02-47ca-be6a-98c1b09f0504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56126ec4-8d3f-4871-a7bb-d51ea92ba3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c39f0ad-1f1a-4ed7-98da-84847c5d53b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942defa8-1dca-4f03-bd94-fe5d25ff9da9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532f794a-ea13-4845-92eb-5ba889e6d63c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0b2005f-3f1e-4dcd-9ae2-cf535593dffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3390553-95bc-4efe-90d7-968150271bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b27d27-9c64-4a05-81c5-405c70927beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e22280-4172-4eeb-9f28-d53bea57f0a9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfdd6c8-a16a-4e8c-9f56-e0a49856c769",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7a26bd7-d02d-4876-8c4b-26ed15acbc5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f45410-36fa-4d80-8758-fd255399d0e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605616bf-30b8-44b0-a6fd-774a462eb18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2583ecfc-bc0c-47e8-b06d-e84200084c5e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52630477-2f17-4c35-abc9-8452e1dd94d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f3e2b58-659d-4eb9-9047-7472d5ad3bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075bb250-7c2c-43ad-989a-4cbf10edf4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5dccc4-943f-4447-8569-b7ee631b6d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5507da60-2ea1-4ec6-99c2-07e2fac747e9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73e0507-5539-49ec-ba61-751b41d0b808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "507401dd-ef75-4db4-a092-9236eb1255f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98f9707-cb6b-4407-892f-17de97f89e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e84b935-e8aa-41c3-9fc1-3f974ab8a8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfa97d5-3166-4a61-8728-8ab2f97e0b5d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d77f1b-27d7-4d7c-8641-9a082f60b552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "161abf51-c9b2-4cd6-bde4-ac78f272a069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52982a55-ee78-4194-aa7c-49f7b14be6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b7bac5-75ae-4be8-a228-e676c0b2d1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19515cd-4f52-43cb-ac38-8fde9b4dc01c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef270677-4ffc-41e7-a8c4-ab1b370a099a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a9919b5-95f7-4568-85ce-d88e46dea678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513f334c-7a4f-4c6a-8344-4b0ca9720183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2dce241-e94d-432b-94ff-aef5c6b7674b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec2c148-c6d5-458d-b153-f9fb377f9a67",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49e0ddc-5298-438c-857d-2064e6e28d36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58a497a7-f119-4f27-96d2-7d2a9ef48cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935a583a-556e-42d0-bc46-4f0062b0be97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14120373-f945-40cf-bea4-9d76144f4007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6d997b-e3c1-4558-ac35-666d793cf24a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bccd54-a556-4dac-a15e-c1f09e8bd399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "379a93bf-1670-493b-9631-7371b337b554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4384ef82-f12b-46c5-a30f-de7a64817da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409c12fc-8fba-4310-86c5-4a78fa312f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33405ee2-d501-4d94-b804-75de7ee00349",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95eb698-3ee5-4143-9da7-163ee29f2fab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f5895c3-3e92-4950-9b0b-96b2825e0cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a019fd-c5e9-437a-97f5-90689f2fdfe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c83fbba-d1d4-49c1-b76b-f8f83c8be4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea17841-4d11-4b81-9b6a-5dd0179187be",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56a051f-61e6-4ce6-80d5-374b130a3a22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b07fd0b-6a89-491d-9280-de3fc4df3b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2250cd-dd2a-4db7-a009-e3023cda53f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b448e3-6698-4fe2-ad8f-ccf9fddbcf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13dfb264-c536-4dd6-9d9f-ed31344ff97c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0378791d-3d6a-45b2-8007-aa9cc4e3df90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06abffd-ea27-40dd-8b84-2a86d939f35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88b40c8-1357-4195-bdb8-8e20ab6d3411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc088ef-a1fa-4956-b679-ecfcb308901b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebceb4a-c3ae-46ef-99ee-4ef457e1ec28",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146c08e4-f5f0-4506-8d73-1ab8495e41a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a38514-d8e0-4d6e-bf0f-894152afd077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90a9308-0425-4d11-83c2-56f4a2cd7a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc31c13d-67c7-4f71-ac7a-e6d8ddd0bca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b76b532-c204-4c86-9cb6-11a3eb673706",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ffb9d1-7949-417e-bd29-028f9321cc39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60cfa9b1-df76-4a1c-8cb4-77b53712d797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd49f21-8ade-4a6c-bd22-32ca662da11f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e98470-bf33-4a9b-9da3-442fa415b3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d482147-229a-486d-9003-7360c0254ef9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c36eac1-9370-4247-acff-b015f57172b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975a8abf-767d-4f15-baf4-6f1199568bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd467b4a-8dc6-4396-b123-85da23ac59ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495c5a9b-0a9d-4892-82d0-2ba60a64d00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d13f06-d787-4549-a3dd-9a1a6036a557",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db358cf8-801f-43bf-ade9-987b64279133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a3df83-6597-481c-8dde-b5bcbd3cc542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54101c9-d013-4d23-ac24-bb695667fe5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ce2a7b-19d9-4f85-a89e-d6604e77511f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a10921-d8e7-40a1-bf96-5e4c334d06bf",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53d0b73-f005-4a0d-a94d-d409d1f79d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ad1ef6-7bc7-478b-95f8-5aa95ea1f4e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ace317-ec8c-4c81-b616-b14e0fdeb6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd70d27-faa5-429d-b507-c42db29fe1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede38c72-58d8-4f9b-94b0-0d08892a8c37",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c0153d-3f57-4f79-803f-c5de16fa159b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c121a63-393d-4b12-aa4f-06ac11a3f91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6eca321-c338-4732-b97a-3d86a8cc6619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da025a1b-f01b-4581-82db-b85a756bbf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75bfd950-572f-4186-9acc-39a4e4d69e87",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361e211f-730f-4965-8d1a-357245e36ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f16ba5-9bd6-4628-aa36-1a1d84b1569b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597bd86a-3ad8-4642-887d-3f899eb45062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2105d7c0-879b-4a3a-bda1-d4efe687ef54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039d82e7-8f30-4df7-99ad-10ecf2af065b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb9e08b-925e-4238-a0e4-acb9f50a8bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b825b8e-f046-46a8-83e3-b7a6559d2892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc91606-13b2-47f7-a5b2-3f5a952cfc81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0caae04-3344-4125-9bf4-9c718fa24afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10e7a6c-a312-4413-a298-8a117aa7f7f3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f30358-7ea3-418e-9f74-ae6aa2e0c80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146567c4-76ee-437e-bdb6-3c3184b06ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93017d46-eb6f-416e-bae4-d83e363cb663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31ffa48-2642-4a69-bc96-0926cb4e5368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e6a5b9-b35f-4f95-b054-241f8d33d6df",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606f3191-495f-4f1e-b86d-a4067105dd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece32fc9-e545-445f-a128-47620997e08f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56edbcb0-6fea-4d85-a514-1f8dfc7da6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45f9283-7e15-4719-a6a7-cf07b503773a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0844b548-2d21-485d-a58c-8747f22a31d0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b46a25-1656-4b78-8d14-2cc931b2df27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e986513c-d45f-4ced-8613-dda43876dcd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84cba96-3351-4a42-b9d2-29f2877afb54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03cb0a01-e525-4957-8700-429bf96d3305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1097c3a-06f3-494e-969d-2753c5c61ab3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fad9985-0708-4930-af69-4787e18dea9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3f3fbe-2986-4b15-8d38-4cfc23dffdf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778bc2c2-467f-472f-8952-25e14bf6f2a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000a8471-3e32-479a-bd85-b289f4320621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872474d4-7676-4b7b-81b7-16c3becdc884",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fc3bc9-1054-4263-a235-81a9646338bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f544eb-a37f-42f1-b721-4d969ac43e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c02e26-471d-4e5e-8fbd-9f734ec86da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef0002f-fc72-476f-b86f-83a6977ba0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2f8cda-ba25-4363-9f85-b68fd09d3085",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2448c1-3d94-4395-a0a3-7c58c28ef793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a5a11c-d2b9-49ba-b490-cc3410749702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3369ce-ff2f-4ac2-97b5-a21308285c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e58ef0-ba57-434f-b6f6-d25466614107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68400012-792c-4894-a397-a2488291232e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ec2f14-16f1-4a06-937e-1afb8d991fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee860cb6-43cd-4cc7-b6f7-a5be5391749c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3334dd17-6de8-41ed-8b3c-d14350d07a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6a761c-3538-4e63-b14b-da78361a4da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecc0035-6ee8-410e-a37a-a4afa41638b4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ebea41-347e-4af2-a6d5-a8090da417f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb71d91-6c2a-4b76-8cde-437878bdc3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cd4812-ab79-43a2-a881-aec99d33a07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25e21fc-e334-4bed-9a10-fd1bbc2b9824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85dec61-aab9-4068-842a-18619a45ff29",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b09ab8-48b9-46ca-a0c0-807bde97332f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2534920-a96a-482e-87c7-2b99bfe38395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a54ddcb-a4b7-4366-b5f5-b4f3a04e998f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7297869-00b5-45f8-b57f-fd6905ba41a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4856ad76-f25c-4db3-8cf7-631685afcae4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bfca22-bcd9-4904-9c8c-6854bd09aa63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10669a4-bcb6-4fe5-954e-431cc94afa71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a84b12-c994-4e99-94bd-e256516be898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eba334e-11cb-4c58-87c4-a72074364f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d83758-485a-4e8f-aa54-a0c33f67852c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a584689-062a-47fa-be42-b3e7c3db7a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46966574-d240-4a38-a7f3-293fa2d9d366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7daaf2b-8911-47b2-9c69-141ad0451945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8026fdde-6ec2-4af9-a8b4-6bba583d69a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c59529e-5786-4fd9-8963-f9821a2f53e1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7e769a-ee5c-4994-8995-45be56a7cfec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b340f8-5985-43b8-81c5-4bf41ca2a2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4434849b-5a93-4fc9-9889-c15f236fd96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c638516d-9801-4e84-9ba7-4fcccdd5c0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53d4bbe-5119-473c-9e02-750846b5f637",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbe7680-d61a-4ac5-b5e3-11ecc4d87f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9224af-398f-40ee-ac8b-ad7b96014c94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdf3122-ce42-4828-8106-90abfb61e568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75a793e-33e6-4603-a84d-80b734e9b644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d33d0d-2b36-4c5f-aed3-3f362804e2f0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ddf8bd-12a4-4928-ba86-721fc474389a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1442f80-9a2a-4cbb-b3fc-4e613d0cba07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7d474d-e761-453b-a666-05e77824299e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dab36b1-d894-4162-a91e-7bb13ed43ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b33d53d-03aa-46c0-ad2f-245ec9505c68",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b63f3da-75b1-46b7-a7ae-94b6b7318c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c134d193-3adc-41d4-8b55-729d4e03ea0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6114ae-394a-4833-995d-6270fdb86461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a4dcc5-d25e-4b18-8fdc-fb7f5f783926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd88541-08ea-4852-9d44-e81e76b09d37",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1610470f-5310-440b-bdbc-4974d231e17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70d7de2-c706-411c-a7c4-0ba3b5286fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26e43ce-0ff1-4ef6-836b-46ffd3fe3d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf3beb7-1384-4ae7-b30a-7db7c0c13d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879ac6d6-bba8-49e1-8082-9ede2ba3f8ac",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e06349-d5c4-4acd-802a-7e61d9c960c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57efb289-3ae0-4506-a68f-8a05182e16cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7e0fdd-73b6-4492-8ab2-34257a421b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea45a47-8448-4c22-9b12-b278dd9a4249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff7034b-d5b1-4943-975b-83f12b20f070",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36727de-56d2-4d74-b333-b1828da382bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7fc561-d1b7-4b51-bb8f-d90a85fe27e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26788859-a836-4d71-9e55-a2a6a5ac2082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c9b4c2-5d24-493a-9006-07e1deeaee76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2d59e3-664b-4835-92dc-b98afb4ec15b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05db3035-08ab-4cf1-aec9-c78f44149d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5390f588-98ba-49e4-95e2-61f6b7df6083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc970fc-cb1e-4c45-9423-f750fad3952e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "002cc59f-9764-49cc-be5c-60f11359d83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4797df2a-0488-4e38-8dd8-4d7f5aaeb414",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e52d069-7f26-48ac-bacd-ead4d175ab92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18c6237-6694-4f16-a86a-2415dbd5f9e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa101fd-7d3e-4b29-857b-e5302f2b1591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fb73df-001f-47bc-80df-aa7c71f47d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2974abf3-6eaf-4f9d-a25f-cc9cdf91a169",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61b6246-a241-4122-aedc-162632b4e9a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65db9baf-a919-44b6-a041-cbc981bbbc27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ae0ef7-7b75-44ca-ba8a-847b73f1f699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02474f1d-9e39-42c8-a7ea-7cba3502863b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716fb253-8b38-4905-a50e-3901615cdcfa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1ad49c-1ab7-4fb7-b500-5728f5852dd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "393bd4b8-04c8-41a6-a738-03dc338de78d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab46a85-1092-4ecb-94ec-d75bee44033a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6bef28-3464-43c7-a7a6-9ad634050dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49499d6b-f09b-48ac-a44e-5f50c545a5ad",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76013a24-9f78-4aaa-a345-f413a75fc3de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4461e79c-7f3d-47b0-a56a-592b02de7272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1c7e8d-a309-4dba-845d-a4f54974ae69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2605c0-ba47-452a-a818-28f11cad77f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2d43d5-e6f7-4746-b6a8-a1c6fa2731f2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708499b4-5be2-4032-81b1-c2cb2e82eb99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "072a927e-c03c-42f7-b7da-4a7fc430069b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1540b071-2d7f-4312-81dd-14ebd801ce1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cdeb84d-241f-413e-844c-95e71e28b611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f24b95a-4d4d-4503-81be-7dfcdbe3dffd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffa317e-2bfb-400a-a546-1863b7c276ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09856114-11bc-4507-9776-e56057b4088f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "188af866-67a8-4381-b09c-bb0c50f39605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60f13258-87fe-4adc-b305-914c97930d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa03c73b-2ee7-4e8c-810e-76a2bbde26de",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a25e165-ac6e-45b3-8b4b-6eb5c12bd8ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c271662a-05d0-452b-93c4-c4762c9aa8c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d1325f-b618-4ca0-aa74-f45f94e241de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30fb7a3-0366-4c00-a3d9-3d72cf4c72a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc80fb35-7c0c-4a43-b7f9-57761d45603b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7effd77d-6fac-4cae-b75d-7f60afe22710",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c5816e5-9488-4ab9-84df-44366bccb489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7e4e16-ae27-4d8d-ab8f-2e6240543a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92696b7c-ab4a-43b7-902a-43949cd09d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f27b36-5430-4d71-9d48-6e0bc7891831",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94f1b3d-180e-4105-88d7-7492cb5190ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30a50770-8b2f-4cc3-93bd-e58413bc16f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a3457d-bfb3-44eb-96b2-4d26828ae695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d6f53a-0ffc-48bc-bed0-70dc9acdba5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d9265b-b98c-4372-9fad-02c142e4a963",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bfa590-b3b9-4305-8094-b5834481dff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a54cec37-f113-4d1d-8d95-715fa49040d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1541a9-c910-4e08-9dd0-c373f30df615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d57ef0-639c-4aed-803d-cceb46032c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209ce24f-b4cd-4900-b639-bc7e0e5f69c0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c609953-99b2-41d4-b999-31a34d54e46b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1130c1-66aa-45af-8b36-749446a25a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a452a385-1f41-481c-aac4-63b88a24aae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca8740a-e51b-4fc3-ac00-b09732f018a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea89e93c-46ef-40ec-b30d-2f2f87ad5760",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dd3f8c-9dbe-4dfb-8c72-a525f4a3c274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74a2b822-e9f7-4f65-8ebc-63482feffa09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "602ac54b-008b-4a6d-b0bc-1035eeea1bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec66d692-7bc0-4522-934a-df67aba6e0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267c5451-ef15-45a2-b016-3376ef125742",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde23948-35dc-4375-a114-9aaf260938af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f56e3dd-e2f2-43a6-ad55-cd090fd4568c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ac2e6a-917e-4571-ad81-f8ad127d2e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e46122-17c0-4513-bc6d-28e6978a2c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53229b6-9f63-47b6-8372-2d561228b547",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b6482f-6113-4794-af1b-acdc659d0922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6243d7fa-e42d-4205-b30e-6c332a444ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfcf82f-9818-4a5f-958b-dbb2b08094a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad773412-f546-431e-ae88-4827954cb9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a97c4d6-963b-4a8f-a8ee-5538ffc6da2a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc4d450-c867-4780-809a-778467b31940",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3276d399-7abf-462d-a405-7ed374c90289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1d5893-d612-423d-96f2-1092ec0632c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf3757e-1916-4ba1-937f-7f3b4388c228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06359e62-0027-4577-81f5-e22b807677dd",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaceb77-6df5-4b94-a462-d35624feef3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5c72d58-5cf8-492e-b334-25bd11739967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1c02de-c428-4630-8017-e0e9d0a0d5ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc4e210-dbfc-4c9a-aad6-20b6c4b038e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb5aab6-19a0-4bd5-bf6c-428b3460981e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7534787c-5dbe-4543-ada7-583f61ee112e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78581d02-c21f-43b7-8bf6-4a6cb820eedc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "875ceeaf-374b-4a12-9273-781cc0e6dafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe5a03f-c12e-4f91-96be-47630611e654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8786f6-78b4-4368-8f6b-4a84451872e8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbddb15b-fe7f-4e81-b1e8-524f9bffceb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f16ed379-f4bd-425f-a0a8-50566483137b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7c188a-b1c6-423a-b789-45ab362359fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e4c4fb-8f78-4534-9230-b42891cf78c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0018a0-49b5-435a-9fa6-751ae481d1c4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a0f0ba-4316-4b7d-8d7c-5f9a4573c037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55234279-ecd3-47d3-ba44-a953a6d6e6c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e59ca81-cb8a-4d6d-a56e-83209b56ca84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347380e7-1b38-4557-80eb-42a75e1185b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a09a964-9c5a-4c84-8638-948233ab728a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb895328-21b9-4465-81e9-506e5270d620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74247b0e-88e2-4f58-a814-3751632a9cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9543a4-0018-4627-bbff-d529b256fb6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00bc48ca-ea61-4fff-b94d-5f5acfaa3b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cb2145-4f2a-4f9a-860f-389120a4d73a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22025fa-3e55-40f9-8a26-e66bdafdf92e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e933d10-0c6a-4776-b63c-26995abaf612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd68f2e-a3c9-46bc-a63f-031ced224f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d0de24-a7e7-400d-907c-ac4d8f68c837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28e326c-9d9b-42c5-9981-d75da0ab459f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d927c3e-e4a7-400a-8e58-2df1c7347dd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea1e0990-a98f-4db4-8c75-885d1190e7cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c14a7af-4d60-4981-accd-154cb61e42b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55df7c23-8b71-4839-9c3a-1b5825ef1185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa1cca4-aeb6-4612-bf75-a880f84b2461",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c1c039-661d-4b6d-b8fd-c2b58835bac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea6df8c8-e075-4878-9bb4-646334e45bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48f914c-f9c9-4aa7-b85b-002afd8845cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296fd613-455e-44cd-9c66-b5c2064bc63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8538ea-45ea-4064-bc35-9991d1671d3f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03c472c-31fa-4fbc-918f-0e68ca91d8cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f828417f-331a-4bb0-b7fd-8cc827d7fc1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6291de4f-00c9-43f1-a9e5-ecee0ac87b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ddda14-e9f6-4851-83ac-779d86db7953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf8253c-6e60-430b-a034-3d3d23ffff4f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd5880e-fe19-4759-988a-afb1571ada5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c4677a-3ebb-4c2f-802d-161518bd25ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812f62d4-2ce0-40b8-9b53-28e875e66f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce349e9-cd03-478c-bab6-c2d9aa8f4a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7ab587-cb85-4fa1-92eb-bee353e820a2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02df7b99-7eb9-4d9b-9024-091425292cbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18112d98-9281-470c-8bfb-ca83742ddb37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5fb1b0-e42a-4ceb-839c-7c8d63bae25d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f26c9b-93cd-45f8-adce-d096a0a36470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ffbe7d-6139-4fe3-a7e3-cad188aec730",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb519335-f3da-48bf-aaf7-cc705b03d4f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bf88b1b-3450-4b0f-a81e-b47d62231bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c236697-a12c-483a-87d5-af64ee919292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66ff024-ed39-4946-b5ff-106c4b73d370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f19d5af-34e4-433a-b0cd-1c6d73fe1b4e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b26605c-1d5b-4727-abc6-d4d7893f970a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2021138e-7c73-43e2-91c5-1cd8b5885f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107dfaa1-225b-418d-97d8-2db365e58487",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064974d0-5391-4c37-9a5e-6d65bff7ee20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6818ee-002e-4cf5-9139-442d90da3168",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ce8be9-8fc9-4180-bd0d-7009984d7a04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f56c5f19-4c91-4fbd-8a4c-a87d8bdbac82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df90f1af-9bc8-4359-a0d4-2c43f0a9def3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805b2250-476b-4309-b305-dfeff1eef780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bc68cf-c342-4058-a833-5a7e2e54bd09",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b58f5c0-c4b1-4f1f-8347-c88172fbf696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f9e0c2-2e8a-4182-a0e8-9fc825060bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a05a0b4-1224-49ff-8a5e-c091451ca40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5e1ee8-3369-4bc1-9218-2bb14f27c509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c24c09-cd8c-4c54-bf5d-9f1a3f233997",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9224193-1593-4f3e-b28c-e68a710f36da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a9edad2-e6f9-4491-b00c-346624314833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a81bc80-b29c-43d4-a55e-79aa90e9a600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6ceb73-7d26-4285-b7ff-4ec0a3628bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8c16fd-b096-47d9-a626-ad6f2fbca898",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da5e51a-6130-4926-a647-c4e38fc1a13a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "214cde93-2f1a-4e19-8781-a5d3846dc3f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867201ed-e220-48d3-92c4-a7aed72b39e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afd5826-92c4-443c-b6e2-3253c0f2dfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8831bcab-4b03-45a7-9b13-54008a720cc8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16ee7dc-9bc5-4481-8e03-5a58df400959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34ac2f60-44fe-40ff-a8b3-4bd45f961ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed7b9fa-9e06-4f19-86c5-6c81a7eb237e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c325f95-0429-432f-93b7-a34bfa544e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b579be0-661e-49fb-99e0-316b85091cee",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f413bd06-4c9c-489f-9eaa-f2c93214edb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0f285eb-3091-4717-84b9-4e2639ff0729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944fe1db-001c-47e0-bffd-9dbb4f461df9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2668f521-728b-4fa7-8924-5ff84c828dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0f24b1-d836-44fa-9bc7-0e3cf8a4d283",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4eb367-81b5-46b3-987d-10abaf1971e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0acb5e5a-b5aa-4571-bc07-1981f085bc53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9452aaa9-1804-4928-bb0d-24af04f90754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fd69cb-1540-4afe-a6c2-aceb6df8d089"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e248217-3498-453d-8ce3-5cd1b5f66acb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "866cc717-982e-4cea-ac77-67d5f922f651"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db2e043f-1930-44b4-bda7-4d67f9f0e3f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c0c660c-ecef-48c1-a25b-db7055ffd172"
                    }
                  }
                ]
              },
              {
                "id": "024cadce-0035-4731-bcc0-c88b004d5a79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7dad6a9-ef2b-4d2c-9955-462708bc6ea6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825d98a9-97fb-4efd-ad90-adef2c242a4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0512f0e8-ae4e-446e-bd7f-ffa106656098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831ff7c8-4488-4092-bab1-97c6437b8010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fc3949f-ea05-434f-842d-b739a6b02654"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c12a2180-6581-4b80-a9a0-70e4dffdd56c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9f107cf-dc1c-49cd-b06a-715cc3768965"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "abb1cdd4-621f-4d4e-88e4-98e34c409ed0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79b95efc-3cde-4dfc-a7ad-e9651e449bfe"
                    }
                  }
                ]
              },
              {
                "id": "8a7c0d53-d961-42d0-8d7c-215fac08d4a7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ac2203f3-709d-430f-a8bb-777649bf9959",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa83733-5e8b-4302-a645-22d4d0a793a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9f2d8667-9c79-4a27-857a-7b30feb90029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a0cb14-9ea4-4024-a4a1-9b8f651dc36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264f0159-3940-4adf-ab2d-bb497d97dc45"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e9639adb-7e14-4613-b80d-1e7fa9010f98",
            "name": "Positive Testing",
            "item": [
              {
                "id": "229e74c2-a947-4db6-94a3-3f5076e3b7c3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e308cb94-a0be-4456-aac8-8b426b4dd138",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "487556dc-67d2-4787-b5d5-1b1bdde6d38f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "505ae2f8-bd29-4956-bbaf-058b080770f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed9fdd41-f017-4e86-b3b3-6fc9d0f85e3e"
                    }
                  }
                ]
              },
              {
                "id": "7406b4dc-6744-402a-b0f4-cf7a2fc5d39e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e10a1449-f4b3-40a5-b185-3c2f51d37758",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6849ba42-9fae-4476-a851-f012ae166ba8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4468b8f9-1f15-4ac9-bd19-4c7a0d36c841",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41eae830-5d2c-4b71-b69c-8243815f2c37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52b2c58c-baab-47e2-b556-34983ef14397",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "060d6ee4-b9e1-4c07-960a-27bb12c211f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18ea96b7-c3e3-441a-84ae-d63af48034bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4f6b621-dfa6-4cad-9799-ebde92ecbdcf"
            }
          }
        ]
      },
      {
        "id": "84fcb4f6-d7c8-448f-bfe8-0fc28c9f0b57",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "48a32721-ff04-4e7e-8558-bb2df0a16e57",
            "name": "Negative Testing",
            "item": [
              {
                "id": "307602c3-3c11-4d22-ac20-f387aef5d89d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bbb2abfe-2913-40a4-9902-09f9a2c7298c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148027ae-8925-46dd-b1a7-2fdd5e40d060",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "61d7e832-db1c-4847-87f5-f7a31bdd3d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa671c2-c68f-4248-bd85-a8f86938fb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15889e93-23ae-49f7-bcb0-7f64b4cb44bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed82580e-0ae2-4d04-b2a6-923d154f9e44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d37c651e-8a70-408f-a8fa-db5b580523e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b6d32d6-d55a-4685-88ed-d42ddf382e85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e51c7099-b0ca-4f2a-aa7b-83446c15f655"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62947086-7567-48a7-996f-672bf996366f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f35d4216-6911-421a-b93c-6c5fd6011c42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e8419d5-5f1c-4d8e-bc8e-e2af630b4caa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "215fde09-f445-4246-8344-b3a9c4afbf28"
            }
          }
        ]
      },
      {
        "id": "3c84962d-082d-4273-b962-64c72a7b9cb7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "63c198b6-53c3-4585-9333-222c4df86a65",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05864ced-3099-41fc-be6c-a3de0047093d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e969696-7b52-4f7b-bf41-a465f71165e7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21200b83-bfac-45a8-977c-1698ec4a119b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da158edc-c320-4552-aa62-3d27964f0b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d6bacc-2c22-4261-8a8b-ccad870628a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27fd9cc3-dd1d-4614-a7f0-5921ac82a872"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "150a0282-50b8-49c3-a03f-63e731c398a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0be52e69-3160-405b-9c77-b681dceff6a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf574b71-4744-417a-bd6c-94155592a9e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26bd15f8-98f6-47ad-8985-6094c30cfcd4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24bccaa3-e950-45f8-8963-919d56eb7d09",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "269d2942-81a1-48b7-ab26-9f8956cb1f48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99468f59-f4ec-4645-bd1f-37fa18b58d0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ef7c8e5-b3da-41b9-8d72-41d58c5c6cf4"
            }
          }
        ]
      },
      {
        "id": "57c985fb-303b-49ed-872c-058220e2b93a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6031d47f-d2f5-447b-8211-721680f3fd74",
            "name": "Negative Testing",
            "item": [
              {
                "id": "652a950f-333d-47b6-be71-85db9010b12b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78426b01-7b44-4613-9bf8-6485d8826c86",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe87fba0-bb91-46d7-87b6-f3401de369d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a21139b-a9e6-427c-b346-e3fef39efbd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c52e84-911d-4cd8-9be7-3f520c18b2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "170b3c57-b877-45a6-9835-47718bbbbb8e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "341745bb-edc7-4d5b-a101-b22f0b7125dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "367e4eae-e3ec-4c64-81e8-a03885ff5be1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "891f266e-0d19-4502-8e5f-f7d14a3dfdee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7106bcf1-2ac1-4af6-9519-8312de65df1e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfad1df5-edf6-4e25-91c0-7bd6b4802081",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "be7c1c08-2544-4f5e-b36f-427833e990f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1444942d-8407-4e75-8b73-de43c08e0819",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "991873d3-8819-4931-8c8f-1db4148aa685"
            }
          }
        ]
      },
      {
        "id": "0162d89f-3ada-4eae-a5a3-796ce9021114",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ecee9b9c-23b7-4afa-8ab0-c580798f9062",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04320768-826e-4a40-bc76-0dfe01240c65",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d5430ac8-a233-4264-b4a3-39c84a342ef9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "847f049f-c38e-49e9-b6f5-64c2621047e2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1de953cc-2f51-4da5-b24b-68f2b72176e3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.670175438596495,
      "responseMin": 5,
      "responseMax": 615,
      "responseSd": 71.30948108738194,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702341383096,
      "completed": 1702341409064
    },
    "executions": [
      {
        "id": "23335aab-dd5b-49a7-9a79-dd26665e4326",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7dcf850c-d931-43f3-8272-ab62dd431eab",
          "httpRequestId": "7ca3fb36-0d85-4b74-86b4-6df7c6adc738"
        },
        "item": {
          "id": "23335aab-dd5b-49a7-9a79-dd26665e4326",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a6201368-9474-453d-bed3-2fd77de2a3e2",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 0
        }
      },
      {
        "id": "f59efcf8-437e-421e-a66d-b0807e1e0700",
        "cursor": {
          "ref": "8ab7795c-c3af-442d-ba33-31595b72be3a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "df85e34c-8d59-45df-9916-23e84c1cc12c"
        },
        "item": {
          "id": "f59efcf8-437e-421e-a66d-b0807e1e0700",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d98e7734-c00f-475b-a9cc-52f1f75d99f9",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "dc95e4f7-4646-4d26-8b47-68e91d9810d5",
        "cursor": {
          "ref": "ad3f8728-f6ea-436e-b8b0-3c2ec25c6324",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8d5e9085-9797-4933-805a-2ffe6033fa9d"
        },
        "item": {
          "id": "dc95e4f7-4646-4d26-8b47-68e91d9810d5",
          "name": "did_json"
        },
        "response": {
          "id": "9d80dd0e-5675-4ac3-82be-15f11389a34f",
          "status": "OK",
          "code": 200,
          "responseTime": 498,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a903d9f0-9b8b-4c85-ba25-450abc1af3d1",
        "cursor": {
          "ref": "e8ec9be5-56d5-4d7b-9c1e-fd5b54208124",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6fa61aa3-f23b-430e-a508-8a21a0b3b042"
        },
        "item": {
          "id": "a903d9f0-9b8b-4c85-ba25-450abc1af3d1",
          "name": "did:invalid"
        },
        "response": {
          "id": "5594bc16-7798-4a74-8e06-87b33f0b108f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a903d9f0-9b8b-4c85-ba25-450abc1af3d1",
        "cursor": {
          "ref": "e8ec9be5-56d5-4d7b-9c1e-fd5b54208124",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6fa61aa3-f23b-430e-a508-8a21a0b3b042"
        },
        "item": {
          "id": "a903d9f0-9b8b-4c85-ba25-450abc1af3d1",
          "name": "did:invalid"
        },
        "response": {
          "id": "5594bc16-7798-4a74-8e06-87b33f0b108f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998f14d0-7fed-471f-bfa6-83c56510b110",
        "cursor": {
          "ref": "0f4b7308-7b82-493c-8a0f-f40df2a4de86",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e639a367-32ae-4fdd-8a31-e776c05c9fb1"
        },
        "item": {
          "id": "998f14d0-7fed-471f-bfa6-83c56510b110",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a6a78895-3c6b-4b09-8f5c-17e909b1a9dc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1d8940-fa83-4c37-950f-34ac0dd28c2c",
        "cursor": {
          "ref": "651d5566-2636-4eae-9257-ba1089c7e333",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bfc37d69-d2c1-46f2-b714-56ec4d0f0cab"
        },
        "item": {
          "id": "0e1d8940-fa83-4c37-950f-34ac0dd28c2c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9d4bcb67-0ce4-4e7f-bfe9-9f772c6ba1ec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b44b1b-f7df-4bd5-807c-79b74d803885",
        "cursor": {
          "ref": "2aa905e6-635a-4708-ab2f-21e4fce9b1a8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ca4f0574-0859-49e0-a939-a02c840da283"
        },
        "item": {
          "id": "12b44b1b-f7df-4bd5-807c-79b74d803885",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2b497a4d-f3d3-4e3c-b7ff-29dc1950a2bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d67baf-927c-49cc-9884-9a86744b5007",
        "cursor": {
          "ref": "9e2c2c0e-5246-4b39-b849-ac17a99e1ea0",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "432635f2-9643-4f24-b0a3-9c170e5247db"
        },
        "item": {
          "id": "24d67baf-927c-49cc-9884-9a86744b5007",
          "name": "identifiers"
        },
        "response": {
          "id": "dacd03c3-1dea-4ef7-a6e1-ecc65d285759",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ba208e-f126-46a3-a6d0-454f4df89594",
        "cursor": {
          "ref": "a4c589fa-b953-4e4e-8ce6-b2302aaea9b7",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "56272e4a-a544-436b-984a-2d95e409a2ad"
        },
        "item": {
          "id": "f8ba208e-f126-46a3-a6d0-454f4df89594",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1932c48a-3bfb-4c7d-a919-a6d8906f2cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4896ca14-3879-4377-9724-460047be42eb",
        "cursor": {
          "ref": "f28a996a-30e3-41ee-b2a9-e50b66b7001a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7d4bd1ed-9f38-4a06-ab8d-0de9905b9a6b"
        },
        "item": {
          "id": "4896ca14-3879-4377-9724-460047be42eb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8fb46d4a-9ed6-4fc0-920f-5e207b83e02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a122d7-770c-4f4c-8f21-d369e19fa48a",
        "cursor": {
          "ref": "ec84fab0-2e38-4d05-af9e-224366057b76",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9f8bbe83-a1b9-4646-ac57-749a417bcaaf"
        },
        "item": {
          "id": "f4a122d7-770c-4f4c-8f21-d369e19fa48a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "98f3896e-44c0-42b8-818f-8f8717fed579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e70f0b-b690-460b-8e9f-c8fff075f042",
        "cursor": {
          "ref": "c655273b-ec5a-47ee-839d-df7e53f22a0a",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7f258927-01b6-4fae-86bf-3d68c1f7ad85"
        },
        "item": {
          "id": "a8e70f0b-b690-460b-8e9f-c8fff075f042",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "73baa022-b603-460f-9663-52e243cfc371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec5dcce-323d-4f06-b787-fcc0aa4e7a70",
        "cursor": {
          "ref": "041d67ee-dd2f-4b9e-8f6a-93f8e68ab258",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e6110bf0-2441-469a-898f-e16af65e6aec"
        },
        "item": {
          "id": "7ec5dcce-323d-4f06-b787-fcc0aa4e7a70",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a0d60ae8-6ae5-4e54-8eee-b1e6e6d9f59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2e8d26-75d2-4bba-87ce-c428255b9ca8",
        "cursor": {
          "ref": "8cd5a9d0-6406-4cdd-b3c4-eeaba39fb444",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "97fbbf2f-28c8-4113-bb31-257760ce65fd"
        },
        "item": {
          "id": "2d2e8d26-75d2-4bba-87ce-c428255b9ca8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "aee8eb1a-2ea7-47e6-9c49-333c411ab237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950d4790-6ae0-4c8c-8def-167254200917",
        "cursor": {
          "ref": "70edaffb-a80e-4681-bfb3-67377842d775",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3687d3f1-48c6-41fb-b45e-bc9558225f6a"
        },
        "item": {
          "id": "950d4790-6ae0-4c8c-8def-167254200917",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b2a7879d-2d10-4473-bdfe-95b4295bca90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bd223f-f00f-475d-bc76-bff59ba81aaa",
        "cursor": {
          "ref": "f91fc99c-370c-427c-b8b6-18440f2f2234",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fcdd58b-17e4-437d-9eb2-d7d44e08197b"
        },
        "item": {
          "id": "39bd223f-f00f-475d-bc76-bff59ba81aaa",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3940a619-1323-4971-a9aa-8a87bea5ce43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41542e90-04c7-4d9f-91d2-496628c61e4b",
        "cursor": {
          "ref": "1f9e59e9-d19e-4852-9483-9d402f4bab20",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "16bceab7-8c59-4e9c-b3e1-c5fb575ddc2c"
        },
        "item": {
          "id": "41542e90-04c7-4d9f-91d2-496628c61e4b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a3a57b42-01d2-49bf-8dd0-369f2993b1c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bdd9e5-b172-4f7e-a84b-af840a19f2ff",
        "cursor": {
          "ref": "dd06e038-6e05-49d5-902f-e51cb5496cd9",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0e967c32-59b2-49b6-b106-988af2307c0c"
        },
        "item": {
          "id": "a7bdd9e5-b172-4f7e-a84b-af840a19f2ff",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fd7ec5e6-49ce-4735-9b6b-ff935b9cfd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266afa2a-69a5-4dca-8379-09ff88865b0b",
        "cursor": {
          "ref": "7c337b41-92cd-4b60-a07f-a08647af3f46",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e011dde9-c728-4e21-8008-5162fb98b686"
        },
        "item": {
          "id": "266afa2a-69a5-4dca-8379-09ff88865b0b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c43c379f-186a-4fdf-af0f-d076cb8b8203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386fcffe-546a-4f31-bddc-3382fdcbf7de",
        "cursor": {
          "ref": "9086b2d3-58b1-4db4-accb-e6c8960c328a",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "58584ad9-bd7d-4c00-89b3-a582722f479d"
        },
        "item": {
          "id": "386fcffe-546a-4f31-bddc-3382fdcbf7de",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "26dc2141-a8ca-4b4d-9aa6-8e30e7d5cdd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51780e8-6e10-4b83-99b9-4ff94e599a92",
        "cursor": {
          "ref": "6973311d-4b01-4333-833a-7ac3c851f37d",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "080f03b8-50f8-4954-ab5c-ab42b8ad2a19"
        },
        "item": {
          "id": "c51780e8-6e10-4b83-99b9-4ff94e599a92",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6b1b084f-8f88-497d-93ff-da180f3ce4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87548956-61ad-4f7c-a66c-913f5088a953",
        "cursor": {
          "ref": "ee016fda-9f1e-43db-b17c-fcce430387fb",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4af38863-b45e-4d8c-a861-c2ec7fc0e484"
        },
        "item": {
          "id": "87548956-61ad-4f7c-a66c-913f5088a953",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "96f978f4-3a56-4e2a-b993-985937c1f5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957b2295-926e-4c15-8605-10b9357d943b",
        "cursor": {
          "ref": "f1cb73b1-7c6b-467b-a781-1750f962e0a9",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0911805a-683b-43c8-94ac-99b1fb45cca0"
        },
        "item": {
          "id": "957b2295-926e-4c15-8605-10b9357d943b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b930d14a-9aa3-42b7-85ff-ffb24155de75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c86df9-592e-4047-816a-d15f7671ab7c",
        "cursor": {
          "ref": "1802f5c2-5b27-40f1-a137-c1251da2f930",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f504b703-f231-419c-8aac-14f5e669c19f"
        },
        "item": {
          "id": "d4c86df9-592e-4047-816a-d15f7671ab7c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "efaab80c-32e6-4313-a995-feca68914e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb905f1-8056-4bb5-ae20-c361aad58606",
        "cursor": {
          "ref": "c53e0351-0943-4a68-9920-62411026f975",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "43207a0c-3724-493f-8e34-d80baab778c3"
        },
        "item": {
          "id": "3bb905f1-8056-4bb5-ae20-c361aad58606",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f33144cd-f2a2-4509-856e-e62b958ebe53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3be52d4-c214-4453-af80-86d40eade35d",
        "cursor": {
          "ref": "fbc6ed0c-c533-439c-9406-aaed196c05b4",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "68a51a11-c5b4-47c8-a3be-e71743d36735"
        },
        "item": {
          "id": "b3be52d4-c214-4453-af80-86d40eade35d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ef7349f3-f09e-4e9f-9d57-e724a10429f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e98be5f-96bc-401f-baf4-9f4e492a4e40",
        "cursor": {
          "ref": "e2f4b950-d369-4a3a-a9e2-d4e3480e9c68",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "72111ad4-67ab-459f-a153-df7eb061d516"
        },
        "item": {
          "id": "6e98be5f-96bc-401f-baf4-9f4e492a4e40",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b6ac5a50-1fa6-48ac-bd4e-efd2b69d3343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b53da0-5a37-4856-bcfb-00908672853d",
        "cursor": {
          "ref": "e23ecaba-1bc4-4247-9480-562041e6f7b4",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "401d51fb-8001-4fac-abd3-69254ea97be3"
        },
        "item": {
          "id": "73b53da0-5a37-4856-bcfb-00908672853d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fe173892-9073-453c-95b4-c79f5771a5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1195c605-54ea-470f-8107-479770181fa1",
        "cursor": {
          "ref": "d896e2e2-f1ef-4e7a-b270-aae6e07dff3b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "73dced11-1bbf-4186-853c-08ee4c85aef7"
        },
        "item": {
          "id": "1195c605-54ea-470f-8107-479770181fa1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c1680449-6420-4245-a07a-eb4d8a988c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04bab979-a621-46a0-a253-e8063a387d42",
        "cursor": {
          "ref": "bf748567-3903-49c1-91a1-d0b96797bdfc",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9f55e639-39d8-4b8c-aa9b-ee51b3512c1b"
        },
        "item": {
          "id": "04bab979-a621-46a0-a253-e8063a387d42",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e519fc15-679f-4465-be65-d9fbf5325bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8078e708-6ba4-4cae-b508-1203e49dfc52",
        "cursor": {
          "ref": "e4d84b37-98cd-4a0f-b5ab-fc472c4818cf",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "29c8cee2-1ba5-47c3-90eb-6287dc7b8f2f"
        },
        "item": {
          "id": "8078e708-6ba4-4cae-b508-1203e49dfc52",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1985f93e-d67c-4574-bae1-73b1986c1259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c3b5ea-0906-423a-b3df-06f4124fc003",
        "cursor": {
          "ref": "1e96e966-1387-4bf2-aca2-7cc22a37b31e",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c6495455-683b-44e4-a8c9-a6018745ede1"
        },
        "item": {
          "id": "75c3b5ea-0906-423a-b3df-06f4124fc003",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "67b10122-bdd3-4d0f-a8d9-4a5ae58f15e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3c3343-0d3b-4621-9774-5b8e86914579",
        "cursor": {
          "ref": "02fd3435-a823-4fa4-94e1-f1d8d933159c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "804933c1-5619-4765-94fa-a2b41f332490"
        },
        "item": {
          "id": "cd3c3343-0d3b-4621-9774-5b8e86914579",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d2a45ad9-8d92-4d75-a045-e03155f1df1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14dbc55-786a-403d-bebc-46399d7e1cea",
        "cursor": {
          "ref": "20977e5b-5233-4526-a0a6-0ed022c9c145",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8457561c-f28d-4fc2-8ef7-b98886015ff8"
        },
        "item": {
          "id": "e14dbc55-786a-403d-bebc-46399d7e1cea",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "27715553-cf8c-49cc-b8ba-22983f75b072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3de3be3-1833-427d-930a-e5016bffff3f",
        "cursor": {
          "ref": "97be8638-1e29-4877-a815-8764eaf59662",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d136fa0b-23b7-4d09-b55c-2a464c8d3e11"
        },
        "item": {
          "id": "f3de3be3-1833-427d-930a-e5016bffff3f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e9189ecd-9427-45f4-b738-52b599fa4a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae28657-9f24-44bd-8a3f-cc92dcef0866",
        "cursor": {
          "ref": "0a6432d7-8009-477a-9282-cbdd22b67afd",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "910009cc-48e0-49eb-a83e-4711028e7c78"
        },
        "item": {
          "id": "bae28657-9f24-44bd-8a3f-cc92dcef0866",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "399d6962-40df-48e5-8209-cd67c41c85f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6f9686-d4f9-4b6b-9176-72600eb7ba3f",
        "cursor": {
          "ref": "9bcbc708-3c5e-4a3f-b20f-d0a3d600382b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0dd8643d-6d9d-4016-875d-817a239cd552"
        },
        "item": {
          "id": "ff6f9686-d4f9-4b6b-9176-72600eb7ba3f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "03555fd8-543d-4e30-bd01-70b243da465b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e075791-f3ca-4f4b-8e26-3d090cf21734",
        "cursor": {
          "ref": "72cb0285-b70e-4151-b2c1-8ad2d9678045",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "77fc419a-d746-4999-a6b1-c0fed8a79c40"
        },
        "item": {
          "id": "5e075791-f3ca-4f4b-8e26-3d090cf21734",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "559f6dca-064d-4556-9aa2-166cfbd0cc1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1b2744-ee8c-44e5-9096-f0010303fa02",
        "cursor": {
          "ref": "dd7c9eb3-1eee-435c-8880-74b6e6ed8cbb",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "34daaed0-86f0-4809-aacf-9136fbdd0142"
        },
        "item": {
          "id": "3b1b2744-ee8c-44e5-9096-f0010303fa02",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "50a4380c-8354-4ee0-90e9-57be81e70962",
          "status": "Created",
          "code": 201,
          "responseTime": 615,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f89909d5-b256-4bb8-8be6-a2414552793c",
        "cursor": {
          "ref": "fafedbe4-dfc1-4a71-a3d7-e6d59b7c8911",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "377fc0a6-ecd5-4842-82ae-98d1bc4d3e75"
        },
        "item": {
          "id": "f89909d5-b256-4bb8-8be6-a2414552793c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6df31f7b-80a8-41e8-ab36-4c2775cc7e2e",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "255cc6cb-67e6-4825-92be-9648b5ebae2f",
        "cursor": {
          "ref": "244065b0-f480-4d54-943c-24206b7c3655",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ad418464-6601-48ec-be25-da8efb3a7f02"
        },
        "item": {
          "id": "255cc6cb-67e6-4825-92be-9648b5ebae2f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0decc123-f19f-46dc-bf78-28e7511be509",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ef999cf8-3d9b-475e-863a-c3105af96775",
        "cursor": {
          "ref": "4b698174-15c0-4831-93f6-69b7ebbfc501",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "19a639f4-35ee-4ce9-a914-7b8a4d39d6ec"
        },
        "item": {
          "id": "ef999cf8-3d9b-475e-863a-c3105af96775",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8a505452-a83d-44a3-b826-c27065dbfdfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c992ed-1083-42e3-9956-53531a6dbc3b",
        "cursor": {
          "ref": "e0dde9da-5158-4421-be05-b7588b2920ab",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8debbdf9-e9be-43d6-8e8a-f782acc7d965"
        },
        "item": {
          "id": "f6c992ed-1083-42e3-9956-53531a6dbc3b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bae808f8-146c-468c-985a-7387e299fba3",
          "status": "Created",
          "code": 201,
          "responseTime": 413,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e8f43831-6f0f-4a93-b2d4-9d8e780f4a26",
        "cursor": {
          "ref": "c1d49d73-8802-4b5d-b47f-9203944c35c7",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f2fd1a7a-37ab-4aaa-b994-9264395e59f5"
        },
        "item": {
          "id": "e8f43831-6f0f-4a93-b2d4-9d8e780f4a26",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1c000cfb-98b1-4cc8-bf66-9fb29cde7967",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3ec6d97d-14f4-4e7e-a3c2-aa17ca5ac725",
        "cursor": {
          "ref": "862f7e15-d870-4e05-ac29-8466fdfb0b75",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c2da2c29-3012-4214-b335-d8408f832cec"
        },
        "item": {
          "id": "3ec6d97d-14f4-4e7e-a3c2-aa17ca5ac725",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bfe68816-ae25-452b-9119-222077200aa8",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0c840917-a877-4a72-929e-e2307044bb5d",
        "cursor": {
          "ref": "5b7ef7d6-4425-4287-a12f-6ee1022a22f9",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d2060473-b38b-4b76-b814-4cf2e138a96f"
        },
        "item": {
          "id": "0c840917-a877-4a72-929e-e2307044bb5d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bc3ffd7d-812e-40a0-b313-40b02f0195c4",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f7867533-e7c9-4965-b2fd-b5a3981b6760",
        "cursor": {
          "ref": "cf6f7deb-db98-473a-8eb1-b2d0972c38d7",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6f3378f7-04c1-479d-ad14-2cb565934495"
        },
        "item": {
          "id": "f7867533-e7c9-4965-b2fd-b5a3981b6760",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0586c174-4b56-4a18-9283-61de125ac28d",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a5442c92-5d5d-40a0-aeee-2dcd201118dd",
        "cursor": {
          "ref": "5aae58fe-f61b-4cde-ab92-2a33a8c9579a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "70eead17-5127-45ac-b995-307bd9f29df2"
        },
        "item": {
          "id": "a5442c92-5d5d-40a0-aeee-2dcd201118dd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1dc2e5be-a0ad-434a-aa66-566c7f3c1363",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b23e3a66-1324-45c3-ba05-b2c3cd9e0a7d",
        "cursor": {
          "ref": "3ad44f11-4e18-4451-bac7-1fca057f2e93",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1497cd28-32c2-47ed-a489-bf2394e28c07"
        },
        "item": {
          "id": "b23e3a66-1324-45c3-ba05-b2c3cd9e0a7d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d0d51116-5783-42c4-a6ce-d0631a47debf",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "afea0df3-8537-4260-a904-6dd587475c13",
        "cursor": {
          "ref": "23496b21-9aef-4478-9c22-a68b4494f1af",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3c0cc6f6-0386-44c4-99ad-bf723a13f291"
        },
        "item": {
          "id": "afea0df3-8537-4260-a904-6dd587475c13",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "be05b63b-7bf0-4678-92c6-6a75698e1105",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "92312f09-e3d6-4654-98f6-615ddf11da8c",
        "cursor": {
          "ref": "ba6944df-528d-4df1-a4e5-62b2cddad9c3",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7a0b94a9-74ee-4a27-96b3-a643b39c6aa7"
        },
        "item": {
          "id": "92312f09-e3d6-4654-98f6-615ddf11da8c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "95376c14-d719-4b54-b5f9-cae6b5e78a20",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "80b9da83-14c1-458f-b412-2da3fea62162",
        "cursor": {
          "ref": "694bb4c5-c10a-40ba-b3c5-6c94b2a4f095",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d016d372-e7ca-45a7-b28e-6f6edd9e420d"
        },
        "item": {
          "id": "80b9da83-14c1-458f-b412-2da3fea62162",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b6c86d69-9c2d-422b-9342-4eb12b079c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c528aa0e-1e23-4158-8ca6-29813b83b7e2",
        "cursor": {
          "ref": "e5ff29b3-645a-4cad-ba97-d078d8289338",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "015e5d20-27b6-4426-bbaf-ed0d0169ddd8"
        },
        "item": {
          "id": "c528aa0e-1e23-4158-8ca6-29813b83b7e2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f5a5bdad-65a2-4756-8f86-156a3ce94b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333fde08-6d58-4aa0-ad74-e534a3d83659",
        "cursor": {
          "ref": "bb147618-3bf9-40f6-874f-88cfd55f9722",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2f848619-4188-44a5-a6f9-42294902219f"
        },
        "item": {
          "id": "333fde08-6d58-4aa0-ad74-e534a3d83659",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "91b95d60-c130-41cc-873d-551d99a4c93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d37c60e-b972-44f5-a559-dcebf9734a6d",
        "cursor": {
          "ref": "cd28ae20-7c21-42c2-9b11-3ce58856c8b4",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fb35b52f-baa3-4af0-8d16-79d6feb58922"
        },
        "item": {
          "id": "1d37c60e-b972-44f5-a559-dcebf9734a6d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "27c98b9b-e3b0-4bbe-9f92-e4c12d429eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39563c2-e9df-45b6-ad09-f2415aef19f7",
        "cursor": {
          "ref": "e176e90d-8c01-4c0c-9cd2-b32c84546be9",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "552a4f24-3c66-4ca2-9d62-ac710ac16c00"
        },
        "item": {
          "id": "a39563c2-e9df-45b6-ad09-f2415aef19f7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f6f91819-9e39-4418-a40d-ec759ba562f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc33f411-4f6d-4eca-a7df-497745331bb4",
        "cursor": {
          "ref": "246f27c9-2642-4fa2-ab74-b67e79f231b4",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1c58dccf-83a9-4ef5-8e76-6d5c29e5b616"
        },
        "item": {
          "id": "fc33f411-4f6d-4eca-a7df-497745331bb4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "182b7fb1-e229-4531-a6bd-4fccbbce5b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd0b1aa-f65b-45ad-838f-970f6b9ace00",
        "cursor": {
          "ref": "f912f519-5133-4d96-aef2-c87f2c01d2fb",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d0a65918-3c07-4d0e-85f0-04ac733c74ca"
        },
        "item": {
          "id": "1fd0b1aa-f65b-45ad-838f-970f6b9ace00",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "df8bfc55-45f5-4a90-90ff-cb9bcf2cd1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666b5158-54a5-466c-b73e-53161d9aff12",
        "cursor": {
          "ref": "92914057-5334-4cfa-b658-52cf4a10dd46",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e6af68de-e597-4a2b-8092-2d9360d05cf6"
        },
        "item": {
          "id": "666b5158-54a5-466c-b73e-53161d9aff12",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5eca2b94-6fd6-458b-91a2-0ee346f31618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7620cbbc-f08b-410b-8575-3ee61bb1ea75",
        "cursor": {
          "ref": "4b963421-0c2b-44f3-bffd-a4f3851c70d3",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a665ebe4-c9bc-4872-9e2f-07743ef86da7"
        },
        "item": {
          "id": "7620cbbc-f08b-410b-8575-3ee61bb1ea75",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "187cc5ca-f6c4-40b1-a1d5-64981face24c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e62a8e-cf72-4106-a820-19d579ff0dc7",
        "cursor": {
          "ref": "fdcdd8ce-dd71-4c26-93f5-dfaa150ae2c1",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7a923791-ad17-4ddd-b2cb-c820f1a693cb"
        },
        "item": {
          "id": "d2e62a8e-cf72-4106-a820-19d579ff0dc7",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3df7fc7b-c034-4003-9dff-d3e11edcb1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2418f70a-f517-4383-ae65-5e7301817d2d",
        "cursor": {
          "ref": "2bfad975-7fdc-4efd-bbce-3b26dc95fd61",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d9e2d0fe-9c89-4994-a467-8b01f9b85d47"
        },
        "item": {
          "id": "2418f70a-f517-4383-ae65-5e7301817d2d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "134984f7-d9d0-487c-9052-cf314dc6e44f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405132a6-6026-4313-aa65-4b86c3f4921e",
        "cursor": {
          "ref": "8c0282fc-093a-446c-990b-a62053145cb7",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0a9fb45c-f130-4369-9c78-7aee571613cc"
        },
        "item": {
          "id": "405132a6-6026-4313-aa65-4b86c3f4921e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "12e4256e-f949-44df-a569-ead2ad627fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05052a68-4927-4f43-bf5a-d86d1261a680",
        "cursor": {
          "ref": "265e6f4b-fcb1-4667-84d8-b81c14a4e4a0",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f5b576b1-b9f3-4b4d-8203-f0ffd1c9675f"
        },
        "item": {
          "id": "05052a68-4927-4f43-bf5a-d86d1261a680",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ec9239d8-e224-49ba-bbaf-e3baaa6e43f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0ba6bf-135e-45da-b659-361c865d9853",
        "cursor": {
          "ref": "9bde4daa-e2b1-49d4-bdb1-035e28c1db12",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "99b0246a-4bfa-4970-a38d-b06c7c3e99ab"
        },
        "item": {
          "id": "fb0ba6bf-135e-45da-b659-361c865d9853",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e263c4d2-cc88-4573-8334-27629ed45ffa",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c16e850e-6642-4c4c-a8a0-20df60a401ca",
        "cursor": {
          "ref": "e527c8ad-e977-4d7b-94f4-6bdc539dda30",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9b4a3309-28d7-4d66-9956-f562ea3becdf"
        },
        "item": {
          "id": "c16e850e-6642-4c4c-a8a0-20df60a401ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "994e7ea9-fcf0-4234-8495-6504068b1dd0",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3fbd3c1f-b999-42a5-b393-0aab0a00c8e9",
        "cursor": {
          "ref": "44d7b7f6-3db3-4f9f-adfd-24f4bea18c73",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "90826e32-8c88-4686-b82b-1302a46e10d8"
        },
        "item": {
          "id": "3fbd3c1f-b999-42a5-b393-0aab0a00c8e9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1e38bc84-099f-45cc-82db-dc89e4c713a5",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "433a8fca-bb03-4e81-b323-7385b37a9a8c",
        "cursor": {
          "ref": "65700b73-0b46-4263-831b-62dfa6629a90",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1885ae8f-3b4f-4528-88cf-85805f4d0a8a"
        },
        "item": {
          "id": "433a8fca-bb03-4e81-b323-7385b37a9a8c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cb36fa07-7ae2-4bf3-b90a-6155fa1f50a7",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b37c9391-06db-4c22-9e39-af37ac8ff261",
        "cursor": {
          "ref": "008688a1-75f4-4565-aff6-c67ab756aa16",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "06159bd7-5d0c-4da8-ae36-5f71dfb579a0"
        },
        "item": {
          "id": "b37c9391-06db-4c22-9e39-af37ac8ff261",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a0576a4f-10b4-45d2-97c2-169628d76dd8",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a0e960eb-8013-4b1c-9796-bab67ed60195",
        "cursor": {
          "ref": "91758e54-a1d6-47bc-b314-dbe42da02a06",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1e75afa0-7077-46bb-9586-3672cb6b9081"
        },
        "item": {
          "id": "a0e960eb-8013-4b1c-9796-bab67ed60195",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f1ad9a29-db53-47e3-9367-b812cd42bcfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f643b5b-115e-43b6-8ebd-08ccf29aa39d",
        "cursor": {
          "ref": "9bc87096-97c5-42c7-94e8-ec26905e28fa",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "57d2ba8c-c943-4f47-b975-2a3d53c79490"
        },
        "item": {
          "id": "7f643b5b-115e-43b6-8ebd-08ccf29aa39d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f51f894d-abf3-4e47-a420-032e747a25bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ee3c0f-bf71-472d-b11c-7e854f16494a",
        "cursor": {
          "ref": "4fc13242-33fa-461d-b3d7-a00e51751f0b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7dc18279-a7e0-4190-9758-9528e236d212"
        },
        "item": {
          "id": "15ee3c0f-bf71-472d-b11c-7e854f16494a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b24da75a-7608-4e5b-9c31-84f209f58aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c843bd5b-f34b-477d-bec6-fee2245577b5",
        "cursor": {
          "ref": "6f005265-11ea-4993-847c-58cff7d208aa",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "23890c74-4b86-4a1d-8f4a-8adde0bfb6cf"
        },
        "item": {
          "id": "c843bd5b-f34b-477d-bec6-fee2245577b5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "948c7c16-6938-4b92-a93c-ae6085c69ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9758e06-b2c2-4ae5-a8f3-00511e89e4d2",
        "cursor": {
          "ref": "dc2c2cd7-d460-4d87-ae87-b4e2e5b6decb",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "414f6a0c-65f8-42c7-8d5d-4a63636269e3"
        },
        "item": {
          "id": "b9758e06-b2c2-4ae5-a8f3-00511e89e4d2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "65e2b7e4-7689-42be-9160-460a490412c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e8d0e3-9e5b-4fcb-bd5e-7583451c8ac2",
        "cursor": {
          "ref": "c85bd848-ad30-4563-aa72-97471f819d29",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "200b9159-527d-4e01-b0fa-e068c4098a6e"
        },
        "item": {
          "id": "37e8d0e3-9e5b-4fcb-bd5e-7583451c8ac2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a344e2dd-f9e0-400e-ad96-2024d0b4f123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b7c70b-b392-49b5-93da-4604a0da5516",
        "cursor": {
          "ref": "cc655edc-d57d-40bd-ac11-1c21a7578ad6",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6378b8b6-7eeb-435b-a11c-ee9fde4da7f6"
        },
        "item": {
          "id": "80b7c70b-b392-49b5-93da-4604a0da5516",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0d97bc74-6cef-4359-81ac-ced750880af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a53f7a-af6c-4115-aa81-b4950a8223b4",
        "cursor": {
          "ref": "d380c5c8-b081-4815-a5a2-f5267d6436b2",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "572e8897-4f21-4b03-84a9-6ba5172889e7"
        },
        "item": {
          "id": "84a53f7a-af6c-4115-aa81-b4950a8223b4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "31c78390-2ffe-4eca-89d2-2c840b62ad99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd336ae-0256-459b-af68-4c5d1450bf26",
        "cursor": {
          "ref": "0ab529ab-c60a-4c06-8aec-04541755d165",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "dde15943-48d2-4f87-bee4-cb41c7cc5a83"
        },
        "item": {
          "id": "dcd336ae-0256-459b-af68-4c5d1450bf26",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5bff99c6-f255-455a-8cb0-d17bd98f235d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e97d9d-9491-4d00-b034-b83a14485ae2",
        "cursor": {
          "ref": "15a1da0e-34b3-49d4-b930-4eb05ccd933e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "721acff2-b8c9-4a35-8e5f-9bfacb4d56be"
        },
        "item": {
          "id": "56e97d9d-9491-4d00-b034-b83a14485ae2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3cb98ad0-0baa-422f-a6ae-fa4d6a4590c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6231858e-c05f-4d0a-95c0-7bdd49134186",
        "cursor": {
          "ref": "b58c3342-f933-4ed4-a608-ca9ed51a09cb",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2c89a3d3-6bb7-4642-95fa-628ce41f9b3c"
        },
        "item": {
          "id": "6231858e-c05f-4d0a-95c0-7bdd49134186",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7b31324e-ae2f-4c51-a739-686046243d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f408df64-4004-4d42-ba4f-5f93c97efcb0",
        "cursor": {
          "ref": "e33eca31-f4d7-4dc4-b0e8-0639f5a294ce",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "069aaa56-5d68-4285-b5d8-7abf0a04d467"
        },
        "item": {
          "id": "f408df64-4004-4d42-ba4f-5f93c97efcb0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4b2d57b6-dc20-409c-9786-b62cd1cad433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33b05d0-c9fb-41e4-a095-165a5d5d2e2b",
        "cursor": {
          "ref": "20cd9fd5-9e7a-43e5-a20d-79e6c3bf6218",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a20cf893-6900-4405-a134-143327eee591"
        },
        "item": {
          "id": "f33b05d0-c9fb-41e4-a095-165a5d5d2e2b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5222506b-04b6-445a-90db-738fb7cc53f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd53c8f3-6111-4262-b246-373d81807239",
        "cursor": {
          "ref": "775d961d-69da-4388-93b9-600030e2be77",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "73bddea3-fa98-4292-8b42-bdbd1294d81d"
        },
        "item": {
          "id": "cd53c8f3-6111-4262-b246-373d81807239",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a4174b81-6219-4de5-9823-db949d645164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e978c469-bbd3-49b5-afd6-fa3671d68540",
        "cursor": {
          "ref": "fb70d7dd-a557-4c0b-a112-75019b505ebf",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "498a0de6-9cfd-4d1a-b13e-823c80762c95"
        },
        "item": {
          "id": "e978c469-bbd3-49b5-afd6-fa3671d68540",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "02f687bb-3005-45e4-a066-5e89622ebcbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39e5a49-1def-4df6-90fb-f7f3cade8201",
        "cursor": {
          "ref": "0bf26165-2e7e-4d57-88e7-067ad5b635de",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "329176c3-2d3e-4c00-a872-f82375e2a0c7"
        },
        "item": {
          "id": "d39e5a49-1def-4df6-90fb-f7f3cade8201",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d1d5d3c5-695c-410b-ba65-4cf2c92fc6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed6edaa-5112-4374-93f4-c6b57679bfac",
        "cursor": {
          "ref": "163d5bf0-b9bf-457b-a2ab-8885e1409ecb",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "79ccd955-17c6-41d2-9d45-8b2ca2971bbe"
        },
        "item": {
          "id": "eed6edaa-5112-4374-93f4-c6b57679bfac",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1029d956-1bf8-4588-9c4f-924293d67a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d983c230-caee-403d-8f10-dab226f07691",
        "cursor": {
          "ref": "81651245-a78d-4d52-a403-b512ea45cbd4",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d2e2da06-50ab-4849-a111-fb39ab59bc4f"
        },
        "item": {
          "id": "d983c230-caee-403d-8f10-dab226f07691",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "72b1fdd9-4065-4bee-a7c2-b4e561aa0720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241d5d22-7063-440b-a0c5-4e3c85005cf5",
        "cursor": {
          "ref": "3c0e7dd8-9c50-4ef2-84c7-c48950187d9a",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "400a6464-af80-454a-8b77-456817cb6981"
        },
        "item": {
          "id": "241d5d22-7063-440b-a0c5-4e3c85005cf5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1b001922-d972-4dbb-bdff-dd89876cd1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ed2ca4-903f-40fb-8216-d00c96466338",
        "cursor": {
          "ref": "f0bed459-1aaa-47a2-bb4e-99b304ee5b60",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f0933f6a-8427-4974-aacb-d2c6127fce89"
        },
        "item": {
          "id": "f0ed2ca4-903f-40fb-8216-d00c96466338",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1f43797b-6424-4eee-b3d9-29adb0e9b7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdab8e7-73b5-4d06-9608-5b536e4879ed",
        "cursor": {
          "ref": "36b916d5-30de-4289-bb0c-cd9a65bac583",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "37484ac4-a43b-40d5-acd7-ac057555f9a0"
        },
        "item": {
          "id": "dcdab8e7-73b5-4d06-9608-5b536e4879ed",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "60de099f-105b-4583-8010-2d81029a2125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c18ae4e-079f-46b0-bc3a-b2c84e625518",
        "cursor": {
          "ref": "bd1d28a9-b439-47cf-9bbe-433915175c1f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3ea95d3e-d763-4e3a-8deb-d7a6b7597e2f"
        },
        "item": {
          "id": "4c18ae4e-079f-46b0-bc3a-b2c84e625518",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "97b9fcab-4f0b-4858-8348-45b82a8b95be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e156cb-e25a-46ec-bcad-ef18322e9343",
        "cursor": {
          "ref": "74f30253-db5f-45a1-b803-6877efb1c459",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "90c1d101-c066-4ab4-9038-a65da07e09dd"
        },
        "item": {
          "id": "c3e156cb-e25a-46ec-bcad-ef18322e9343",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b169f349-4d83-465f-b799-0b04b304ccb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224e1a13-4894-4326-b388-b5f709c2ac97",
        "cursor": {
          "ref": "c2ae7b4e-57ce-4945-8435-d5a078c46c03",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e658a0ca-3d77-4bf5-8e79-69351d6c9e85"
        },
        "item": {
          "id": "224e1a13-4894-4326-b388-b5f709c2ac97",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "eafea8c5-450f-479e-8ca1-3470285bda2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ad6bdb-b4ac-43b8-abee-275f923d1f22",
        "cursor": {
          "ref": "6036bd3c-b16b-451a-90c1-1612747adb3a",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bb27b567-fa8c-4302-804a-8ca45578a138"
        },
        "item": {
          "id": "e0ad6bdb-b4ac-43b8-abee-275f923d1f22",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6942a88c-6b8e-4f3f-98f8-d72d85fe0941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd03d907-98c7-4266-ab3a-d2f02c0dabf5",
        "cursor": {
          "ref": "5fc06caf-4b70-4b89-8a77-8a6201035d9e",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c3843946-7c46-475f-a81f-557c4a3a5440"
        },
        "item": {
          "id": "cd03d907-98c7-4266-ab3a-d2f02c0dabf5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9c191ad8-bfae-49db-b66a-a9887510c53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758936e9-857a-4322-a4e2-45e6e5d570df",
        "cursor": {
          "ref": "8476ab0f-64a7-4d9b-a2f4-ea4ec5090027",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c54a5000-6823-4b3c-9666-0df3de5d5d64"
        },
        "item": {
          "id": "758936e9-857a-4322-a4e2-45e6e5d570df",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b25db94c-cc02-4beb-b4f2-99c07d3f7b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b659785e-bdb4-45a7-9bde-becedd585fb5",
        "cursor": {
          "ref": "897e4123-f9fd-4bc5-8391-bbf5a486e2bb",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1a14c4cf-7d9e-4840-bff1-884160f578c8"
        },
        "item": {
          "id": "b659785e-bdb4-45a7-9bde-becedd585fb5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c100aa7d-2618-46a0-90c7-159bee9112c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1679e9d-750d-433d-bd84-67b89b4eea68",
        "cursor": {
          "ref": "e9603a66-ad6f-4fb4-bf1d-6ab7964dff60",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8d573680-107e-4941-84c7-b26523712452"
        },
        "item": {
          "id": "c1679e9d-750d-433d-bd84-67b89b4eea68",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "67236779-6ae0-4414-a6c4-a2a62810c263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd96311b-e59c-42ce-a28d-6206b3ec62ee",
        "cursor": {
          "ref": "bd10c805-bd01-48c3-96f9-346232146572",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "62632479-908e-4746-93b3-ba39d1a3b9a2"
        },
        "item": {
          "id": "fd96311b-e59c-42ce-a28d-6206b3ec62ee",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c1b3bf6d-7fbc-4832-bfe8-26350df282dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fd12d6-1471-4af6-b0f2-6b438eea97af",
        "cursor": {
          "ref": "89bc4f53-aa44-408b-be26-bd0f1d85bed7",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "af563e57-5f16-4ed5-98f2-f1c0601d6386"
        },
        "item": {
          "id": "52fd12d6-1471-4af6-b0f2-6b438eea97af",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "02c0c8db-8b6b-4093-aead-75be42b530f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5475c39-e584-4156-b114-4010afa722a7",
        "cursor": {
          "ref": "af5587da-f884-420e-8830-bdde4bf161ab",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d564d895-ed2f-43d3-93f7-c523c61ad6dd"
        },
        "item": {
          "id": "a5475c39-e584-4156-b114-4010afa722a7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1aa50139-9f85-45f6-8c03-2056975d4988",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1969e112-be9d-485b-bd67-61ed7c9d5a2a",
        "cursor": {
          "ref": "2d1e93cf-f412-4eef-b66b-e1e75a9475af",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "330d399a-04e0-457d-9b16-9986e96af19f"
        },
        "item": {
          "id": "1969e112-be9d-485b-bd67-61ed7c9d5a2a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "0bec0e46-bbce-47ef-a556-04bb1074b561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "fabe97c8-1308-438d-a1e6-5d2c51160c9b",
        "cursor": {
          "ref": "86d948e6-5b45-4b21-96cb-fcd385b4d43a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8c559a35-98f6-4d29-8ba4-3ce37c55dbb7"
        },
        "item": {
          "id": "fabe97c8-1308-438d-a1e6-5d2c51160c9b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "068ab79f-3b24-4039-a98f-0aaad2a2bab7",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "479e0105-b8e8-4654-ab3b-e9f418522968",
        "cursor": {
          "ref": "a75c05f0-fcf8-4997-9152-86490b9d4537",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "78b5d58c-2ffa-4e6f-aad2-ff0b9ad5d5ec"
        },
        "item": {
          "id": "479e0105-b8e8-4654-ab3b-e9f418522968",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "88cd0d2b-365b-47f9-a2db-5af744f74213",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa06db8e-cc3d-444e-b043-2d8c2c46783d",
        "cursor": {
          "ref": "a194f00f-1e42-422c-be10-1bf6fe4f3728",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "030d87f5-31ed-4ef3-82a7-499d4666bbf9"
        },
        "item": {
          "id": "aa06db8e-cc3d-444e-b043-2d8c2c46783d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "19985416-1643-4541-9a09-589b13975245",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c547e0ad-997c-43be-a695-1cae04cd5d70",
        "cursor": {
          "ref": "0546bfb5-104a-4bed-9278-30577295c76c",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e22839fd-6c88-47f9-ae29-bba453c2b758"
        },
        "item": {
          "id": "c547e0ad-997c-43be-a695-1cae04cd5d70",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9456a079-6f26-41d2-8b1a-6f651be243b8",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8be632-1873-45fe-bd7b-b77983d179af",
        "cursor": {
          "ref": "77b053ab-04da-445f-8c51-d137e216dcc6",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6337d179-a880-4345-ac9d-1aa04fabc1fd"
        },
        "item": {
          "id": "bc8be632-1873-45fe-bd7b-b77983d179af",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "dcd9b80d-ba1b-4a51-8fe2-c3cc1a1aeb37",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-12T00:36:36.356Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-12T00:36:36.356Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2b25ea67-eb9e-4281-98d5-a0590cb3e93a",
        "cursor": {
          "ref": "5732b618-1455-4e35-8d02-8cb193b9c6d5",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e45c7ca9-fbbc-4c4c-91bb-f44499a47aaa"
        },
        "item": {
          "id": "2b25ea67-eb9e-4281-98d5-a0590cb3e93a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e97d11ba-3117-4fda-8a75-b14446259dbf",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e95e3a-885f-417f-94eb-84ec131d7ede",
        "cursor": {
          "ref": "870b8955-c90b-40cb-84a0-0d628daa2f14",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "200ce3e0-ae94-40c0-b7f4-9e8fd3877a4c"
        },
        "item": {
          "id": "76e95e3a-885f-417f-94eb-84ec131d7ede",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a5997013-8d6a-4ec2-bf50-b346085d194f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81c3c42-27aa-42d3-a26a-3650525e5d79",
        "cursor": {
          "ref": "7c1cd04b-7982-4582-9503-fcd09d8575cb",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "574338bd-bf89-45ac-8ddc-7ea8ab9adbad"
        },
        "item": {
          "id": "b81c3c42-27aa-42d3-a26a-3650525e5d79",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a26b01d8-b091-4ce0-8356-749c7f67a9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c68881-24fd-47c1-893f-0d6af515988d",
        "cursor": {
          "ref": "301577dc-07e8-4e49-915f-0ea26a8c6217",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7754961c-afdc-4920-b560-0bc9d2fcef77"
        },
        "item": {
          "id": "f8c68881-24fd-47c1-893f-0d6af515988d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a0e3eb98-2981-4e15-adf1-9650b4f1e284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c84517-2e16-46fc-91dc-fc374c1ab460",
        "cursor": {
          "ref": "2cf3e4bd-6fbd-4e0a-8227-a8f177adfb68",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dec1fd42-8dd6-4743-a662-2463688f60e3"
        },
        "item": {
          "id": "71c84517-2e16-46fc-91dc-fc374c1ab460",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9c6a7026-8b9d-46f2-adb7-748fe7105a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f543a782-ac7b-4668-a5ff-0c0ad38f736a",
        "cursor": {
          "ref": "b4a9ddd2-faee-403f-8029-5200111603b3",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "29d7fc2e-ff8c-481e-89c8-df3beae20d0e"
        },
        "item": {
          "id": "f543a782-ac7b-4668-a5ff-0c0ad38f736a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "441d0b39-ffb1-4a03-a708-ccf612e06629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04d21d7-760c-484e-b6c3-7a8f71805af9",
        "cursor": {
          "ref": "37ad0b3b-8142-43e2-85e3-29476bf97f3b",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d6f30918-5fee-454f-9fc6-7f29b3ac3568"
        },
        "item": {
          "id": "e04d21d7-760c-484e-b6c3-7a8f71805af9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "80d3066d-5544-48cb-8d87-0f2c3b1f60e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff4fe0c-4a59-4cc1-8ff6-a2a8737be072",
        "cursor": {
          "ref": "bfa12345-6432-4bae-b68f-4dfb44d236f3",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "30b4127c-7067-4e0e-8dc8-97bd0f36bd85"
        },
        "item": {
          "id": "7ff4fe0c-4a59-4cc1-8ff6-a2a8737be072",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "27c2aa4e-b2dd-4e69-b5e7-aad6b0468dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd57424-94e8-4b51-a391-d40b3fb67d83",
        "cursor": {
          "ref": "9268e410-9b71-4a48-8969-75682abdb17b",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2b9e8667-2383-4b39-8e43-3173e5d21900"
        },
        "item": {
          "id": "7dd57424-94e8-4b51-a391-d40b3fb67d83",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2fc9582c-a4f0-474e-82cf-2894d6af05d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3392da89-793c-4805-83e7-91687cde2f4d",
        "cursor": {
          "ref": "5fbe59d4-026f-4e63-984d-64dbf2d2b45e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a32daf88-c9c1-4142-b5d3-5dc0b8e08422"
        },
        "item": {
          "id": "3392da89-793c-4805-83e7-91687cde2f4d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bbf92f4a-88d3-4f33-8240-d25483f3bb5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beef94a1-e520-4973-8373-3fab479b2f73",
        "cursor": {
          "ref": "cc81c199-f541-4a35-819e-4f88e4e9e483",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f24632a7-07ea-429b-b382-ef1e1e0b7a3f"
        },
        "item": {
          "id": "beef94a1-e520-4973-8373-3fab479b2f73",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "90e6732a-fc75-4e5a-8cd0-d821ddad0ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbbf1f6-9037-45d6-a4cd-1024f0c3a75d",
        "cursor": {
          "ref": "0a5b4245-5224-4899-a66f-5ebb901c65bd",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ab6a0330-2875-4aba-b74c-678e9f9112a2"
        },
        "item": {
          "id": "3dbbf1f6-9037-45d6-a4cd-1024f0c3a75d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1b142a96-ef1b-49b6-bea9-0e4027fa84d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27dccde-4784-4470-a3c2-b7e836b28d2f",
        "cursor": {
          "ref": "c8f8c924-cfdb-4659-a057-ce631a581f0f",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "941d4f44-db4f-4e24-a2ec-4994e0eb2b36"
        },
        "item": {
          "id": "d27dccde-4784-4470-a3c2-b7e836b28d2f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bc02bc49-a901-4891-85b8-5143327ffaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c2ba7d-4a3a-423f-9304-e9ef130d1676",
        "cursor": {
          "ref": "199de43e-d06b-47de-ac6f-9f346f08e99c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "33dcf1c3-d7ee-44c3-a45f-e6eccbbe012a"
        },
        "item": {
          "id": "f3c2ba7d-4a3a-423f-9304-e9ef130d1676",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1d72c308-77d3-489e-a943-0822bed91ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8f55e9-f700-40af-97f3-c516662fbc09",
        "cursor": {
          "ref": "5b3c5be6-10a8-4de0-b8fa-81c78e8ccb9b",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b7360dac-da5f-47b3-8465-647b4697d506"
        },
        "item": {
          "id": "7d8f55e9-f700-40af-97f3-c516662fbc09",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d7bc9336-447a-4f6f-869f-129ddcf4757d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b57496-12c8-40a9-9978-92264de7f9ff",
        "cursor": {
          "ref": "0f7c12ff-f100-4378-85f7-9b23cb57fc30",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2d2ca022-dd97-4871-9ab1-07f948de3cd9"
        },
        "item": {
          "id": "60b57496-12c8-40a9-9978-92264de7f9ff",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0bc6525a-6173-4ca7-9178-073c5cbf7476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995f9239-53a7-43fb-9b3b-e80c9eb56fb8",
        "cursor": {
          "ref": "0eac9844-d26e-494a-a958-5ac284e30ee0",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9a615590-69a4-4606-a02b-691296c95277"
        },
        "item": {
          "id": "995f9239-53a7-43fb-9b3b-e80c9eb56fb8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6494f731-0efe-4c44-9534-484b488c2719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717497e7-ff4f-48c8-b71f-762030492d53",
        "cursor": {
          "ref": "a66fbdca-ca04-4787-82ed-410feb5cc75f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "05240410-17d7-4a33-be19-b9d30af780d3"
        },
        "item": {
          "id": "717497e7-ff4f-48c8-b71f-762030492d53",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "289f615a-1c09-436b-9131-51fa0883417b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48713f2-ad48-437c-ae9a-9cfd993ff012",
        "cursor": {
          "ref": "40004e6e-b3c9-49eb-b6b9-a46f28bbc817",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c6c18da6-5a59-41c5-8181-a07dd2d744ff"
        },
        "item": {
          "id": "f48713f2-ad48-437c-ae9a-9cfd993ff012",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c3f9c84c-385e-496f-a49b-3669761e6806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b592717d-aac5-465c-9edf-ae599f600988",
        "cursor": {
          "ref": "7f5ac9de-c91b-4de0-b75d-3b6ceec19a68",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b452d18b-d656-4832-864e-68e97a66688a"
        },
        "item": {
          "id": "b592717d-aac5-465c-9edf-ae599f600988",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "74b455ca-23c4-42d0-9daa-8fbf121cf667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae03d208-7e32-457b-ace5-ee672a1368be",
        "cursor": {
          "ref": "80e6007b-475d-451c-8121-6678999046cb",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "282b0bc8-0233-4768-8344-01afbc34822e"
        },
        "item": {
          "id": "ae03d208-7e32-457b-ace5-ee672a1368be",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3725b633-4554-402a-aaf1-c10dd0685c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2740e7c3-157e-4a19-8a38-3e08c8bd67a6",
        "cursor": {
          "ref": "5bf2e2e3-5b78-49d0-90dc-ac2a9da5a562",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "434c1e3a-df5a-4651-8d23-9db712003abe"
        },
        "item": {
          "id": "2740e7c3-157e-4a19-8a38-3e08c8bd67a6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "154be896-6612-48f1-91c7-5b3258529cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1404ef28-7caa-4dd8-a92d-7c7422bbfa27",
        "cursor": {
          "ref": "8e7edd37-eab1-4966-a15f-696f3a6c3280",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "da3b5a99-40b8-4a36-ad37-112696f5c3fe"
        },
        "item": {
          "id": "1404ef28-7caa-4dd8-a92d-7c7422bbfa27",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "33cb650a-f360-438a-ace8-fe603d52c773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1effc8-1088-4a4e-a2bb-9c5093d7d77c",
        "cursor": {
          "ref": "607514c6-cb13-4b90-853a-f6d3172b2dbf",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "584a68b6-3ffd-4405-9e09-e16687f88f8e"
        },
        "item": {
          "id": "ba1effc8-1088-4a4e-a2bb-9c5093d7d77c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c1180ff3-16ec-4248-be49-12cac0eddd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4077428c-a3d5-4a58-9ca2-896a5b1a8d88",
        "cursor": {
          "ref": "5ceda06d-a3a2-4d29-8ff5-874598f77672",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e4b87493-4d18-42a9-949c-d1677fad4175"
        },
        "item": {
          "id": "4077428c-a3d5-4a58-9ca2-896a5b1a8d88",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "afe523b3-b228-4ee7-8963-d102eb8b2ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac905ba-d692-4d1b-9ac2-6c4a1d093253",
        "cursor": {
          "ref": "f0082673-26a5-4bb0-bbe2-591e621e519d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9c00a075-5038-4d09-ab3a-f425f4e5cd06"
        },
        "item": {
          "id": "aac905ba-d692-4d1b-9ac2-6c4a1d093253",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5d2c6a80-afdb-4f07-95dc-fb89b677e860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906731b3-5c8b-4b59-8928-9ac120de8611",
        "cursor": {
          "ref": "47539c92-0d24-4b8b-a337-f7e9618a99c8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "62e01f40-b512-4ba3-80f1-ddb0cf19623b"
        },
        "item": {
          "id": "906731b3-5c8b-4b59-8928-9ac120de8611",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "946fe413-d4b4-4fe8-b9bf-638c7f311f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ffed79-c560-4421-8902-6cf2a4212146",
        "cursor": {
          "ref": "2445b0a6-86df-4262-affd-bb867027bf80",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "38f660e5-0bdd-463a-9ecf-13f2455890ea"
        },
        "item": {
          "id": "66ffed79-c560-4421-8902-6cf2a4212146",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "95a9922c-45d1-476a-99df-57631688f5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad06c8fb-46c0-4f99-948c-5ad1e561afbf",
        "cursor": {
          "ref": "18c34bce-8259-43bc-a3f7-3809c7030caf",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "44e53d3c-51ce-4799-bd90-c25ba49043d7"
        },
        "item": {
          "id": "ad06c8fb-46c0-4f99-948c-5ad1e561afbf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "eac4fc44-0d96-4afe-8dbb-0cf8a79aefca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76840c6b-1042-4f58-9375-548edf4c41a4",
        "cursor": {
          "ref": "4eefda57-be51-4701-a21b-c2b00118d86a",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "98c564c3-ea62-4005-8ca4-e3ff8e0c1d76"
        },
        "item": {
          "id": "76840c6b-1042-4f58-9375-548edf4c41a4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f9d2c2d5-940b-4623-8895-c33e75babf17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07ba5e4-b07b-4484-ae7f-8d1d1b36a2f7",
        "cursor": {
          "ref": "1ca0ee29-ceff-4c36-b6c6-d558dc36a835",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d85f5d98-2e9c-4106-93a9-f79beb9d1182"
        },
        "item": {
          "id": "a07ba5e4-b07b-4484-ae7f-8d1d1b36a2f7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "26a9a318-494c-4555-a3ee-0845e6ea48b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bd8a25-85ae-4c5b-8804-b4a936ad0896",
        "cursor": {
          "ref": "871b530a-519c-48b9-b60b-43d99c532c21",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5618ca36-37fa-44de-b29a-cc0867faf3a0"
        },
        "item": {
          "id": "11bd8a25-85ae-4c5b-8804-b4a936ad0896",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "443caba0-ed25-4c94-9705-badb9a0c898a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7353502-8f2f-4f79-8a8c-ff22ca94fac0",
        "cursor": {
          "ref": "7c2e2795-0c9d-48c6-bf5c-e277a4939eb6",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "63040e29-01e6-4fde-9834-2906c91e914a"
        },
        "item": {
          "id": "e7353502-8f2f-4f79-8a8c-ff22ca94fac0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c8826333-b727-4c4d-8c2b-f109db81a79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a8d6a4-7dff-4da4-8470-e89458aa6a79",
        "cursor": {
          "ref": "35fe1d45-1b63-4f76-bf47-457d515c4d8b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a9269cdf-6b56-4f3c-9b0c-943d96c37a35"
        },
        "item": {
          "id": "f7a8d6a4-7dff-4da4-8470-e89458aa6a79",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7995b13b-07ca-46a4-8053-e5d8fe0f8890",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7226bdb9-62ce-4b49-99f1-8ebdf804ec43",
        "cursor": {
          "ref": "fe91273f-00e0-4cb8-8b82-53a918fbddc4",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "69bd5a02-b2e9-4677-8569-3d921b26db65"
        },
        "item": {
          "id": "7226bdb9-62ce-4b49-99f1-8ebdf804ec43",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "57004bd1-492d-4048-93fe-b12db690fb29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73de720-5288-4063-9100-8a20456062cb",
        "cursor": {
          "ref": "cffdc53c-045a-45ac-84c7-1d3a7d03ca56",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "761c1da1-f339-4c74-8d7c-58a8488f9651"
        },
        "item": {
          "id": "b73de720-5288-4063-9100-8a20456062cb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f58abcb0-0c83-475f-89b5-39084dac63d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd141084-d6b3-4791-a879-f8f65d00032b",
        "cursor": {
          "ref": "313054ac-7b1f-4d4e-a9d1-650d2135aee4",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "31084157-b8cf-4cda-89fb-02e0b5af8a64"
        },
        "item": {
          "id": "dd141084-d6b3-4791-a879-f8f65d00032b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a8a62572-5967-48ef-b3d7-ecc766c82fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b8c460-f9a7-4738-8b22-9ee73ce532d7",
        "cursor": {
          "ref": "66b77e48-dd53-4318-bd13-604b515efce2",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "80dd72a3-0db9-48ed-a194-926f45f7db7f"
        },
        "item": {
          "id": "61b8c460-f9a7-4738-8b22-9ee73ce532d7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d6d6be9c-de30-49c4-8e5a-0abd6a651214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd369da8-8a16-4cd0-a642-c736c6914f5a",
        "cursor": {
          "ref": "e8a6eb7c-e92f-4475-bff2-e268b849fc0a",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1584a96c-aab1-4a38-b313-ce594087eb28"
        },
        "item": {
          "id": "dd369da8-8a16-4cd0-a642-c736c6914f5a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5d145a22-8bee-4e75-a228-721f355d495a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b6efd5-fe50-4df2-b50b-d4bff2b58b0d",
        "cursor": {
          "ref": "8a714396-644e-452b-86f0-12e163176ae3",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "180ec9c5-62a7-4a68-9b40-eac981bda60c"
        },
        "item": {
          "id": "08b6efd5-fe50-4df2-b50b-d4bff2b58b0d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cccecdc3-808d-4ed4-bf0f-5288d582d780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e483f380-67b6-4359-9c41-2f480a116730",
        "cursor": {
          "ref": "72356957-c3e1-4683-854d-635cdb67a16c",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fa1659c2-567b-405a-acde-bd582e6c2eac"
        },
        "item": {
          "id": "e483f380-67b6-4359-9c41-2f480a116730",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0600587b-00ba-4b33-84d4-538cbcbf731f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c744d98-466a-4ed0-b231-cf1718418787",
        "cursor": {
          "ref": "95dbf24c-cf0a-4aa3-9c44-a8f400282109",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f772cb37-d101-42d4-bb54-1f729adb2d6c"
        },
        "item": {
          "id": "2c744d98-466a-4ed0-b231-cf1718418787",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "512dbd2e-d867-41c0-82c3-3f54a784bcaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db31eb7e-0f43-48ff-b85c-c4f2fd999314",
        "cursor": {
          "ref": "0f50ba48-ec6b-4ad4-8d20-68ad87057f67",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5b191ad4-31fc-4267-bc42-d9b35623bd65"
        },
        "item": {
          "id": "db31eb7e-0f43-48ff-b85c-c4f2fd999314",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "edcdcacf-efd5-4f7f-91d8-bde7cd7f40a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ef834d-135c-4f40-a64f-24150b5758cd",
        "cursor": {
          "ref": "15138115-b46b-43e7-9ad1-cfb14e7e53a5",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "46ea84c6-46c1-47d1-bb24-95ed73dc9d5c"
        },
        "item": {
          "id": "c5ef834d-135c-4f40-a64f-24150b5758cd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ccfc4752-284c-4287-b073-c1e32dd7225c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233545e1-b51a-4704-b7fd-35d5a8faa60c",
        "cursor": {
          "ref": "d0993870-6d44-4d54-ab9a-6dd730ec9d31",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e6b519cc-1077-4778-a538-9c0fdb2fc757"
        },
        "item": {
          "id": "233545e1-b51a-4704-b7fd-35d5a8faa60c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fca1deb5-eaea-44b0-8b2b-f307324a6674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818039b5-1eb4-496a-b5d9-2f17766d6ccc",
        "cursor": {
          "ref": "72e6d58b-b98f-4754-ab8b-ec98e6abcbae",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9a412196-9965-4d67-87db-ef4bd194389c"
        },
        "item": {
          "id": "818039b5-1eb4-496a-b5d9-2f17766d6ccc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c71e07f9-758b-4f76-bae1-6bac98910a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b874d6-a6ab-4c89-9eec-5b96c228e80c",
        "cursor": {
          "ref": "8e62057f-ba60-431b-8214-ac442d15fb37",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3030d181-0990-4e93-bd27-1d47befb6257"
        },
        "item": {
          "id": "94b874d6-a6ab-4c89-9eec-5b96c228e80c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "951ce79e-fee3-4cff-8ad5-6cadc0dfc97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12f6080-3967-473a-a27d-4fe3a1a68750",
        "cursor": {
          "ref": "515310dc-7999-4400-98db-eaddf696eb35",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2663ca8e-4937-4346-8aaa-00ecc1793c9d"
        },
        "item": {
          "id": "b12f6080-3967-473a-a27d-4fe3a1a68750",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0b40b586-1e16-4c79-8466-f06912a3b7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb09fe51-06a0-4931-a07b-17f4110a78e9",
        "cursor": {
          "ref": "ce453a71-5b17-4ab6-ae9a-6a94c47c9316",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d49deb82-4c70-4a17-9b41-65547eb0b00b"
        },
        "item": {
          "id": "cb09fe51-06a0-4931-a07b-17f4110a78e9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dd2f764d-0e94-4220-81ff-a349673e566c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb727bdd-5c18-4076-95df-3af1407ba4b6",
        "cursor": {
          "ref": "eff91ab0-efa5-47e6-a358-cdafb8b53f1b",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f019cd23-8488-4dcc-ac10-b6bbd8e12e7e"
        },
        "item": {
          "id": "fb727bdd-5c18-4076-95df-3af1407ba4b6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "687c8e10-9305-4526-b292-07b1d28fafb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf04833-0b59-4fa3-ae2e-7dffa7f145f2",
        "cursor": {
          "ref": "4acf6142-9ca8-43fe-813f-c66c112a7518",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d2889956-d5d1-4896-a6e4-41c02d0caccf"
        },
        "item": {
          "id": "0bf04833-0b59-4fa3-ae2e-7dffa7f145f2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2a6597ca-7085-459a-885c-590165abc811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8987fd-c6f4-4907-95cd-76e1cd0789e0",
        "cursor": {
          "ref": "3774d6ca-15ea-4bbd-b157-dfbfb8697451",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a2996596-8e16-4645-8974-4faec91f1888"
        },
        "item": {
          "id": "3c8987fd-c6f4-4907-95cd-76e1cd0789e0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "284ff990-6eeb-4027-8d26-91187a3f92be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84947c98-ce62-43d9-96d7-9103b4ecb850",
        "cursor": {
          "ref": "b6ec9db4-c0bf-4e9f-a1e3-6318d096e00a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "34f1ca09-4dec-4334-bac7-19c5bd3440b4"
        },
        "item": {
          "id": "84947c98-ce62-43d9-96d7-9103b4ecb850",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fbb41030-897f-436d-8422-8b117b642ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724d3090-17b4-43c6-b005-d27bf5240710",
        "cursor": {
          "ref": "896d81fd-01a1-4814-8bdb-927e539f3e1e",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "78407f86-ecba-447e-9a46-fc58a27bc3cc"
        },
        "item": {
          "id": "724d3090-17b4-43c6-b005-d27bf5240710",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "aa0ce5fc-b49e-412e-97a5-d67a068b4807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fa52cb-cd04-4532-a374-92e7fb729ff8",
        "cursor": {
          "ref": "9827265f-9410-4ef6-a786-27d24f52ea40",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8deb788b-220d-4a0a-8db3-48b8139d3e3d"
        },
        "item": {
          "id": "89fa52cb-cd04-4532-a374-92e7fb729ff8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2b080ec3-1b19-4943-862d-82b1f8a7a3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64905e41-756f-468e-add6-9273d7c72c90",
        "cursor": {
          "ref": "7977ea84-fb58-4343-b661-58560644b0ad",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "18626e6c-3e41-4ec3-87b2-3a53f4a5dac8"
        },
        "item": {
          "id": "64905e41-756f-468e-add6-9273d7c72c90",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e20b8b45-953b-4dde-9094-55215b74f3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b0945a-d78c-4302-8fbc-e463531c712e",
        "cursor": {
          "ref": "88ca7240-b188-4198-8af9-9a9e6c12b118",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "19733860-53da-417e-89b7-c73c7654cccb"
        },
        "item": {
          "id": "c8b0945a-d78c-4302-8fbc-e463531c712e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d4ecda40-5d1a-4979-b631-2d2ba51db60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d825ab2b-3b3a-45ca-93eb-3644938a63ba",
        "cursor": {
          "ref": "a1d98c4d-5b72-4a4b-9355-0c3fab1af25f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a5db5fc9-99a4-47dd-85a4-70f85b316ed9"
        },
        "item": {
          "id": "d825ab2b-3b3a-45ca-93eb-3644938a63ba",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "24f575aa-f541-4e39-b555-2afbec98602d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449270d3-096d-4c83-b1da-a634e1243224",
        "cursor": {
          "ref": "d3815459-5a9a-4136-821f-19763a165ed9",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7187d22f-16e1-4879-94b6-5c1fe40ea2ff"
        },
        "item": {
          "id": "449270d3-096d-4c83-b1da-a634e1243224",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "95ab51f0-8999-4366-8e74-b8f2075e293a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be6b377-a589-4ef7-bba9-a7ee89c69249",
        "cursor": {
          "ref": "14777192-c5e6-41c5-acfd-7c910fc561d6",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7e3e3ead-e153-4140-bac1-ef4e10ae6852"
        },
        "item": {
          "id": "5be6b377-a589-4ef7-bba9-a7ee89c69249",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "219d02b0-2bac-48b1-82d0-86ee466db028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318cd718-90ab-4ae1-968c-597f1d327298",
        "cursor": {
          "ref": "c2ffb92a-7bb0-4a7a-84bd-b48869cae1c9",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "274f38c2-55eb-40bc-a6b3-203938f25a4a"
        },
        "item": {
          "id": "318cd718-90ab-4ae1-968c-597f1d327298",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bb2cc6d3-6399-42b2-a7f9-1d03df57a0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1274161d-f289-48e7-a2da-1d6c9a3c986b",
        "cursor": {
          "ref": "d8b85e19-a656-4edb-ab10-274d4cac6ef8",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8ce37ca9-5329-4f92-83bb-59446dffc981"
        },
        "item": {
          "id": "1274161d-f289-48e7-a2da-1d6c9a3c986b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7baf1891-e1ef-4969-8023-51f5321176ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38348be9-ca5a-4571-ad0c-ee7ba6a6c50b",
        "cursor": {
          "ref": "bd8fd60a-bb6a-41f1-bad9-4d581572b9c8",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0ed7bf91-5cf8-4ae3-b63c-9be65d14929a"
        },
        "item": {
          "id": "38348be9-ca5a-4571-ad0c-ee7ba6a6c50b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3b8f0284-f7e3-49a5-9936-cfb8c698fbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1258c13d-616a-45fd-803e-1cb901d2919d",
        "cursor": {
          "ref": "27703160-7bbf-494f-939e-910c93f4050c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "881644d0-d86c-426c-b700-6be0b8e32e58"
        },
        "item": {
          "id": "1258c13d-616a-45fd-803e-1cb901d2919d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "59a5a602-a4e3-4efc-a393-7baaaed5287c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b174df-b256-4626-8c20-2047e2a04f8d",
        "cursor": {
          "ref": "b73b0942-660e-4c8c-a721-896ec6f366df",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ed65348f-f63e-4e3c-83db-2259f75958f7"
        },
        "item": {
          "id": "95b174df-b256-4626-8c20-2047e2a04f8d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0ec85552-82c2-4a35-99e9-f9bfde62ee60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d52225-d474-46df-85c5-7144e8bba1cc",
        "cursor": {
          "ref": "e3b8376a-3bbc-434f-a160-2faca9ab3a16",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "97bbc69a-74b3-49f9-979f-084f121ca3b3"
        },
        "item": {
          "id": "99d52225-d474-46df-85c5-7144e8bba1cc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5df854ed-224c-4a29-bc7e-7b5890825468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf743d6e-ce5a-4c9a-a112-c756a22a91f7",
        "cursor": {
          "ref": "d8884010-b257-4f3c-8c4e-de7fa8e50021",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ca19fa64-09fa-453a-b60d-802c24fd1cf4"
        },
        "item": {
          "id": "cf743d6e-ce5a-4c9a-a112-c756a22a91f7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b7ada36e-91cb-4907-ada4-4c131aa85bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd81b17-dd05-42a0-a863-6c25f159ff40",
        "cursor": {
          "ref": "31eb9932-4507-46de-9d04-2686a0049bad",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "38526809-5ea3-4f39-9a5d-57946e64c779"
        },
        "item": {
          "id": "9cd81b17-dd05-42a0-a863-6c25f159ff40",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "69e327ed-d10d-4e4b-a8a3-d4edec902493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f340ac65-e98d-4362-8313-629d5a6f1b51",
        "cursor": {
          "ref": "880ff37b-bc1d-4ef0-b20f-2834fcc6c604",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b6d0d015-c553-489f-a4e2-7be45ad901df"
        },
        "item": {
          "id": "f340ac65-e98d-4362-8313-629d5a6f1b51",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "07cdbfa4-e419-48a2-98d3-34b49c76e8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d39bf8f-b56b-4f56-8564-e7ccf1261940",
        "cursor": {
          "ref": "9adc2ae7-6f2d-47e2-8b22-48f5baaa4ba8",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3c013a4d-9cfe-40ac-86db-c6b4a134bc13"
        },
        "item": {
          "id": "2d39bf8f-b56b-4f56-8564-e7ccf1261940",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b70513a6-e283-4ffa-9900-52d0fef6e8b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c6f2c8-c941-4254-ab1a-f69c510471e3",
        "cursor": {
          "ref": "35de99bc-0244-4479-912e-ae6f3e86125e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e345daf8-625b-43d6-97b0-8cec760fadb9"
        },
        "item": {
          "id": "d7c6f2c8-c941-4254-ab1a-f69c510471e3",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "71b80185-4b4a-447c-b9a8-fafd0a413790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f36f70-a9b0-4f5d-abe0-4ce61c207f5c",
        "cursor": {
          "ref": "a18b9c26-b84b-4376-b9f0-bd22c3f22996",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "db086a6c-61de-48b2-939c-e57ac01915eb"
        },
        "item": {
          "id": "90f36f70-a9b0-4f5d-abe0-4ce61c207f5c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7d0b7fed-0cca-4b35-8e97-fe9bd78bd8b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e911e7fb-87bd-4695-a030-afb12a336d2f",
        "cursor": {
          "ref": "bbdec52e-797c-4959-b563-7fb8c709bf10",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7a5e17f6-1092-468a-bc8e-b3798b6c4f60"
        },
        "item": {
          "id": "e911e7fb-87bd-4695-a030-afb12a336d2f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d27074e0-ccb4-4aaf-9faf-9550e5739ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bcfe00-ee99-41a7-841a-a9440ba93e67",
        "cursor": {
          "ref": "5c8eb20a-04b9-451a-9725-5d709394fb26",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7ca15c0b-86fc-4a5e-b0ae-2a72b01dc3c4"
        },
        "item": {
          "id": "72bcfe00-ee99-41a7-841a-a9440ba93e67",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9f413a4a-46a6-4953-809c-20fd51f1289e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4e39b7-2ad8-4999-a189-173f865b2015",
        "cursor": {
          "ref": "c7b95fb6-773d-4165-848a-1ba0b59fdf10",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e1e61ac1-3870-4b97-8f6d-bbaec5e3450c"
        },
        "item": {
          "id": "4e4e39b7-2ad8-4999-a189-173f865b2015",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b8f68769-edf3-445a-9df2-e7d59d8cae42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c595efd1-a5db-4545-bcea-c6ef1e069513",
        "cursor": {
          "ref": "32083751-95f3-4958-9fe0-234b13c7af51",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e8883024-7bae-4520-85bc-cae50818547c"
        },
        "item": {
          "id": "c595efd1-a5db-4545-bcea-c6ef1e069513",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "45a439ff-417c-4374-8125-dc11a606dd28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8fac91-2f0f-4a9c-b616-f7ba03b52e50",
        "cursor": {
          "ref": "7204f1f1-4de8-494a-91e3-c8c89f415d4a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e163ea79-bfc0-47ba-a493-00aff0d3386d"
        },
        "item": {
          "id": "fe8fac91-2f0f-4a9c-b616-f7ba03b52e50",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b9a8361b-d904-44d4-9fb3-3d4e68a5a8c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107db1e5-a1e4-421e-b601-6ce482299aac",
        "cursor": {
          "ref": "abc50a7c-6f2f-4b80-9005-a4875df5d5e6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d0abbc68-a8f5-4c68-9473-2c9a252a8f42"
        },
        "item": {
          "id": "107db1e5-a1e4-421e-b601-6ce482299aac",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b45b3603-bae3-4910-b7b0-2a6903d934ac",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "dfe43eae-b5b5-42fe-8cf4-4d4e7608e579",
        "cursor": {
          "ref": "a96248f7-f598-4ea2-8644-e3bcd9bd57e0",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d2e3fe77-4a2d-425d-ad40-37d88bccd437"
        },
        "item": {
          "id": "dfe43eae-b5b5-42fe-8cf4-4d4e7608e579",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "51eaadac-6e70-49bb-b9ec-f2600940567c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d2d497-9201-4991-9829-84679830713a",
        "cursor": {
          "ref": "0d0b7cde-7339-46ce-b912-f94e74102568",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cad4d7dd-c5bc-4c3b-b458-0a60cf080d6b"
        },
        "item": {
          "id": "b8d2d497-9201-4991-9829-84679830713a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3b1788cd-8f10-4956-bbb3-29d1c12a54ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70e2d9f-0b05-47e4-af0d-43df4a1c2b5f",
        "cursor": {
          "ref": "294f0a38-5913-486c-8814-1d995abece44",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "84d9d993-a7d1-444b-b598-fd92da21cccd"
        },
        "item": {
          "id": "d70e2d9f-0b05-47e4-af0d-43df4a1c2b5f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bc387684-f189-42f7-b2e4-85c7f0278d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b90fde-561c-48df-84bc-6655475ea26f",
        "cursor": {
          "ref": "8a5dba79-79ed-43e0-b60a-634cbba7bf74",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1700e361-6574-407d-8362-15c3f25002d5"
        },
        "item": {
          "id": "f3b90fde-561c-48df-84bc-6655475ea26f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2db5e500-a07d-4b74-8fa3-cf18b53dcec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65fd59e-7286-4c70-980c-188ced7d4f66",
        "cursor": {
          "ref": "5d2124fe-cf31-49b9-b726-bc10137f7f58",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d7df37d7-a9ba-4723-a579-41a1a8bae45a"
        },
        "item": {
          "id": "d65fd59e-7286-4c70-980c-188ced7d4f66",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "231844ea-d83d-4812-986e-da8ab9f5fc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1a39c2-2e85-4888-847f-f22adb77381a",
        "cursor": {
          "ref": "3c596182-bbc7-4ed4-b0ee-05c68f2cc2be",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3931e33c-e793-4681-9802-fabe32021a08"
        },
        "item": {
          "id": "2f1a39c2-2e85-4888-847f-f22adb77381a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "88bd9732-6422-4f6c-9684-2a0bef407114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a3a3db-02b3-4c84-be40-4bac728e1120",
        "cursor": {
          "ref": "f876414c-988c-4a33-bee9-6f2dc8fc6e62",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5c0b17bd-d1d0-4ac9-93e4-68ca5444bbfd"
        },
        "item": {
          "id": "17a3a3db-02b3-4c84-be40-4bac728e1120",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "32ac4fc3-ae22-4852-bd7e-308eee2d62e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98ba706-4082-4b39-8ce7-1e2d7a1c5848",
        "cursor": {
          "ref": "72260f0b-9cc2-40e2-bee0-5d9bc28ba511",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "83d6cefd-942f-4a52-90db-af51e0b22cfc"
        },
        "item": {
          "id": "d98ba706-4082-4b39-8ce7-1e2d7a1c5848",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9db73d38-0145-4921-90e7-220747a63562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a2fc02-81b7-42fe-bb1c-0125655bb86e",
        "cursor": {
          "ref": "70c6cf32-42b4-4a55-a555-81001c59dc5d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0a4c5689-7316-4733-a856-e83a877d10d6"
        },
        "item": {
          "id": "23a2fc02-81b7-42fe-bb1c-0125655bb86e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "da12c9e3-44f5-4870-93f8-5edeb248b2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d306daf-76cd-412a-b6c5-f4f35195ff9e",
        "cursor": {
          "ref": "76341142-1043-40a6-aca2-c5549e4ef707",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "53281808-dd62-4248-9774-5f596ceb2353"
        },
        "item": {
          "id": "4d306daf-76cd-412a-b6c5-f4f35195ff9e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "098492ab-45bf-4b73-8893-514fdfe797b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78a6d9f-f6bb-4360-8051-a7ecb1658835",
        "cursor": {
          "ref": "51b0469e-9a2d-4117-af5d-4a2a593deae1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "32638dfa-e210-4323-b156-b2a414e1cb6a"
        },
        "item": {
          "id": "c78a6d9f-f6bb-4360-8051-a7ecb1658835",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7ad6f73c-165f-4535-8928-189be63e4e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ccde2b-e877-493f-9250-ba93a6da2ab1",
        "cursor": {
          "ref": "49a2b507-5ef3-4c13-9da8-a80b2d7f0b9c",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e929d6c1-9c96-499f-a52b-8ea1012a885b"
        },
        "item": {
          "id": "81ccde2b-e877-493f-9250-ba93a6da2ab1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "efb9fe02-7d6a-4972-8198-7056d31a6ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689aa692-6ad5-4fb0-9443-a0adbaae1ed7",
        "cursor": {
          "ref": "c5443d6c-e713-4a04-ab07-6b1177a5a2e0",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1ac379df-e706-47e8-8089-c05ef70a56d4"
        },
        "item": {
          "id": "689aa692-6ad5-4fb0-9443-a0adbaae1ed7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cea498ee-5c3f-49f9-bc73-cee220e68328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ca6a6b-8950-48fc-b905-e23c6cfaca8b",
        "cursor": {
          "ref": "006f4179-c5a6-4001-8c99-bff4dfcd5853",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "92336212-d0ca-4fea-8a71-07883e04f233"
        },
        "item": {
          "id": "d2ca6a6b-8950-48fc-b905-e23c6cfaca8b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2db8caeb-fe4f-4876-9bcc-b258f0ed0433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c807330-3d5b-425f-b000-62d6a1732570",
        "cursor": {
          "ref": "7fe024e5-3583-4f18-8f5a-1c6c523a3304",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fed41437-a34d-439b-830d-7d8281a553fb"
        },
        "item": {
          "id": "8c807330-3d5b-425f-b000-62d6a1732570",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5c5ca233-766e-470a-9489-4ea56a4bae05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706835f6-e6aa-4183-a0db-c61045286408",
        "cursor": {
          "ref": "9ad85b78-5f66-4130-8ada-1a146f5617f5",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fc265c86-1681-4672-a1bf-407da2dfeef8"
        },
        "item": {
          "id": "706835f6-e6aa-4183-a0db-c61045286408",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6a40dc7b-dab2-4197-b081-cb61809e7d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591c1b8a-8abf-4d97-8b61-7bb3fc405c86",
        "cursor": {
          "ref": "a7931609-9ecb-48b2-8f6f-189ca46c0e75",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "27db5ce0-9337-46e5-9f15-df64844b5ffa"
        },
        "item": {
          "id": "591c1b8a-8abf-4d97-8b61-7bb3fc405c86",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "24abf0db-cb3d-4dfd-8202-d752153ed85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710b2e17-56d2-4ace-8c1c-a163ebbd6490",
        "cursor": {
          "ref": "244fea23-98d2-45fe-bbdc-43ae8d1ea7c9",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "33f6e483-e7b3-4771-8a67-dd34bafe0ded"
        },
        "item": {
          "id": "710b2e17-56d2-4ace-8c1c-a163ebbd6490",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "be1f5947-232e-4329-99d7-8a4970e59df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942defa8-1dca-4f03-bd94-fe5d25ff9da9",
        "cursor": {
          "ref": "d1a01f57-04ff-4bc6-8577-1d9d35439f6c",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1e978838-1ff4-4fed-a0e4-98b6ad130b3d"
        },
        "item": {
          "id": "942defa8-1dca-4f03-bd94-fe5d25ff9da9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8f158df9-e035-493c-937b-da2109022660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e22280-4172-4eeb-9f28-d53bea57f0a9",
        "cursor": {
          "ref": "6bccb93d-7010-4e4a-8956-e9824c6101f2",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bd1da566-3f70-4b11-a1e2-38a4b34f25ac"
        },
        "item": {
          "id": "20e22280-4172-4eeb-9f28-d53bea57f0a9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "eb56614f-0e2f-4815-8504-e48d35caefd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2583ecfc-bc0c-47e8-b06d-e84200084c5e",
        "cursor": {
          "ref": "8041ce5e-13de-46ca-ab1f-a02e2fbf35df",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9ee17e64-e06b-4118-8f14-23efeb3b6d28"
        },
        "item": {
          "id": "2583ecfc-bc0c-47e8-b06d-e84200084c5e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b49e5623-998b-4894-ae63-9c24f985f43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5507da60-2ea1-4ec6-99c2-07e2fac747e9",
        "cursor": {
          "ref": "eb2633ae-7ae0-4f98-ad4f-8cf30af32520",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6ca51f18-9162-42a8-bffd-238881fd394a"
        },
        "item": {
          "id": "5507da60-2ea1-4ec6-99c2-07e2fac747e9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "15537bd1-03a4-43f5-a901-64f036e1b540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfa97d5-3166-4a61-8728-8ab2f97e0b5d",
        "cursor": {
          "ref": "5716a7e6-9edd-40a1-97ab-fab51a2191d2",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3360efd0-1cb4-4f26-9444-ce00b79b1984"
        },
        "item": {
          "id": "fcfa97d5-3166-4a61-8728-8ab2f97e0b5d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a8a7115d-2975-403b-a2e8-ca0ca0527fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19515cd-4f52-43cb-ac38-8fde9b4dc01c",
        "cursor": {
          "ref": "dab0e2b7-5ae5-45e6-b85b-496f9e69235e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ed8ed8a3-99dd-4dab-8a08-3d0179fd5416"
        },
        "item": {
          "id": "f19515cd-4f52-43cb-ac38-8fde9b4dc01c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2032171f-4630-4616-bbf0-1b7eb70014f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec2c148-c6d5-458d-b153-f9fb377f9a67",
        "cursor": {
          "ref": "efd9ae31-ee98-488b-b6c1-07eb20493815",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "eb9bea2c-618f-45e3-ad90-5edfcf76621b"
        },
        "item": {
          "id": "9ec2c148-c6d5-458d-b153-f9fb377f9a67",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c387f912-9da1-4647-87c7-6c52012283cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6d997b-e3c1-4558-ac35-666d793cf24a",
        "cursor": {
          "ref": "259a93b6-c021-43e1-9cf8-e2e5b7de7da7",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e26f24f4-1f78-4d3c-a418-5fcd8713c9c6"
        },
        "item": {
          "id": "0d6d997b-e3c1-4558-ac35-666d793cf24a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7fdfa7db-ebe7-4327-8a85-dcaaec6c91e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33405ee2-d501-4d94-b804-75de7ee00349",
        "cursor": {
          "ref": "ae6a0141-7a98-4276-85dd-736a5e1c778a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "63aec552-7d83-4eaf-8eed-24edc7e9be27"
        },
        "item": {
          "id": "33405ee2-d501-4d94-b804-75de7ee00349",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9fd4f365-4c08-4c62-9f7c-6553209c0ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea17841-4d11-4b81-9b6a-5dd0179187be",
        "cursor": {
          "ref": "b6c0a99b-2b07-4b52-bf1c-7c9696add28b",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fc0963a0-f574-4a98-b63d-c9a68d61ea33"
        },
        "item": {
          "id": "6ea17841-4d11-4b81-9b6a-5dd0179187be",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ca06f7ab-c3f0-46a8-b615-22ef11e39b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13dfb264-c536-4dd6-9d9f-ed31344ff97c",
        "cursor": {
          "ref": "fb324d84-ba51-42c2-915d-bb2f5796b2c4",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7db62547-64bb-4723-894d-a21f9d1c91a2"
        },
        "item": {
          "id": "13dfb264-c536-4dd6-9d9f-ed31344ff97c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b6aa78e6-f834-4b6d-bc38-a1282d532543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebceb4a-c3ae-46ef-99ee-4ef457e1ec28",
        "cursor": {
          "ref": "7cb268cd-8e02-4d51-b3a4-894999a295de",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "08655636-54c3-4b7f-8dcb-bafabe2e649e"
        },
        "item": {
          "id": "aebceb4a-c3ae-46ef-99ee-4ef457e1ec28",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3c16a78a-417b-4b5b-993e-c3854e0acca6",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2b76b532-c204-4c86-9cb6-11a3eb673706",
        "cursor": {
          "ref": "41409eb2-60fe-42bd-92be-421ec8030233",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8236d642-49a7-407d-bc82-adf87877f2e2"
        },
        "item": {
          "id": "2b76b532-c204-4c86-9cb6-11a3eb673706",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "60af7373-f45d-4985-af35-ef2657ec8819",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8d482147-229a-486d-9003-7360c0254ef9",
        "cursor": {
          "ref": "f3f6293e-bdbf-4579-b8ed-118e21e9b8b0",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5dba3580-88ca-492a-8f58-65facfbbc163"
        },
        "item": {
          "id": "8d482147-229a-486d-9003-7360c0254ef9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "85674e9c-f7c3-4b30-a852-35d8d5ed21bf",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b4d13f06-d787-4549-a3dd-9a1a6036a557",
        "cursor": {
          "ref": "026727b0-34c4-45bf-b5ea-8c01d8846c94",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fb1a7cfd-3aeb-4957-a1f5-7dad60317367"
        },
        "item": {
          "id": "b4d13f06-d787-4549-a3dd-9a1a6036a557",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5c9c2762-d5dd-4853-b4b6-c181c9c05fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a10921-d8e7-40a1-bf96-5e4c334d06bf",
        "cursor": {
          "ref": "37e6d771-81bf-486f-962f-b6fb76e91ec5",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "185a60cc-74fd-4291-a568-5fac33b467c9"
        },
        "item": {
          "id": "80a10921-d8e7-40a1-bf96-5e4c334d06bf",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "66478de7-7e8f-4331-857c-232bcc0b1b5a",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ede38c72-58d8-4f9b-94b0-0d08892a8c37",
        "cursor": {
          "ref": "4fbf0332-aca6-466b-a829-022616ca75bc",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ad5393ce-a432-4449-9cc5-da543f6ff197"
        },
        "item": {
          "id": "ede38c72-58d8-4f9b-94b0-0d08892a8c37",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9d2676d0-8bd9-4214-841b-1a7b1a868dec",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "75bfd950-572f-4186-9acc-39a4e4d69e87",
        "cursor": {
          "ref": "e1d6964b-bea4-47b3-9b6e-f2f7b5532f03",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "67ed6041-6877-4c1f-823e-89bef065344b"
        },
        "item": {
          "id": "75bfd950-572f-4186-9acc-39a4e4d69e87",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "53aaa1c6-1fef-4c4b-9863-5e2adeeb539a",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "039d82e7-8f30-4df7-99ad-10ecf2af065b",
        "cursor": {
          "ref": "bcc36cb1-4410-4af5-8f5d-93a9b044f12f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f7f39d86-7722-46bf-b84a-4976de98a954"
        },
        "item": {
          "id": "039d82e7-8f30-4df7-99ad-10ecf2af065b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "44597a31-bc88-46ab-ac19-78027da9eb9f",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e10e7a6c-a312-4413-a298-8a117aa7f7f3",
        "cursor": {
          "ref": "3307cdca-44d1-4342-b153-49fa1a9516d8",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5ce0b3a8-0020-4f15-8a86-04e510654c5e"
        },
        "item": {
          "id": "e10e7a6c-a312-4413-a298-8a117aa7f7f3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3793777d-d3da-4d62-a9bb-2fca5c029e32",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "60e6a5b9-b35f-4f95-b054-241f8d33d6df",
        "cursor": {
          "ref": "7813db0b-ec9e-4910-be57-f5e5f7cec8ae",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c7fb327b-6dc4-49bb-a893-4810c8ed9867"
        },
        "item": {
          "id": "60e6a5b9-b35f-4f95-b054-241f8d33d6df",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6b23d2c0-bb44-4ab1-9750-c3822c09efca",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0844b548-2d21-485d-a58c-8747f22a31d0",
        "cursor": {
          "ref": "c1c37538-ca1a-4857-a81e-ae9968841579",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3fa0a235-c08d-4899-ad3f-15da5e3a94f5"
        },
        "item": {
          "id": "0844b548-2d21-485d-a58c-8747f22a31d0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "538c564e-450d-47cb-9fd5-21a5640f71c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1097c3a-06f3-494e-969d-2753c5c61ab3",
        "cursor": {
          "ref": "48c2d3c5-2bae-482b-8af4-fd5e810b1116",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "439786a1-67fd-4f77-8bd6-c3cc8aba069a"
        },
        "item": {
          "id": "c1097c3a-06f3-494e-969d-2753c5c61ab3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f8a8f6d6-ae12-4654-9759-3669f05e7cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872474d4-7676-4b7b-81b7-16c3becdc884",
        "cursor": {
          "ref": "1a7e5226-6787-416c-99a0-942644895822",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0054936d-bb55-496d-85ee-be98a2a1703d"
        },
        "item": {
          "id": "872474d4-7676-4b7b-81b7-16c3becdc884",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bdc47df1-4756-4291-8c70-c54775c7baf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2f8cda-ba25-4363-9f85-b68fd09d3085",
        "cursor": {
          "ref": "7fc7abe6-60c7-4369-84a4-383de635b44e",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b1fcff5c-ded3-4560-8c15-3352240efb04"
        },
        "item": {
          "id": "7c2f8cda-ba25-4363-9f85-b68fd09d3085",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6cecaca0-bdff-454b-a00c-da505a4ac51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68400012-792c-4894-a397-a2488291232e",
        "cursor": {
          "ref": "4a37030a-97d0-4b0f-89a3-b3c788508af4",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f9d92d87-c454-45bb-ac80-5255a5dd8aa8"
        },
        "item": {
          "id": "68400012-792c-4894-a397-a2488291232e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9933d604-ce92-4cbd-bfdd-4b71d331ccea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecc0035-6ee8-410e-a37a-a4afa41638b4",
        "cursor": {
          "ref": "ffdcd451-ad40-4741-82ad-397c6cbe4187",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d8a4006c-7938-402f-a568-b57188a118e5"
        },
        "item": {
          "id": "8ecc0035-6ee8-410e-a37a-a4afa41638b4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7982cbed-2af5-4760-a1f1-9728fdfe9ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85dec61-aab9-4068-842a-18619a45ff29",
        "cursor": {
          "ref": "7f38ff10-7454-4aea-bab0-a9ca4fe69b67",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0bd2e1af-c63c-4a9c-91c3-f7e2f65e4f71"
        },
        "item": {
          "id": "f85dec61-aab9-4068-842a-18619a45ff29",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2a373849-6527-4900-90df-97efec832d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4856ad76-f25c-4db3-8cf7-631685afcae4",
        "cursor": {
          "ref": "bce09cea-7179-4206-84b8-1b5015c30450",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "258ae268-0eb4-4fc2-b83f-61121390cd6f"
        },
        "item": {
          "id": "4856ad76-f25c-4db3-8cf7-631685afcae4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4053ead9-44b1-4bbc-a0d2-c1860afc4cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d83758-485a-4e8f-aa54-a0c33f67852c",
        "cursor": {
          "ref": "dc12ab7d-378e-4af2-bbf3-6dc10423e0d2",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e9e41fba-d837-4eb9-a784-4ce08c959887"
        },
        "item": {
          "id": "b6d83758-485a-4e8f-aa54-a0c33f67852c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "25f7d22d-3453-4d43-943a-498f1e5e80ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c59529e-5786-4fd9-8963-f9821a2f53e1",
        "cursor": {
          "ref": "9f0abfb7-b44f-4422-96e8-f49faa309ec6",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7a128039-5c3d-415f-87b1-dd9cdc5d5d05"
        },
        "item": {
          "id": "5c59529e-5786-4fd9-8963-f9821a2f53e1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "40986fba-77bd-429d-a39d-881172d0c15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53d4bbe-5119-473c-9e02-750846b5f637",
        "cursor": {
          "ref": "2f20dd96-e599-47d8-9f5d-de54f794ec36",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "46791a88-7fe1-4ce7-abbf-314469c99933"
        },
        "item": {
          "id": "b53d4bbe-5119-473c-9e02-750846b5f637",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1fd6ed55-de7e-4050-89fd-f2a46ae5265f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d33d0d-2b36-4c5f-aed3-3f362804e2f0",
        "cursor": {
          "ref": "71b0f418-69dc-4f75-91a9-774dc24a0f7c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6bc1359b-8bf4-4020-9e53-ec08c112762a"
        },
        "item": {
          "id": "79d33d0d-2b36-4c5f-aed3-3f362804e2f0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a43e4e21-bce4-4c42-85ae-334db651c4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b33d53d-03aa-46c0-ad2f-245ec9505c68",
        "cursor": {
          "ref": "c3e9693a-f2af-405a-83c9-ab7fd5f68e33",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7c8c4e8b-52dd-47f2-9300-19f1fa5bbb40"
        },
        "item": {
          "id": "5b33d53d-03aa-46c0-ad2f-245ec9505c68",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9e4572be-d9a2-41f4-a1c3-e3e68eeeb3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd88541-08ea-4852-9d44-e81e76b09d37",
        "cursor": {
          "ref": "4b302ee8-4c2b-4d4e-b8db-65235715dab1",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "216bb184-48ec-48d5-bf2b-9e4cc6eb3741"
        },
        "item": {
          "id": "4dd88541-08ea-4852-9d44-e81e76b09d37",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "16144c4e-fa30-4912-9ebf-2884f1b0d408",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "879ac6d6-bba8-49e1-8082-9ede2ba3f8ac",
        "cursor": {
          "ref": "1bba047f-6971-4e69-b886-532269b9c30e",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2965120a-526b-4084-9893-a481b78d82ad"
        },
        "item": {
          "id": "879ac6d6-bba8-49e1-8082-9ede2ba3f8ac",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "441376d0-6f18-4936-a287-d2ffd8094143",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8ff7034b-d5b1-4943-975b-83f12b20f070",
        "cursor": {
          "ref": "a1b015e8-84b1-42e2-a425-7d5d288c97ad",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7abdca96-d7ee-46f5-93fe-d6b25cc9bfa5"
        },
        "item": {
          "id": "8ff7034b-d5b1-4943-975b-83f12b20f070",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "78d4a883-a8f0-4926-9eef-9938d600813b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "bf2d59e3-664b-4835-92dc-b98afb4ec15b",
        "cursor": {
          "ref": "d6cfead6-793b-4571-acce-a07394199176",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6db41b91-3671-4600-ab50-f0ce6cd386a3"
        },
        "item": {
          "id": "bf2d59e3-664b-4835-92dc-b98afb4ec15b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6c8a57a6-106a-4562-a732-6b6a929803e0",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4797df2a-0488-4e38-8dd8-4d7f5aaeb414",
        "cursor": {
          "ref": "ae4bb59e-d9e9-48ee-9912-aea5a98cc7a4",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c26452f3-3b22-4754-b31e-08a947e85f37"
        },
        "item": {
          "id": "4797df2a-0488-4e38-8dd8-4d7f5aaeb414",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "014d1b93-d6ac-4ba8-93ae-33cc0aae7bfa",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "2974abf3-6eaf-4f9d-a25f-cc9cdf91a169",
        "cursor": {
          "ref": "5a2713bb-b4da-423b-81f6-6ce23e7bea96",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f7175c1c-df60-4e4d-8615-51122d46db80"
        },
        "item": {
          "id": "2974abf3-6eaf-4f9d-a25f-cc9cdf91a169",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7d05c710-bdb5-46f1-87c4-64fc1b341205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716fb253-8b38-4905-a50e-3901615cdcfa",
        "cursor": {
          "ref": "2ed2a6a4-e163-4a74-8ac5-c862c689268c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "887bfcd4-da9b-4daa-ba34-e391710b920f"
        },
        "item": {
          "id": "716fb253-8b38-4905-a50e-3901615cdcfa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bf053de5-efc6-48ad-9ab0-f79c159bf88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49499d6b-f09b-48ac-a44e-5f50c545a5ad",
        "cursor": {
          "ref": "76a107b4-6c21-4fe6-b023-17a9dcab0578",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "93abc312-fe69-4963-a88c-c2a90186c58a"
        },
        "item": {
          "id": "49499d6b-f09b-48ac-a44e-5f50c545a5ad",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b7369057-f758-4f69-9fe9-13e2f1067444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2d43d5-e6f7-4746-b6a8-a1c6fa2731f2",
        "cursor": {
          "ref": "660a789b-628d-4aa9-bb57-4ede93d1edac",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7fa48f9b-59b7-4c9d-8b85-d89195ae66da"
        },
        "item": {
          "id": "de2d43d5-e6f7-4746-b6a8-a1c6fa2731f2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4aad0acc-86f6-4630-a884-b2d0eefa502c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f24b95a-4d4d-4503-81be-7dfcdbe3dffd",
        "cursor": {
          "ref": "b099baab-1a1b-40ef-976c-7f634b57ec5a",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c579929d-00e3-45e0-9bf0-c116a2bd856f"
        },
        "item": {
          "id": "9f24b95a-4d4d-4503-81be-7dfcdbe3dffd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5ff03dad-bf94-4f46-8dac-97c352aedd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa03c73b-2ee7-4e8c-810e-76a2bbde26de",
        "cursor": {
          "ref": "d8426c79-f1ef-4e01-8327-cc31ce1083e7",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "715ae9fe-3f6b-44f8-9562-c7f33521d30f"
        },
        "item": {
          "id": "aa03c73b-2ee7-4e8c-810e-76a2bbde26de",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0b03660d-15e5-4f90-9bd5-cb1604420b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc80fb35-7c0c-4a43-b7f9-57761d45603b",
        "cursor": {
          "ref": "0bd88d40-0247-48b4-8b0e-425b811d090a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b51b1328-1886-43f4-8369-caf98e191c7b"
        },
        "item": {
          "id": "fc80fb35-7c0c-4a43-b7f9-57761d45603b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "90595cfc-fa6e-46c4-9dda-d3ee0fececfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f27b36-5430-4d71-9d48-6e0bc7891831",
        "cursor": {
          "ref": "2e393f97-e37d-464a-bb5b-f995c33fbdf2",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "da94af72-6136-40a2-9faf-1da94d0164f0"
        },
        "item": {
          "id": "b6f27b36-5430-4d71-9d48-6e0bc7891831",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ed8316d1-9d08-40e4-8383-1b73e10b7688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d9265b-b98c-4372-9fad-02c142e4a963",
        "cursor": {
          "ref": "f707e87b-d8f6-45db-be03-fc475eb76e3a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e449cc19-f2b0-4c0d-b714-ae9abb7d4f59"
        },
        "item": {
          "id": "d9d9265b-b98c-4372-9fad-02c142e4a963",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d37b0231-8291-4c16-8571-06407186c133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209ce24f-b4cd-4900-b639-bc7e0e5f69c0",
        "cursor": {
          "ref": "f38d3c80-a11a-4ec4-ba87-4acfc3df4488",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "840ef2c1-937d-45fc-9b4f-6698f8cc99a3"
        },
        "item": {
          "id": "209ce24f-b4cd-4900-b639-bc7e0e5f69c0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "65d70dfc-8667-4f36-99b5-b782b1290cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea89e93c-46ef-40ec-b30d-2f2f87ad5760",
        "cursor": {
          "ref": "71e58e94-f257-48f8-94d4-5ea88fd0bba3",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a8b44585-6ad4-472f-85a9-2481d82b7b0c"
        },
        "item": {
          "id": "ea89e93c-46ef-40ec-b30d-2f2f87ad5760",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "199f5d00-516f-45f6-8fa0-e5fc8e33ba42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267c5451-ef15-45a2-b016-3376ef125742",
        "cursor": {
          "ref": "4a718925-9ff2-40d7-8a39-f08f6efbc9fc",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "db288c21-f3e8-4270-a20c-1cc6274b99a3"
        },
        "item": {
          "id": "267c5451-ef15-45a2-b016-3376ef125742",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "110bb8d6-8c24-42fb-aa55-8ea4545155a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53229b6-9f63-47b6-8372-2d561228b547",
        "cursor": {
          "ref": "7f2e1376-26c7-42d0-aff9-3bdbed253cd6",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "5a9bb540-370a-4362-9a7d-908c1fc02acf"
        },
        "item": {
          "id": "b53229b6-9f63-47b6-8372-2d561228b547",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ffbd33e4-797b-453a-b77f-302e6d785a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a97c4d6-963b-4a8f-a8ee-5538ffc6da2a",
        "cursor": {
          "ref": "c2022174-41c6-42b8-bf0e-aa43028e8ca8",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6a1b74e4-6995-402c-a820-3217d43fd494"
        },
        "item": {
          "id": "0a97c4d6-963b-4a8f-a8ee-5538ffc6da2a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "03d14fa3-e8dd-47ff-84a2-c63ef28605fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06359e62-0027-4577-81f5-e22b807677dd",
        "cursor": {
          "ref": "9e28a5e2-263a-439d-94c2-334be378500a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "542a835f-8171-48f9-814d-d371cbfd0520"
        },
        "item": {
          "id": "06359e62-0027-4577-81f5-e22b807677dd",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "658be2b4-fa88-48ed-ae17-8a8563175a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb5aab6-19a0-4bd5-bf6c-428b3460981e",
        "cursor": {
          "ref": "fe25dfb7-6e93-4d5e-a2b3-ac33a6161656",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "226a2a25-364f-490b-9293-1bb22783cd29"
        },
        "item": {
          "id": "4cb5aab6-19a0-4bd5-bf6c-428b3460981e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5720a50b-6d96-491c-8591-33d38e219d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8786f6-78b4-4368-8f6b-4a84451872e8",
        "cursor": {
          "ref": "073d977c-b074-4cc3-a5c9-4a1506467a0a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "5e533ca9-138c-4696-a004-f95c523e0150"
        },
        "item": {
          "id": "bc8786f6-78b4-4368-8f6b-4a84451872e8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2f6ddfe8-714e-427b-a935-f6585ab985e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0018a0-49b5-435a-9fa6-751ae481d1c4",
        "cursor": {
          "ref": "399d1e80-3aac-4f79-a51b-fe77c27862bc",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5a110707-b568-472a-b0b5-a2f85fb4097c"
        },
        "item": {
          "id": "cb0018a0-49b5-435a-9fa6-751ae481d1c4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f2f4aaa6-2b58-4990-92df-34d42d0ea2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a09a964-9c5a-4c84-8638-948233ab728a",
        "cursor": {
          "ref": "593bc17d-ff3c-4163-90ab-6598e54bf9cd",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3cc5aa50-4802-46b5-bc97-305c769249d9"
        },
        "item": {
          "id": "7a09a964-9c5a-4c84-8638-948233ab728a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a6aba489-f6e6-47f0-972c-a7d41c95fd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cb2145-4f2a-4f9a-860f-389120a4d73a",
        "cursor": {
          "ref": "850c8f8c-2563-4908-80c9-baf4f97c7c2c",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "57b3d7a9-ea9d-4c24-9b5e-a558d84fa129"
        },
        "item": {
          "id": "b2cb2145-4f2a-4f9a-860f-389120a4d73a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2f9aeb9a-f2c3-4174-b37d-05db11f42c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28e326c-9d9b-42c5-9981-d75da0ab459f",
        "cursor": {
          "ref": "a587bcfb-e080-4008-8b81-221da5326205",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "18b10faf-aa68-4d2e-9258-04f859f34de0"
        },
        "item": {
          "id": "d28e326c-9d9b-42c5-9981-d75da0ab459f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "51b863b9-43fc-4c1d-8d76-04d124556a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa1cca4-aeb6-4612-bf75-a880f84b2461",
        "cursor": {
          "ref": "82f5f1a1-a640-4659-b84b-23294f85c20c",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "6673b16c-2c2e-42f3-94e5-2bfc4432493b"
        },
        "item": {
          "id": "7fa1cca4-aeb6-4612-bf75-a880f84b2461",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0f56fc18-6cf4-4043-b6ec-b12e39227b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8538ea-45ea-4064-bc35-9991d1671d3f",
        "cursor": {
          "ref": "032adaa1-fda2-4928-91ad-3465c9fdbe32",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "39bee3e8-0118-4ae2-aadf-949f94fc70e1"
        },
        "item": {
          "id": "4b8538ea-45ea-4064-bc35-9991d1671d3f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "46a14272-b1a2-4a05-8d21-fe9bf8a808ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf8253c-6e60-430b-a034-3d3d23ffff4f",
        "cursor": {
          "ref": "cc71a230-d678-4b92-af94-05c696c76e54",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6f3092a9-0974-4db2-b13c-b157ac222b38"
        },
        "item": {
          "id": "faf8253c-6e60-430b-a034-3d3d23ffff4f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fb7918db-a3a8-4d6d-ae5d-cd148da049f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7ab587-cb85-4fa1-92eb-bee353e820a2",
        "cursor": {
          "ref": "6d8e8b0a-9787-4d8c-8d50-8f5af6294eba",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "fb38e374-12ad-4842-b594-c05ac94cfabf"
        },
        "item": {
          "id": "cb7ab587-cb85-4fa1-92eb-bee353e820a2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9b28f2c2-b1b4-470b-9427-65b619ac205b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ffbe7d-6139-4fe3-a7e3-cad188aec730",
        "cursor": {
          "ref": "b5c57546-6ded-419b-8233-a9e385f37940",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "9f3fe93a-31a8-4f25-957a-fb4a22dcb8eb"
        },
        "item": {
          "id": "c7ffbe7d-6139-4fe3-a7e3-cad188aec730",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "07c3393e-921b-46f2-8fac-057f693df043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f19d5af-34e4-433a-b0cd-1c6d73fe1b4e",
        "cursor": {
          "ref": "1553a9b2-5647-4ff2-a513-d350f78529a9",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c51a0d2e-3538-45c4-935a-74299a87e509"
        },
        "item": {
          "id": "3f19d5af-34e4-433a-b0cd-1c6d73fe1b4e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9751bc27-758b-49e9-8def-b8b034c33ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6818ee-002e-4cf5-9139-442d90da3168",
        "cursor": {
          "ref": "db05ae29-a555-4241-ad31-fb160e8d496a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3f2d279e-0494-4deb-bcf8-550d87a5c624"
        },
        "item": {
          "id": "ec6818ee-002e-4cf5-9139-442d90da3168",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d8c70c4a-8cc4-4568-a333-b3756e542011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bc68cf-c342-4058-a833-5a7e2e54bd09",
        "cursor": {
          "ref": "e97266bf-801d-4edf-9b7d-ea89d37f753c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1e57b418-091f-4004-922b-b3a276ac90ac"
        },
        "item": {
          "id": "b7bc68cf-c342-4058-a833-5a7e2e54bd09",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c5c8100c-4b4c-472a-b8f5-82df716d4d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c24c09-cd8c-4c54-bf5d-9f1a3f233997",
        "cursor": {
          "ref": "535f4148-2cd2-4723-899e-49f9e0a55206",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8fc73011-d8ef-4e64-bc17-6b502df36559"
        },
        "item": {
          "id": "14c24c09-cd8c-4c54-bf5d-9f1a3f233997",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cf815e16-4fbd-4ce6-8d8c-3c77771ae6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8c16fd-b096-47d9-a626-ad6f2fbca898",
        "cursor": {
          "ref": "359e270b-5333-4056-bda4-2f8e1eb75c8f",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "35f3df80-128f-47dc-bf92-091ff1b7f932"
        },
        "item": {
          "id": "0e8c16fd-b096-47d9-a626-ad6f2fbca898",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3697a469-dfb6-4924-a824-9d8bb6e3620d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8831bcab-4b03-45a7-9b13-54008a720cc8",
        "cursor": {
          "ref": "7ed31c1d-4044-4708-a602-78495b9888c5",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f088a730-44ab-426d-9e2c-6423b939537f"
        },
        "item": {
          "id": "8831bcab-4b03-45a7-9b13-54008a720cc8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "851ba535-056d-404d-ae52-511c3f005df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b579be0-661e-49fb-99e0-316b85091cee",
        "cursor": {
          "ref": "e500d241-4fcf-4cad-ae17-19f17f800f4b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c83fb0ea-9b34-4a9b-a7a0-35915dfedddd"
        },
        "item": {
          "id": "8b579be0-661e-49fb-99e0-316b85091cee",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a01278a2-6657-44eb-bb90-87cf5b3987ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0f24b1-d836-44fa-9bc7-0e3cf8a4d283",
        "cursor": {
          "ref": "d1bae3b5-0491-42c6-a23a-f410c2e610f7",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "570d57e4-40ef-4dff-9fa4-821d686dd7f9"
        },
        "item": {
          "id": "4b0f24b1-d836-44fa-9bc7-0e3cf8a4d283",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "052daf04-0bf3-4763-af82-d62eb7e9069b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7dad6a9-ef2b-4d2c-9955-462708bc6ea6",
        "cursor": {
          "ref": "9de86e4a-0b0f-482c-927f-5fa1ebc6253c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "e0e66347-a110-4aa8-8a4e-aa0fd6db282a"
        },
        "item": {
          "id": "b7dad6a9-ef2b-4d2c-9955-462708bc6ea6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "162a8415-5a90-4294-8adc-0ad5288ba67a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2203f3-709d-430f-a8bb-777649bf9959",
        "cursor": {
          "ref": "e7903db4-17a1-4a28-a9df-40d18cd70a1d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "9a6bd943-d0eb-4796-8349-bf59ed14961c"
        },
        "item": {
          "id": "ac2203f3-709d-430f-a8bb-777649bf9959",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "beffc2f6-115f-4aaa-87a3-c0a00bec40a6",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "229e74c2-a947-4db6-94a3-3f5076e3b7c3",
        "cursor": {
          "ref": "f8a9f54a-d782-444e-819b-d000b3fae532",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7b79f5bc-1846-40c5-bef9-598f3edb0ffe"
        },
        "item": {
          "id": "229e74c2-a947-4db6-94a3-3f5076e3b7c3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "baeb86cc-8c46-4d92-93f4-fb26d09e63d5",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7406b4dc-6744-402a-b0f4-cf7a2fc5d39e",
        "cursor": {
          "ref": "a90e2b77-4ca5-4537-9c25-89818d5c94ef",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "fe87cb98-3d93-4418-a859-b36980da3bcf"
        },
        "item": {
          "id": "7406b4dc-6744-402a-b0f4-cf7a2fc5d39e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8ef3fbbb-7520-40d1-abed-0472c1d67ba8",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb2abfe-2913-40a4-9902-09f9a2c7298c",
        "cursor": {
          "ref": "9008878e-1187-4b7f-862d-59d01aa4895f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f4369497-15ba-4c25-85ab-54536eeb2b6b"
        },
        "item": {
          "id": "bbb2abfe-2913-40a4-9902-09f9a2c7298c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "47faad36-42d1-47d0-8310-ba1cc583aed1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb2abfe-2913-40a4-9902-09f9a2c7298c",
        "cursor": {
          "ref": "9008878e-1187-4b7f-862d-59d01aa4895f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f4369497-15ba-4c25-85ab-54536eeb2b6b"
        },
        "item": {
          "id": "bbb2abfe-2913-40a4-9902-09f9a2c7298c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "47faad36-42d1-47d0-8310-ba1cc583aed1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e969696-7b52-4f7b-bf41-a465f71165e7",
        "cursor": {
          "ref": "8d7667ff-60f2-478a-81e2-6cea4b1762ac",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f44201f0-bd54-4830-91a6-05a24e70ee46"
        },
        "item": {
          "id": "5e969696-7b52-4f7b-bf41-a465f71165e7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "326a9757-8bab-42a3-b140-0ed2fb015b53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78426b01-7b44-4613-9bf8-6485d8826c86",
        "cursor": {
          "ref": "2ade198e-b82b-4550-b5f3-7157beafde07",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f867e5fd-7806-405d-83ac-9c2ac8640159"
        },
        "item": {
          "id": "78426b01-7b44-4613-9bf8-6485d8826c86",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8a94b5ac-8ec9-41a7-b36e-04e45c53d95d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}