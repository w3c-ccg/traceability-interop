{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "41c1c11b-fcb8-4956-bbc9-7b321068ec6e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7291fbd2-a9f6-4a8c-8134-fcd41fd0567b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f69ac35-b1b1-4773-b40e-b2c299a1daa0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7110982a-8371-40e8-b132-766227ef4d6a"
                }
              }
            ]
          },
          {
            "id": "42d93d7c-08cd-44cd-9d9e-8627c6e7bf86",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23e958e6-34dc-4f39-bdc6-dc7d0912a2ab",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "abf6802a-878e-41c9-90d7-0af77693022d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1ea35535-ce37-4129-85bc-09d8e934ed10",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "96fbdd06-9041-4025-b35c-b6117cbead6e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ac8232da-b90f-45fe-83d6-dc8eb9dcc613",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af2d19cb-23f7-44d4-b3b6-c5189869d0fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8934644d-8c4d-46ef-96ad-e90d29de7170"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f4af8e8-6211-4cd4-af1a-87d1591ee210",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be727093-f9a4-4ec1-bc40-a9789b0815af"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "16b53e48-1231-4086-8cd5-9bd5cd590f32",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e98102f-a802-4271-a774-54a8377f0174"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed2eedf2-6a52-407d-afb7-b866fc9b7028",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "14886d87-a471-404e-bb14-3c06a2e852b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "239617fc-ae10-4988-a003-2ea0008a407e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3efa8e5a-7f1f-4a5b-800f-1cd6baece36a"
            }
          }
        ]
      },
      {
        "id": "0bf51e17-1af5-4f45-9705-6a797014a8ce",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "49946804-8016-472e-83cc-99cb503a6bb4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c236639d-c28f-4062-9358-87e333f25605",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "01d786ec-4e98-4068-9354-55bf88779987",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3c1b8d-e5e6-420a-be6d-9b4601a12722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f80597c-d2f8-44d5-913c-a3f727bedc5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f3b99b-5308-495a-abb2-c6d6b39459f1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256771bb-92bc-4b54-bc6b-aad829436620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6114dd5e-2ff2-4b4d-9c46-e90eca00d303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced06cb8-e0a1-4cac-95c3-89168ac718ed",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61187913-1392-4f12-bb99-428a25556222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f325de71-c204-463e-89ed-abbf4bfbe3f2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9d746999-5bd2-4ecd-855d-9f556a37b97a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72c786a0-646f-4acf-a37d-aca6e8045e57",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049816f1-e084-4953-975e-ac2051415c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc175e63-33e7-4d45-aba0-dc0023b611e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c626350f-c6eb-4661-a3fa-644de9d89139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db6b782-9ccf-4f3e-8b9f-713b80fdb13b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bb2f5bef-3fb8-4b03-bba3-402e991bf9eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "05336c27-9a71-48eb-ab4b-7346cb4f640f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dca5526-e96d-4e98-82c3-54c43c6dc643",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "989e41d3-4303-4409-ab72-6f38d9680503"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e569fba-891b-4af6-a135-504f6e5490c7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8bd000b6-bffa-432b-981e-bbfdbd7b7fd2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf2435db-78ae-4d7f-a3ce-02648cae357f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8eb21bb-65a4-45ad-874c-433ab6cb5153"
            }
          }
        ]
      },
      {
        "id": "0aff2f48-c78f-4130-a6fe-4e436bfc8886",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "209110fa-57ee-405d-a941-4333a27af4f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8b7a476-8ec7-45d1-971e-e8edef341d25",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4692fc08-8314-4a46-bde0-31290b634202",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d641314-37ae-4c4b-be72-97cddd64025f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362fef9f-e0d6-4879-9357-dc2804ab6759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2100825-c311-4905-bcf2-dffbb6ff055c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ca76bdd-ae89-42d4-9563-cb7e39753b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf21ea63-26dd-4c70-a1b3-b5e9ca05d7f6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd07f777-3e96-4298-b560-59fffe220ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edb1135-4dcc-401e-b4b4-cabb42dd8a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4740e2e1-6da1-4ffc-a220-5bbe9dede4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0548bb9c-3489-4d75-a355-3de2c348bf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ff50c2-66cd-4413-b0bb-e6804b588a1f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc5cc47-9946-4d2d-b243-d7e0e9ab37ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46ea8fe-4cc1-4085-9ef5-0a75bc7934e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9419354f-adc3-4a9b-be2c-3c74e0eb3c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12ada7e4-66ed-4193-8aa8-e7fb900894ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8281f7ab-1467-43db-9e70-db5c2fa0debd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00edbf5a-f2a1-4a40-8d68-a317291c8030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa3fe0f-d61e-442f-8057-63a6c12b1952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d47c462-133b-4413-bdd0-a67fc4774dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68651afb-95e5-424e-8d23-29d991e7f56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e5d1f8-9c55-4362-b943-afa2a3fd5463",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7014059-670f-4928-98ff-c35ddc9bdafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0827e13-0463-4a2e-bbfb-0d98b5abfe10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f556172-6847-4635-bff2-f5d9351f15a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1afcd320-645a-42ab-8096-b6fe482ba00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1c5073-a28e-408a-87d5-f9f4160cfcdf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91488430-5d34-455f-9211-558801a7a678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b211309-1003-49b0-8016-daa386a69bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ff4e60-592c-4c3a-9b04-1ea1c5259aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f37bb17b-40fa-482c-ab18-73c0d543e404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1fff29-236d-43cc-bff0-3b3b0eb5c297",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ccdb41-7af0-426b-932b-622641c28d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cece20d9-34e8-4248-a5d0-f57db9cf4628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9090768-ca28-4884-b5ac-3f22a1c4cab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d037fc1c-040d-4ad7-aca3-dde0faca6130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a5b39e-92ac-499a-a973-f2e295a0e0e5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ff63db-00c7-492c-adbc-6a7c40beaa21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b35be6c-68b3-4744-9c9f-873cf3fcdf10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f62e0ff-fd7a-421f-835b-6e9d7e7e3cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccca3f12-b796-4048-b0bf-dc6de4ec257e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceb55f1-9d9f-4f77-b594-0a60f058ed93",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60510b6-eee6-4978-ab12-a147adf01373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1b8f01a-830b-4d1f-87f8-e3a0721ea7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b755bf-babd-4631-a9c8-b96312856167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a22f2c2-2d50-461b-b0e4-be808d615248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58586769-b4bf-4a1b-9d82-2da9ed9e5794",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb36143-54e9-4f0c-ac99-96983dda8882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156027bb-42cd-45eb-b8d2-cad17aca5d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420b951f-5468-4bd7-8003-7b637a60c4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38b3abb6-927c-4b30-8b94-4e5ba924bc15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cad5770-14dd-4cae-b0ec-48ef10064da7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d361ab5-c7f2-4c28-a514-821cc1fe8560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96777ec9-9a5e-449a-80cb-1438b95f6291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29450938-3ba6-4266-b689-99648aadd768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67ba053a-b4df-408e-aa74-0a12cf964eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695b9069-6503-4a1d-9242-c3ac4ce7d476",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7c3229-4488-40f5-9d38-eea91189c5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ff6d01-e14f-4489-924e-b0238d033dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf4e631-4780-4205-b2b0-464eebce5a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3a82c37-5e0e-4d5a-b7ba-1dd609e46f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4f63d7-266e-4909-904f-ba0c2c239e98",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266dd519-e075-42d6-8329-9d27cf62e54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5881b6f9-2186-412f-9bb9-7f012c0a5f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc98895a-d658-43d0-8e00-8ed7e54b975e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a00637c3-6dba-4cd4-bb82-852b86782146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8729aec2-3c3d-4b19-817c-415147734e01",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1f709f-d9a5-48ad-9a5e-bd5778041f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d60197b-4074-4624-b8d1-a826f063bd62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552a96ee-26d8-4e75-b30a-f1ebd789d676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d41529a7-f623-4ff8-aae4-1a7a6fc916dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e49c972-7d09-40f2-b162-c1db497e5a7c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1ac697-de07-4497-a125-6b4aa153f8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "869613c2-6212-4ccb-9705-0bde426c71f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bde10c-e431-41e6-8d3a-93c13a90fb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf673785-90ce-42a8-af63-027e3a078280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35e5c21-678d-4fa1-aec7-856d0dbe74ee",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae3eeea-c82e-40b3-9839-cb86208ea957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548c81f3-60c8-4cf7-8da5-fbe563a0949b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4147c9-f45f-4831-92c9-b3631f5f5e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74847e58-679c-4ee9-8f12-fad30518a3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1131979f-2c15-4888-8849-61dd8f452fe1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3ccd22-b8d2-4136-9802-4e6942800542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc315020-e5bd-47fa-bce5-17de9496a673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8595a0cb-1b32-4ae2-9d27-67374b513ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08d46663-a16d-4dc5-89fa-6298e21ffb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8a63d8-4c5c-47b6-9006-b13ef6cabdf2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d95f076-1358-45bf-b034-e80d9be73026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db389dc1-c76c-4295-9b52-6debf72a62c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d62d00-1629-4977-82b7-0f5ec17f54f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "25f2100a-eaea-4f16-9323-ad4473591535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94230bd5-5d63-455f-b587-41365f5cc3b6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd7116a-238d-468a-9371-359515b822e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a1aaec8-5d37-4c31-88bc-ec5fe6a78866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0952d19-7924-45d1-bfe4-aee48d623806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37bb24ba-338f-4474-9c54-ca5b2b449973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbd34f1-3cd1-46d4-92df-d52a0be97bf2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af15b10-423f-466e-b684-1f7045cc6e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4d93eb-c83d-400e-a597-788e96be904a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dd91eb-75de-41fe-ba33-bfc885ddef2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6adb8fb6-f939-4f39-8b63-60184f7e568b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668bc0ec-9f59-4e01-8723-4fb01197fe5d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d82729-fb6d-4a7b-a3d6-2148fdbef4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d5b859-2042-4e5f-90dc-e68df63740ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f0027f-44c0-4d69-927c-382b438f86c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e3424c-05c7-4493-9af1-eea8a3a25287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b01751-58a3-4d33-915b-83a342dd44d9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9de032-7915-4630-8887-30fc5b6a9627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214d9380-063c-4384-bceb-ad7022213988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f847721c-9af9-428a-bdca-6f68e7151111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "403b2b02-0dee-4932-af97-c652039a8ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8caf62-032a-4e3b-a89c-1b11fc2ad9f8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b044f29d-4bc4-4f15-943f-baa89c74aafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c71b85-2174-4836-9768-d83b0c91b277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4f7230-070f-4b77-be1f-6ec05274666a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e62b1d6f-442b-4d1a-9199-e80ab3a3d57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1acddb-0208-46d4-a089-b2eb7d28dc44",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e01628b-89e3-464a-8d62-3dba4649ead2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f7abab-066b-4bb3-8553-b51a8b4093cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b7e55f-4667-48cf-a0b2-36f54df6bcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "477fb528-dd7b-442e-97b1-bf7f92069fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ec5fd1-ec23-478f-8ee5-1ed1d7748d26",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4017ef3-4fc0-430b-965d-1ed0f80a6223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6650fcec-db7b-490f-ad72-5ffb655340fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a11ccc-70bb-4ae9-856d-f58574a5d1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e23b6bd-2be9-4003-9329-9736ac23284a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6f7e99-c615-435e-b683-eefdfc3e9c90",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b44df2f-717f-4c9d-8937-c724c0adc930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa147a38-6e6c-462f-9636-9cbbfc60af1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd811829-58f2-4d19-b4be-0b4104d1e283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c35b45b-b1cf-40e0-ba11-42641c03129d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89431469-601b-4c25-b249-fa2c78baa072",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35ad2f9-53f6-447e-bc8f-ba5367977228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e12cc35-55cb-465b-9bf1-04ed6e95c557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f12e98c-c203-44d1-8ce9-d0bc1aec3b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff9e0f8-0747-4010-9b32-d688ad2dbefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7565e31a-2739-4182-8bac-e78ba66876ec",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cebf728-cf12-4203-b89d-1d22827855cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0974a86b-55f4-457d-8f92-a6fe8671c5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4254996-3bf7-462c-a47f-199e0413042e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0f4a6a-3076-4970-82f2-436260e3a27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa23f00f-ca3c-447d-826b-6a493dedb081",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5701f317-f9a1-4447-8dfa-1bc7a1da8060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d70f81-ccf8-48c2-bec4-485dd0dba6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c0df9d-2fb7-4dd3-af41-d93dd8be7a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3cd268e-3fa4-4f89-aaad-c5de1f1ac06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52be9d14-729c-48c3-89ac-cf8ba2947bbe",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8af30e-0d4d-4461-8882-78a62c6f34bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189cf2f8-8449-4c3d-8d79-a7be9f70b1e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f5d345-b304-4bbd-8f01-284d24a65ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "00f24fad-8d5c-457c-bc94-0eb0b809a620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35009711-4184-4e6b-bd90-e7e66965893b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874cf078-644d-4406-9c16-028e45984169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c491e9e1-bd70-418f-bc87-54279ccca0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1c749c-1edb-469d-9419-66590c7970d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac36745-b794-4d10-ad2d-dbb21e1c9507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb349ba3-c861-47ec-85a5-1c40fc623046",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239ab086-cda8-4364-9a79-7f95b0705c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ba1d92-4f2c-4660-b1dc-cee744416725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4911ad0b-4384-48f7-bbe7-82a775ee50b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3277d81-7348-429b-a2c3-16026bf71ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b14709d-80c6-4977-8f33-1f7864e3e15a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c526edbe-9123-44bc-ad97-284d7bcaf189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16332fac-40b5-445d-b974-cca781928b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dbf915-b6fb-4a48-a706-4b38cfbcfe81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43ca4381-7554-4e4d-a6ae-295b36e9776d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454db67a-7a4d-465a-9e3e-84f8c957afd9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07e3960-49d7-472b-acc4-bb38de018e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138d505c-676c-44da-bdc4-79e097cdca37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d45c4b3-dfb0-4fe2-8b5e-ce48f8e10ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60fd7dab-ada5-474c-a02f-548d54ae006c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c8e50a-e37f-41b1-b1a0-375726e8312c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92221586-5e15-44a2-81c7-250a8d3ffb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5b0ae0-ac30-4cfc-8d6f-566dc7bf0235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6956c43d-031f-4aad-8b48-10535157b715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b325563c-9b8f-43be-8fe6-8e1ed135038e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d0a91f-4766-4abe-b906-8be9c630fad2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17b980e-7c17-4310-8c42-57ea8672b318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a3b92d7-185d-4305-83fc-7e46b5573e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af74b03-4f74-41ae-afef-419c1dbbb1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e8e3ef6-ac9e-45ec-ae3c-c159f87cdd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3881148b-9dc4-446c-8f32-a17057865cde",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746d11e9-eebe-4435-8925-5b2fd0b86fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e41d77-a485-49c1-bd87-560728ec621c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df586815-0a52-4851-bbc3-254972eab4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2446fee-1ee4-4e08-b173-ce863c168c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1459f328-fa61-45e7-a221-9ca0dcd2e5b8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6f331a-9414-4668-9a4a-7a6cfd2cee14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca10032-0934-4710-aef0-435deb79b267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cede1cd-ea94-42e7-9193-915ca89bb38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7608ea0b-e7e8-4876-8485-3b1d0bb575e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2fa4b9-f70f-4e90-b3ae-df8f8a137f48",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7009e394-cd30-40cf-99c2-ec6000016060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd7831bd-d9e5-4554-8580-209899d09bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423eb3e9-2086-45e8-b43b-21e9249120f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a513d76-9610-4d78-9007-097cf76f5e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e8c9fb-d9ad-4ac8-a42a-f7db8c6eb03b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2a0fd8-60f7-4d46-88a9-103b5f659702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4bf27f-b7b1-4964-b7e6-7e989c318e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3310738-066e-4a85-9731-cb21ec9a63a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "00ee4587-f5e3-4fee-a84c-3522df6391c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87cdbc1-103c-43ed-885c-f47e3e9b9aac",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8093a541-455c-4980-ad2d-52c3f079578b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680949b0-dc3e-4e92-bd1f-604255fee7e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be88f933-5705-48f0-aab0-b90838f3481a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc14d27-d80b-46c0-b14a-eff23d938369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7036469-dd7a-4d45-aa4c-c3e06063d3e9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368c472d-721a-4829-9065-660b18831cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16a6785-f989-4891-86c1-54045d4e29a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e291e3-e5eb-4195-810f-ff4d0c29a92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2f703e22-64db-4628-a5f9-d8cc3d01e760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6025e3-bec1-4582-a490-78bc39b2308d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e848342e-d856-422d-8882-2a66ac31cc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7aa0ef-c9cb-4f5a-9c81-9414beca118a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1a3394-60be-4545-ba0d-b7b530137047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee638dd-0171-4270-8f83-be0262c168d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc09236f-cd21-4b24-8654-2b254a4a3b69",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6993b0-7efd-463a-9bf1-a5114d1c5ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c37f34-58d8-4b7f-835c-114ecb92efab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3f66db-8ba5-439b-9f31-565f08a48459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "683ce082-60fd-49f7-a906-603671093d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a362967a-d7ce-4746-b069-1331d73bf2c6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cd4fe2-873f-4f4c-8002-6b482360b2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b060388-ea71-40f1-856d-a6a6c087ca92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f84852-4253-4543-bf51-a5ea8e3dcca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "03d03543-d8e1-4d64-990b-c571170d38ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7faee9-4b9f-41a7-b7d7-91768e43526f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78585121-0a00-418a-9999-521c74e906a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11f0119-bd51-4552-9901-235a644b2867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db98e1e-ed54-4bca-a3f1-43162b16e89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e5f3ec-e3f9-4bfd-90ae-b69f0932b10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617264e7-58a9-441a-a6ba-122fcc63d267",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66380093-4a10-4921-b43c-677e425181e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea57bd05-c22c-4649-ba2d-f9935094fec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e6dab8-09c1-4776-8dd5-ef465fe80fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea57466-4a50-47c2-8dee-50b5d5c9ca86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa69537-6d7e-495c-a33b-c080ff406b69",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032e966e-fa4d-43cb-91ac-3c257f1c0667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b44908-b31c-4442-a46f-94fec271bb12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23667132-69cc-41d5-9c58-7adfa06e42ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b8639f-fe09-45ca-9dd1-04c68afb9ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2aad96-89a1-4209-96db-d37e45f81f93",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615c076b-82d0-4e8e-90f6-5beeaff7bd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80c3a79-2a38-4758-bb4d-5a3ca0beb41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73e36cd-dbaf-4eec-8ffa-8e7df63c4594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa68357-3c17-4d79-a590-767f1a154393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d59635-9e78-498d-a7a1-51afc3caedca",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864e6f97-e1e9-4caf-9ddf-4b6a5f2a6237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bf8ac2-c988-4249-bb23-209040dfc599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394aeb98-9642-447b-a7a7-94928f158c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "810f8efb-4e2c-43dc-9c9d-fa07be707f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b313d0-1d42-41b1-b69d-ed22655feaec",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd5d5b6-05d2-44b2-9ef5-4006bd7236c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc48c4e-9b48-48c8-bf00-fa96486410dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc0c8be-277a-4b84-bef3-ad6024285e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5cdb4f-a967-4428-a10f-ad753d8cc200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da85c5f6-1878-415b-9c50-a0d612f68149",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2c00bf-1457-4228-8363-9819c3ed1796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b66f60f6-7daa-447c-a367-272c043e6ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bce906-f027-4323-87ba-766c3c7fee3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e178bef-ecea-48fc-ad21-e2dee30f53fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d47799-75ca-48be-908b-46b3269b6217",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d6d003-3bd6-43d4-b85d-da26dee7bfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52fbc2f6-14be-4ef2-8ea9-c446010e5aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4793749a-7195-4a61-b82b-a97310d5499c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd619d31-5282-4d0d-8cc4-490cb2ecca16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d123a982-33e1-4ccb-b7c4-f0923386c600",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fee5cb1-291c-4c8e-8c4c-5b4a16344a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0ce49a-f788-4d82-a17a-b327cfd9bcff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b82cb2-1ae7-4c70-9903-267da2419454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d595a67-1e8d-4874-b31e-764d6bb16770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05fab10-02a1-4480-a518-17b1b6a5792d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7633067a-b326-4ca5-b709-d122ffc3e65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb0c3de-b934-4244-a3cc-b11d3dca9b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8189a729-0445-454c-b874-b0ae219600d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5586264a-1c3b-4ebf-91e2-c1c2b6a9b51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735e2c80-6355-4770-aee0-623e96c44d5c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cf7c7f-d7c9-4b8c-9d54-7b6ddc7cd304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c896a05f-a2e0-44fd-8ef0-786e2a0c54e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d73baeb-1632-4808-8011-fb03bb706719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5da1f6-0f6e-48aa-887d-ae5256bec257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29622670-c3b2-47ed-8d42-20315845da7b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4776f473-2e18-4374-b0db-a46e0d5cba90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198e3d49-300e-40c7-8904-ebeda49f66b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece5cfb0-05c4-490d-a29f-a6b74c7bc4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6954259d-446c-454c-83a6-012f23c30209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff7511c-65c9-4f94-87a7-9a541887d3c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8c7997-9336-4cf2-8be7-9715eed87fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a7133d-7d22-4609-88b0-c43c3844621e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4b783a-61f3-4c2e-a25f-bc33be98d4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc0072e9-229c-49ab-8566-d1c1dd076c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddf9229-bbfd-4003-b031-e5298a74950b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e43a147-3d1d-4eab-94ca-1ce0806b2164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318efba1-748d-415f-af92-752013fe091e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6511b7b3-75c0-4c14-bfaf-7ff132a30d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b120566-49f1-4841-9b86-f823863cd966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d699c56f-4d0e-4931-8721-062d626d63f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94ee7a0-b6ac-44c1-90c2-75cfd9c8055d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "476e0472-1fc6-44d9-addd-ca1d694f55df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740c09e3-86e6-4250-ab0e-4dedea4f5925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d419d506-3c54-429d-a1ba-84472b27a4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddaf51fa-2abe-486b-b823-08920727d23e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1af57f-483c-4937-a1bd-113eaf610278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bddfe81-8b80-4fbd-8cd5-72137e97fdc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120382b9-c1a7-4aab-8f1d-f2944759dae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "367cb074-e89a-44f5-ac0d-0564dc2dae57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627b6e49-d8cb-4d53-bbda-2fe9a4a5dfa5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4c4e01-57f7-4541-bfcc-9cac9d0b8f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b71843-c5db-44d3-a45c-340394c6eae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b0d89a-f17d-4776-bfb8-50203e58f8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c79b32c7-a3e1-4727-9165-d6602cb823cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e27792-9ad4-4b58-b9e3-b45c67b3c190",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335a33c1-eb19-4a53-a8b5-2865b1d891f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc9cd32-075d-4be0-821c-3fdfee5b558c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a4f7d6-4f05-42cd-9d96-1fed453eab2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c00a70e-8ff1-448f-a3d9-ed3ae5bd8efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fb54b0-52be-40da-a912-dec68fdfb730",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55162fd2-4199-4051-8663-6ac6e0ce5eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d9d5ed-6da2-4794-86c3-dfb3d0ce0c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688660f2-e7c6-4597-b2ea-51175dbe3a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "761c0430-7894-4fab-a2ab-7881700de895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e13f58-afd4-4ec1-9c46-17456264c66b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a781a8b2-1672-46c1-8980-dbb06b12c8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dec051f-55a9-40ef-8d42-c95eb82e6832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe672340-9afc-4509-aa7e-40bfe05eae2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c4ab0e-c6a9-43f5-833e-af8ae91be11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53478ff0-786d-40ef-a43c-3e1c42eea4c1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4155b806-f5a2-467a-a1cc-e6e8d75bc545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981cc5f6-fa87-44f3-b4a2-a94972adfa8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753cdac6-2de4-4f2c-a4d3-2411830b77f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26620e95-8d88-4ef5-b504-b3a31b923146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beeae71e-296f-469f-bb06-d77b56d293a4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9181c4a-20c8-4587-8a3c-2f3844ddaddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7218b927-5a1c-49fe-a4e7-e00c0a0dca02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90e64e8-3cf1-40a1-918d-46e6ac6a592b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ace57f-1d52-4be5-90f4-0896b4f9058e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e11ba2-1dbb-4df7-a8ed-9d555554d752",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac8df1d-642c-47b2-9586-dc9b141a25c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2e3567-0e83-4156-9aa8-aed4743af5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a57d79-4621-4da3-8a99-b865051ae908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6698f2f6-be77-4a7b-bbbc-9f045be240ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3e87fc-29fd-4d11-89c2-3a9bb48171a0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d58e07-5f1f-4ff1-a9c1-18941936d33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f531e059-6cd2-4395-93aa-37fad6c48ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e167d5c5-5403-4b9c-9af1-db852355b680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "01be060b-32ca-49cd-ace6-34801b097e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0dc061-fee9-4cbb-a404-83801899fa2e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210cd3bd-61dc-4cd2-834a-96f8ef034583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3e5dff-f7f5-42ae-bfb5-3e371899712e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4115a84e-4808-4bb0-bccb-9b96daae010a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6db6215e-cfe5-467c-9a4c-1464aad4feb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd1412e-f2ab-4bc8-a739-adc61a2e2b32",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280de0d0-f300-4a4f-976b-d81903e4de87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a482eaae-6091-4e01-8771-d39120f3ae83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e8a114-00f3-467d-9c2e-22fd34866850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb241f5-3500-47e2-947c-83ac5c058217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8297a44-52b8-401d-88ff-2a9834cb5bab",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e07b29f-96a0-4fca-a922-01bd8750b183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f53d5b-21a2-4f21-b8b7-f2138bff9f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e27b8c5-3384-444c-98e4-92755f7c217b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "815170f4-e92b-46ef-bcb9-3aa6adb78f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79ddc19-6cbb-4431-b1a6-b7468e193cfe",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c09190-f1d4-49c5-baee-1185d6b5b3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23174a87-7a6f-4ae6-a9ff-c7cffd0ffccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad313a44-3eae-4516-8c43-156191cee490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59a267ac-d562-483a-8a51-3419874db89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70557358-f959-4900-8900-43ae97d9a264",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562e6a59-608f-4887-aa89-b897391d5dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b7f9c2-63d8-457e-848f-f8e86132c944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c44b293-486f-4f2e-901f-770ef4730aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8347fd0a-f90d-4009-992c-99ac0567bf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cc7821-9d7c-49f0-af15-c3cda98513a2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb97c2d-f30c-42bf-82e3-ffd4e92bf362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263c04d4-a7d7-4876-b28d-37be4c35bf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fba998d-0243-48ed-93dc-8f4e65bc80cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccbe1974-ccd2-412f-8091-a677b4144351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1438f561-f492-4ace-aac9-f17be4ec33b8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d5e825-54d2-4529-b6d5-26fcbbc09dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a371790-90ae-4c28-8075-882b7bf02917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840d70d1-8e1f-4182-af3f-8e9bf9a4fc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e70f90ed-2929-4130-8df4-508f5f7676d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a36edf-7192-4b33-b6ef-0f5f538284a6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdec8e0-0a1b-4df0-ae9c-08e022f01d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a800cd-401b-4c36-9f3b-724d0ddac5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6702d3e4-31e4-4a0b-acb1-1c095067bd87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08c40daf-0744-4644-908d-ad46a8340413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e5b93f-9661-4e68-b9d5-2a0f5388ce35",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffe25bf-4ead-4160-87dd-7cfbc5322e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f1ac1a-af92-4441-b42a-bc83f29b5079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e098d382-462f-4cae-ac59-3dafa650bc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92b24d65-8e82-4472-8cc7-ecd83b041d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3216b2-a9be-4f22-9972-8815a6c3fcd9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93d6f55-d9d5-4996-9b8c-95e3ba6ad497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f993948-0b1a-4a24-93b0-0613e6096153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dae4eae-5516-450f-bdbf-fc7b025706ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b891773-b987-4881-a08d-fa16ce45e4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633fc9d4-4fe4-4148-8bac-d9cbe69e2c6b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3066bf38-503a-47ce-a099-794d3b437fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d48b66-866e-4ecf-b3b5-0c182393f42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29b2a76-2a28-480e-b6bd-1a6dd49ad3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "adc24658-3e58-4d9f-8485-195b7132d23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98c5e2f-8aee-448a-ba41-443412235425",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e519be7-1e95-4211-af83-015907a6a738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb7156f-36cd-40a0-b331-ceffae2e5c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db661ec5-b3fd-448c-bcf2-904872568aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "968c97f4-be03-47ef-8884-141cd3ee72ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e415ea-2c61-42ac-b93b-e81f7db461ce",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a114226f-83e0-405f-b35e-a8e01508a11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d717f1c2-5dee-4060-8360-a7d9ced0c98a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd399779-cd01-4589-8263-b40aed589d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "628c29e4-fdf3-4ac2-828c-53f559980d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb33732-321f-4718-bb71-e9b67ac01238",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13c48a3-b33e-4fae-bb11-9126064f9266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5a7b66-46ae-4696-b13d-45b9c1aca9bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667f33b9-617c-44da-8cfc-ba9123daf62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8001380f-4d16-4a82-8caa-9f676a2ce435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c017e233-cf69-44d9-a728-7a34247244c7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1204a44d-b355-4518-81b5-7e81ee458f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd1e848-21c8-4f9f-91ef-b5da863eaecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8026d503-e820-46b5-95ca-cee7a02d170e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d41a5b90-edfb-4c52-9d29-75717477081c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c72a29-25d7-44e1-9a69-f2237a5d4391",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939bf8e3-acc5-4ff6-8647-b2b9e56f6757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f5b325-4df8-4a58-88ba-3614d8399c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2535ebd7-ffee-4dae-8160-074f869e4dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ecfc395b-fa9a-40cf-92f8-3c6ca3095186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9612d71-ec2f-4e8d-8520-38340550f650",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c329d4-cb4f-47c9-a1df-ca26d5e420c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437c9f0d-5b94-4c91-bb6a-de005d4b155f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af30c562-fe03-426f-9904-fb57df10308b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c03cce6f-599a-40f2-92ba-12131db8e924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ab1e99-0b6a-4446-95de-8d047aa0347b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4789fb8c-2597-4fe5-b539-692e7689e3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df1f3b0-a4e3-4d17-bdf4-6e6ba1762523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2a2c83-2df7-4bb1-80e0-3bc0c7d6ddbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb197e0-628d-489b-9b03-d78fbb7951fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5a4c6d-2897-4acd-a612-9010e83e9cc4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a792f46c-cb41-4324-bc93-27a5c89c9d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff8ef1d-ae77-4891-bc57-a549d7f535d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fcb843-9a8c-4b8c-b1fc-3745cd1fa453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "77fd272e-c6b6-45dc-b320-05b82e101ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157405be-c6eb-45a0-82d2-deb0064c95ca",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2411880b-d2df-441f-bb99-e6b7c8f777ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c50719f-0cac-452f-935f-76673925565a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6f64a4-97e7-4717-8c46-e26ff64e6d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f202b41-26a0-4a20-9e1f-a70a06d70e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43076598-ae69-4dfc-8a52-a37ac03eb292",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6716425c-23fe-484c-80a3-42c1bc025089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b08da03a-12f2-4073-96c3-84ee24d83c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186549f0-e146-4427-99be-8439e77c4ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9f9c7e-4b1e-470c-8475-38dc6c52e600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d81075-3e79-45f1-9bdd-c6e3a79a7c1d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c13086f-69d1-4e03-aa32-9123114f558b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719c85ea-cde7-4d44-b766-0563d1fbb6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a130efb-2b93-4169-9c14-9854458b5d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "36ab592c-0afe-4f9d-b6c3-dbb54989804b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcde105f-192d-4aa4-b072-33c943d29736",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5689cc4c-6236-4aa5-ae61-ceff3a0979e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bc427eb7-c5a9-4471-816c-65e55917b923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e3473b-83c5-44fa-bcf7-290400f503e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb53ede-28f2-4e29-8753-231cec07e52a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8f201081-330d-4b81-91d5-c460d7acbf85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd5e01e9-5864-48db-a10b-115aec5ecc95",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafec172-32b7-4537-b093-73dfe2df11f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae61c5c0-1c6c-4848-9959-b226ccd2ec47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41da076e-a957-4320-a990-4ed0d67eba89",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c11bd1db-4ef8-47be-82a2-8ff269bda4de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "858c0fc3-c17f-4ce8-be62-b4ce1eeab994",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "817a5f0a-4f56-4d1a-952f-6a75952de43f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d3e258a-2ac8-4aa5-af9d-facfbd09cc11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9c65bfa-a8ec-404e-bfa4-760e3aa48383"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "068b4bc4-b1bb-42ef-9fc6-a5d3a1200fd8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c99edc8-0753-4b2c-800a-1feabcb118a3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "779836e1-8e91-45bf-a853-5d05163aff70",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d8658fb8-8dca-4d66-8f28-00371364274f"
                }
              }
            ]
          },
          {
            "id": "076ef15d-c5c7-4b6d-87e9-5fc7ca03f342",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2a191cdc-193b-43d0-a3b1-cf47fa6ef7f6",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e31614ab-9914-408b-bfaa-98fb34274b0e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45176efb-b3f0-4e74-9c78-9524de184450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b7f64648-fcc2-4416-bd35-d2f1b2dc7fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190e4699-c5c9-4cb1-8faa-34ba118b86fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79035eb-c7b5-406e-be30-272c3425946a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2fc799c0-7bfe-4c32-82ea-a5cf7de9238a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "631e2d83-a216-4ddf-bba9-697572edc224",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf1968a1-6283-406a-b429-53c1fb4479da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8eb28ca-fcdb-4f98-a630-ceadda66edc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4dae6423-4574-4ebf-9a3c-5d3d9711efea"
                    }
                  }
                ]
              },
              {
                "id": "c95f8a0c-6eed-4e95-b91a-baff80136196",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61721c72-6c2d-48c6-9ff7-524553929178",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24bc3448-52d5-4d34-8847-45d532a28467"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e912b20-50d0-4411-b014-e7724c00d949",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ceee1c6a-54f1-4844-8ecf-5bfd9ca7b23b"
                    }
                  }
                ]
              },
              {
                "id": "ec6153ae-3820-40fc-9ca5-f5fc8092560f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22103335-3a31-4525-aad3-63c5bf1059f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81fdf83f-132e-4e33-bb85-a1529efbda5a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f00d7df8-21f7-44cf-8075-8419df709cd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5855e540-5c12-4da5-bf81-62587a9b14df"
                    }
                  }
                ]
              },
              {
                "id": "a70665c8-7f45-4114-8926-65cee4b1623e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a30e702f-08e7-4dba-b9bd-ab7685935679",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10a0045f-d46f-456f-a166-9707c54d8344"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fdb0963-352c-4fb1-826b-ae4a2ccab9d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c1b9bdee-c5ed-4c2a-91b6-3e7bc45cedaf"
                    }
                  }
                ]
              },
              {
                "id": "d1477698-c426-48e2-a74e-ea1e0066375f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dd847a2-4765-40ad-b260-0ad31d980b99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d885696-a714-4f6a-8770-4a42dcb870f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ee646c2-326f-4b6f-8552-2ada3020abe8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4fa4179e-c94b-44bb-a3ac-a0b124597f6a"
                    }
                  }
                ]
              },
              {
                "id": "25860fb0-4d69-437b-83a6-907b1b93ecd4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17b2cc20-b1a5-43a7-89f1-1ba2a6091b2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fba8a3fd-0f23-4731-ba34-acea53619322"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4402f08c-3243-4ac1-984d-6fd6f6ac84de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a6aaa94-031d-460d-a1ba-5c5500149e88"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "268799d4-b041-438f-bdc8-e08c3b36c22c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1efb43af-effc-488a-bd65-c7ea0fab0e98"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6fe3dd15-d2fd-40b7-ac9c-e49da7cc9dc9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1d321fd8-75aa-404b-830a-80ed9db136b0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "edc400e1-c729-4afd-a8ee-36c1dc4e7b45",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "dc6a7013-e1c1-43a9-b572-72452eb29077"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d30ee99-2418-43b8-834c-bfad0970ca5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9cc893e-e5fc-4f05-8475-503bec20e225"
            }
          }
        ]
      },
      {
        "id": "bfdce647-de24-40d3-8638-48ab01218da0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "949103b5-e1e8-4da3-8284-14b6e8559ed9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd886f8c-b1e4-4412-885e-4092ffce3af3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a393465d-d525-45e3-a1ca-2a607611fdaa",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5568d25-3a92-40db-a805-b8d29f182d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8eafa5a-4134-45e2-af12-64eeb31cbe9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6bcaec-37ff-4e13-bd28-980dbb8c6782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8427b570-cf4e-4c1f-9b35-c5ed8e1fe104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064461ec-e7db-432e-80c8-2d1444545e89",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccd219c-4563-42fe-b11b-2b47c6fe9b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5048322a-441a-4ff4-a3b4-914b7c99b50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fae064-4419-4654-befa-46fff83ae007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "714e5444-1644-49bb-aa93-32c19e838582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a3984d-c5e8-410c-97d3-ae15c4c8231d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029a68c7-abba-471c-8063-32c6bca8ac0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11e5fd9-e684-48fe-9a9d-b5b65e3149f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c9d70d-7ed7-4688-be91-c02f8e5cdd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da0294cc-3676-4821-b474-a38da465429d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ad3bff-f026-4081-8ef3-8df5efe6456b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d729a21-6f30-41f3-bf42-eb7ca1435724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbdcf96c-b40a-4a34-8b0d-f9b18bf05902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cfe26a-fb91-4e4e-9d90-f598f6cd8d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f04a7e0b-aeda-4dd3-82d3-86974e3d2a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676e4042-4265-4ad6-b775-579fd71bf1a2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e48c2b0-8d17-4811-a4c1-8c2d935bd750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b087f5ce-d924-4fac-99a4-4be4ddb92cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ecf40d-1b83-4bfb-b161-4894f5af4f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26d51c07-08b8-40c0-8e06-fab96432e10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cf7457-9b68-4847-ac74-ace920262113",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdfe234-39fb-4395-b593-5a5090013d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f4db8d-aef1-482a-b0a0-61822f025f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c585d3-02bd-4db8-bbb3-7dab1cdc9edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b00491-e1f6-4a31-8e09-9a782f344f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27b66e0-eed3-4d3d-bf52-08ee640780ea",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ffec5d-cb5a-414f-b57d-abe1a2f8a30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7c6f8f-6d64-47e0-8ab6-391ff010af77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cc0196-dcc7-4199-80ff-4b9a30d17bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "98900b38-94e2-4244-9dca-9e684ecabd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7263f86-1e3e-492e-804b-4ae20df624ec",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7265c1-e35e-4d2b-9e3e-8da4caf7a8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c42521-ce3f-4660-b6f8-b76a013395e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f63f568-4f4a-47af-a759-d3398debb085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39134617-8e8f-4464-9bb9-725e990e1f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fee7a57-ed84-4964-81da-6b4426e41250",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ec81e2-5fa9-421b-b6cd-2ffa7fd4e783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5565e23-0882-478e-b751-0b4e8d7b357c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b956db06-8ebb-410b-9c79-9740f727998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e50fdc4-eeb4-40d7-adc8-97b0d5647f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc31ce64-dedc-4b5c-b6dd-b05f54138b6c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51aca8e-02fb-4637-87b8-95466ca9b705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e57df7-475f-4c11-a364-4857e9823772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afae3d45-fa9e-4319-8301-61a368a7f850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52460eaf-2efd-4869-a7ab-426885f27a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3975f8c-dc25-4019-882c-31ab7ec4f6a1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f426b1-43e1-41bc-9c54-854cb2796df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1330850-8d0d-43b3-bd45-c09e779a33ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea790a7-e8e3-49a3-99a6-9388161cb0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a1deee62-3d3b-427a-ae42-9be5938d3f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5451bcba-b301-493e-ab1e-e29182afa49c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b65ead-a19c-40a1-94bd-26249ee0f463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37786300-073e-42a7-8365-7f35fcce0384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b763aad1-4dac-4eee-990b-870cff2322c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9aea4fbb-8755-4288-ada2-da047ee2ad9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33e958e-019f-4abd-8a0d-3b2c93382dae",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3962e1af-0283-4275-b7f2-d27ee991201f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eaae189-2a53-48a0-8b5a-5027295ee64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97557acb-7849-4afb-b6e4-d789bdfbc0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb386fab-ca06-41c4-86af-1aeda39b835b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8b858b-d086-46db-a620-482152d5e01d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f40ba8-a5da-4a88-9c5e-a09ef751ac19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7ea9cb-9c60-4334-a2fc-dc0082150315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ac377b-8bde-4582-b391-8b808c3409c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dad90cc-0135-4681-92d9-4092683859cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af31d46f-3f07-4a29-9e6e-0d0e5cf2f306",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e20ccb-50c7-4f9e-b7be-8b6669187b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c219b31-e90a-497f-a052-2d5a211c0060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e25868b-0924-48fd-b67f-b78cf1d60fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0fd8f5-8bdf-4fb5-9251-91f5e0d12cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bef21df-edb3-4087-98ae-839cc08c6731",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b0d8de-6185-410b-9580-da6469d59bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b1aedd-5bd1-4452-b640-f8294068ab78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9645366-c4b3-4af2-b924-1f320ac0ba10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "51d92312-1820-45b3-9643-d9236ef866d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e9e741-499f-4950-8606-71932b7ec2ac",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "102727a5-f66e-4381-bb66-67e21d7ad73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1739c08-1949-40b8-b2c4-d5057a5c6aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f6b3d4-a596-457c-b7af-210d06c00200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c48037b4-3254-41ed-acab-bca358d0002d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882c5ed9-eb8a-4cd4-8659-b2597f9ecaea",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f36628b-222b-449b-b7b8-95038da0d717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d128f4-ae66-4260-8133-b62dab1b8db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266fdbf8-554f-43a8-9976-1a48798ae03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "23cda73b-23b2-4cb1-9d35-97225d9cab41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177c4887-d628-4f1c-82ac-a24a352cf97d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e32fb6-afdb-4ec5-bc4e-4014a50a9168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21daea8-01b2-44ac-9f92-a09e9da50d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d455210-9024-4b9c-bb0f-4a4c21f8364e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c60b5a72-7ea0-4f76-aa9c-1965f82a779c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e991baa-7b0c-4686-b2b7-80ae88334455",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8702042d-61c4-4822-8e3d-1832667321fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca0c6a7-47f5-4c37-b45c-a8548761bafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2f06f1-f0e1-476f-a564-f6bf7d1ea13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b87a8b-a614-4456-8b8c-e735f57a2650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8b52f3-777b-4cd2-aad3-4df5abce905a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7a907a-a7d2-4858-a34d-083ce3cba32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a032dbec-a456-42ae-9c24-ef06690a9176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1120372d-fdf3-4e81-9e99-33125a32efe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34ed10db-a8fa-409c-ae8d-7ed8b17027fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42748f71-c9b5-44ee-972b-42a16f57f1c6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191c9ad9-1d3f-4e8c-89f5-229bdc4cf5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321470ee-c7f2-496d-b8a8-9060518dacf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df2447f-fc24-499f-9b95-8f643d4178e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "412d0087-4c56-40fc-bca0-87e6d9162989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e0aa0a-315b-4059-8879-2d97ed363f7d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a5ceae-d701-4d5d-83f0-3a37000c9af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8416204-550b-44ce-9980-15220ec2f120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70531707-48b9-45b5-91c8-c1a7b8afa45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e255b3e-5858-4306-8bbc-03e4604311d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016300d0-c0d8-4706-963a-a872e786e4b3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e107ebf3-59ed-4ff9-a6ac-cfa3ad828f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76972e5-b9a5-44c9-8259-032971d9ea02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb56566-3f84-4506-9347-d98a5498765d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35c3530f-a42d-48b1-a24b-5c33e8569ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638b9fe0-66c1-404d-9ff0-35da9a8256e1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a695be7b-4974-493a-a8aa-3880c0d27a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d94bfe-2716-4d36-9cef-ecf25f92ee2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b4e220-819d-4a3d-ae95-bc2f77b5ef6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6672f51a-1e71-44f0-9766-02c3f6d7b864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9d5261-063b-427e-a753-45fc0f7a95ba",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8caf38d-6e7f-4ccc-84c6-3d984d3b9c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0014333-44f5-422a-9538-65ea4a5e6c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623f1dc8-cf71-48f6-a4a5-0353f63413d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "738e1ba0-5114-44d9-98f4-cc05a9fb7160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21735b5e-25f8-41f4-b562-c1e5076a2450",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa90513-50f6-4f18-94f6-388829cf5d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480cb245-f907-4603-986e-9d36aaf79a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbffe71-42e0-4fee-b767-0540ff5f2847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85170049-63d0-41a5-9c79-1fb9e02de5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e78727-89a8-4ffb-8fe3-b847d318726d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1906997d-d848-4df0-b8f0-e12942272631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e19b739-5d9a-451a-a1c4-07c541b4c0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5bdfb2-96c2-4d0b-bec3-cab0e4a0c2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c709226c-d8ff-4e66-9d03-f56e38580248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c1f109-b1b9-451d-a158-43edcfd02e5b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ecd1ad-648d-4467-8d50-a9593876ef32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed221efb-a023-4f6a-9e76-aa3ef9abe5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9b2292-69c7-413c-ad3d-f0c327b673ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "680a5ca8-7b19-4c5b-b53b-e401eaaa255f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96319ee5-be93-4076-85ee-35c571181684",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4028a8-584e-4175-ada0-1dd5b3b631f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5aa5e3b-736a-4f20-8578-dcfc402f2b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcaad88-ee8c-47f7-8233-25bc4adc6580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58c503eb-aa49-4ed3-adce-4364331dc92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709143c4-3b63-4717-841b-79def3adb1d4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d00ffe-26a3-4988-8344-072d301befdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd94e5ec-d04d-4580-895d-ed07e79025e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa46b4c-31b6-4356-b191-73e14a6696aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f39632bc-d529-43d9-b8fa-c2c50912e3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fecd7f-5e20-40bb-8618-208e4d8a231d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83985fa6-31e6-4a9d-a762-98bd6f7b23b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2bfec7-bf3c-4c12-bec1-20cdcb47ab41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28f3070-7678-4a1a-afee-c1e651bdb5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a98b6ad-2d71-4719-b75b-fe1ed6377ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e2f5ee-b364-4cb2-9600-2f6f21e02611",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86df68f8-b5e8-4070-b0cc-f3129b1287e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6f7385-df9a-4ed9-955c-f76a75e4a60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4524d5-6ae1-4a5a-90f1-880b13b4359d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfac31bb-88cc-403d-aa6f-842afb3f6e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c3d05c-19f7-45f2-b4f5-c410ce956d48",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f030c306-a389-4e36-ba18-18a817e62356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "039cda22-a6f9-4640-acc0-88e7fabe7401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a0043e-cece-4ce8-b6f7-8af1e47d92ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27c37d04-dbda-4933-ac40-4e7b871b3e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82513fc-e21a-4054-972b-0e495775f317",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91f33d3-5d62-4b70-ba7a-75d2f570ec7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d550970e-da1c-4632-b6a0-2bdf942083f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629c0715-bbb0-4988-a59c-cbe92a7074be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf43c0a-0931-49bc-b7b9-a0c36d8fb31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b161479c-7ce0-4e76-bb3f-4769c939a32e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd82821-f635-47ab-89b9-325bb0283a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33102273-f28a-48b8-99b5-1012a45b845c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923008f7-2c5e-4674-9cdd-e4f4ca5a2f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27bd65dd-5735-450a-ab80-afc8d35d4b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c922d73-b849-4b2f-a451-0a24ca8866bf",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d04c3d-12c4-430e-8e7b-cfba4d3e48f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee94312-9c19-4f31-9f28-d3e0b7878de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bf344e-f3fd-414e-86be-d560c532181f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "802bcc6f-738a-4914-a53c-bf8c81dfae37"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "be4b7f0f-26ad-4bb5-be36-e0c8912d7762",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "93cf6523-f30d-4d09-b307-ad5f31022d72",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a92cce-bce3-4f7e-b030-1e0901f2cf97",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "954326e1-142f-4710-a748-cab5a05a68c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fdf134-a7d4-4620-b538-de6da6d9a2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "034d8cfb-6555-4c22-baff-f13a0836c30f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97d097e8-5844-4e6c-b41c-79ee4f6563f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "002ec214-1776-462e-be9e-73d61d9ee271"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7e5d6b8-fe28-44bb-b689-cf7724f9dfac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd868241-74aa-4da8-aa53-0f6b0a24573e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "254dd121-8853-4d95-8b5a-736234f3f331",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2e613b74-d47e-4d43-b0e8-4eaf09ab4bfd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34ac723d-ac8e-4d19-9795-63def17a59f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c22dfc1a-6338-447e-afac-0dff471a4465"
            }
          }
        ]
      },
      {
        "id": "0883b37e-db31-4ae4-abae-0b5db8397517",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "33bb8b96-734a-491f-80cc-6f78ba100979",
            "name": "Negative Testing",
            "item": [
              {
                "id": "38b814c7-d78c-4169-93fe-f5d2a86756d9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9393638c-ac8a-4160-bc6f-a0ca82eebc1c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50aac494-2373-4056-94c4-023f501bb863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe23e9fd-0533-4fc1-b287-b4608146ea25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508304fc-b217-47af-b00d-cd64e8965d70",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c95736e-6fee-4f41-b94f-3817cb7514fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9c2239-8720-4021-90ee-b92abf92f073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d5b0cd-1262-454a-94a0-c6ee0111c450",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119dab67-8f03-4dd9-90c3-155b18a0c710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e33a23-ffc4-435e-9559-99d4de53b61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5abf74b-9497-4fe7-a335-873042c536c4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34e9446-1455-471b-aa70-a27543708dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56fb3ad1-fbb1-44d2-b4fd-c36ebb87caab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a3fc54-1fdd-493a-a487-c1e8d2b840e6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a185a3-33d5-488b-a3d5-977d157dba6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb8e9db-6d09-491e-9a1a-54d08bc125a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede433ca-60d2-4ac4-b7a5-85159a3648b9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3744e8b4-de89-43cc-b928-4e251a936e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e9d1101-8d28-463b-bf2e-f0a3455b0868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a23d3b3-9511-43c1-8818-943fc6adeb99",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c022d25d-ff33-482c-9cdc-e7ae550d4878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b099b936-a749-4d79-88ee-60c33a0b9e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7b48be-bd7b-43a1-a6d7-ca8cbe8e432e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c5ed64-d2e0-43f9-bb4f-4c24dbfba298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2b7f74-b6fd-4f0a-9b52-bbe75d4eb95f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d52ef8-52ae-4a94-a0d4-d1306bdd8a0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80f817c5-a43f-49f5-a638-4f88493cb003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44499a57-1f0d-4a4a-9547-967dc5a3dc54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f6a964-bf7e-43c0-ac01-c9ba018b66f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1d2339-9f18-43db-9483-07251f4baaa8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da650bd-fd11-4284-8d2f-23ef75aae9a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "555419ae-638a-4ba1-bf96-116a66c8883e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644d597e-ab04-45c4-b8fc-3c8ec58d7e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a872766e-0527-480d-8363-142f1ce2bafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea2b076-f46e-4357-9a77-467ba10faf6c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc12c01-14bb-4fb0-bd19-cf763e7c26e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e425cc1-73f4-441a-ae53-43b6dce40d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4824c271-9a8b-406f-a22f-498f04f5dd9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6356ea09-3d4a-463a-82ec-7853cb35daf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc534949-0225-4759-8dd5-84f06c366d0b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c4ca9b-7905-4ee6-a4b9-1fdff81cd045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dfe4873-ea68-4793-988d-cac803a89b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e830a46a-3cfb-49ae-8475-a5952c105743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57280e49-12cd-4c2a-a395-f40d9cf2afff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a900fb-3024-4690-8c2f-eb60700cfb05",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc5b397-e3b8-4bcf-8e9a-43fd3f778ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e385b8-e16e-409b-a7a4-deaee6dee405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7633f1-e21e-4bbe-8269-eb155265190b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295bc877-34f7-4379-a6bd-2a3dfefae9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf3c062-4a99-4a4b-a9d1-da54ea7a2bd5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b26c507-c35e-4642-80b8-7f24ca5b4c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c94d1522-fa52-495c-bdd4-9f4223452980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed2d2e9-7515-47e7-b7e3-ef9fa61efcb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c558893b-8524-42e9-a07a-888ea77c84cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3551616-b491-4f82-a39a-82245ed5f769",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248b00a2-70f9-476d-881d-7ede761a332c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "876626e4-7a37-41e0-b11b-d5d5caa75055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8db4cc-cda6-40c9-85a0-af14ce31d2ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e9040b4-cc3d-4ad3-adc1-340e97cd2ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed582364-d29a-4714-b92d-0e74fe193a40",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e005490-524c-44c9-9168-2da3d117c35d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb38d9ee-d878-4400-8d29-f08b4b03beb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997aa800-a2fa-4633-9fa7-2e1cb1cc9dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7aacdb-2998-4d1e-8d13-29171fecb247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4020cd74-d2d0-4e4c-8176-dc6eee364f66",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb710d0-2e17-4116-a25c-c72d68cf48a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "768c41f4-992f-4763-8f5d-b1b8213815b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96982604-e7fe-4653-ad42-9fffddf33a68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56db302-d02c-4283-9da6-6554513e0839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c0123a-e9df-4ae2-9cc0-0c3a5972b5cb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7882dad-2d6d-465b-94f6-1757c3d133cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7744e9-9877-4c93-afca-ea7e32c965e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5bf96b-dd18-40ee-a33c-986b0b53b2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea853c73-666c-4cdf-905f-1bec2a832b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca4f821-87d1-420e-99db-13304bd01b85",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811184d9-3e7c-4774-a879-75be1ec6c206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295cb3ba-8d87-4939-8bd7-e445cf5b69dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f330a5-0df2-47ec-a537-ced59d824556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5edb5f2a-a6e5-4a72-ab56-1a599c54301d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7bc57d-2a9e-4f8a-99bd-9187777a3ac5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3269101-3c64-443d-bef4-682d2cb04e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3479aa19-2bbc-451e-aa82-f2b9d8bcde4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "050b5443-1286-4ce6-8d98-76d4fa4e27dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62b5d5c-bc72-4c41-9127-415a574daf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ae8444-930a-4c43-ba76-53dcdc9a9e5d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6aa33e-664c-445e-9cf3-318d1e863f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e6b991-815d-47a7-ad2f-5f627f3cda7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad514cb-ca28-464e-b462-4925689f10a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6330f4a2-4cf0-4e6f-8805-8eebea4e064f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3561db78-470d-4461-b9a7-cda4a0ee8b46",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf7d122-6e7b-48ca-b747-f3a834d5f63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccff0749-18e9-4a93-821a-8cb8f0fb7703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55882a8e-7599-4451-9049-0b3c2cddedc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be7aeb2-d76f-41b3-80c6-69f7d5580031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f9e7bd-5d10-43e8-a694-c59bdf3748be",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cad306-3653-4df3-be15-67f8d9ef2a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f5eae60-1a5e-4f76-b9e7-13c16301ba18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3251e4e5-fba8-4dd0-99ef-ed51c376ae0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c71ee43-d6e9-4085-bd97-6cda18886e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b853aac-41df-475f-8e2b-fd2f9596839e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07b738e-4819-4e14-8298-d1f5df98c865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df6f7bd-ae84-4476-bd65-0381b42e6f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec201706-b407-404d-a209-ce1ff5bfa6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198eb971-75ff-447a-b106-2e1d596a888d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b34da8-5975-4eb7-b923-c8acfb6d2b72",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2648b74c-7408-4bc4-b8fb-d1d51e0207ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d2d0f21-0512-4076-85b4-01391e2a872a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d092640e-9dd5-4d09-aec6-f8db0cad105c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0ac636-5825-4c9c-bf3f-48d5ce70c21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448e4518-fa91-4675-a370-d1346877ec73",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba9885b-7c5f-410f-9e91-c59dce8d9993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e5087e-dc48-45b2-9746-eb233eaf6592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aa585a-addd-4102-b275-91979d04ec61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc600cf5-871b-4b1b-b545-f8d4d055fd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaa5d70-6b65-409f-877e-f280435f32bb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c748523f-6dcc-41ed-b7b2-9e481dfd194a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13a21e81-560d-4da0-a05a-43e6564b00bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "483828b9-8eb5-4629-a697-a0b472fb3557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d62914-dfed-4fa4-ac59-7e15a2bd9758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f88264-9258-46bc-8141-284a3bb37e41",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a088fa1d-88c2-4bc6-aec4-22e2ca068d24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b58f8c3-95ec-4bfa-91bb-c3be175835c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76aabb02-2a11-44ba-9ffb-e45982ad26e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3b91d7-dbdb-40c6-9c0a-483239fbbce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71626888-cb68-490b-8289-ff82b0c82831",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50adda2b-10fa-41bc-be23-9a2fa81d887a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ccae0a4-51b5-4761-bb46-8b41de264ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31c66d7-8256-4792-84d9-a1e3a902584f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903fc916-be8e-4ffd-a4ac-1d736be228e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f938712b-472e-4d42-9877-3ac43fed1f4d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4cd56b-d15a-49d4-99d9-4dcca9741a78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c9c33a5-d25c-486d-bd9b-0e6a00f5ed09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0a291d-49f1-4acf-9745-104ce404a890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d705741-992b-46dc-a4e8-44fae2e98d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9ebf7a-7746-4b6a-bd07-9898463304db",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e59539-6825-4f0c-a861-f6b2ca5756ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf339ab-e439-4446-a544-4e2646474ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b4013f-77b7-4d23-81a8-0ccea5fe348d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92271a04-43a5-4d4a-abc1-b877282f29dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01b0741-7755-44f2-bcef-574300f26301",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797b2c29-7b7d-4c87-966a-bdda6cdcb794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7fe8d7b-d2e3-4c86-81ed-d263d2aec14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0c9944-9549-49f1-b59a-b916c983db2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec9d83a-4a57-4cb5-8c04-0029ed389928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bf565e-31dd-4cb5-92d5-17fc3ca5bedf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debdc3ea-7d62-432d-af32-ea1266af7e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87d0b719-7384-4607-ab82-6661f56c7c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00d7257-a283-4c89-bdc9-30358da290d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7da248-6d4c-49aa-98fc-67ee33e5439a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dcb3fc-4178-4dac-ab34-704dd3ed24b6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be15efb5-812a-4a62-94d3-4a4fd7039a97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20362d77-6586-4ec1-83b8-7040bc444614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658c7de0-5c82-4faf-8863-bff1f48ebc7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2f0b4e-8fbf-4ba9-83ee-d3efd0c1bfe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473319b5-49e0-499b-a814-d49736300976",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ffbcd8-be4d-4be8-b59e-e00ce8130d74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48e8a9eb-1d1e-4f8f-aaa9-a9bdb027c71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7187c19-d163-4986-9fcd-7e6e2bc4bc94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828a2ca5-d4db-43a7-9d56-bca7bc6a36d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2761b283-6d69-4ffa-86ca-dc0db0ddc044",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b349eb2-0f0e-45ca-b953-2fea361ae667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a28f61c-ed5e-41cb-b99d-e7634efe86de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2064b998-8a05-41fd-82ff-d5895b04d78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe11f84-178c-4a38-ba60-c7a74ebcd456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f824b1d8-bccc-473e-9c0d-930c94433235",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baea25b7-df60-4f62-a49c-7431d9d1d883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142fc792-646e-494a-8ed4-3f460d2f8908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f652fa-e935-4657-8293-cbefd95118c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe944613-5b2a-47b0-a7a2-ab082b02ddb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e68a43-93d6-4a12-b469-4628e4c27887",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4884a9bd-4d9c-4017-b1bc-8a2f881eea67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6af1915-870b-4b23-a472-577219991bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1bee86-9906-45b4-993f-74e111f0b69e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85456c97-a1ee-4934-bc38-2a3d438ffe13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f67dc0f-271b-49dd-9814-76981ac500ba",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbe8d6d-f306-4a61-9c18-aec9cf6abd86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f0da2e-00b1-4244-905d-167feb426c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6eb1978-beb4-45a8-9b53-c0ede4bf810b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75cd83db-3508-437d-bd67-40b275e2ef5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f8ee3d-a06e-4702-9a9d-697737972cb5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da4d88e-6c32-49af-9bad-d3e12a19fe19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297fffd4-f1f8-43c4-932e-638ed83b5b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b20767-ecf8-4c52-b812-1aa41bdefb90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e650aa1-2c3e-4ad4-bbf2-f521be50d5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ca6c10-cbb4-4ae2-81d2-a06e1bf6f7d3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009b2a83-ead8-48df-968a-700c36de33f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926432fa-72ad-44c6-bd80-b26022df2f97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457204e0-2e93-4d5a-8537-4d8393708108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b5d6b0-f79e-4104-b1bd-eefbf813ac7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6e3ef9-bdb6-4ca0-a36b-6d87eb756275",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4322d3a8-108d-4982-a8b9-d9d1733868fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451f4dc9-fc9e-4d6c-8352-8b4c49cfe68c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf98c847-b7e1-4def-8c7d-be9ce1cc5199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da49b58a-1785-4d0a-b77e-ee315728b196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bde2e75-9004-480f-898e-f3fca86e68c5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbc6763-c1af-494a-ac2d-a964b90ba2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0625a8e-1157-44a0-9265-8d22b668e6e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca52cbe-061a-47ea-bc43-9d8be6ef5a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b40c2778-7381-44e6-8054-4e68422fe58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd63f55-699b-4c04-8507-272980ce5e64",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1779cd11-6b4b-498a-b5c0-2ff7bbd21d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4dbbdd-b3ed-4bab-a1a8-8386aa61ffce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a922214e-bf2d-4489-b40b-21544927528a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d24951b-fa83-4ca6-81bf-cb71359a81fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20477949-da13-4808-b08b-18be80039642",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7855e91f-8f99-4fce-8850-81f70b8e9eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2aa98e-9419-4101-a0cd-4d6f2e468278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09b2214-c19a-4ad1-8840-1bd6c95441c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712ff1b5-7fa8-4499-9b35-7c89ddaba82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f82c88-c7d0-4006-9508-483b66085217",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ca7487-663d-4d73-8f2f-fa655b9ad313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173e65a6-bf85-4bba-99a6-a4a2b990e4e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30083604-095a-4aa2-a506-92476ec544ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ae77c7-d65b-47bf-a400-5e862cee3247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92dedca0-006b-469a-a427-a7fcf488e16a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b344837-0695-4099-bde4-8ad1779bfa94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846ef821-33be-4ead-8de7-83affb8d9199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a88be0-6c54-408b-926f-c50e968c908d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95cc3613-fcdd-46ac-a720-ecdfebcb7e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676f72b5-a310-4af5-8ae1-c383770c0a7e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e0c0b2-ed0c-43a1-8f43-df4f02be28b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d562b1-ad0e-4648-9c53-5ba440367e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406be817-385b-408a-91f3-56455dc1368f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3400922-a806-46df-a2ab-158c8aa1ffaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d599371d-90ec-4e78-834a-da0635e67d18",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e5006e-0c00-499a-b315-b219dd2ce45e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456b38a2-1d89-4807-93d3-fd2b018c2e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2534d2-f4bd-42a2-9f61-daa203c7426e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21243f68-b1b3-480d-8358-d7d4281c0d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e83bee4-1b7b-482d-8954-f4cdb4a44969",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c450481-4d65-41f5-9555-466ac26bf366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8c31f5-c613-4d51-be33-40ef14833933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3538641f-5dab-4c3b-b644-cc66a04d3325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d04f58-e648-4571-90aa-c968a04dfab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7aa0f0-1bb2-4fdc-b356-91416870fd3a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a97dac4-00c3-4f82-8ca8-970b1e86e134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42d41f9-fd5d-49e6-9bfe-8e0b53a7d00f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76dd7564-f5b3-4cfb-a7f2-a469df71923b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322852b1-4436-499c-8e11-ffbd80478aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68b5670-b60e-48dc-a10a-71c67e31db47",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923fcd38-5013-4551-915d-921d3821be8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f4cb74-9b6b-44f8-88c5-70311260691d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "123599b7-cac4-431f-9828-83df5ed8685e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce70c8c3-b074-4d31-86d7-241c60eba869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e528523b-93e3-4350-b266-67f8f6931237",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37089ff-008b-4731-99de-e67a6845156d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64c9d92-028c-4b74-a20b-343d905146ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20af89ec-012b-4261-b5ce-a0516005dbcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bce79c-8315-451b-b653-cab542fbccd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c03047-6eb4-4956-955b-08a5d4dc3a7b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67191eb4-2ca0-49a9-bcb8-e74fd86b597b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699a273c-a573-4db3-8bfa-2a82ef2adf9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97e7ef1-6fef-4a80-aad1-cfccf347a911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70376d98-99fb-4e0a-9168-58d4ecc568c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15c95d8-69af-41f4-b3f8-273707e72c1b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d980f0d-66fa-40f7-b995-3e2e8a6f3628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fca88ea-6e14-46e8-bd1b-05feb86c9d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1345bc51-0959-4598-8df9-28c1752472db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06624ad3-5c9b-4e90-af29-7f8057a92878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9416c54-8788-4bc3-bf68-e34d2e036890",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab6f430-2e9b-4cd2-9bf2-ba56db92d167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50123997-5720-44c5-8954-f0f9acf680b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5b1186-2cda-4778-9cee-cbdb08fb6f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1981790-2377-4d88-8353-9476cc9c3b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ba81e3-6870-4b8e-85e3-f58ee3a93cf1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879c08fd-2e3b-4bfc-a6f2-9c971e6098d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d06212-fc17-4e14-b790-b27cfdd38384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29263db4-9a65-4337-91aa-1663c3e723b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf1b0ec-0ef0-49fb-99e8-a45982d077d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35dca64-f644-46f9-a780-1da789a541c5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672509f2-515d-4474-baf5-d23458fb5c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae82a9b-c821-459f-b1b5-b5499d3aa961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6e7067-4da5-4eef-9e7a-1397c3b54ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa41c06d-9c1a-46da-b9ef-0e247d4f2852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e2c403-307b-4176-8fe7-ddb0dbdaf84a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456399d2-0f34-456e-b97a-ead706acd044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c9231f-47fb-4f72-a789-a69ac7fd9ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "305a9a89-ca66-4877-be5c-8e79ae0c7ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5be8efa-e64f-40e0-ac71-7af3f9e79e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f10917-a5ce-403e-a6df-6e0780b632bb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5e438b-a2f1-4d81-843f-93268179f05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793f3175-7d90-4fee-9a56-1a769bd02a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242b12ca-d3f1-4401-8369-0611c5af20dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7307a336-f764-431d-a6de-162fea7aa568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb3c4bd-5f2a-497d-949e-8f65ac846d40",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f261535-d516-41e9-96d7-e2190948a61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f74222-20c4-499b-ae62-5f9f9273be27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef264a1-42ed-4435-9050-ad826be18ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e107d3f9-7ac2-47d2-a046-f866c69c559b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de33c18-a7f6-4338-8e2e-4a88481c1390",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52754881-8abd-49dc-8b2a-f4d444b034b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2fc03a-a3a4-4c0e-b79b-210ba826cb00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f16ab65-36c2-4238-a276-4676fbfcdf1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d402b5aa-f6b2-4621-8df3-e8d0370a05ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb61a9d-c7c3-47c2-a80a-48591e5ad304",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc726a0-07d5-4755-9cba-b98e8aa1913d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76eb8d72-3787-468d-bc19-5241e63634f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93aa4561-4df8-4ed6-a9f2-0e2bd1a23a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d00a750c-4d18-477d-8bba-f8ff1fc3f3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0a3bbf-6ef3-4d3e-879e-71c73cac1ec1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5fb8b9-9c24-427c-9293-b273ab36fb5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13cad97-4d56-40a3-985d-27e966d991f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab558e5-e72d-4e8a-8a35-fe5a08bb0ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65692363-9753-4296-8afb-e67854f66bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37578dde-e8b7-4f36-a09b-03fa22cefc31",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ee24c7-5892-497c-a639-3cad8fc8f7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "936d7c22-9571-46ea-8a8e-a2a82d483dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f08189-9ba8-4210-b121-7474f96cfabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1a2941-e445-48de-8ef8-f6ad73712990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504fa5b6-dc4c-450c-a0aa-505e9a18f839",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda0983a-3f12-4127-98ba-82757f1686b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8fcba7b-db6f-4500-8413-ab831883afe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22b8919-f056-4b73-be38-fda371a346d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c84feddf-2c30-4bee-9811-9e8bf15f5f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f155ae-be1d-475c-99a2-275b870780cf",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8725e9a4-8d6e-4ea4-b36e-e752eb97a744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f23d51a-c5c2-486a-959a-cc9e762f7051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae204d8-547d-41e3-8f01-95f3fb93491d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b14da4-d913-4c9a-8159-a59575c5d899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2406cea-1328-4f54-8de2-076ad0d77183",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84196f63-3dc4-4906-9d84-6baf1891ff9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e54e5a8-6e5e-4193-a2f2-56cf3bdc19ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "063ec38e-8582-40a9-aa67-64f5bb7cd70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0d9d99-0fec-485c-814c-b6303724fa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9c7101-9272-4b0a-b9be-4c0d2f32cb09",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea72983-21ba-47ff-b4f6-fc19b2fd7b39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30fa6bc6-2343-46dc-b3a9-a3f094ff8bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22af0587-681d-45bc-865c-7357889ee33d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e67182c-6f11-40b9-a7df-1796a48bef3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8616718-b88a-4175-9345-408f86b92578",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc68876-eea9-4fa2-bbdc-75ff512ba581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a457fe7-8361-472b-8722-9c8279ccb692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bef9bd4-8038-4643-90a5-cfbd9e1a8a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63630cf1-7592-40eb-b4ae-c231eaf80a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45592789-342f-48b1-b822-b6aadde72100",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2989339f-fe99-48bd-9ac5-60fb8ad14ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f75d5b-1307-477f-9b24-fc10edb16726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4303b25-3d57-48d1-a84c-17221b4c36a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bddcbf1a-d068-4cc0-94ad-c779607d7880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c3537e-6042-4efc-8af6-5247672e2b5c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed914d31-f148-429b-a3e1-3fae13fbdb37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53acda2-1f2f-41d6-9941-6ef66a03fe49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be95e6e-ea52-4b00-bd87-ace34f9b94a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ecbaf5-3092-4930-8723-3aa37dfc12ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfa7630-d6f8-4969-8066-6fb5f52a7675",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1872bd0-bf10-4c03-8ed1-80a349ac6e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0430228-68d8-414f-886b-eb5759b629c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a89205b-4170-4e93-b361-86d7a301c950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6edb8bab-9fe9-4cd5-8627-986eff4ad6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929d9892-8988-42fe-acf7-feee48be23b4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8dc2be0-714f-4872-99a9-0a98a29fde67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5db2ba5-b927-4819-8010-8f9117c271f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1083c862-6d2e-4cdb-942f-5922121a030f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eda2b43-25a3-462b-8a41-510899896fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c647dd-2746-4469-a68d-38eed150cb72",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e891eb-318b-4aab-9b73-3aab38bc2e3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0094c31-82d0-44f8-9147-8b3bbcd127d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb1dfed-feb8-449b-82cf-becb35d37bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45419e99-6e89-44e9-82ea-c9903c23b9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2263340-7cac-41bc-9101-24b9cfd85174",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446e8e49-eb99-4dc2-a7bd-24fe84fbe754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15711994-f496-49b4-8de7-9b98dcaaec43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e531af-ce8d-4b26-b62f-4ee9bb7c0e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fac461-8733-492c-9301-38d6cc82e5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838c7254-6393-4630-87b2-51603c1ed9a7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6de6984-7881-47a1-af14-991e50eba7be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faf9d606-690f-4823-8567-25ac47475cef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c88440c-524b-4904-83d0-698b73cec488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8fee578-2589-4c7a-a0cb-9f23fc5e3bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c66a96-9764-42c8-b726-19fed8e373d6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2a9297-9ae4-4409-8a27-8a66e9d876b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "142d09d7-6530-4bd9-ac1e-16ddca456abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840f2174-4512-4fb9-9a86-1132088e11e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d265386-7c27-4eb6-9f0e-5f5b97152966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef827e61-ab90-4630-80d7-6382254d064f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcfc457c-2125-4f5b-81f7-4d2037423c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df525ead-a8e7-4d35-9e23-f0695ffc92fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a319226d-4c8a-4263-8b09-7aabadae1bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f546c239-471e-49f1-86f2-c119adcc0907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf211c2-b07f-4a67-9e24-79685247c65a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6904023-b0b7-4eff-9ff0-2badca1bc6d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df044e05-e645-42b3-906b-cac2f99b4665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59fd5b1-1db9-4e3b-9b3e-69543ad8a8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66507f67-15ae-430b-b1f6-eb64e0019708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10022429-9c7d-40d7-b3b8-b232e481c324",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b998f3-8446-4bef-a802-db56bad551fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7f8d22a-f541-4d5d-bb3e-f6bd2ba81129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "622fd9a9-890e-482f-b373-25b9c11ec9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067a78e3-0f99-4381-b90d-bd039663d0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6f613e-0088-48d9-9683-72cc02a25d51",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5ce73e-e7d6-4182-ae01-3a6060c63569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3817125e-4f5d-4b3b-8a3b-1b5da3b5abde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b20e073-aa9b-469c-9f44-046e4063f3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d13438d-8123-4b38-ae06-f95a3c219b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b69eded-2f1d-4782-b7d4-7b02d1dc7d02",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9226306b-95f3-4672-a6b9-8165c5d3c76e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c82a1d20-f854-4a81-a7bd-f14fcfc5426d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98257cd9-db24-4586-b034-af501b95a83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1df45b-68a8-4009-ac13-19fc1181f882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19be0692-ef97-4ad2-b78e-847fa26197f6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afac0b58-a55b-4ad0-a020-1f556b2587e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d659c28-eeb8-4aa0-bbe3-15296b27e883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5337be46-ea38-4c1a-aff1-e15002de4c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c200eaae-e756-4673-9f2c-3a7c7b0a0124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66d9de5-6df0-4edc-8e4b-60b2be3b4bf1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25530a0d-bcca-40a0-9f66-f808289b6abe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e04435-fa60-4d3e-a564-8ce4caff6870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c07f5a-91d4-483d-a7a6-276975a6556d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8139ed8b-fa53-4c6e-9e40-07cea6e6d9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37550f59-c4a0-4388-85a5-7c2971b636e5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12ef1e1-9242-453a-9c53-a5b489b16dbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2dd66a4-65ce-46ae-a219-c2ba269a3ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd70873-5dd7-4f70-b71c-3801730af463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad61e95-0cfc-45aa-8e24-9ea936d1ab9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5967591f-a64c-4ffa-adde-af89ed74196b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f4825c-aaad-48b0-9075-7cf829b15af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c3bab86-85dc-4075-bb92-218d2b77e6c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89f5db3-df46-438c-80b2-bf8e41e81288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ba3913-9bfc-4ea3-98b5-64702fb7041e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a76cbd7-1aca-4b89-bd77-c415a20de6de",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a132c1-ced4-4929-ae7e-18781a502150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71591733-9114-4fd4-b5c4-afdfdfce30f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f93d646-6c24-4f7b-8712-20c3cc085a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d87c43-952e-4608-9eaa-18c5aeff0b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf0f97c-b429-4eb1-8eed-12b3a36f3923",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53dd330f-6237-470b-97ff-9cadcdbb4b1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52c1835d-001d-4e53-b945-134e2db1812b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db428207-269c-4736-8f6a-88097558ba53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af89030-e394-4070-8d29-49db11bf7baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc59c048-ddb1-4e12-8f6f-aaf88c232529",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03901595-f104-4187-99f2-db15489acbb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42c9477c-a35e-4934-a7cf-663c353e5ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2039be-c344-426e-8cfa-c7711ac4c43a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf6a18f-4ef3-4320-ab80-9897fdf2358a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9b99e7-d633-4605-a0b1-898d5fd02ea8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429384d7-477c-4529-a1f8-1c7b99b7e1e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c22e337-6ef3-4dfd-92c9-5525cc99b7de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f413b7-c4d0-4ae2-8a26-7ef722410a83",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73ef5a2-4bb6-4a52-b6ba-a8c976442671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883cef9a-e4e3-4b7d-ab7c-fce4ee946e95",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046d1b5c-6d79-4fe9-9cc6-f016197b2f34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f282a5b0-9465-42be-bb29-e62befce8b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "139274c2-92d2-463f-b4cd-966fa0acdfec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42249358-00e9-4ac7-8cfb-e4efb1a677ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6be47f-b3c4-486c-9d62-04ede37b24ec",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b77e759-03b7-4476-8628-799f2e36bd24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f832649-2efd-4069-a133-596c8c8bc6dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3cb843-5065-41ec-a973-90e6ebe6befb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5acfd9a-c66a-4854-baf5-34dcdc0b7eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4654e7ef-fea6-4bbb-90a2-dde91911743b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e2cb64-7ad3-449f-9bf3-3c4ebb0a8bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44768c8d-1533-4657-a780-aacc97844cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae7979a-3cad-46a3-a52e-c830adce45f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60fb0f6c-937e-474b-996f-b76e2d400e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373ebbc5-224b-4463-8738-680f81d9497c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a90752-e7a8-47c2-9074-b21285fc7e73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "938821e5-9fce-4409-9f59-5588f257d014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8250464f-40be-44d0-b413-e6178d1e13ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2732ce1a-bce1-4010-94b2-816c00ca7068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92926159-3e6b-411e-8812-22be54c656bb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7f9f7b-2f78-412a-a18b-394a7ebb6f7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "526fb261-bb55-4b83-a568-2749ae64dfc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de9c882-fa74-4f2d-a787-35e5897428e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b667c7-900d-41dc-90e3-d09f41edd8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc16bd52-f022-47e3-8060-3d47bfc0fec2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e842156f-1660-496b-a6dd-4de7fe178eb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c3484e-5bef-40e3-813e-107cc45aa7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8076f16f-8e1a-4c0d-a2af-81c11ff9ee63",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4eba210-cf14-4cfa-83dc-6a940ac1c842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df863ed6-6eca-451d-b0c5-c895060dda99",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a3f03f-6b20-41e5-848d-ef732c831e56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3ce0e72-c5af-40e8-8ccd-e0c1a696f643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0c23a1-0156-48bd-b4bc-a549a4901770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378810a0-2637-4d01-8f52-b30ced196724"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc1c48a3-78cf-4aaf-8489-4850e8ca3b4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "109c3af3-6aeb-40b1-9716-c5ab5c86046a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d147508-8560-44d0-86e7-c8a8785b8c46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "519b5387-79e5-4365-ab79-7331ab5d0e46"
                    }
                  }
                ]
              },
              {
                "id": "21858cae-061b-4aff-80d9-929dec2d055c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ddb0630a-0c85-471c-95d8-844bcdf135e1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f0fe3e-95e1-417b-ae38-7cdb5ef10077",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2249b7a8-8161-4430-ba4e-5a20d83c91d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045f7ad7-4088-4a9f-b02f-a3cfce3e7baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4994ad6b-f649-4923-92f7-90dcd812d72c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8480032-a76b-4db8-aeb0-ccb22dd10bc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "151018f4-585d-4806-803c-d54d258b26a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc61ba46-4696-4cdf-b509-d1d8bbbe569a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de2d5e81-e183-457c-8682-2fa617c39b37"
                    }
                  }
                ]
              },
              {
                "id": "c5ee852d-c88b-4824-9826-8b538f158ae6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e2d6fdad-536d-4a5c-8d09-44b650365fea",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223aad85-e10c-40ef-8980-d09ff136550c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "30e442a6-b6b5-4e42-ba92-282907a8aec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25adf6db-6280-4d03-ae38-7c7ed0318e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f20b96-71d6-44e9-9532-269f4e2b6d30"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6775a704-cd3b-4fc3-bb91-b89d2b3eaa7a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e00a7d87-3926-452b-bfe6-5e633dd9a8a1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba9faea5-9f8b-494c-afda-226ae202371e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "eec26360-66bc-4d99-8007-28b088350c4b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39e5fdd1-0560-46c4-a14f-927cd4d1a91a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b481c8e-3e55-455a-99c0-8f8a4de3e639"
                    }
                  }
                ]
              },
              {
                "id": "c094cd57-72e1-4971-a901-f58df39febf7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a910520-cf35-478c-938b-b0770672d404",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d6c6fd34-6bb7-4195-bec0-344cf725f75a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2b36a01-e011-44cb-8336-72338ac17fd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c4e7fb8-f73e-4828-bbe3-b907859246d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54090f96-ed72-496e-b32a-cee30585ab68",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "126102e9-1c70-46ce-84bc-13effebbd98f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d070cb3-6f22-4c28-83f2-cd8328af3cd5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e829a7e-4557-4c12-85f7-73f92861f3a4"
            }
          }
        ]
      },
      {
        "id": "696bf6d9-536a-4414-b3ff-58cd749aa582",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d4ff4ef5-3562-462b-94d1-d06ef7099c69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da96d8df-09a3-4dfe-abca-4e4c554b5205",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49e0d123-cd8a-4e8a-9681-356b4324a8fb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bb6d10-4402-47c3-9caa-20b3a7ff6fec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "645f8bd3-ea13-42e4-af52-fb4ece48128d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a903c34-13ff-4bf0-85a1-c64ba0c34260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad2fad06-3360-4f34-9df8-3fd63b4db065"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aae17006-c725-4686-a064-4cbe9a799189",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c01cff8f-3df1-4604-9a41-f0202ef723f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d00ffc10-5ffd-4127-abfe-60b324922339",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db5b9d02-b421-4d18-a1ee-06fe33b68060"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ab85672-8856-421f-9660-8288236dce00",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "15f71c21-e886-42da-b3be-140e1aa60d63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2feb78a-a381-4508-be06-094677bce291",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09406748-ec34-4165-abad-e2095658ba3a"
            }
          }
        ]
      },
      {
        "id": "feec6624-04f7-41da-b680-dd419f46433f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5fb1d2cb-6efc-4342-bc52-afc1593c4626",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5fd5173-805c-4f9e-8063-bd1655a31f22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d30dcd6f-1494-4b2a-9381-9329e7993e04",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f95be9b-d6eb-4d58-8d95-5c44673dc4c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59c28dbd-e3dc-46f1-8698-e16448aeadb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7523d36a-2627-4aa3-8743-90cf7c0c3f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1ddf492-3aaa-42c9-a48a-b89f152123e6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2763eb3-6d28-4d44-af8b-17cb4649bf5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ecfcbc34-d5d9-4f4d-848a-69c05cc290dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c1f690c-3064-4e1e-aebd-609665c5cce8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6acde736-f2ac-4a72-8100-f514f06694b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "458c8f2e-8e0b-4a35-ba5f-adb0ade826ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "96242b7e-3b7b-48de-85bd-97e90910c602"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fef0ffb3-ae9f-46ef-b0e6-1354c7cd1e4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd340c82-e21a-4966-b9ee-2a0ed96f6bc4"
            }
          }
        ]
      },
      {
        "id": "0574e90f-1919-411e-bd6b-eb2dd8a546f9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a7ad1e60-3b3e-4184-93da-426fe0106dd6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ff42ad6-4efa-4153-94a0-819bb2207492",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84b876b3-b52c-4362-b721-34f04a43dca3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4277f8-9c7c-4cb7-919e-a7bf45617048",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc586d3a-4c47-498c-bc1f-836af2a43149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71ba2a7-500b-4985-8496-3ceea1f8c60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b9ee589-d378-48be-909f-f198dc6c1743"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b990f19-9f0f-488c-a949-c98bafb34e54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41f7098c-2c86-49a8-9058-58ba70b8e422"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bc8af43-3de6-4d82-8bf2-1d706e796763",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31653081-7afd-4237-9406-aeeaa8d68d1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d739c381-a0c6-44c1-a1d8-96ee970f5dd5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8be354b8-142b-4c9a-b8fc-af29afaf32bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3740314b-a79e-4312-bb3c-fa0070e33233",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7d122ee-2b04-4969-9c05-c507641af527"
            }
          }
        ]
      },
      {
        "id": "49ac88c2-20d4-40e7-a064-87c833481115",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22bb8ca8-7ebf-45c7-b306-d3f0cded1220",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d008978f-a9e6-4acf-81f1-188f7196e916",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f525f266-4d21-48bc-b3be-2ae7798d97f7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5cb7f65-859e-484f-888a-caa188bcb23e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5434402e-12b6-4f3d-943f-642e42845d5f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.96825396825399,
      "responseMin": 13,
      "responseMax": 677,
      "responseSd": 82.29201165766727,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714005468829,
      "completed": 1714005492395
    },
    "executions": [
      {
        "id": "7291fbd2-a9f6-4a8c-8134-fcd41fd0567b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "56fdb485-e704-4413-ac22-4d2f862f6972",
          "httpRequestId": "70c26046-cab9-4e54-b418-19756e8af1fe"
        },
        "item": {
          "id": "7291fbd2-a9f6-4a8c-8134-fcd41fd0567b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "33cb5992-156e-4375-9889-d469e85735df",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 0
        }
      },
      {
        "id": "42d93d7c-08cd-44cd-9d9e-8627c6e7bf86",
        "cursor": {
          "ref": "8d459f5a-5487-43ae-8224-45b8eb7c10c3",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0074df99-67d1-4cb8-80ff-8710f5a26b85"
        },
        "item": {
          "id": "42d93d7c-08cd-44cd-9d9e-8627c6e7bf86",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3b32c5c0-0e33-4052-bf25-b79a79001ea9",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "ac8232da-b90f-45fe-83d6-dc8eb9dcc613",
        "cursor": {
          "ref": "d6550c60-2390-4c76-ac39-002bcf161471",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f6d12fba-06cb-4bef-aa32-7604174befd2"
        },
        "item": {
          "id": "ac8232da-b90f-45fe-83d6-dc8eb9dcc613",
          "name": "did_json"
        },
        "response": {
          "id": "1abd1e87-eec1-4dc6-be63-8def7676c8f4",
          "status": "OK",
          "code": 200,
          "responseTime": 265,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d786ec-4e98-4068-9354-55bf88779987",
        "cursor": {
          "ref": "f95f4658-789a-4a8d-ae04-ed07640b67fc",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0ead5008-c615-43e4-8235-0c5c86a07173"
        },
        "item": {
          "id": "01d786ec-4e98-4068-9354-55bf88779987",
          "name": "did:invalid"
        },
        "response": {
          "id": "677730df-5b59-485d-b009-6e7ce51c2d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d786ec-4e98-4068-9354-55bf88779987",
        "cursor": {
          "ref": "f95f4658-789a-4a8d-ae04-ed07640b67fc",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0ead5008-c615-43e4-8235-0c5c86a07173"
        },
        "item": {
          "id": "01d786ec-4e98-4068-9354-55bf88779987",
          "name": "did:invalid"
        },
        "response": {
          "id": "677730df-5b59-485d-b009-6e7ce51c2d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f3b99b-5308-495a-abb2-c6d6b39459f1",
        "cursor": {
          "ref": "d2acab52-01f7-454e-aa0b-e561712da13b",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7c9842cb-ef92-4a95-b706-93d5271ecc76"
        },
        "item": {
          "id": "97f3b99b-5308-495a-abb2-c6d6b39459f1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c83dc5b7-2526-475c-8a08-360fb524bc8c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 158,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced06cb8-e0a1-4cac-95c3-89168ac718ed",
        "cursor": {
          "ref": "e6292f43-5819-42c1-a44f-cdcada42555a",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e37c890c-fcfb-45b8-a913-335ebf91d8cf"
        },
        "item": {
          "id": "ced06cb8-e0a1-4cac-95c3-89168ac718ed",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "29803d1d-7897-4bd4-96a5-41c1357172da",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c786a0-646f-4acf-a37d-aca6e8045e57",
        "cursor": {
          "ref": "077e233a-10e8-491a-b82f-e1eb07571d02",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "46a9395b-e8fb-45b7-b4dc-9104da5ebc83"
        },
        "item": {
          "id": "72c786a0-646f-4acf-a37d-aca6e8045e57",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a723968e-43ac-493d-a7c0-858188367005",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05336c27-9a71-48eb-ab4b-7346cb4f640f",
        "cursor": {
          "ref": "014ea213-7728-4ca2-a3b1-2ff0ee0d5ffa",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "234e8213-7042-4487-8494-6f2e00a4cfdd"
        },
        "item": {
          "id": "05336c27-9a71-48eb-ab4b-7346cb4f640f",
          "name": "identifiers"
        },
        "response": {
          "id": "e7225e6d-a795-47ab-95f2-2737d6edf0aa",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4692fc08-8314-4a46-bde0-31290b634202",
        "cursor": {
          "ref": "42b0f413-5e82-4724-976f-724098e6b064",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "21e9bc93-2b3b-463a-aaa9-100e59b6aaef"
        },
        "item": {
          "id": "4692fc08-8314-4a46-bde0-31290b634202",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2f85ebb7-a905-4a62-91fd-031963ec2ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf21ea63-26dd-4c70-a1b3-b5e9ca05d7f6",
        "cursor": {
          "ref": "440bc75e-4054-44ae-8145-5cdec01b2d50",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8cdf5f30-362c-4602-bc45-c8878f9f158f"
        },
        "item": {
          "id": "bf21ea63-26dd-4c70-a1b3-b5e9ca05d7f6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ba61fdaa-8d93-4be8-9b4c-7299fc3c3a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ff50c2-66cd-4413-b0bb-e6804b588a1f",
        "cursor": {
          "ref": "fd8410ac-7aad-4ba8-85e1-8a282141f79b",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1df9f919-c0e9-42e1-83e9-3cb735318881"
        },
        "item": {
          "id": "d1ff50c2-66cd-4413-b0bb-e6804b588a1f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "11cae0b6-e985-47de-a037-af50e23bdce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8281f7ab-1467-43db-9e70-db5c2fa0debd",
        "cursor": {
          "ref": "40d00535-8ad5-4009-b01e-5a1932d81cac",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1a9ef089-cae7-4eff-932f-a7cd7f8ccf41"
        },
        "item": {
          "id": "8281f7ab-1467-43db-9e70-db5c2fa0debd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "33853df0-0492-4012-ae19-4f6a982a8e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e5d1f8-9c55-4362-b943-afa2a3fd5463",
        "cursor": {
          "ref": "441ceecb-e954-456d-b4c2-ecb3007d4b09",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dbe7cc40-c304-47fb-9141-55f408b260dd"
        },
        "item": {
          "id": "72e5d1f8-9c55-4362-b943-afa2a3fd5463",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e12e247e-1aed-4a8e-a2e1-d33e86feafab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1c5073-a28e-408a-87d5-f9f4160cfcdf",
        "cursor": {
          "ref": "64ed95c3-a65d-45f5-a802-eee63755b29f",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f08233f7-4e26-4c72-b7a1-d6f8299ff849"
        },
        "item": {
          "id": "aa1c5073-a28e-408a-87d5-f9f4160cfcdf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c480c199-054b-42ae-a6cb-66598dfc453f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1fff29-236d-43cc-bff0-3b3b0eb5c297",
        "cursor": {
          "ref": "e7902463-be79-4e86-8d97-b69372510bd6",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e3ad648a-5394-4fbb-8944-d5a067ba1218"
        },
        "item": {
          "id": "8c1fff29-236d-43cc-bff0-3b3b0eb5c297",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "93dfc6c9-177d-4adb-aa2c-191f310f8c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a5b39e-92ac-499a-a973-f2e295a0e0e5",
        "cursor": {
          "ref": "38544e7b-6fc8-4b72-88b9-fe1259120c3e",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fded472d-b2b9-4ad2-880e-02565437685c"
        },
        "item": {
          "id": "55a5b39e-92ac-499a-a973-f2e295a0e0e5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "48f4321b-3f12-492e-bcaa-2d1681604490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cceb55f1-9d9f-4f77-b594-0a60f058ed93",
        "cursor": {
          "ref": "f90a13cf-aff9-4b1c-a318-6626a77d1953",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ecffc35e-ea33-4e68-8d0d-e0e6989e23e9"
        },
        "item": {
          "id": "cceb55f1-9d9f-4f77-b594-0a60f058ed93",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b47c7cb1-d7c0-42c4-83e2-99546df6b118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58586769-b4bf-4a1b-9d82-2da9ed9e5794",
        "cursor": {
          "ref": "556d5bf8-e9a0-42a7-99d4-41a9c7d41928",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a6def3e6-d0ca-4902-9f89-97db53f0af9b"
        },
        "item": {
          "id": "58586769-b4bf-4a1b-9d82-2da9ed9e5794",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b3ea56b1-3551-49d7-92c1-45ffd6052a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cad5770-14dd-4cae-b0ec-48ef10064da7",
        "cursor": {
          "ref": "664986c8-4582-4e59-b2e2-e53dde3d8ed9",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "036ad140-f64f-4438-b910-f9d0e5c0dbfc"
        },
        "item": {
          "id": "6cad5770-14dd-4cae-b0ec-48ef10064da7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d1ab1526-1579-403f-8b96-2b570cd72626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695b9069-6503-4a1d-9242-c3ac4ce7d476",
        "cursor": {
          "ref": "794035af-d776-4656-aebb-5336962fcfa4",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "75780c6d-683d-4da6-9b43-2ed4b9b1a33d"
        },
        "item": {
          "id": "695b9069-6503-4a1d-9242-c3ac4ce7d476",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "09b698cd-8082-49c6-a717-7f180a810218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4f63d7-266e-4909-904f-ba0c2c239e98",
        "cursor": {
          "ref": "ecef8701-2052-4b04-bdb7-5fbf42ab0403",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "449ae5ae-bb18-420d-ad3d-a9de706bc2c5"
        },
        "item": {
          "id": "6e4f63d7-266e-4909-904f-ba0c2c239e98",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c84e6e35-9cdd-4f62-819b-bfdce193677e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8729aec2-3c3d-4b19-817c-415147734e01",
        "cursor": {
          "ref": "a45eb0ef-9bf5-49b9-88d6-40dc36a987f9",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "36753533-34fc-4761-bb24-e7c09beaaaeb"
        },
        "item": {
          "id": "8729aec2-3c3d-4b19-817c-415147734e01",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "95573b3f-5ce4-497d-9b98-29dc7389baf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e49c972-7d09-40f2-b162-c1db497e5a7c",
        "cursor": {
          "ref": "23adb3b5-bc00-436d-a9d1-6326fd99cc27",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ee44e01a-7f56-4047-9c0a-5b009798888c"
        },
        "item": {
          "id": "9e49c972-7d09-40f2-b162-c1db497e5a7c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5ba301a7-b86f-4279-9e4a-e4c4380a7b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35e5c21-678d-4fa1-aec7-856d0dbe74ee",
        "cursor": {
          "ref": "3071e6d4-d960-47b8-ac06-7c01352015ac",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "856d8b72-8aa8-41bf-a989-6759c09bbeba"
        },
        "item": {
          "id": "f35e5c21-678d-4fa1-aec7-856d0dbe74ee",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d88f8227-fd82-4518-bd31-448905245c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1131979f-2c15-4888-8849-61dd8f452fe1",
        "cursor": {
          "ref": "f83f78c7-b02a-4e21-946e-a46fe90e1461",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fffd3887-6569-4ce0-812e-d01fdd62ca8c"
        },
        "item": {
          "id": "1131979f-2c15-4888-8849-61dd8f452fe1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "240a2668-d47b-408d-b802-25ea988202d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8a63d8-4c5c-47b6-9006-b13ef6cabdf2",
        "cursor": {
          "ref": "ea60941e-1e44-4e68-a76b-17ca43d7deb4",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "86b45b71-8af6-49d6-ab9d-0308e9522e6c"
        },
        "item": {
          "id": "8c8a63d8-4c5c-47b6-9006-b13ef6cabdf2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e53a1871-1faf-424d-a204-bc8ac252800d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94230bd5-5d63-455f-b587-41365f5cc3b6",
        "cursor": {
          "ref": "1025d5da-db86-462a-9d69-fac372c2b0b5",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6c6bb509-9511-43b8-b256-48e240b19f77"
        },
        "item": {
          "id": "94230bd5-5d63-455f-b587-41365f5cc3b6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fee3e671-464a-4c9e-a332-bafcfcc1becb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbd34f1-3cd1-46d4-92df-d52a0be97bf2",
        "cursor": {
          "ref": "0d190d98-0f98-4ea6-8146-6ff2c0f9b591",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "dc406922-9670-4a72-b26b-16feabe25e43"
        },
        "item": {
          "id": "7bbd34f1-3cd1-46d4-92df-d52a0be97bf2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dc98a266-66cb-47b4-84e7-6bcecbc4f873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668bc0ec-9f59-4e01-8723-4fb01197fe5d",
        "cursor": {
          "ref": "385c1466-a9f6-480b-97f1-4ab6c645935b",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1a37a05a-c5c2-43de-8a33-7cb2e0df0b38"
        },
        "item": {
          "id": "668bc0ec-9f59-4e01-8723-4fb01197fe5d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7cfd5cc5-b636-49ed-9703-f3767ecbdc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b01751-58a3-4d33-915b-83a342dd44d9",
        "cursor": {
          "ref": "ad92af76-d56c-4a91-9bd1-634ebbc3ddea",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "41121e53-5d3c-4890-b6f2-688925e79801"
        },
        "item": {
          "id": "f2b01751-58a3-4d33-915b-83a342dd44d9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f3af3575-6dd2-4b91-a474-19b0dfae81d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8caf62-032a-4e3b-a89c-1b11fc2ad9f8",
        "cursor": {
          "ref": "b8217214-ccb7-4fbf-a591-3810a278c3a5",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5e6f948e-5c4b-419c-a400-70f26c5fa52a"
        },
        "item": {
          "id": "4e8caf62-032a-4e3b-a89c-1b11fc2ad9f8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4ba3ffa0-b02e-4fef-b5ba-776f9a815909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1acddb-0208-46d4-a089-b2eb7d28dc44",
        "cursor": {
          "ref": "9547a4d4-b092-449a-8c73-29a5a1f76a2c",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6e60ce98-5062-4aa0-b495-7c318cd2700b"
        },
        "item": {
          "id": "1f1acddb-0208-46d4-a089-b2eb7d28dc44",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "514fb7c6-6c34-4737-b58a-a9b8bb8c99d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ec5fd1-ec23-478f-8ee5-1ed1d7748d26",
        "cursor": {
          "ref": "d81bedc8-286d-4c79-a282-813389152d8e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "863bd716-15f7-4a9c-8e5b-9532b4697ab1"
        },
        "item": {
          "id": "77ec5fd1-ec23-478f-8ee5-1ed1d7748d26",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "58e74e89-c8d2-4198-86c5-e03c934bedab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6f7e99-c615-435e-b683-eefdfc3e9c90",
        "cursor": {
          "ref": "2e298f4f-e0a5-4407-a5da-00b5f6fc580b",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4255efb3-a383-4212-9121-a592ba8caa90"
        },
        "item": {
          "id": "ea6f7e99-c615-435e-b683-eefdfc3e9c90",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8b62905c-fa74-4b8f-b0ec-33e76728e5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89431469-601b-4c25-b249-fa2c78baa072",
        "cursor": {
          "ref": "094e3219-17f2-4471-bba6-a5b2415d136d",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "03ea0e85-df9e-407a-b1a6-651c61b20364"
        },
        "item": {
          "id": "89431469-601b-4c25-b249-fa2c78baa072",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "26742b0b-eb21-4538-8870-175b235a2dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7565e31a-2739-4182-8bac-e78ba66876ec",
        "cursor": {
          "ref": "70333308-daf1-4eaf-aa89-45c4f3da8c39",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "57d71906-4839-480c-8330-d9f894af8ea4"
        },
        "item": {
          "id": "7565e31a-2739-4182-8bac-e78ba66876ec",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0e6d36f9-09ed-4f40-bf56-28dd7386875d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa23f00f-ca3c-447d-826b-6a493dedb081",
        "cursor": {
          "ref": "e6e4a921-1a57-4a40-aeee-cb2fc52a73e2",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "922eb59c-b7c1-4c49-94c5-99f0e02df946"
        },
        "item": {
          "id": "aa23f00f-ca3c-447d-826b-6a493dedb081",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f8da4375-888a-49a5-89f6-421e25a4d7ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52be9d14-729c-48c3-89ac-cf8ba2947bbe",
        "cursor": {
          "ref": "de46307d-f52e-4781-893a-b51b9bf177e2",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5aeedf76-1186-4fcc-9f45-b65fb8efb893"
        },
        "item": {
          "id": "52be9d14-729c-48c3-89ac-cf8ba2947bbe",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3c6507c4-04c4-4a54-98df-7b00ac09d6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35009711-4184-4e6b-bd90-e7e66965893b",
        "cursor": {
          "ref": "f85061a8-3b24-4975-90e7-17a5916671a2",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5257fbe6-f17a-477b-9553-0bd491cde772"
        },
        "item": {
          "id": "35009711-4184-4e6b-bd90-e7e66965893b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d4690b1e-3561-4cac-9772-6f6386461ea5",
          "status": "Created",
          "code": 201,
          "responseTime": 677,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "eb349ba3-c861-47ec-85a5-1c40fc623046",
        "cursor": {
          "ref": "5ffc0536-f73d-4146-a445-2f6c2f054c45",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e50150d2-6fe4-450d-bf04-216348b44f16"
        },
        "item": {
          "id": "eb349ba3-c861-47ec-85a5-1c40fc623046",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "724f8c17-9f99-46a4-b88c-bd8fc3bc3295",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8b14709d-80c6-4977-8f33-1f7864e3e15a",
        "cursor": {
          "ref": "d24a4786-47a5-4faa-9bb5-7b839ce2fc38",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "76544d8d-b5a0-400c-a84e-018cec52c735"
        },
        "item": {
          "id": "8b14709d-80c6-4977-8f33-1f7864e3e15a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "95413ed4-1550-4d61-91b2-e5a314ac8b26",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "454db67a-7a4d-465a-9e3e-84f8c957afd9",
        "cursor": {
          "ref": "1ea6d747-efae-4eb8-a35c-c8663c338133",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5cc83f10-8c55-4490-91ea-0a7fe1aeff7f"
        },
        "item": {
          "id": "454db67a-7a4d-465a-9e3e-84f8c957afd9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1efb689d-76f2-47b1-9d5e-b6aa008561d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c8e50a-e37f-41b1-b1a0-375726e8312c",
        "cursor": {
          "ref": "ea96a6af-9901-49fd-88f1-44ee52a961f5",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e4b86df9-ea91-4aa1-b4b0-27fbce2de0cc"
        },
        "item": {
          "id": "71c8e50a-e37f-41b1-b1a0-375726e8312c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0de31348-5c9e-46c6-8609-76db7613c3d0",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f8d0a91f-4766-4abe-b906-8be9c630fad2",
        "cursor": {
          "ref": "468697d2-c02b-44a5-8bff-e651099be084",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b6f007dc-cc70-4b26-829e-ce88e344c9e9"
        },
        "item": {
          "id": "f8d0a91f-4766-4abe-b906-8be9c630fad2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b4b0fae5-bff3-436e-9c61-3f0be5e01c6d",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3881148b-9dc4-446c-8f32-a17057865cde",
        "cursor": {
          "ref": "ea5f862b-1bed-427e-8400-fd058eee5c69",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "07e539db-5931-4941-a506-1a51e8308fd7"
        },
        "item": {
          "id": "3881148b-9dc4-446c-8f32-a17057865cde",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "63dd1975-61ff-474e-acb1-6287af2d8b9a",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1459f328-fa61-45e7-a221-9ca0dcd2e5b8",
        "cursor": {
          "ref": "77930dcc-3d4d-4c5b-97ee-25787455ba02",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "600734de-caa8-428e-b40c-6d1340da938c"
        },
        "item": {
          "id": "1459f328-fa61-45e7-a221-9ca0dcd2e5b8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1a46db77-9e3a-46aa-a279-5e67caba03fc",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ba2fa4b9-f70f-4e90-b3ae-df8f8a137f48",
        "cursor": {
          "ref": "eed98cf2-d88e-4268-878a-e69127444591",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "efc244ea-e63c-4e88-871d-569d5694ccb9"
        },
        "item": {
          "id": "ba2fa4b9-f70f-4e90-b3ae-df8f8a137f48",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "91201dbc-bfa2-43ff-babf-bcb4807c5fb3",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "28e8c9fb-d9ad-4ac8-a42a-f7db8c6eb03b",
        "cursor": {
          "ref": "1d353778-4f7b-4a95-8e5a-d076787fbcdd",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ea7ebf69-74f7-489f-8d87-941b5a1f0900"
        },
        "item": {
          "id": "28e8c9fb-d9ad-4ac8-a42a-f7db8c6eb03b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "47c49982-f509-4bcf-9272-4b116f545ee2",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f87cdbc1-103c-43ed-885c-f47e3e9b9aac",
        "cursor": {
          "ref": "fcb3f86d-c388-47cc-8d50-89bb536863bf",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5653b727-fecc-48a9-bb1b-c353cce9d0ef"
        },
        "item": {
          "id": "f87cdbc1-103c-43ed-885c-f47e3e9b9aac",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6731da22-809b-4ee0-a2ab-b8c11b591afe",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b7036469-dd7a-4d45-aa4c-c3e06063d3e9",
        "cursor": {
          "ref": "53ecc43a-3034-42f0-8e03-b2943b9f9976",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3781e218-5676-42dc-9678-38c678480665"
        },
        "item": {
          "id": "b7036469-dd7a-4d45-aa4c-c3e06063d3e9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "494ce6b3-b3fd-4f01-a6f9-cc5862df4124",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1d6025e3-bec1-4582-a490-78bc39b2308d",
        "cursor": {
          "ref": "c8f329c1-6780-407e-a662-58b6767af82a",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b56001b1-7e20-44af-b0ec-43a52ea86cd9"
        },
        "item": {
          "id": "1d6025e3-bec1-4582-a490-78bc39b2308d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4ba85821-8454-4bed-8354-b434945fc6c9",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dc09236f-cd21-4b24-8654-2b254a4a3b69",
        "cursor": {
          "ref": "0c619155-9d0a-498e-b53a-af7e4ca8abd5",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4b3413d4-aefc-4364-84b7-d343e8b2e342"
        },
        "item": {
          "id": "dc09236f-cd21-4b24-8654-2b254a4a3b69",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "06649ad3-7510-4164-8f34-80960c13feb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a362967a-d7ce-4746-b069-1331d73bf2c6",
        "cursor": {
          "ref": "ca3a964c-1d97-4297-8ddf-5474151ebc7c",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1b82d880-58e7-4d38-880c-6e3cc2ef5891"
        },
        "item": {
          "id": "a362967a-d7ce-4746-b069-1331d73bf2c6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c4292037-2244-4c6b-8aab-1b7b97d44c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7faee9-4b9f-41a7-b7d7-91768e43526f",
        "cursor": {
          "ref": "32b8cc36-6c11-4875-b5e4-8c6222840568",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dc207f6f-4101-4365-bac7-0ed06d0e9c9e"
        },
        "item": {
          "id": "cb7faee9-4b9f-41a7-b7d7-91768e43526f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "24580405-f293-497d-b4c8-a906c625438d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617264e7-58a9-441a-a6ba-122fcc63d267",
        "cursor": {
          "ref": "46d30977-9bd9-4c5f-9ac1-7d709f9c8ea6",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "75aebc29-31ee-4f04-bb66-ae040fd6ebce"
        },
        "item": {
          "id": "617264e7-58a9-441a-a6ba-122fcc63d267",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "74595aaf-439a-4da2-a79b-ba3ebf9ad3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa69537-6d7e-495c-a33b-c080ff406b69",
        "cursor": {
          "ref": "71c6273e-43bf-40a3-b25f-e5a090eec95e",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "de3c9f98-6f07-401a-8749-bbbefc03a916"
        },
        "item": {
          "id": "7aa69537-6d7e-495c-a33b-c080ff406b69",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3fbf12fb-3b39-4541-b525-272c393eaa21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2aad96-89a1-4209-96db-d37e45f81f93",
        "cursor": {
          "ref": "7301fb66-c91b-4cc8-9b2d-bbb910b8f5dd",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f0945d0a-0582-422f-98fe-d466452312a0"
        },
        "item": {
          "id": "fb2aad96-89a1-4209-96db-d37e45f81f93",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "87462931-aa13-4f7e-9d52-202c508f9e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d59635-9e78-498d-a7a1-51afc3caedca",
        "cursor": {
          "ref": "2e169f76-655e-4a94-80c3-84062f681514",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "da450b93-bba2-45cb-a16b-49051939c8b5"
        },
        "item": {
          "id": "c5d59635-9e78-498d-a7a1-51afc3caedca",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8d2859ff-7d04-4331-92b9-6ff21efab1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b313d0-1d42-41b1-b69d-ed22655feaec",
        "cursor": {
          "ref": "a3c23b9a-8146-46ad-8a42-3c46aec4b576",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "74fc8b33-0a42-4771-9657-ce7f5810a20c"
        },
        "item": {
          "id": "58b313d0-1d42-41b1-b69d-ed22655feaec",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6eaaa192-4aed-48ee-b475-39783dc4371e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da85c5f6-1878-415b-9c50-a0d612f68149",
        "cursor": {
          "ref": "f17e7d99-087b-4b19-802d-f409cee1c27e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "16669cee-ae5a-4efb-9dde-8135dedd40b3"
        },
        "item": {
          "id": "da85c5f6-1878-415b-9c50-a0d612f68149",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4a187de6-bf14-4fa9-a91e-346e60e46527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d47799-75ca-48be-908b-46b3269b6217",
        "cursor": {
          "ref": "5e086516-280b-402c-85aa-ee401a234609",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5393ce81-6c50-406b-85f2-5059b2b354f7"
        },
        "item": {
          "id": "38d47799-75ca-48be-908b-46b3269b6217",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7c66cd96-ac30-418e-91eb-4596e6c3cc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d123a982-33e1-4ccb-b7c4-f0923386c600",
        "cursor": {
          "ref": "05c3b346-a77c-4c74-aa90-8b31728a9615",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "76dc51d4-6445-4dd5-971f-5de5cde6ff20"
        },
        "item": {
          "id": "d123a982-33e1-4ccb-b7c4-f0923386c600",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7c8a9c06-5568-4b41-9719-356d257c523e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05fab10-02a1-4480-a518-17b1b6a5792d",
        "cursor": {
          "ref": "636bffa6-72cb-4cb3-8a2b-b01c0db1a305",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c3cb3c4a-8d0f-4e46-be23-f45b34ff98e0"
        },
        "item": {
          "id": "a05fab10-02a1-4480-a518-17b1b6a5792d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a8752720-8568-4c41-9287-af95079f8bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735e2c80-6355-4770-aee0-623e96c44d5c",
        "cursor": {
          "ref": "1d593da0-afd4-4493-be59-b8fcf9ed67e5",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b4d503e4-d03c-4489-822b-34c78198074b"
        },
        "item": {
          "id": "735e2c80-6355-4770-aee0-623e96c44d5c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9ea7054f-ace5-43c4-b932-88518e459fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29622670-c3b2-47ed-8d42-20315845da7b",
        "cursor": {
          "ref": "28a4f7c4-de13-486f-9cd0-7623e7f9f471",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e959eacf-ca92-47c9-9f8b-cdfbb6e9e02b"
        },
        "item": {
          "id": "29622670-c3b2-47ed-8d42-20315845da7b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f99fa745-7b17-4205-9592-7ef81c48c40d",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8ff7511c-65c9-4f94-87a7-9a541887d3c7",
        "cursor": {
          "ref": "b2128590-f47a-4315-bdf7-800ee901348a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "00135916-62e2-44f9-8375-717c4c6272d0"
        },
        "item": {
          "id": "8ff7511c-65c9-4f94-87a7-9a541887d3c7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c24a21da-f195-44d2-a66f-93e802728456",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8ddf9229-bbfd-4003-b031-e5298a74950b",
        "cursor": {
          "ref": "92dd886f-e630-4bda-9b8f-d1170fce2c8e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ebdf6996-fa85-42d7-bc8f-df9044de87a9"
        },
        "item": {
          "id": "8ddf9229-bbfd-4003-b031-e5298a74950b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d4695690-8e4f-4dce-aa67-7b683f05a9b4",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d699c56f-4d0e-4931-8721-062d626d63f7",
        "cursor": {
          "ref": "87f43dbf-a505-4fb9-921a-b044c0fe4284",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "05f0286f-3fd2-4256-ab91-6e858390e5ac"
        },
        "item": {
          "id": "d699c56f-4d0e-4931-8721-062d626d63f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a5807567-9b55-4e3b-b5f4-c157c87ef3bd",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ddaf51fa-2abe-486b-b823-08920727d23e",
        "cursor": {
          "ref": "06880f5c-b2d9-483c-82e7-32c5578533d8",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "45146939-1249-4f88-ac66-a6d689d5445b"
        },
        "item": {
          "id": "ddaf51fa-2abe-486b-b823-08920727d23e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "437639f4-b5ee-4ec7-84ee-09e4d442fba6",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "627b6e49-d8cb-4d53-bbda-2fe9a4a5dfa5",
        "cursor": {
          "ref": "6b5f0905-65ac-483d-a5e3-76cab877090a",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e5c7bf67-3236-4599-a37c-c3d9e4c391a4"
        },
        "item": {
          "id": "627b6e49-d8cb-4d53-bbda-2fe9a4a5dfa5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7fd121d1-2ff0-44fe-885e-5d12cb31998b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e27792-9ad4-4b58-b9e3-b45c67b3c190",
        "cursor": {
          "ref": "6d5232f2-4086-4514-939e-a1c69d1486a4",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "44c5aa2c-976c-40dd-989b-89da022921a8"
        },
        "item": {
          "id": "d4e27792-9ad4-4b58-b9e3-b45c67b3c190",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b97e57a9-e88f-4aa7-abb0-ea4766e76088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fb54b0-52be-40da-a912-dec68fdfb730",
        "cursor": {
          "ref": "177b3ef7-1477-4c54-a540-68a7bf4c94e6",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5e314835-9b55-41a4-8105-1c20631d702f"
        },
        "item": {
          "id": "a4fb54b0-52be-40da-a912-dec68fdfb730",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b596dc47-e3da-471b-97c6-9d3e6c0fd69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e13f58-afd4-4ec1-9c46-17456264c66b",
        "cursor": {
          "ref": "fdce3175-16f8-483c-b60d-ee35eb881a79",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a1e052b2-b188-4ffe-a72b-6bfd4d73a4b6"
        },
        "item": {
          "id": "68e13f58-afd4-4ec1-9c46-17456264c66b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "41ab37c8-3a80-43b4-b97f-8d9dc1a56124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53478ff0-786d-40ef-a43c-3e1c42eea4c1",
        "cursor": {
          "ref": "84658d84-bf07-4bc2-8f43-8458bb2c8ab5",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0410a75e-5a1b-4eb1-83bc-1ff495420665"
        },
        "item": {
          "id": "53478ff0-786d-40ef-a43c-3e1c42eea4c1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "40362d60-6211-420c-a5d7-1d5736fba8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beeae71e-296f-469f-bb06-d77b56d293a4",
        "cursor": {
          "ref": "47d151d3-d3c1-47ee-ac20-9a37d840388f",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "32460213-9dc5-4367-a198-7ad1d7858ea0"
        },
        "item": {
          "id": "beeae71e-296f-469f-bb06-d77b56d293a4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7652110c-1f9c-4bdf-9b26-1166e6adeed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e11ba2-1dbb-4df7-a8ed-9d555554d752",
        "cursor": {
          "ref": "c4fc1b46-63f0-4bf4-8ee5-34f994db6d65",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "164e0aaf-0101-4728-bfdb-91b7c24cc5fa"
        },
        "item": {
          "id": "23e11ba2-1dbb-4df7-a8ed-9d555554d752",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7931a1f8-a813-4de5-9506-3ae268fbe5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3e87fc-29fd-4d11-89c2-3a9bb48171a0",
        "cursor": {
          "ref": "0b5a2f06-3f6d-4188-8ef6-3430178060a4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7786d59a-9fa8-497f-9ccc-826dd64e966c"
        },
        "item": {
          "id": "1d3e87fc-29fd-4d11-89c2-3a9bb48171a0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "08608c30-5664-45dd-9f1c-09180ccd9bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0dc061-fee9-4cbb-a404-83801899fa2e",
        "cursor": {
          "ref": "a8a1e3db-32ec-49b5-8909-aa5b7c93c839",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "31e8fea0-5ceb-4bb4-8c3f-2653e99fe5be"
        },
        "item": {
          "id": "0f0dc061-fee9-4cbb-a404-83801899fa2e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6056c240-e3cd-4466-bed7-ba61effabdb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd1412e-f2ab-4bc8-a739-adc61a2e2b32",
        "cursor": {
          "ref": "7e96e9af-ef2a-464a-a09f-a5c44cd7fd28",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5af3ccbd-00b2-4e81-87b9-282684d9b273"
        },
        "item": {
          "id": "5bd1412e-f2ab-4bc8-a739-adc61a2e2b32",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "560816c3-ef72-4028-83fa-05b66fe8b2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8297a44-52b8-401d-88ff-2a9834cb5bab",
        "cursor": {
          "ref": "37ac50c4-d839-43e1-9f92-0ca8bc8e7ee7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3caeacaa-5ee2-4860-8825-781a186843d3"
        },
        "item": {
          "id": "a8297a44-52b8-401d-88ff-2a9834cb5bab",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c53ee548-cfe2-46f6-a711-c87ec388981e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79ddc19-6cbb-4431-b1a6-b7468e193cfe",
        "cursor": {
          "ref": "9f30f6bd-9f9d-41bd-822e-cd477da21a6a",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e7dae7c1-29d6-48ad-b886-af25391309f5"
        },
        "item": {
          "id": "a79ddc19-6cbb-4431-b1a6-b7468e193cfe",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9071af7e-14b9-405b-a2ab-804b46693992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70557358-f959-4900-8900-43ae97d9a264",
        "cursor": {
          "ref": "f296600d-21f0-47fc-a0f0-9ad1a55bf56a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3057a607-df40-4946-a2bc-6d0a1ca9bf1e"
        },
        "item": {
          "id": "70557358-f959-4900-8900-43ae97d9a264",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "21686cf5-07eb-4f15-8919-70ae5bccc8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cc7821-9d7c-49f0-af15-c3cda98513a2",
        "cursor": {
          "ref": "fe6c79d5-efa9-4ce9-a96c-c583d19f6f04",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "30fdba06-238f-4328-bb69-2e126d5fe6a7"
        },
        "item": {
          "id": "d0cc7821-9d7c-49f0-af15-c3cda98513a2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "592d5275-419c-4e1b-96d8-ff8cdb60e369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1438f561-f492-4ace-aac9-f17be4ec33b8",
        "cursor": {
          "ref": "82747357-d114-4b04-99e6-e81d6c476c55",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "33f0cba2-824b-4d4c-9908-ff45ed9c4aee"
        },
        "item": {
          "id": "1438f561-f492-4ace-aac9-f17be4ec33b8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4e3eee11-cf6e-41c4-a1b8-686f4785aeef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a36edf-7192-4b33-b6ef-0f5f538284a6",
        "cursor": {
          "ref": "91466893-d905-4465-a7b7-4752c7640b5f",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5c92211e-fe49-45fd-9d60-60de1f83db23"
        },
        "item": {
          "id": "a2a36edf-7192-4b33-b6ef-0f5f538284a6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "aaf433f9-c93c-4d48-89d6-c16eb1a20311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e5b93f-9661-4e68-b9d5-2a0f5388ce35",
        "cursor": {
          "ref": "04d279c0-6c42-4ed2-87d8-c6eda8d4f32f",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "693a9c18-3222-4d46-b7f3-914c58048a2c"
        },
        "item": {
          "id": "a2e5b93f-9661-4e68-b9d5-2a0f5388ce35",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f1159686-2a82-4f1c-999b-bdd0ec6a97b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3216b2-a9be-4f22-9972-8815a6c3fcd9",
        "cursor": {
          "ref": "3f505c36-40b7-4e0d-ae20-2773390804af",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1a03423d-672f-4244-bd64-6b94bfea4a65"
        },
        "item": {
          "id": "7c3216b2-a9be-4f22-9972-8815a6c3fcd9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "71cdc801-32fc-4320-9908-79fa1cf38ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633fc9d4-4fe4-4148-8bac-d9cbe69e2c6b",
        "cursor": {
          "ref": "78de5ae4-8964-48ad-a32d-090da61809f2",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9db55370-39a5-49f8-bb45-c15faca1e98a"
        },
        "item": {
          "id": "633fc9d4-4fe4-4148-8bac-d9cbe69e2c6b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c8bac27f-2c17-4a1e-a9d7-d6aa42b3f681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98c5e2f-8aee-448a-ba41-443412235425",
        "cursor": {
          "ref": "389deb09-4224-461a-861c-866cc6d43849",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6f0929b1-1c6a-4f0b-aae5-def51d91cb15"
        },
        "item": {
          "id": "f98c5e2f-8aee-448a-ba41-443412235425",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "76faa26d-aeff-4131-afa4-832f262a984b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e415ea-2c61-42ac-b93b-e81f7db461ce",
        "cursor": {
          "ref": "e91d8f6b-01a9-4530-be90-081a932f5f99",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b54497ef-9ae9-4f93-b340-089600477fa7"
        },
        "item": {
          "id": "30e415ea-2c61-42ac-b93b-e81f7db461ce",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1e553d8c-6fb2-4411-b635-548330e95233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb33732-321f-4718-bb71-e9b67ac01238",
        "cursor": {
          "ref": "3a15ec45-f47d-4909-95fa-e1b3139bc3fb",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "97a31a36-ed69-4d25-b16b-bc26cd47aff6"
        },
        "item": {
          "id": "9eb33732-321f-4718-bb71-e9b67ac01238",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "648b92b5-034a-4491-9da2-e99ee5f428f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c017e233-cf69-44d9-a728-7a34247244c7",
        "cursor": {
          "ref": "1b488299-e3a8-4aa2-9dc8-a6e20dc1b320",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e72d3dea-e161-4ff8-a917-554de79df08a"
        },
        "item": {
          "id": "c017e233-cf69-44d9-a728-7a34247244c7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fb1229a4-5464-4816-8fe0-27f259d4cb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c72a29-25d7-44e1-9a69-f2237a5d4391",
        "cursor": {
          "ref": "fac7a512-556b-4dbc-80c7-192307a23fe6",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "79695540-39c7-421b-b8e8-332f11d3ce93"
        },
        "item": {
          "id": "c6c72a29-25d7-44e1-9a69-f2237a5d4391",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5c3e98c0-eda9-40f3-94d8-5e312c98352a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9612d71-ec2f-4e8d-8520-38340550f650",
        "cursor": {
          "ref": "35f877d4-425e-4576-a8c9-aab55768d287",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "329977de-35d6-486c-ba60-0b93babd1a2d"
        },
        "item": {
          "id": "d9612d71-ec2f-4e8d-8520-38340550f650",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "286b66af-2f0b-4d95-88f0-4fa36a963960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ab1e99-0b6a-4446-95de-8d047aa0347b",
        "cursor": {
          "ref": "66acc6ec-98a9-4af6-abf9-9267d9a3e576",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fb9a03d8-f58f-4773-b4fb-b947e4114387"
        },
        "item": {
          "id": "54ab1e99-0b6a-4446-95de-8d047aa0347b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "07fc0d5e-b9d8-42d5-a5a1-a1727cf19966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5a4c6d-2897-4acd-a612-9010e83e9cc4",
        "cursor": {
          "ref": "c4214f20-ea21-4e1f-8b7f-900bd9b0bc88",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "27a1b793-c91d-4e7d-8c26-efd06173a872"
        },
        "item": {
          "id": "3d5a4c6d-2897-4acd-a612-9010e83e9cc4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f4df5d09-8083-4ddb-b348-864add1b854b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157405be-c6eb-45a0-82d2-deb0064c95ca",
        "cursor": {
          "ref": "20af84f5-3fe4-4f4f-b92b-71277aae6662",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4dde10a4-d199-48ef-8c55-0652a413ed0e"
        },
        "item": {
          "id": "157405be-c6eb-45a0-82d2-deb0064c95ca",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2f600b45-3cf1-485e-b2a2-18bc7b657020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43076598-ae69-4dfc-8a52-a37ac03eb292",
        "cursor": {
          "ref": "e463276d-cc81-413c-ad63-d2b8fba7851f",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f943c9d2-71ad-4adf-96b7-8c9911aab7f1"
        },
        "item": {
          "id": "43076598-ae69-4dfc-8a52-a37ac03eb292",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "06cdcd92-7f93-42e4-a46e-fc46c0fc41e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d81075-3e79-45f1-9bdd-c6e3a79a7c1d",
        "cursor": {
          "ref": "c29cdb90-a4ef-4988-89c7-c96bc9137216",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "be69c482-e22f-4cfe-aaa9-456a6c795c83"
        },
        "item": {
          "id": "82d81075-3e79-45f1-9bdd-c6e3a79a7c1d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "295f8167-5fd2-4817-a2d6-25ec2d001616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcde105f-192d-4aa4-b072-33c943d29736",
        "cursor": {
          "ref": "4252f896-0365-4a78-a3d3-a56bf8b1e7ec",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bef173f1-bc04-4ce8-b7f8-6893d344d813"
        },
        "item": {
          "id": "fcde105f-192d-4aa4-b072-33c943d29736",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fe956d49-1b04-4d08-9f1e-d654e73f3cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5e01e9-5864-48db-a10b-115aec5ecc95",
        "cursor": {
          "ref": "f375219b-15a8-4081-9083-06eb1d58418a",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "23bc05bf-a44f-4752-9562-960da8cbb0f8"
        },
        "item": {
          "id": "dd5e01e9-5864-48db-a10b-115aec5ecc95",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3b35a82e-42fa-4532-8c08-b3e6ac8052f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31614ab-9914-408b-bfaa-98fb34274b0e",
        "cursor": {
          "ref": "22be4ea8-dad5-44a5-9706-7bc6c2c8cc84",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "909fb527-bba0-4ef0-b9d2-521c7670580b"
        },
        "item": {
          "id": "e31614ab-9914-408b-bfaa-98fb34274b0e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fa74ebc0-45a8-47e7-a45c-e6386f936765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "2fc799c0-7bfe-4c32-82ea-a5cf7de9238a",
        "cursor": {
          "ref": "6deb2d50-2456-4b82-bc2f-0549049fc111",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "331fdbb9-d736-4a23-8155-064116e09268"
        },
        "item": {
          "id": "2fc799c0-7bfe-4c32-82ea-a5cf7de9238a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8a5474c0-0b1b-4881-8db4-430821e73d56",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95f8a0c-6eed-4e95-b91a-baff80136196",
        "cursor": {
          "ref": "54b0eee7-141b-40de-a3f6-5fb7cb8d2570",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "cae0a02d-8646-456b-a780-9553d38778b4"
        },
        "item": {
          "id": "c95f8a0c-6eed-4e95-b91a-baff80136196",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "72171604-8bc2-4d46-acc3-3a0b7141a8a1",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6153ae-3820-40fc-9ca5-f5fc8092560f",
        "cursor": {
          "ref": "0500b3dc-61c4-4c0b-960c-1ce34398c213",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f8e256ab-643b-44fe-9972-3584aa695977"
        },
        "item": {
          "id": "ec6153ae-3820-40fc-9ca5-f5fc8092560f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "589cdd5d-c4e8-4e07-9a69-b74524bc1ff6",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70665c8-7f45-4114-8926-65cee4b1623e",
        "cursor": {
          "ref": "857668d3-0cb5-4662-a9f2-9e5eaf7c4931",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a76f2fc6-e291-4a69-83a0-cad83d33db5d"
        },
        "item": {
          "id": "a70665c8-7f45-4114-8926-65cee4b1623e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8f6b4470-19ee-41ab-8df5-e775fc564525",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1477698-c426-48e2-a74e-ea1e0066375f",
        "cursor": {
          "ref": "22b34703-2598-4af4-a16c-9a1998d313cd",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c50d27cb-f7b1-4990-b9f6-1c834dc6c70f"
        },
        "item": {
          "id": "d1477698-c426-48e2-a74e-ea1e0066375f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b8078b95-8f12-40f1-8a47-7d1b7850c13c",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-25T00:38:02.477Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-25T00:38:02.477Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "25860fb0-4d69-437b-83a6-907b1b93ecd4",
        "cursor": {
          "ref": "27dce023-dccd-4ab2-910c-ba0119667efa",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0f2d5185-826c-4f77-9abe-64cf9fb60d15"
        },
        "item": {
          "id": "25860fb0-4d69-437b-83a6-907b1b93ecd4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "753d02c0-0d64-4e09-b48a-3bb432db88df",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a393465d-d525-45e3-a1ca-2a607611fdaa",
        "cursor": {
          "ref": "5bf6582b-1750-4c55-87e9-7165b01f363b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fa3197a9-6625-471d-b52d-bfa153163498"
        },
        "item": {
          "id": "a393465d-d525-45e3-a1ca-2a607611fdaa",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cd851c93-3134-460b-bc44-084cc57b52bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064461ec-e7db-432e-80c8-2d1444545e89",
        "cursor": {
          "ref": "dde2d13c-e58e-4f4d-96f6-eea1ae5cfbec",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3c43d658-4b05-4ee1-bb6e-d86a2cef023b"
        },
        "item": {
          "id": "064461ec-e7db-432e-80c8-2d1444545e89",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0d8c9bc2-292c-49d8-b1df-49659cf2fb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a3984d-c5e8-410c-97d3-ae15c4c8231d",
        "cursor": {
          "ref": "d0fd2d34-ce49-49d2-ab5b-8a94345d90c2",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9ef051b9-ebf2-40e9-b768-15eaa7af8459"
        },
        "item": {
          "id": "08a3984d-c5e8-410c-97d3-ae15c4c8231d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5c9728eb-5a2c-4f7d-93e0-475028be45f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ad3bff-f026-4081-8ef3-8df5efe6456b",
        "cursor": {
          "ref": "ce6a1ba1-bc49-4e1c-9633-36fff7d2a7a0",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9990f9aa-333f-4944-b143-d559922524dc"
        },
        "item": {
          "id": "62ad3bff-f026-4081-8ef3-8df5efe6456b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ca2c4116-e354-4959-8cab-924ab0418f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676e4042-4265-4ad6-b775-579fd71bf1a2",
        "cursor": {
          "ref": "74eadb09-8d83-4868-8426-492f7886a99e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "84cbf8be-7019-4fc7-a529-d6d4e7768244"
        },
        "item": {
          "id": "676e4042-4265-4ad6-b775-579fd71bf1a2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5bf92a46-c122-4393-ae0b-17111205a7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cf7457-9b68-4847-ac74-ace920262113",
        "cursor": {
          "ref": "67826cc8-6b3d-4884-b1c8-7038a6d84989",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d3143c25-c25d-4c8b-a8a5-28af8ee93621"
        },
        "item": {
          "id": "20cf7457-9b68-4847-ac74-ace920262113",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "99a82a26-2156-4ed0-aee2-d6db9bb252e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27b66e0-eed3-4d3d-bf52-08ee640780ea",
        "cursor": {
          "ref": "351a0df5-3011-41a0-a045-fe4540592c0e",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b7010e5b-7dc1-4f10-bc7c-b3eaf67edcba"
        },
        "item": {
          "id": "d27b66e0-eed3-4d3d-bf52-08ee640780ea",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1e75e2eb-7c3a-41ee-b9f9-443b5deb137d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7263f86-1e3e-492e-804b-4ae20df624ec",
        "cursor": {
          "ref": "904ddf64-baf2-4d5f-bb84-3fdbffde3b42",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "dceaf1f6-f1f4-44d9-9918-b0ef0d84fad4"
        },
        "item": {
          "id": "e7263f86-1e3e-492e-804b-4ae20df624ec",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cae97844-c69d-48ab-aa99-f6aa316dc5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fee7a57-ed84-4964-81da-6b4426e41250",
        "cursor": {
          "ref": "ac2d67ad-8396-4916-8314-76a9b3659052",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "36043421-2c9e-454f-a7ca-27ff8af35260"
        },
        "item": {
          "id": "5fee7a57-ed84-4964-81da-6b4426e41250",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "45b5e748-e1e5-4c9d-91f6-b7323cf37d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc31ce64-dedc-4b5c-b6dd-b05f54138b6c",
        "cursor": {
          "ref": "438d2e14-a32a-4d3d-9328-380bf5ed34fe",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "70999353-2990-4242-949f-922eff2484ca"
        },
        "item": {
          "id": "fc31ce64-dedc-4b5c-b6dd-b05f54138b6c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "da55d372-683d-416e-b114-53d5ce0fb1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3975f8c-dc25-4019-882c-31ab7ec4f6a1",
        "cursor": {
          "ref": "4d9ed5bc-f47b-4be2-8b82-6f3e93640183",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5c2f867f-5c7c-4b68-9ecd-3f3feb95789b"
        },
        "item": {
          "id": "a3975f8c-dc25-4019-882c-31ab7ec4f6a1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5d4d08da-1d8f-46e0-b04c-9fef830dacd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5451bcba-b301-493e-ab1e-e29182afa49c",
        "cursor": {
          "ref": "38db02ed-e5cb-429e-aa40-44c33959efd7",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "aa23066f-41da-423d-895a-6be33baf89cb"
        },
        "item": {
          "id": "5451bcba-b301-493e-ab1e-e29182afa49c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "03e7c2d0-e469-466f-b06f-deb484118dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33e958e-019f-4abd-8a0d-3b2c93382dae",
        "cursor": {
          "ref": "bf369706-632d-4692-a3b2-b1392ed1e85c",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6ecb5c4b-bb2f-43fd-a7ec-30347ad910b6"
        },
        "item": {
          "id": "e33e958e-019f-4abd-8a0d-3b2c93382dae",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "53747e02-449b-490c-97a4-9efda3a960e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8b858b-d086-46db-a620-482152d5e01d",
        "cursor": {
          "ref": "2928f06a-0924-409b-8a1f-1bae276a1307",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2227f2aa-c955-4a5d-b441-76be3daf249b"
        },
        "item": {
          "id": "bd8b858b-d086-46db-a620-482152d5e01d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2d802c29-61df-40ba-b211-d7129fb5cd2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "af31d46f-3f07-4a29-9e6e-0d0e5cf2f306",
        "cursor": {
          "ref": "be0a217d-ee3a-4726-adb9-d147e302c6df",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b641c52e-28a8-425d-80b1-151d6c765d11"
        },
        "item": {
          "id": "af31d46f-3f07-4a29-9e6e-0d0e5cf2f306",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4b1d0268-edaa-4dcc-9557-b0d79e882aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bef21df-edb3-4087-98ae-839cc08c6731",
        "cursor": {
          "ref": "9b7680ef-2031-41ef-ad3b-6d80086f5028",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "51a19e2c-01b0-49d1-aad8-83314fdf0a0c"
        },
        "item": {
          "id": "1bef21df-edb3-4087-98ae-839cc08c6731",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "98dd84f9-0c92-4043-9e74-78eea51884ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e9e741-499f-4950-8606-71932b7ec2ac",
        "cursor": {
          "ref": "5e8f605c-e6e1-4331-be78-7f0deb43312e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "be1dec27-3e01-4681-8e6f-f33d6abf0fdb"
        },
        "item": {
          "id": "70e9e741-499f-4950-8606-71932b7ec2ac",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "02bea0d6-f4c1-48bd-b1dd-98cf80bd828c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882c5ed9-eb8a-4cd4-8659-b2597f9ecaea",
        "cursor": {
          "ref": "bde71c02-6468-4c34-bb6b-f7743b1acff1",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6ebedae9-ec96-4a47-8b74-2566182e8831"
        },
        "item": {
          "id": "882c5ed9-eb8a-4cd4-8659-b2597f9ecaea",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f29e5143-3d7e-4c07-811c-1374bdfda12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177c4887-d628-4f1c-82ac-a24a352cf97d",
        "cursor": {
          "ref": "7ffaefb9-13b6-4ca2-ba39-66af1e344e46",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2db8ea2d-c838-407e-8aa6-f511050443d4"
        },
        "item": {
          "id": "177c4887-d628-4f1c-82ac-a24a352cf97d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8aea3995-5104-49a2-88b9-8f627456e227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e991baa-7b0c-4686-b2b7-80ae88334455",
        "cursor": {
          "ref": "53aafad9-2a16-4d75-ab06-c4d0a70fbb0c",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "61d805e6-db1f-4786-9609-660412906e36"
        },
        "item": {
          "id": "8e991baa-7b0c-4686-b2b7-80ae88334455",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c50207b1-13a9-4c70-a4df-de0f158ccf0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8b52f3-777b-4cd2-aad3-4df5abce905a",
        "cursor": {
          "ref": "3fdaf077-f970-45db-9ba7-7a6c26121a12",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "872d6b88-bdf8-4bf7-88d7-759bb208fc83"
        },
        "item": {
          "id": "2d8b52f3-777b-4cd2-aad3-4df5abce905a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "85985f1f-45a5-4a65-b642-e222282122d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42748f71-c9b5-44ee-972b-42a16f57f1c6",
        "cursor": {
          "ref": "40036034-6d0e-4eec-8fdb-865c577f105c",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5599d365-3c4b-4245-89e8-cfbee83ff601"
        },
        "item": {
          "id": "42748f71-c9b5-44ee-972b-42a16f57f1c6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d84c457d-f1d6-4efd-abcc-5d6bcc1c898d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e0aa0a-315b-4059-8879-2d97ed363f7d",
        "cursor": {
          "ref": "3b5d5781-04e6-4eb1-b7aa-23aab956dcf9",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3166ffe8-270d-4ac8-9c7d-99e121b4d767"
        },
        "item": {
          "id": "60e0aa0a-315b-4059-8879-2d97ed363f7d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fb478c95-966a-4f66-b5aa-c8c81733a32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016300d0-c0d8-4706-963a-a872e786e4b3",
        "cursor": {
          "ref": "781864cf-a188-4d1f-9e0b-f33f2d667b87",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "57c516be-b1d8-429b-9e60-cedd683da267"
        },
        "item": {
          "id": "016300d0-c0d8-4706-963a-a872e786e4b3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "28037ae7-af36-4083-aa95-135a40809396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638b9fe0-66c1-404d-9ff0-35da9a8256e1",
        "cursor": {
          "ref": "a56eac83-60f8-4747-a75c-4a7ef1b5b1d4",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7dbbaaef-8f2d-4e50-9712-22c793c01d89"
        },
        "item": {
          "id": "638b9fe0-66c1-404d-9ff0-35da9a8256e1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0c43cb3c-f64e-40f6-a379-de2735804ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9d5261-063b-427e-a753-45fc0f7a95ba",
        "cursor": {
          "ref": "ee2be64e-c824-47b8-83fa-1b43f0b7f48e",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f913e901-21cb-49d5-8f98-93528aaeee3a"
        },
        "item": {
          "id": "2a9d5261-063b-427e-a753-45fc0f7a95ba",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "79a4342c-a06e-457e-a210-8cb1491f5d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21735b5e-25f8-41f4-b562-c1e5076a2450",
        "cursor": {
          "ref": "dff33478-2a28-454d-a52a-469fc7f8c9df",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "341eaa3a-02d3-4ad2-9b58-c28d4c0de081"
        },
        "item": {
          "id": "21735b5e-25f8-41f4-b562-c1e5076a2450",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "caa386b2-beac-4dc8-ac92-3d7467bbc097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e78727-89a8-4ffb-8fe3-b847d318726d",
        "cursor": {
          "ref": "ca4c90d4-495a-46f1-9fc4-099a07fb4c2a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fb3d5870-c1a5-4523-b9ed-d39760a98093"
        },
        "item": {
          "id": "04e78727-89a8-4ffb-8fe3-b847d318726d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1f055cd5-c8ac-49be-88ca-01b6924a7794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c1f109-b1b9-451d-a158-43edcfd02e5b",
        "cursor": {
          "ref": "85e2b8f6-f91c-4b71-ba59-b37331178128",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9d1dd0e8-0050-4131-93ac-5877581d4159"
        },
        "item": {
          "id": "d7c1f109-b1b9-451d-a158-43edcfd02e5b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "96243f51-38f7-49df-8564-930050bd7ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96319ee5-be93-4076-85ee-35c571181684",
        "cursor": {
          "ref": "e541b2a3-cb66-447e-bdb1-68b5ca50f0c8",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fcd1e002-c71b-4862-b2ba-bc38eaea7aa2"
        },
        "item": {
          "id": "96319ee5-be93-4076-85ee-35c571181684",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c0bc7937-b5f7-4a7c-a649-00f16b322c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709143c4-3b63-4717-841b-79def3adb1d4",
        "cursor": {
          "ref": "d11f6e29-ad6c-4c98-8d1b-f171438fbe26",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8fff2fcc-c632-4e06-93ce-ca74dce81791"
        },
        "item": {
          "id": "709143c4-3b63-4717-841b-79def3adb1d4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "31069947-d7af-4011-aba9-c0635d57eb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fecd7f-5e20-40bb-8618-208e4d8a231d",
        "cursor": {
          "ref": "60454e32-1705-4dbb-ae40-1f9affc42530",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "337e9365-9ecc-485c-a58e-d358952f6bda"
        },
        "item": {
          "id": "15fecd7f-5e20-40bb-8618-208e4d8a231d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3d8fe39e-eeae-4c52-945f-7c1095f146d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e2f5ee-b364-4cb2-9600-2f6f21e02611",
        "cursor": {
          "ref": "e31a28c0-6f1b-4540-a661-371212ec0f80",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "56ffe97b-ba0c-4083-a153-cf6cc98ba000"
        },
        "item": {
          "id": "c8e2f5ee-b364-4cb2-9600-2f6f21e02611",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "24b4b6de-5cd9-445e-a9bd-c795ad54c116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c3d05c-19f7-45f2-b4f5-c410ce956d48",
        "cursor": {
          "ref": "db330146-2d19-47f0-88cb-632197615861",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "28551506-8e0e-4fb2-9832-d4b465615245"
        },
        "item": {
          "id": "90c3d05c-19f7-45f2-b4f5-c410ce956d48",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "961d4f80-2be9-485e-bcfd-926b9e752a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82513fc-e21a-4054-972b-0e495775f317",
        "cursor": {
          "ref": "c581382a-0e09-42bb-9e4c-b31cdb41919c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bc102d4b-ff71-4f92-9388-31c57845cc7d"
        },
        "item": {
          "id": "a82513fc-e21a-4054-972b-0e495775f317",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b9346cb3-07a1-4a1e-9220-4318991d9ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b161479c-7ce0-4e76-bb3f-4769c939a32e",
        "cursor": {
          "ref": "cf5522f8-3c29-48bd-bdbd-5cbc5fa795a4",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "061f3501-51cc-429d-8397-058e388b73c4"
        },
        "item": {
          "id": "b161479c-7ce0-4e76-bb3f-4769c939a32e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "aba0454b-bd5f-446e-abf6-20ee0a9e0dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c922d73-b849-4b2f-a451-0a24ca8866bf",
        "cursor": {
          "ref": "0410ea8b-6f0f-4843-8691-06e105ea5ab7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1498c3c6-99a1-4d16-8df8-7348854b903d"
        },
        "item": {
          "id": "0c922d73-b849-4b2f-a451-0a24ca8866bf",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fa11fcd4-d73c-4e88-948f-6e89c3e582c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cf6523-f30d-4d09-b307-ad5f31022d72",
        "cursor": {
          "ref": "3e73791d-ddb2-43cd-a3c6-f424f6f4d60e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "00d6c6eb-341e-4185-afe8-e3f2cb865dd9"
        },
        "item": {
          "id": "93cf6523-f30d-4d09-b307-ad5f31022d72",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4d4ecef9-2a86-4001-9e4f-4986914acf91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9393638c-ac8a-4160-bc6f-a0ca82eebc1c",
        "cursor": {
          "ref": "c02eb82b-db42-4758-bbda-46fa09ae21eb",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9fd09688-98c9-4078-8922-99128d6a19d4"
        },
        "item": {
          "id": "9393638c-ac8a-4160-bc6f-a0ca82eebc1c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "07077d66-d05e-4267-a8eb-eb7deb7b6fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508304fc-b217-47af-b00d-cd64e8965d70",
        "cursor": {
          "ref": "caf357b1-ffc8-4fa1-bbc2-87781eed8d5b",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0d50fe6b-98dc-468a-ade0-43e8245c4621"
        },
        "item": {
          "id": "508304fc-b217-47af-b00d-cd64e8965d70",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a8561d3e-e6ab-4dcf-9e3b-2b76af39ba34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d5b0cd-1262-454a-94a0-c6ee0111c450",
        "cursor": {
          "ref": "74ad363b-9da1-4819-9e4a-87c3b8fc9a75",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e159857c-522a-4325-9c60-99d3704d77bc"
        },
        "item": {
          "id": "32d5b0cd-1262-454a-94a0-c6ee0111c450",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d044c02f-c1fb-4aee-a4c1-f35ae376b81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5abf74b-9497-4fe7-a335-873042c536c4",
        "cursor": {
          "ref": "24c401fa-276c-4af3-b006-04981b9561a7",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "57770425-bf7b-408c-83dd-563c6b2b63f5"
        },
        "item": {
          "id": "a5abf74b-9497-4fe7-a335-873042c536c4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4026de82-e46c-46e5-9263-52ee6bf2c1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a3fc54-1fdd-493a-a487-c1e8d2b840e6",
        "cursor": {
          "ref": "9d53c958-66a7-4bd8-8b30-205319df49e3",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9c63ae16-71e1-446e-b573-d0d76354d025"
        },
        "item": {
          "id": "88a3fc54-1fdd-493a-a487-c1e8d2b840e6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "eb786bcc-474e-439e-aa2c-c6450549feeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede433ca-60d2-4ac4-b7a5-85159a3648b9",
        "cursor": {
          "ref": "51357a8b-f189-4d87-be20-8e8e1641b87a",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e37600d4-a61e-4299-8a3f-6b8ff0052118"
        },
        "item": {
          "id": "ede433ca-60d2-4ac4-b7a5-85159a3648b9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "26a90f83-e200-4408-be48-9d927999d20a",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "4a23d3b3-9511-43c1-8818-943fc6adeb99",
        "cursor": {
          "ref": "5b13fe5e-6dd3-49a3-805c-a61fa92bffe8",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "53f04d27-db83-4e9d-ade0-2430d559d7aa"
        },
        "item": {
          "id": "4a23d3b3-9511-43c1-8818-943fc6adeb99",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0fec6d4c-0573-4f8f-8b0c-fc83b7f35da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2b7f74-b6fd-4f0a-9b52-bbe75d4eb95f",
        "cursor": {
          "ref": "eedc8125-8380-4449-bb7b-7fd71942f159",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2cf5f36a-db0b-4015-8eef-6c2335a6013a"
        },
        "item": {
          "id": "7a2b7f74-b6fd-4f0a-9b52-bbe75d4eb95f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "42d4c243-4d97-483e-b89d-7182273ef05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1d2339-9f18-43db-9483-07251f4baaa8",
        "cursor": {
          "ref": "46f670ce-0c6c-4a49-9921-01c75a207229",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "595d6332-1009-4494-a893-d3d46fb7331a"
        },
        "item": {
          "id": "dc1d2339-9f18-43db-9483-07251f4baaa8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "111db1b4-f5f3-4f6e-8472-0527b1e2c3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea2b076-f46e-4357-9a77-467ba10faf6c",
        "cursor": {
          "ref": "65fb116f-c7d4-4782-b6e0-12b05ae5f294",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "69d590e5-a26e-404d-a97c-7f8243fa8f3b"
        },
        "item": {
          "id": "8ea2b076-f46e-4357-9a77-467ba10faf6c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ff42c425-1eb0-4976-8e55-48f65c31ace8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc534949-0225-4759-8dd5-84f06c366d0b",
        "cursor": {
          "ref": "9955cd28-e62a-4993-ad76-417c8652d5c6",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0697d7aa-4b6f-4aba-95d7-4557707cfa34"
        },
        "item": {
          "id": "bc534949-0225-4759-8dd5-84f06c366d0b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "444cb6fd-cbb8-4763-b46d-15bbce964d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a900fb-3024-4690-8c2f-eb60700cfb05",
        "cursor": {
          "ref": "304a1b7d-7b70-4a99-9b29-a8768affd95f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c6b23fc3-0f6e-42fd-953d-defe1606f740"
        },
        "item": {
          "id": "b8a900fb-3024-4690-8c2f-eb60700cfb05",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "741af389-675d-4ca3-ad03-56ea611aff3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf3c062-4a99-4a4b-a9d1-da54ea7a2bd5",
        "cursor": {
          "ref": "5dc84322-a4eb-49d1-b847-47d4d1c3b8d2",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cc9c55eb-e611-44ca-a2dd-7152cec16c49"
        },
        "item": {
          "id": "3cf3c062-4a99-4a4b-a9d1-da54ea7a2bd5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cb467169-eb79-47fd-a39b-e2ae864ed621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3551616-b491-4f82-a39a-82245ed5f769",
        "cursor": {
          "ref": "55c40a9a-05e5-42d3-875b-ecd9843b5175",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c34583f3-3e94-4ad7-a718-f8e0d9b57dee"
        },
        "item": {
          "id": "a3551616-b491-4f82-a39a-82245ed5f769",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b8e2cd06-508e-4b6a-8259-c6b4f3dccadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed582364-d29a-4714-b92d-0e74fe193a40",
        "cursor": {
          "ref": "c0d6578d-dd02-44ec-8d78-aa96b942adad",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ed76680c-a361-42d7-aed4-d32e869ed456"
        },
        "item": {
          "id": "ed582364-d29a-4714-b92d-0e74fe193a40",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "47d9539f-6216-4566-a3ef-9d745f975b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4020cd74-d2d0-4e4c-8176-dc6eee364f66",
        "cursor": {
          "ref": "b815fa96-d525-4226-892c-033ee6ee4d0b",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "197dd2d8-0a74-4491-95fd-3a4b86004aa6"
        },
        "item": {
          "id": "4020cd74-d2d0-4e4c-8176-dc6eee364f66",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f229f446-73b8-465c-b8c6-f8cb7844db91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c0123a-e9df-4ae2-9cc0-0c3a5972b5cb",
        "cursor": {
          "ref": "83be4a9d-be01-4d35-af1e-1b7dd03cd5b0",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cd69842a-fabb-4875-948c-f68dfce0c933"
        },
        "item": {
          "id": "32c0123a-e9df-4ae2-9cc0-0c3a5972b5cb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ae9a9102-8211-45ee-b1a2-2ce2174fe8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca4f821-87d1-420e-99db-13304bd01b85",
        "cursor": {
          "ref": "a4d301c5-8adc-4c35-aa75-d9ee0c380486",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2d35f768-f8e7-45e0-b820-8953a6838c08"
        },
        "item": {
          "id": "5ca4f821-87d1-420e-99db-13304bd01b85",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9afcf114-b55d-4214-ad17-738d33ac67d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7bc57d-2a9e-4f8a-99bd-9187777a3ac5",
        "cursor": {
          "ref": "4cee73b3-662e-4810-8ddf-4d6f3de71317",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "dcffe88b-12d8-4dfc-b00f-7bf6693ffb9d"
        },
        "item": {
          "id": "fc7bc57d-2a9e-4f8a-99bd-9187777a3ac5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6fc54487-682c-48f5-b363-0765063bb327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ae8444-930a-4c43-ba76-53dcdc9a9e5d",
        "cursor": {
          "ref": "2cbbd6a9-70ca-4ca5-ac70-c5cabc7dd82d",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "eddb6e7e-0192-438c-8bfa-9c63b48f2a47"
        },
        "item": {
          "id": "69ae8444-930a-4c43-ba76-53dcdc9a9e5d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6034be8d-9733-49a2-9d69-1e46d79aca24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3561db78-470d-4461-b9a7-cda4a0ee8b46",
        "cursor": {
          "ref": "609a5839-a278-4557-abcf-692a64d994e9",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b309c418-d6e4-422c-8ec7-7cee26f9333a"
        },
        "item": {
          "id": "3561db78-470d-4461-b9a7-cda4a0ee8b46",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "41401ec2-8182-4055-9837-a0477b836724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f9e7bd-5d10-43e8-a694-c59bdf3748be",
        "cursor": {
          "ref": "635df5eb-ed4a-4469-bda5-bfd34b96dac5",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3823ad1d-e651-4f02-9b4d-c06c0b37cc23"
        },
        "item": {
          "id": "97f9e7bd-5d10-43e8-a694-c59bdf3748be",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "702e00ce-5607-477b-a1ea-ae317d3c651d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b853aac-41df-475f-8e2b-fd2f9596839e",
        "cursor": {
          "ref": "6a72c742-afb1-4ec0-bb8f-e92e5aa4fc9e",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d72c0116-5599-42fe-9a2b-0609527a87da"
        },
        "item": {
          "id": "6b853aac-41df-475f-8e2b-fd2f9596839e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0f0b33fb-0a43-4447-b3b4-5bc8dac05bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b34da8-5975-4eb7-b923-c8acfb6d2b72",
        "cursor": {
          "ref": "bf6f2c5e-febd-4e92-b7b1-5b220e33f453",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "01b190b3-1c7b-4b32-bf38-f3d46fc7051b"
        },
        "item": {
          "id": "48b34da8-5975-4eb7-b923-c8acfb6d2b72",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4895e618-c36d-4070-8a05-2c3dbca6673f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448e4518-fa91-4675-a370-d1346877ec73",
        "cursor": {
          "ref": "9badd7a1-1143-47a2-867a-1d1867db0aab",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "23002e5e-ac86-4737-974e-4f6624b29770"
        },
        "item": {
          "id": "448e4518-fa91-4675-a370-d1346877ec73",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "075fde6b-135c-4b04-9788-689b437aca86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abaa5d70-6b65-409f-877e-f280435f32bb",
        "cursor": {
          "ref": "5309752c-d78d-4bd5-90c6-6efad0a8aa92",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "dbc09ac9-355d-4eb2-9d11-73c6fe1a4717"
        },
        "item": {
          "id": "abaa5d70-6b65-409f-877e-f280435f32bb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c491d306-8a5e-4ba6-bb07-bc84331b00e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f88264-9258-46bc-8141-284a3bb37e41",
        "cursor": {
          "ref": "410c1ab1-4202-4a51-a1f2-1c872e7c5031",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a8687fdb-81a4-4bc0-9a86-d29d4e0c63ca"
        },
        "item": {
          "id": "75f88264-9258-46bc-8141-284a3bb37e41",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "702a4fb0-ddfa-4e17-b454-4d692be025aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71626888-cb68-490b-8289-ff82b0c82831",
        "cursor": {
          "ref": "8b5fb202-5618-4a2a-ba93-757a1c4d87ca",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5e87730d-91ad-4294-a146-a2d91e174f6c"
        },
        "item": {
          "id": "71626888-cb68-490b-8289-ff82b0c82831",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b5a16d86-7f75-4d0a-a5de-601c5d20d405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f938712b-472e-4d42-9877-3ac43fed1f4d",
        "cursor": {
          "ref": "f9dcea59-145e-433c-b17d-5ba9d9f4c407",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "855611fa-b4e1-4d3c-aae4-d4a9be47e905"
        },
        "item": {
          "id": "f938712b-472e-4d42-9877-3ac43fed1f4d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aa1b3b5e-a6c9-493b-919b-b258d6a92201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9ebf7a-7746-4b6a-bd07-9898463304db",
        "cursor": {
          "ref": "0728c510-8a1c-449c-980c-3af55460462c",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c324b653-8b6b-4c19-b4d1-0e7d9b605d2b"
        },
        "item": {
          "id": "7b9ebf7a-7746-4b6a-bd07-9898463304db",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f18b9101-d358-4eed-ac39-4500abdbbd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01b0741-7755-44f2-bcef-574300f26301",
        "cursor": {
          "ref": "32ed712e-839d-453a-ba67-2037b65a7b01",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a0c48492-bb7b-41b2-8c3d-410288047a4e"
        },
        "item": {
          "id": "c01b0741-7755-44f2-bcef-574300f26301",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4da31810-ba55-4ff6-964e-3a30cec5bc6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bf565e-31dd-4cb5-92d5-17fc3ca5bedf",
        "cursor": {
          "ref": "b225a605-5a4a-4749-a1ea-f62e796f1718",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "45334552-a624-49a6-8de6-76f18e64065a"
        },
        "item": {
          "id": "44bf565e-31dd-4cb5-92d5-17fc3ca5bedf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bef78910-3634-478c-84ca-7210a5e8c452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dcb3fc-4178-4dac-ab34-704dd3ed24b6",
        "cursor": {
          "ref": "825c9a88-be8d-456a-9d3d-a58daca34edf",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9e0a6854-2707-42ff-838a-a15c2c0976ef"
        },
        "item": {
          "id": "f7dcb3fc-4178-4dac-ab34-704dd3ed24b6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b46fa36b-93fb-4282-b048-a64286d191f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473319b5-49e0-499b-a814-d49736300976",
        "cursor": {
          "ref": "fb8702dc-7564-46ed-8ae9-37a4b57f504f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e5581703-34f5-47e9-8e9d-53e75811179e"
        },
        "item": {
          "id": "473319b5-49e0-499b-a814-d49736300976",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fcc3c82a-762f-4aeb-b54e-7efd0e46fd33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2761b283-6d69-4ffa-86ca-dc0db0ddc044",
        "cursor": {
          "ref": "aa3c4a95-09bc-48bc-8840-cbb9d6f59f10",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "989b0a74-a081-4edb-bac0-90adff8efa2e"
        },
        "item": {
          "id": "2761b283-6d69-4ffa-86ca-dc0db0ddc044",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "071dfc69-24f2-4cc0-9d2b-e38d5feeea85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f824b1d8-bccc-473e-9c0d-930c94433235",
        "cursor": {
          "ref": "cbee8d31-4ba2-4e14-91f0-6a177d3e74ca",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "210be06b-5612-403b-a7c9-7e65c159b15a"
        },
        "item": {
          "id": "f824b1d8-bccc-473e-9c0d-930c94433235",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a13cf86b-36e4-4cb8-a5e1-d78426253475",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "11e68a43-93d6-4a12-b469-4628e4c27887",
        "cursor": {
          "ref": "66197a6d-c75d-4497-9213-d28f83f0eceb",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "47a431a0-c509-4e2e-9fc7-a5bb9e388104"
        },
        "item": {
          "id": "11e68a43-93d6-4a12-b469-4628e4c27887",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6c23566c-814d-48d4-a0da-27dabf3ef8b8",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "7f67dc0f-271b-49dd-9814-76981ac500ba",
        "cursor": {
          "ref": "e9ef9e08-6ac9-4312-b783-361eac25b006",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2edfc268-d04f-46fc-a1f2-94d38b688515"
        },
        "item": {
          "id": "7f67dc0f-271b-49dd-9814-76981ac500ba",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d2c4c409-9bf5-4131-9612-ea07c8725d12",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c7f8ee3d-a06e-4702-9a9d-697737972cb5",
        "cursor": {
          "ref": "7cb35c73-798e-493a-8c7b-5a595445f331",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7b6a33d0-981c-4f1b-8c08-22e4ab81b583"
        },
        "item": {
          "id": "c7f8ee3d-a06e-4702-9a9d-697737972cb5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bff16581-8a70-4b5a-aabf-77fae46591d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ca6c10-cbb4-4ae2-81d2-a06e1bf6f7d3",
        "cursor": {
          "ref": "493dab8e-bc4f-4d8d-a06c-9ac7e1188af4",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cc2be351-ca4f-4cec-955b-3a742f5f2946"
        },
        "item": {
          "id": "72ca6c10-cbb4-4ae2-81d2-a06e1bf6f7d3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "602ce823-3dec-419f-9f3c-1314261a85d4",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "fe6e3ef9-bdb6-4ca0-a36b-6d87eb756275",
        "cursor": {
          "ref": "3eca60f3-6b22-4230-a150-f8c21fa25ae0",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "78a269ee-ab17-4439-bed4-5339ca946da0"
        },
        "item": {
          "id": "fe6e3ef9-bdb6-4ca0-a36b-6d87eb756275",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3c81f2dd-0d77-40eb-b2d2-f6876793ac33",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "2bde2e75-9004-480f-898e-f3fca86e68c5",
        "cursor": {
          "ref": "d2526b8d-602f-4a61-947d-80e1b78b8c6a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5ed86a25-3d91-4444-89fa-3d09447a8a71"
        },
        "item": {
          "id": "2bde2e75-9004-480f-898e-f3fca86e68c5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3a84abea-f094-4493-a0b4-e682288916a4",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "cdd63f55-699b-4c04-8507-272980ce5e64",
        "cursor": {
          "ref": "fce6c753-48e9-44d3-9734-0abf446a59c3",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b2d3b68b-5eb0-42e4-9b79-dbfbbe6ce956"
        },
        "item": {
          "id": "cdd63f55-699b-4c04-8507-272980ce5e64",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d1355391-89c0-4e14-90c5-10643c85f3a2",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "20477949-da13-4808-b08b-18be80039642",
        "cursor": {
          "ref": "ba614457-690b-4db6-8d71-ef9acae76d63",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7d3a0378-c76b-4dd5-8d24-07ab1cfb6df5"
        },
        "item": {
          "id": "20477949-da13-4808-b08b-18be80039642",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "00b3d8c5-ffe9-48a1-a2c6-f092b8fd080d",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "77f82c88-c7d0-4006-9508-483b66085217",
        "cursor": {
          "ref": "d5c79d62-f964-4029-af2e-3c47e9c97034",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b5820a1d-ae5d-4809-a4fe-0a17430b1d61"
        },
        "item": {
          "id": "77f82c88-c7d0-4006-9508-483b66085217",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a36ffc68-aefb-4158-9b60-b86a5255ff75",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "92dedca0-006b-469a-a427-a7fcf488e16a",
        "cursor": {
          "ref": "e66b7903-40f2-4ccb-bc08-31a8b92c130c",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8cc6c67c-009c-49c3-8c95-4683fdc29d9e"
        },
        "item": {
          "id": "92dedca0-006b-469a-a427-a7fcf488e16a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e6927614-e6b2-422b-9d8f-096b0f42b566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676f72b5-a310-4af5-8ae1-c383770c0a7e",
        "cursor": {
          "ref": "a81cc9a9-3c29-447e-bc62-157558c7d49b",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "312b2928-41b9-4fe2-9785-3cb5e6128b55"
        },
        "item": {
          "id": "676f72b5-a310-4af5-8ae1-c383770c0a7e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5569e5e4-44e8-4e89-9e58-a9e3546aa1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d599371d-90ec-4e78-834a-da0635e67d18",
        "cursor": {
          "ref": "8b8ca001-23a4-425c-bb45-aaedcba44190",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "33321b84-b5aa-45ce-9821-a5687d23ad74"
        },
        "item": {
          "id": "d599371d-90ec-4e78-834a-da0635e67d18",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "df9c5591-9b6f-4b4d-958a-9ba79c4b980b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e83bee4-1b7b-482d-8954-f4cdb4a44969",
        "cursor": {
          "ref": "5a75fdb9-d23c-4449-bc19-d7f50ddc369b",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "77ea6bfd-e662-490f-9d9f-61f16d55747f"
        },
        "item": {
          "id": "2e83bee4-1b7b-482d-8954-f4cdb4a44969",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3cd494fa-a01f-45cc-8709-627a4bd50588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7aa0f0-1bb2-4fdc-b356-91416870fd3a",
        "cursor": {
          "ref": "a53ca930-e3d6-49e5-a6b8-a9a110df1fe7",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a5db2d08-69dc-4c24-a20b-ab2ceaaffe26"
        },
        "item": {
          "id": "8b7aa0f0-1bb2-4fdc-b356-91416870fd3a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e692fcf2-9294-4687-8814-fde068bf0a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68b5670-b60e-48dc-a10a-71c67e31db47",
        "cursor": {
          "ref": "f1ccd6d5-704a-41f4-95ea-0daebef7085a",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8c73c25b-f264-44d6-9edf-013c5374160f"
        },
        "item": {
          "id": "f68b5670-b60e-48dc-a10a-71c67e31db47",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "89f94d91-691c-4b54-ab41-f8359c61c1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e528523b-93e3-4350-b266-67f8f6931237",
        "cursor": {
          "ref": "37b45684-3b7e-43c9-992d-ca87d54b95c1",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "37150114-3a17-46fb-82ee-501ca93416fa"
        },
        "item": {
          "id": "e528523b-93e3-4350-b266-67f8f6931237",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2b31c480-f5a1-4aea-b719-4880a7546a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c03047-6eb4-4956-955b-08a5d4dc3a7b",
        "cursor": {
          "ref": "b83ec12c-032c-46b9-b70a-8e418ed38a4e",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a03f96e1-5845-4f9a-8493-4178b338ebb0"
        },
        "item": {
          "id": "11c03047-6eb4-4956-955b-08a5d4dc3a7b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d62b7d8d-0921-428f-8652-8e76a8dae57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15c95d8-69af-41f4-b3f8-273707e72c1b",
        "cursor": {
          "ref": "9fbd5b9b-ce6b-4b27-aed4-b621667d67d6",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "92f8f84d-319f-4e8d-98e2-85c47026403b"
        },
        "item": {
          "id": "b15c95d8-69af-41f4-b3f8-273707e72c1b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c9d92cec-d4e9-4417-ab28-cd31a8687a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9416c54-8788-4bc3-bf68-e34d2e036890",
        "cursor": {
          "ref": "b6c9bae2-ecfe-4a5f-86ec-dda2cddd108d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c9d4e5bf-30a1-43b8-a4d8-fad4e9b3525a"
        },
        "item": {
          "id": "d9416c54-8788-4bc3-bf68-e34d2e036890",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e10de841-f397-4d38-a412-e67cf2337cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ba81e3-6870-4b8e-85e3-f58ee3a93cf1",
        "cursor": {
          "ref": "d8024e9e-d6ae-4e70-9983-61fefdfda40c",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "40735f78-d169-4b48-bdff-3301cdd25555"
        },
        "item": {
          "id": "39ba81e3-6870-4b8e-85e3-f58ee3a93cf1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bcdb6ea2-358c-422a-ac85-7a49d2683783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35dca64-f644-46f9-a780-1da789a541c5",
        "cursor": {
          "ref": "23582cef-f219-4da1-bf71-25064a9a48d5",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "30b9c24d-5221-4797-8085-1d959ad18b5f"
        },
        "item": {
          "id": "c35dca64-f644-46f9-a780-1da789a541c5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4ffac688-858e-4fcf-babb-5cdc33565fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e2c403-307b-4176-8fe7-ddb0dbdaf84a",
        "cursor": {
          "ref": "395d1439-0cdc-4241-af28-b75845b9a889",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5727193d-f486-4246-b583-99f1a4beb981"
        },
        "item": {
          "id": "11e2c403-307b-4176-8fe7-ddb0dbdaf84a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3245dad8-1433-4b88-bfa7-ac302fb3805b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f10917-a5ce-403e-a6df-6e0780b632bb",
        "cursor": {
          "ref": "89bc6751-46d5-4a67-8830-99fd1091e0c4",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "51a023b4-2f76-47e1-8088-f0f7fcd767a8"
        },
        "item": {
          "id": "12f10917-a5ce-403e-a6df-6e0780b632bb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7e28e2df-cf0c-49f4-acd3-a96d53357d1f",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "bdb3c4bd-5f2a-497d-949e-8f65ac846d40",
        "cursor": {
          "ref": "6937f8ad-8d09-4dda-aa32-deb5bbc360b4",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "04d95e02-1b56-43fb-9c1f-c896512b6611"
        },
        "item": {
          "id": "bdb3c4bd-5f2a-497d-949e-8f65ac846d40",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "71f9bd29-19af-4631-86d7-cd1ce0750f63",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "0de33c18-a7f6-4338-8e2e-4a88481c1390",
        "cursor": {
          "ref": "36e8744d-0692-4272-a39d-dac07a1a1f79",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b9cd70a3-37e1-408d-bd41-6a4ea507a39d"
        },
        "item": {
          "id": "0de33c18-a7f6-4338-8e2e-4a88481c1390",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8d19c51a-358d-405d-92a6-8f4a13a75e67",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8eb61a9d-c7c3-47c2-a80a-48591e5ad304",
        "cursor": {
          "ref": "d1464339-6068-46eb-8f29-1931010ce8a4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "531523e4-4349-47cc-8a12-495bbd576f8f"
        },
        "item": {
          "id": "8eb61a9d-c7c3-47c2-a80a-48591e5ad304",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6ea525d6-ad08-4f5a-98a1-d0f69c2d288e",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "2d0a3bbf-6ef3-4d3e-879e-71c73cac1ec1",
        "cursor": {
          "ref": "2715b96a-3d3b-4e0b-9b52-f7c30f653ee5",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "814eec77-a304-44e5-9505-81b08fda7941"
        },
        "item": {
          "id": "2d0a3bbf-6ef3-4d3e-879e-71c73cac1ec1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "feaf9a20-d97c-4ec1-b286-b7776cce5e43",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "37578dde-e8b7-4f36-a09b-03fa22cefc31",
        "cursor": {
          "ref": "476a7d6e-4e03-4d71-a4c2-824ccf4c152d",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "02cc0389-63b3-4c25-bccc-79e551760e43"
        },
        "item": {
          "id": "37578dde-e8b7-4f36-a09b-03fa22cefc31",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e31fbb89-f781-4015-a960-0a00a73cb398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504fa5b6-dc4c-450c-a0aa-505e9a18f839",
        "cursor": {
          "ref": "87612e7b-d1fb-49ed-978a-edc17deeab05",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "63d80942-1c89-4a18-99f7-5bf0da3e514d"
        },
        "item": {
          "id": "504fa5b6-dc4c-450c-a0aa-505e9a18f839",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c066377c-4f5e-4c4f-bcc1-c69b9c6bc52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f155ae-be1d-475c-99a2-275b870780cf",
        "cursor": {
          "ref": "2e69b16a-000c-49c9-a33b-709f15ee65f6",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "462be75f-7b8f-42f2-bf54-fab48a34cba1"
        },
        "item": {
          "id": "b6f155ae-be1d-475c-99a2-275b870780cf",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "26f48c3f-987d-4566-ba1d-8d6e0bc647fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2406cea-1328-4f54-8de2-076ad0d77183",
        "cursor": {
          "ref": "8755094e-385c-4737-b722-f13226a51e22",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7659aa6e-8117-4433-9728-cf1b5c5c02c1"
        },
        "item": {
          "id": "e2406cea-1328-4f54-8de2-076ad0d77183",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "981cef79-aa1d-4667-88b7-52bf34131d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9c7101-9272-4b0a-b9be-4c0d2f32cb09",
        "cursor": {
          "ref": "4b866e77-dc87-40e2-873a-860a01f5dd40",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "54f99096-21d5-4480-9bec-330dbd5c2b31"
        },
        "item": {
          "id": "8a9c7101-9272-4b0a-b9be-4c0d2f32cb09",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ff63a790-6af1-42bc-b280-19171146334a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8616718-b88a-4175-9345-408f86b92578",
        "cursor": {
          "ref": "4c38a61d-0dcf-4b83-a273-15f88c2b7d90",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "13a70866-a2e0-417f-a4b1-653fc768521f"
        },
        "item": {
          "id": "e8616718-b88a-4175-9345-408f86b92578",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "662b43ed-7d6a-4532-a0cf-847c1434e9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45592789-342f-48b1-b822-b6aadde72100",
        "cursor": {
          "ref": "d9b597b0-6bb3-4691-91e3-c7ca12ce730e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "907915d3-5756-4fb3-9756-1b52a6e76473"
        },
        "item": {
          "id": "45592789-342f-48b1-b822-b6aadde72100",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0e63af73-10df-4877-ac1e-73f775998d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c3537e-6042-4efc-8af6-5247672e2b5c",
        "cursor": {
          "ref": "958138c7-a200-43d5-8d50-cb198e076f00",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "67a3ae38-61f2-4928-b55e-c3b81f12a063"
        },
        "item": {
          "id": "23c3537e-6042-4efc-8af6-5247672e2b5c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "db235446-8fb0-46e8-9dfb-a4e6e528d477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfa7630-d6f8-4969-8066-6fb5f52a7675",
        "cursor": {
          "ref": "970ad7c2-1658-4df3-b5eb-47754859737c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "45d6bbff-35e7-48cb-bccb-1d40cf4ff05b"
        },
        "item": {
          "id": "6cfa7630-d6f8-4969-8066-6fb5f52a7675",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8cacbaa0-5c89-4736-a38d-1ad70f9f15f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929d9892-8988-42fe-acf7-feee48be23b4",
        "cursor": {
          "ref": "2eccdfed-88a9-4c57-b05a-1cde4641341a",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "620723b1-f7cd-406c-af82-662f67091ef5"
        },
        "item": {
          "id": "929d9892-8988-42fe-acf7-feee48be23b4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d1e59506-3e1d-45e8-adff-a5e3158019b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c647dd-2746-4469-a68d-38eed150cb72",
        "cursor": {
          "ref": "f5e48a31-8e37-438f-a5f7-adb0aa84c991",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "53263eb4-14a8-4b04-8967-ae07632e3632"
        },
        "item": {
          "id": "55c647dd-2746-4469-a68d-38eed150cb72",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "715bd4d9-c307-4c6f-a79e-7be71c1d84b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2263340-7cac-41bc-9101-24b9cfd85174",
        "cursor": {
          "ref": "62adab76-a91c-4c0f-9fa9-82d188a0b076",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "40c358f0-7a63-4ec9-b76c-9be22a5d62ee"
        },
        "item": {
          "id": "c2263340-7cac-41bc-9101-24b9cfd85174",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4ff06ca3-bce0-464c-b2fd-8fbdee0be87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838c7254-6393-4630-87b2-51603c1ed9a7",
        "cursor": {
          "ref": "a6323ee6-113d-464a-8446-dd02008fb685",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2f23f26b-8861-4bf9-8bcc-65e020ed8f80"
        },
        "item": {
          "id": "838c7254-6393-4630-87b2-51603c1ed9a7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d7599c7c-dd89-4eee-a4fd-87225f534cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c66a96-9764-42c8-b726-19fed8e373d6",
        "cursor": {
          "ref": "233e510b-d367-4fd2-b350-a803c816024a",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c93e0eed-e4b1-43fb-b6ea-255a5134faa2"
        },
        "item": {
          "id": "59c66a96-9764-42c8-b726-19fed8e373d6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "88156446-1cfa-4a6d-928a-460389e79c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef827e61-ab90-4630-80d7-6382254d064f",
        "cursor": {
          "ref": "ef9716eb-2ae3-4683-a076-b6c29dc9401c",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "988489c4-5910-4283-940b-f3ffadd50a2e"
        },
        "item": {
          "id": "ef827e61-ab90-4630-80d7-6382254d064f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "25baeda3-3e44-4e0e-aeb8-a44fbc80f9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf211c2-b07f-4a67-9e24-79685247c65a",
        "cursor": {
          "ref": "7c95a78d-2c09-4ba8-8595-cf9e894383de",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9a949692-e328-4fe2-93c8-10dc85a66f9a"
        },
        "item": {
          "id": "dcf211c2-b07f-4a67-9e24-79685247c65a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6fbd763a-0004-41f5-8e21-0bab21700b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10022429-9c7d-40d7-b3b8-b232e481c324",
        "cursor": {
          "ref": "3264c46a-387a-4501-abc2-85c27f601069",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fb5e39c5-0f3a-45a7-b7bf-7199bc7729f6"
        },
        "item": {
          "id": "10022429-9c7d-40d7-b3b8-b232e481c324",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d2e44990-2601-4aad-ad29-7df09ae2194d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6f613e-0088-48d9-9683-72cc02a25d51",
        "cursor": {
          "ref": "8dd35326-9746-432b-9eb6-f9da27675f4a",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1ccb4436-b3e3-49bc-9038-e9f55c8b311a"
        },
        "item": {
          "id": "9b6f613e-0088-48d9-9683-72cc02a25d51",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f3a43d33-7207-46e5-b1d8-f6acb111f812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b69eded-2f1d-4782-b7d4-7b02d1dc7d02",
        "cursor": {
          "ref": "c6a4e1b8-d555-40dd-8da1-c45b8ee658ea",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "14adc492-3609-4461-b70c-c0191920f3c2"
        },
        "item": {
          "id": "6b69eded-2f1d-4782-b7d4-7b02d1dc7d02",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fe114482-3716-4e48-96ad-ce4b3cb67262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19be0692-ef97-4ad2-b78e-847fa26197f6",
        "cursor": {
          "ref": "25311f22-e33b-4291-bfa6-9d1cefdbae66",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b10738a1-c82b-43d0-b38b-b6c7fdef91b8"
        },
        "item": {
          "id": "19be0692-ef97-4ad2-b78e-847fa26197f6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "06a1d196-7400-49fb-abbf-9108df278740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66d9de5-6df0-4edc-8e4b-60b2be3b4bf1",
        "cursor": {
          "ref": "24a022d6-6292-4fca-bacb-7c16334f59e1",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "77e2919b-a148-47e0-abc4-9868c6d9c761"
        },
        "item": {
          "id": "c66d9de5-6df0-4edc-8e4b-60b2be3b4bf1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "46389be8-c227-44ce-9b55-5b774532901f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37550f59-c4a0-4388-85a5-7c2971b636e5",
        "cursor": {
          "ref": "168fe881-64d8-40af-a831-9e8c0019698a",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1cddd0a8-1556-4fdf-889a-ae8a650bbf9d"
        },
        "item": {
          "id": "37550f59-c4a0-4388-85a5-7c2971b636e5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6ba953bb-7693-4ea9-9d33-96225b8922b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5967591f-a64c-4ffa-adde-af89ed74196b",
        "cursor": {
          "ref": "8e4fd4d0-a960-4663-a43e-70b788da30eb",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f3bab620-55ac-4c7d-b779-11e1c6039d34"
        },
        "item": {
          "id": "5967591f-a64c-4ffa-adde-af89ed74196b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "082403e3-94aa-4688-a8fd-4fe640621ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a76cbd7-1aca-4b89-bd77-c415a20de6de",
        "cursor": {
          "ref": "2d398f79-8a35-40f8-b2f2-b6271db31351",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4e7714b2-2513-438a-8bfa-23db6d0b23a1"
        },
        "item": {
          "id": "0a76cbd7-1aca-4b89-bd77-c415a20de6de",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "69b60c27-7c84-482e-a5f5-35d27724d8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf0f97c-b429-4eb1-8eed-12b3a36f3923",
        "cursor": {
          "ref": "946faff8-0b73-497e-b05c-2fb72cf8df86",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "13628ebd-6ca2-4488-9b72-ee4bb1db7603"
        },
        "item": {
          "id": "edf0f97c-b429-4eb1-8eed-12b3a36f3923",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2f1eba10-8be0-4a20-a37f-ea9e4a5dbdb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc59c048-ddb1-4e12-8f6f-aaf88c232529",
        "cursor": {
          "ref": "a3140e45-4634-42ed-ac65-ee9f95694f05",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7f041bec-f8b1-465a-83e0-8fea8e7fbf70"
        },
        "item": {
          "id": "cc59c048-ddb1-4e12-8f6f-aaf88c232529",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a6ef0e0c-21a5-456f-b533-26f466e37cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9b99e7-d633-4605-a0b1-898d5fd02ea8",
        "cursor": {
          "ref": "fd73d3cd-33a0-4876-83e5-0ea1309059eb",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ee555652-fcee-404f-acef-04caf247cc3f"
        },
        "item": {
          "id": "0a9b99e7-d633-4605-a0b1-898d5fd02ea8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "deb3d4fe-7ea9-4363-8035-2b93e30892f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883cef9a-e4e3-4b7d-ab7c-fce4ee946e95",
        "cursor": {
          "ref": "fde1505d-e6fc-44fb-b2e9-def075818a67",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7d4aa88e-f62f-4640-be8e-3225a740443c"
        },
        "item": {
          "id": "883cef9a-e4e3-4b7d-ab7c-fce4ee946e95",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8f54f4f1-1aec-4326-a21b-97010a614669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6be47f-b3c4-486c-9d62-04ede37b24ec",
        "cursor": {
          "ref": "e6f12826-b006-46f6-aa22-1e8200d8108c",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "50d181ba-1120-4b7e-835a-919456e2b195"
        },
        "item": {
          "id": "1b6be47f-b3c4-486c-9d62-04ede37b24ec",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "596c5a14-43df-4f57-a5dc-b8ac857e6c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4654e7ef-fea6-4bbb-90a2-dde91911743b",
        "cursor": {
          "ref": "a299dcef-e771-4c69-93b0-785416c0b330",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "021d9183-f6df-44e9-9ca3-82a6632bcbf0"
        },
        "item": {
          "id": "4654e7ef-fea6-4bbb-90a2-dde91911743b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2bc0383d-1604-4a40-bee9-bd835f9759a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373ebbc5-224b-4463-8738-680f81d9497c",
        "cursor": {
          "ref": "5aded663-e44e-4556-93d5-92a8cc6b3fa2",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "16a70f25-1c5c-4b58-8293-f5669bbc271b"
        },
        "item": {
          "id": "373ebbc5-224b-4463-8738-680f81d9497c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f356e676-7118-4974-bb1c-5e6d0efc925b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92926159-3e6b-411e-8812-22be54c656bb",
        "cursor": {
          "ref": "1efbf01f-b7a5-4dbf-bb18-5d0d44a5058a",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3fd087ab-0018-4c45-8d37-6aee2063467e"
        },
        "item": {
          "id": "92926159-3e6b-411e-8812-22be54c656bb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "46fff094-5a75-427d-a862-6a558b5860d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc16bd52-f022-47e3-8060-3d47bfc0fec2",
        "cursor": {
          "ref": "de1b809d-abb5-4446-b55d-888fbd385deb",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0750018a-b1c6-43e7-8ccf-f79e02ab98de"
        },
        "item": {
          "id": "cc16bd52-f022-47e3-8060-3d47bfc0fec2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "35c020e1-7195-4f07-a9dc-55b83a679bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df863ed6-6eca-451d-b0c5-c895060dda99",
        "cursor": {
          "ref": "b9efe085-f9e7-4bea-a829-c3bcb988fcd7",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0d27fb24-e8e8-43f3-906b-c23477359bc3"
        },
        "item": {
          "id": "df863ed6-6eca-451d-b0c5-c895060dda99",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "02566dbc-d0e6-4ad8-8175-1bc1db78541e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb0630a-0c85-471c-95d8-844bcdf135e1",
        "cursor": {
          "ref": "7970509e-068a-44bd-98d8-1588a7172004",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "21b58968-da23-40f5-87e6-114096c6c0ba"
        },
        "item": {
          "id": "ddb0630a-0c85-471c-95d8-844bcdf135e1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2f5e8541-63f1-43b8-9ecd-489158e67d14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d6fdad-536d-4a5c-8d09-44b650365fea",
        "cursor": {
          "ref": "8ab97ce3-20a8-4b87-959a-0e7519b6b7f0",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9a359baa-3ab8-4a24-abed-76aef07d659f"
        },
        "item": {
          "id": "e2d6fdad-536d-4a5c-8d09-44b650365fea",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "eeab3847-7b85-4b9e-b127-e14d9d21f631",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "e00a7d87-3926-452b-bfe6-5e633dd9a8a1",
        "cursor": {
          "ref": "72446db0-e739-4e9c-9698-de1deab48e8d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f9f88fb5-e6b2-442a-8a82-8129dafa6383"
        },
        "item": {
          "id": "e00a7d87-3926-452b-bfe6-5e633dd9a8a1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0ec5181f-6a29-487d-84e8-7f6934d26c05",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c094cd57-72e1-4971-a901-f58df39febf7",
        "cursor": {
          "ref": "7848fcc4-382d-4964-ae5f-2d7e72886940",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a69bf301-89d3-4c1b-9437-8302af0608fb"
        },
        "item": {
          "id": "c094cd57-72e1-4971-a901-f58df39febf7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "913f2f71-19e5-4f97-9b3d-acea0493e15f",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e0d123-cd8a-4e8a-9681-356b4324a8fb",
        "cursor": {
          "ref": "5039af28-934a-4129-9dad-2997e6830698",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1820b156-6294-4f14-8579-a497cfa2502b"
        },
        "item": {
          "id": "49e0d123-cd8a-4e8a-9681-356b4324a8fb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "02bb4728-715f-44fb-8223-3e52a809b263",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e0d123-cd8a-4e8a-9681-356b4324a8fb",
        "cursor": {
          "ref": "5039af28-934a-4129-9dad-2997e6830698",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1820b156-6294-4f14-8579-a497cfa2502b"
        },
        "item": {
          "id": "49e0d123-cd8a-4e8a-9681-356b4324a8fb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "02bb4728-715f-44fb-8223-3e52a809b263",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30dcd6f-1494-4b2a-9381-9329e7993e04",
        "cursor": {
          "ref": "7097bbff-057a-4793-ac71-2bd03fecc6f5",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fbd26c75-46bd-4cd7-9c4f-c888a606b1ef"
        },
        "item": {
          "id": "d30dcd6f-1494-4b2a-9381-9329e7993e04",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "81c56e7a-6721-446f-87b8-c29e015d2fca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b876b3-b52c-4362-b721-34f04a43dca3",
        "cursor": {
          "ref": "5a7df53e-91c6-4745-9770-0b096108bdd3",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "28e15295-43c4-4a3c-b476-368fc101dcdd"
        },
        "item": {
          "id": "84b876b3-b52c-4362-b721-34f04a43dca3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "429efb25-aaa3-415d-bc30-a4cd54072ded",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}