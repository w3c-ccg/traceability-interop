{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "040ba609-7c48-47c9-b2e8-aece81afce8b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "28e30a45-cde6-40ef-962b-612b2b67e375",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8b897323-dcf5-4945-9581-282af7a4398b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d1433af6-9796-4594-ad76-29b1f3c35cdd"
                }
              }
            ]
          },
          {
            "id": "f6caa068-6486-4b7c-a92e-eeef7d983ad2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "643f77d5-7f05-4d51-b14d-f0125735178f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5e362c93-a7be-44d4-a38c-c3e5e4bccd64"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "00200749-31f8-4cd1-b732-eff0c3194609",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "eaa5af09-93f1-4b6b-8e4f-bbee882ab1f8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e23eb4d4-073a-4b30-85e8-f065ef238ead",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "556473ee-a372-41d0-9334-1489d200426f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "99d8a2d6-f73c-4147-995a-0a32653621de"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "49c4de01-f845-480c-b31f-f60e50f818da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db084e8d-29bd-496e-9316-400a62cf94c2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f9244519-1c0f-41b8-bc32-2196178717bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd7cb961-01c1-4a0d-8813-8f456466a272"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "036701b8-dd93-4b6c-9faf-0c20b7f2d832",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cacebff0-075c-4e83-8815-e0b7fb3f397b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df1b2409-348e-4f3c-b561-8760639c7f2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30cfb3ba-c0f0-44a0-9475-832efb778b5e"
            }
          }
        ]
      },
      {
        "id": "5a49a327-e38b-46ab-8deb-3f7e854744e4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a87b84a7-3f93-4c4e-9f59-1a96e0efe79e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bbba9294-0727-439f-b0d5-8b79aba799ef",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "904b2482-f87c-4be8-834f-5a3836cbee7c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a925e3-9cb5-4d2b-9845-409b408ef651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c047397-19bf-4f87-89e4-2ddd9585c3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9ac1d8-2306-4b86-bf5e-a60c6a47ad72",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec651223-6f15-4a23-abad-be78c0c2b112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74ccc521-565b-4116-a0f9-b5409c612d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6180661a-d41d-46f4-b7d8-30bf5243de46",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f243e53-82e2-446d-baa3-be1623dc0a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2be355d3-5010-4477-a389-b18f69792f09"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7153ea13-64a7-43cd-8f94-245e855115f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "772c1f4c-ee57-4d4a-95de-824b8bb20531",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d5a9f0-0cc1-417b-bdf4-b85b9f8c843d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4db49cb4-b529-439b-8ded-9d4c7321333f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6da9e4-992e-4511-bf19-d2e2cb8b6a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3099c39f-e994-4a1a-84f3-33e823ead158"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5e1eae8a-db92-4138-b583-bddc66c60232",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5821484a-790f-4b5b-a725-a995292a156f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ea31c48-deaf-4912-ba51-ab55cc6cc7e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2086e4e7-173d-4c47-9a31-10e06439406c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90d3fdf5-58c3-4d8a-9097-d42addc0fd57",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5cebdcf0-8fcc-4b31-a4bb-7f1003bd1d23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2421487a-32b8-4fff-b88c-da2f45eb5532",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b18a8776-aacf-4cfa-828f-57e300642cf6"
            }
          }
        ]
      },
      {
        "id": "ac9a1d33-508d-4a30-87a1-adc0a8b04e5f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2629901e-bc81-49d0-9657-c29bfd3686b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d28a107-5257-4f66-b52c-e5e50ed9d883",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "05e3d49b-c40d-4e85-87a6-6da8a6b94714",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cd3036-9fab-4e0f-a9be-b57889f744fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27404698-3b84-46db-b230-111210d69761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c40eea-66b9-4b50-8b7b-7195c77d5e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "176ba58a-52f3-422b-9cf3-d10f5883533d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cfc053-154e-4c55-90e3-32f4fb93d075",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bf3e39-9045-4f47-924c-47deb601bccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a5468f-cca4-439f-865f-92861dc1f331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112b294a-41f2-4074-a1ea-8e7be8b29716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b24f6241-4a1f-49b7-b971-298be53cfbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f6c9c8-67fa-4a61-8652-3d14fe451724",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd99fc35-fcfd-48a2-b974-c19cdda9c59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea28da24-dcff-4c69-96ba-26444c9b7866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738ba61b-9639-44c8-84e5-d09ce323f2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98b9f7f5-503c-4045-906d-fa3081193480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfcccb0-4d16-4372-b4e5-d039dc96d4ee",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56e7610-86be-4c88-8b85-4f29689ff300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1fed40-f837-44a1-883d-c30c3f4d907d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d67c24-a6f8-495b-8b22-f56df965faee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79902f1c-d53e-446a-8345-11e86ec824bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6892a733-3b13-42a3-a286-ba8b21550a9d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b01ddc-9262-46f9-b7b8-df75707e3f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90af0ed-2ad9-4877-86f1-9c73187c2b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138781c2-5303-4b0c-8b39-d17b4d8f7cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70072648-8505-4233-bfce-7640d85a6aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d4c652-c1b2-462d-84e8-7caa45080a08",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43b7243-6cde-4c60-8813-531ecc8d940d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a3880f-d4c2-4b0d-8504-515c178bf862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88226371-ce1a-4a85-aee7-09e4f865f446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82d3de6b-3880-4c18-85fb-7d50f647e555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d2da91-9df4-4cb9-8fd2-c57871aefdf2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6acdf2-9b4d-415b-a5d5-aad359d3d4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1dbf88-4777-4073-a450-a1de11e86b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cd7efc-f429-4b9a-9af0-507ecc979000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "343c0371-5fac-4f2d-8657-7f83977ea2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3884f64-d197-4320-a2c0-bb02178f3b92",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b772d8-459a-40cd-83ff-5a1df368703d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f148bf70-3995-4058-8498-4a4022877b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993a921f-fe69-4915-9d00-5989cf6b19a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ca21c12-6935-4de8-94f1-abd78e3da106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03880389-2d38-41da-bb9a-a09c24d79e44",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f57898-ee0d-476b-942a-e6211eda8501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5717430b-dca9-4ea7-8aa0-a6eecf706308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259bc93f-2ff2-4790-beb0-197c97528028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30233be2-d60b-4f76-a18c-8f242ba3fb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83df4dac-0edf-450e-ad60-f0cb3fe950ca",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b641d068-78d1-45f2-928f-7cbbe59208a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3fb991-89ac-4921-828b-1458fac9608a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5e3b1a-3592-4450-a792-7fcc5cc27559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "141e2119-fde2-4cc4-9d3c-f6fa9c5d0280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489fa34f-73d5-4b4f-9cef-1d1966695f46",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288bceec-c159-4aa8-8d43-e58243471241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5468f42-3c9b-4b95-8180-0014f20311f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d16a3d-39c9-41e3-bda6-5676b5b3d1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c598e71-2f4e-45fa-b924-94583714b7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e38786-b4ae-4642-83f5-0f6c36bed6ed",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee90de8f-bd07-485b-a4b9-6913b3d4451a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20b9038-58c6-4bb7-836f-c0118d42a8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b523a24-9c3f-4c7f-bbbe-630d467d59ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2532f911-d9fd-4376-9304-ca609fcae3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5804962e-6d54-433b-8b31-c6ae515100eb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f554785-d21e-4f5f-b64c-06516fc490c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df786835-7c32-4f2c-aa35-968f3b7c76e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daeb2f81-54d1-4dc7-9b60-93c43ecd9614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f5224b8-1c72-4ef3-abff-6121f4c47036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb9a646-d297-4780-b4c8-f113a1e364c5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71956ef8-42f0-4c59-9f9b-371d873da4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f21793-bb7b-4065-ab3b-e33baef055ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5331bc4a-2161-4b48-886c-83eaf8e46e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccd2e7e0-780e-4771-a80d-7c312f486ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e015323-03aa-4fc9-8029-5b1bdb37c86c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86936259-9487-4d44-b120-e0e5d9e2945c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6853fb37-15ba-4155-b1f8-22a6ca2bbdf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1448d1e-641a-4287-9b54-ef4f9d9fbf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83c9d467-d26d-4091-8d5e-6ba4909663e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c0c38c-a086-41fa-af23-712b567ded2e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9726e0-5e30-48a8-9bc2-b6b55f162d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f29c6bfa-88b2-43f8-8b62-cc0376ee14d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad211dd-352a-4ca5-a019-951fdaf35b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45d2e5b8-9164-48a1-90fa-dded03df197f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddc481a-4079-40a3-b39d-e57e0adb28ea",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432b5a21-6d4e-4be4-b301-883b77a46aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5245050-b488-4fb1-bb09-341c4f0df90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb48c2d-68d1-4c7a-b3d3-5e0250a5c223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13e708ba-9f59-4fd7-9441-bbc2b7ae80b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb66034-3467-4dc3-a8fc-5c3bad0efcdc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6698936-56af-48df-8e2c-07322cefaee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f7bd06-0810-4672-bddd-96fb56f3ec13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b76210e-b686-4833-b915-c51bc7e00d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "784e857a-0b96-41fb-833a-bbcb78e08238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1249a74-65d7-4ebc-b2df-d6405f61dee6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35593ec-f5c7-4de6-a706-f83f548317a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3fe7f4-3148-49ff-b2e0-219b0f6be5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebeb14b-4b82-4bb7-b349-18eb445a8a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b0f714-48ea-4727-8246-cf0c74727fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d1ae3a-b7fe-4df1-a297-647fe900a0b8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d87ba24-27f7-435e-be0c-d926efe9090a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3496dd6e-9536-4838-b109-75df6f7fbe4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915d538e-e9bc-4231-9f3f-81db4afcfa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de1c0845-42a4-41bf-82d7-b5480f2ab651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcfe18a8-207e-4eb0-9697-823e09eea757",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79322773-eee0-46da-be71-4bf1220810c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f086c95c-6761-45ec-9837-606bb1be0e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b81e049-24bb-4c96-bab1-bfe495d7e9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fef1a892-97d8-4d93-aa2e-61f2eba67f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d046adb-ec5b-4064-811e-128c4ac8f36e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c277ea3-36c8-4d5d-90c4-db7fa73d5eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e6665b-f3e9-47f6-8fb6-0e797ed366c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d55f8a-75a3-4456-aac6-0da02a32018c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0109246c-d163-438b-b595-89c1aa5e05ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af079338-2eab-4331-8588-3132e7a67b2d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcd2fa2-1e0d-47a4-b8fa-72f41ea3ee44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751616d5-290b-45c0-aa98-9d0859d4f2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acaad785-e47f-418a-b230-c9d30949102e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3bae5c-219e-49b8-9e0f-6b5dfbe6190b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e457961-0bcc-43b2-a4dd-e00fb62722f6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0964e084-8987-47b2-ba81-abd94ad26d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cd773da-73a2-48cd-bd2c-087e2ffd3b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc0a3ce-6b4b-48d3-be08-c4effcb0aef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e862cb57-5da7-42ef-909b-c071cfdcef01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6706b34f-3611-4a58-91ac-609e6517fff7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d91a517-1fa4-4efb-9e74-24396960873d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9c4844-0231-4b76-adbd-bc2742061b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96916867-6678-4706-8155-167f84259601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c21d9ebf-1199-47d9-a656-fb2e3326842c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df0a01e-1a3c-44a5-8822-a1903bab71df",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74b9566-1e8e-41e6-95e2-8deaeb94705c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963a45d1-a4bb-4022-81aa-123c7026ac42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c6c5e3-2c60-4362-b98f-7e3dea5442fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e34e5701-4400-4413-8f7a-7b7f44d7e621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c452785-14d1-42cc-95d5-fde95ebfb432",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67b1eb0-c6a8-4ed6-ba34-d5bcf4e14ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a12bdcf-9154-4780-a57d-297c6e3dba5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6065e3-2e4c-42fa-9af8-3d0fdfe79483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff313f47-0b26-413c-96b7-9bef23c4bfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21666914-eedd-423e-a3a7-9e7d0faaaec2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b88158-8d90-4423-9f3b-6d64698dae0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e06179-2a22-496d-9929-7132f61c63bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0200146f-a7aa-4af6-b007-4647d22d4758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8ae6fb-a2d3-48dd-a5b4-2d10d926fa90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc82902-7c7d-4878-9b53-ec24e10615ba",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472c2bde-ab74-44f1-9dba-0ee5fbf8a541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5849152d-104a-4823-8f80-5bcde5c87e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a4e14f-f764-4588-ace6-f4a4e73babf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72930b11-d8e9-4608-9e7c-3060c45795bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091b5708-0c3b-406d-8ce5-f808ac80f88a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe6d798-d40f-4492-a863-173009a44cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7828318-6c37-4d62-bce1-844fbb870260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d885c7-f861-413d-bcf3-10cdd8bda3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0981ea69-ef28-4fc5-9759-ebda219d5018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf11343c-afb4-44a4-9063-369b2c48b193",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c71cdf-f10d-4ccf-bd73-fc72b3357715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e76be6-cfe3-4ef5-a44a-5930ebec66fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40aab916-f7a5-4d9e-a765-8a355588f3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f241a5d4-be95-4b1d-bb62-748ac409e8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610e19d7-f358-4551-90eb-164fe09b42f1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2286a78-d7cb-40ca-bf78-d66b898d936b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3466ac44-714f-4b88-aeb2-f1fc6755b302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603dabd9-6c06-4be6-ad86-366b671b6508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00a4ad19-d20a-4e3b-96c3-b676c6dd1e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31819426-2750-4a68-a853-f11e2c450c0e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60876091-817f-47cc-9269-21281c01b77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb660edc-0603-4854-9ecc-2cead59ccd8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca91783-ab30-456c-9176-dcd9aed46ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "684b5f64-c1b3-4dec-8fd5-6e1ed234018e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf60bbd-1fe2-4a24-bf93-67b23e749857",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cea15a8-b0fa-4248-a87d-5db674564f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7ba94d-4156-4daf-a63e-024a1ed38c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6601168a-431b-424d-919e-3b51aea551d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "374aef94-8733-4ac1-989c-2d9da563ad0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005d5eeb-4a6c-4add-a34d-1706b45442be",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bca3527-a4d5-4e44-adc4-c2cb45cc5c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1368a0-9fb2-4550-a85a-e072c978d61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b7b4b7-9603-4c8a-9651-43f589476d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "436e8d71-f2b5-4ee1-8878-3bf8b11a600d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3391cf-8246-4994-9752-1cfa27a00076",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267590a5-5335-49a2-845e-1e6a7abb0dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5c8ce4f-404e-4e98-9410-e1404eecd1e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5511b6-cd5f-433d-87f9-33fa8fcad230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd96236-3114-4083-ada0-bc4b4e46ea46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45918540-6b75-4735-a8a2-792e64dc7045",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc695f35-d168-416e-a65e-6bd3ae86b104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbd5134-a519-4dc3-b426-c02bc3f3a595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61ac0c6-d6bd-417f-8f4c-f865fb0f8ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "305749fd-9443-4dc5-899a-fd7ddcb6075c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b307e3fb-c289-4959-a9a8-b361f3eb8e09",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c56c6e8-6db3-48e6-bd00-71f17c0628ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcac7cc1-fdfd-4795-833f-84d40b4ba269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da56dc5d-6b48-4164-a822-db55a4063faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0673aaf0-aaed-4af8-aa38-f903bbb32103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b84e2fa-fbfe-43d0-91d5-3d0b0589a9eb",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c299a15f-b94f-400a-b0ea-ba0908cc25cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e189b325-dd4a-43dd-9097-9d93f9ec23d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2c9a00-0592-4a14-96d1-47394a536008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "74b51b6c-42bd-4dd4-94bf-4d473da79438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4760e2cb-05ad-49d2-9343-d95d6c352341",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5decd4-461a-4cab-98dd-aa29e6928fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6de6937-b039-4871-bd48-25fc4f2d9ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb47e320-fe84-42c8-81e6-94b8c0d9c476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "42c03940-193c-45ad-a3cb-bd975488507a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb77aadc-c37f-4800-ad7b-9271659df462",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3092cdd9-8c29-4168-9367-47b6af6c9c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58fe79e8-be10-4b41-9677-615a5ebb894b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c84b7b-227f-41f8-9135-399f70f66a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c62c75-5d22-4346-8db8-5c6f01eb55cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d7213e-b066-4d60-84f1-f4c7aaba9b47",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f1c930-1f43-48fd-a57c-848f4677d91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ec4367-9b3a-4ecf-84f8-2b6b2d93a574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a55953b-84ab-4bc8-bd47-a022727415a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3cb00b-3fb7-4cb4-98c4-c3e433d55e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034acd51-819f-42f3-839f-818722e97f53",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251aa8b0-d05e-4e2c-9331-7d8ea5958398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7602eb64-4a5c-447f-8275-65ac78f91334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35365253-2ae7-4345-a562-637c35172b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6f16f6-ec81-47c1-b357-cd842f6f892e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6098d94d-fc4c-43f2-8bab-ff187c9efe8d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfcf1978-04d2-4f42-a1b6-2bed113a7e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982d59a4-30fa-49fc-a897-c8335b56818e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5af6b1-ca2a-4b0e-be8d-709d52c95599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3156a17-eb9d-468e-8c49-2bc10e3ede82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1bac23-7de9-4ac9-a96b-d9e5d8f4eec2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b3825e-2e61-4422-9cc2-6182a6d5f6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c538517-8197-4c7e-ae82-c4464cec19ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6972069c-adc6-4809-8b3d-beacbc5f0bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "633325ae-ec4f-4c3e-9acf-d7d5056b2bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34312f7-9ab7-4664-ac62-6fe98be4e363",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59036a9a-4001-4886-8d6f-0567df2d313b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e3760d-6f37-4c90-a052-112d76b6a1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e595a8-0151-4ccc-802e-cb5ce36d8bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c56f41d-6ff8-4d30-941b-ef531b64b3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fda15a4-975f-4304-b464-aee8c49872dd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5720ff8-b2cb-4f6f-8af6-661d53b5b020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1793433e-a99c-4a3f-afd3-167aba3b04e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c882d59-c51d-4bd6-af19-9d5e13be59d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f311194-3c53-4a37-9499-7e87cea6fbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2434e3-4a73-4bdb-89ed-5c1c123ea35a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f436d47-4243-4a7b-88bc-885bd13c9694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e68113d-0489-419c-ae85-113c19a569a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cf78bb-6382-4c5b-bb90-8333d6e78caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e723c901-5c6d-494a-a6ac-0a4f96f2907b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77e4d7b-463a-422b-af99-a75157eb8620",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60d6c23-a0f0-4347-920a-d80e61acd484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530889a0-ed8a-4685-95e4-ba25bae7f324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef420faf-4507-4a75-a839-04b0e71f9e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c624d837-efac-4dd1-b664-53bbc05df718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f53bde-fd63-4788-bf9b-c3b6e7c7146a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5935caf8-f917-4224-9186-323237fe6d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c9fc73-f869-4e90-af89-96d4d7c96d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c6d2bc-5863-4fc6-bb86-260e0fe0e7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c91f3bf8-2976-4615-9f09-595b5753e50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e4eb8c-d273-4bf0-94a5-4954594cd9fe",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1923c0b8-13c7-4840-81c5-148a6496b669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055ef51c-60eb-4104-91ab-b9ee7925b21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb506c32-fe26-4aaa-9b29-89d1e6bceed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9b36184-b1ec-4b94-8b78-89e8098bc912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d305b3b4-e221-4957-82d9-3d77fb301b9c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06332cec-a8c4-4ba3-86da-f9f140671f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857fd616-f748-4b3e-8613-c07747f721ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77a8b62-ae61-4351-98ef-60617c886a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53eed2f5-d629-4643-8dbb-f9ef29b7b603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e558b19-eb51-4dbf-9299-2da8a49da271",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9910de30-6149-4e3a-bc17-e31bf872b843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7925bac-d0c2-489c-ba54-af8eadab4a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8b5474-5acb-4700-9c81-3d1c0b2662f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b6246c-2570-427e-8b9d-36fa009b2f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2cfee1-8781-44ba-8984-cf4612dd4b58",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348e412d-bfec-4f03-bc7a-5795319c6880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a45d757-5b21-4e90-83e0-614710822707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a668011-b7ef-4450-b808-b5c0bd08742b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34df6840-a4df-4d54-8463-a6122a572fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bba5c80-cbb2-4542-aaff-0ec5370bf8e1",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1bdd2f-3e86-425f-86a1-f3baddbb0020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a20598-97ee-41bb-a804-eef9938a1786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389969fb-6bf5-42a6-a84e-84ae03662b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5427c521-e2cf-4ded-8bcc-c2c3860e0976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7c13cf-b6be-4486-84df-d8f50701ecb5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e77fa0-4451-4aaf-a35d-eb92d113fac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adebbe93-b445-4332-be74-c0c71c075216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e7bf82-b052-4a58-8cc5-f5e4161a9d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "304b4a39-4dd7-4979-8df6-59a9d0130b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d79ece-152c-4ce6-9e30-14d8a4b26cd2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6fd0dc-fa76-4feb-969b-44b3d37151cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5699ec17-d8e3-44eb-bee6-cda0953df57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0346e2e-39f5-48f5-a201-d0f15fc9234f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "61f237cc-ee8f-4c0e-8b00-fce83c0927aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd22e32-54e7-47d2-a71d-9c866f34107f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfeaa83c-9103-4835-9988-4c4fbbf666f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff60de0-5379-4647-af55-966d766dddda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55866667-984e-40b7-920e-c952dcdbc27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "207796aa-86ef-4cce-9c79-18148f040ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61052ea3-60aa-49e1-8f65-0a35dca08f0f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912bf301-2527-46bb-ae36-265c67875cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d4f7cb-9d64-42e9-91f9-a566a8018b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d29f92e-c7a6-419d-b767-eb4090482fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "38b28517-5f71-41a8-81b8-5b94715e1e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffd1794-3c0e-443a-8e18-5ff043bd7edb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f224db8e-dcc7-4e45-9f68-9d47e8b831fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baaac258-5c35-4061-860b-a2c57458c923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044777f0-268b-449c-95dc-d5876c2acd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5554837f-6a2d-4343-a6b6-d9a310452cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8811cfd-eadd-452c-9fbe-ea3085c170e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b00a2c7-4456-4a40-9a07-766acf4abf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ed7f3d-700a-4fc7-a0ca-09573d1df5ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5db6d9-0d42-4119-a6a0-8554077c7477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a7f51a8-0713-4c02-97a2-a04cf141b5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a781bbd0-8409-423e-ad7c-ad2273250f3c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1326cee8-9fbd-41a7-bdfa-96d6b032258f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b0c085-51ad-4ec9-8892-e6bcc6e1a20b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75e5dff-5d97-4f59-8ad7-4cf13d57c577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "344dd95b-64b0-486e-84ce-bbb8b4aab107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89fd888-b235-4105-9743-0d22df984426",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a393a0-d790-4d60-8a0c-5a06e5410eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e737863e-c4bd-4967-97e9-ff49c9a65a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1906d6d2-8a1c-4b41-a704-60043ba52f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5388019-0c44-43bb-bb92-3998613b6bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643b2839-a911-45e2-bf2b-94e1fc7c9037",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e0d046-ad7c-46b5-b418-cad737ed229c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ce6240-8b5c-476a-a9c4-73bf7e84d7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0abddf8-177d-4d62-9b0f-802cc6db55ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "001c7c04-5bd7-43f0-863f-18af8e8a5df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c656530f-1195-48ec-9b62-2723c34e6776",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded43cc9-aeb9-4711-8208-556f4ec7b326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0fd10e-9a9a-4f52-9176-c924296b4541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2906f9d0-382f-4731-a457-f55d7f77c5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e78c17-3e04-4529-a123-0a6218a18b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff2bdd6-d497-4aaa-9f62-1c2e72e9a3ec",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3dcd85-1e9b-4029-a03a-377bba85e63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0049c9-7f7f-4063-8743-4421b43ac393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91f0e30-ea3a-4608-ae8b-fe2290004b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7944bdd8-198a-435c-ab6a-810f5df3792f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2eb0e6e-7de4-4047-ac2d-a3052074cb0b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8edd970-6db1-4148-a33e-75efdc7ff3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "593efc34-18a2-4324-a636-07643bf9c232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346d80f2-ce51-4122-9b57-c2fb80f22a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d7ed70-13f8-47e1-b441-80cb49df3ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9577592e-ac8e-49fd-9945-4db3dd53ab89",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b138b538-6cf4-4824-80b4-1911f19afdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1678f86-a830-4297-8898-18d6ebf304b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d32a198-841c-4968-9030-2b989f882791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "585091ff-4970-4228-99ea-71f80fe18997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830d3830-ea7e-4e8b-872e-fc4a7fc0f746",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e0ddc7-317d-4744-af26-83876348e869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c939c423-0bb4-4e8c-9e76-20fb8d9e1751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6e731d-f0ef-4e73-a795-024a0d586226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c629069-1a8b-4996-a498-322ceff8a39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd74918-9768-4359-af53-c73657887ade",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd0aa27-cfa3-44c7-a669-c4300a6264dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e07f3e99-453d-47df-ba5f-f394b08f2af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be318b64-163f-41d3-b21d-368e0059507b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15cdbde2-d2fe-4fdb-a120-fda730d11fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b628ebc3-3c96-4992-915d-853e615a6c7e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de0d638-ab18-4afb-82e8-ec87f3b5ddb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be51a4c5-75ca-40a5-9141-b05a9211ed05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74c643b-138d-43da-87df-757c7001103e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d51d8972-9e3f-460d-bca5-f179840f0a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0048a3-147b-49cd-8f53-283a7a9b608c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a96e38-d3c5-49ab-9546-4a0bbad00f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e992e57c-29ba-4f22-a07f-84937da1bd50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfbb24bf-e3f3-41b7-9985-bb9b51634231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ced03a74-783c-42f1-bca3-eee3d31eba31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd43731e-8deb-4a96-bf20-05031424edcd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0fc0fe-1485-4e96-9f9a-82c99db25da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f207d63-cbde-4812-8711-f4c19dba6e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba678e3-0b31-422a-9814-1c5cc1792354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e834142b-fc37-4ebc-ad82-ab439885b950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc038e6-5b9f-4b4d-92a1-ba1d1af3eb6d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55797a3-b0a3-42c2-bb50-2df3b4e55931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7403700c-8896-42ca-b183-0236261a3d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53eb055e-875a-4e2a-9592-525920f5711d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd51aa4-03c1-4c5b-87d4-efaf77520318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440500b4-4783-4117-972f-6929627bcc40",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad43198-89a8-4ee8-b66d-ddc48b13d81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73018f0-c54b-41d7-ae85-6822307ff30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c959f84b-67e1-43e1-80b6-7b272d2e4c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc8d67b-d6d7-46ba-b0cd-1e385fa5212c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c866436-ca3a-440f-b32a-7300ce8a5f74",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fc0fd3-39ca-4694-a0ee-ca1a4c489881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3866ff-68ab-4cff-95c0-402e7d46a4a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84400de7-dd70-413e-8393-80a0add95680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98634f92-4b76-421e-a2e7-5c9a97dc8630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b006dd-95f5-41aa-a580-d3a6bba0356e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef77fb4-e10c-4a76-986f-c3aff261426a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0c8cbc-b569-4b6a-a08d-36fa8abbff3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a547a2c2-6453-4698-a198-57f8d0e206fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "588e8d28-4903-445f-97af-85d10b18f204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb5f633-73c2-4eae-80a6-4a28dcdeee75",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469cf4bd-2a0e-4cb6-8adb-27a538dbf411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75314c4-fe4d-4e67-8e38-87be301018b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeeb0a72-827c-4ac6-ac1b-7a93d6b46a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "494da1a2-9c84-4b42-8771-5b5b3b7b0760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7199bd-c0f6-4660-985a-af17264304c9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8336385a-868b-4aa4-b720-e4fb2a49d14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c35990-a95d-45b1-9d0e-442c0cb224c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0c281c-b53e-41ba-aea6-4fc7d61f8dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55d10aae-7541-44d9-9ada-1525b1165d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f13fb0-d712-46d0-a371-d7f17f7fee88",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee258db5-efe7-4977-8596-e0b90ac6d78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff01dcab-16f1-4ad8-8ad3-330940fbfcd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83afd21-b04a-4636-9741-beb37cc3951c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f24be03f-9f4a-4583-b212-d78454d3d9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409faa4d-a12b-472c-a8da-8d7c65ca446e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0fc6aa-985b-48c1-908a-a311a2b32e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2841c49a-98e0-46b7-942b-9d3170b26857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f3941d-2465-4b18-a2b6-1731d6d36e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf422729-96a2-46a3-8f14-f8104c8b97bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac3570a-8d53-420a-b5c9-8c7f0a3e11d5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d5c5f9-02f2-4784-b8e1-a18770c3dabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d296e86-db27-4c3a-9b4b-f9ed32333374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a17bd00-33cf-425a-8c19-f7496f0afdf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5abf337b-e101-4dd8-b510-0b4a83e2bf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea0132d-dcdc-4b9a-919c-d35704d9daae",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04772179-c642-45ad-a5a6-8f0fa7bb1da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b97334e-2411-4d6c-a574-15d6f06ec837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66a773b-84d7-4ef2-9825-16e69d6361c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "231f3c9f-dde5-4584-8f9c-0463327e2680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33bbe9a4-24de-46c1-819b-f27becb44211",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf8fbba-ed13-4558-9070-ab02ea4663a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8a5ffe-01aa-4bf5-aa30-2aa545413401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebc19e9-1240-4421-94b4-fa42e329590c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7556fe86-a308-4ff6-97a8-edb7ac1f5ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b531f826-4034-4993-bd9c-6515760a9ada",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f70a43c-14df-4faf-ab84-e0edd2822c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a06858-feac-401a-99ef-b396cf25f582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097a4a9d-b321-46a4-9ed9-5c0eac44ee74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14f60a7d-02af-4774-ab08-23e8e2f1e1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57e5ee9-f6c8-4093-8f7a-d04f527e40cf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b32e108-9f91-4843-802b-4976c1903e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8692ff7a-718e-40d6-ac69-227f5bc9852c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a4e0d7-6c03-462e-998d-4ccd5a7349c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f77f966b-f5cd-4819-a716-611e42e9e520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83325297-c1dc-4918-8a26-2757a6cd4a59",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540acd18-9a60-436f-a380-234567902105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b9fb28-3176-4470-9160-3027542bc44e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ce6a1d-2299-4429-af22-ef362714073d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ebbd46-997a-4b59-82da-22c63d2cd741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f618b0d-9dc0-41bd-b6a5-b1b45813409c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df89b576-7bd7-498e-95a8-df135cef796e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1033317-6aee-4cf3-8186-abf2f2946839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f664255-500a-40cf-804f-74c8d4e24975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e107a7f-6180-4a6c-81bf-379570ab53e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a925fd-b87c-43e1-be7c-5fb8c3b31b2c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeae5ef2-135d-4e9f-bc27-e4c1824f0212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da71e81-39c9-46cf-8050-f878646b13c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09572dc-211f-4a2a-828a-79a38e82660b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "216ba06b-4dec-46c1-9a50-f628f7664332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd627f5f-04b1-471e-877f-bfe4ecbb10ce",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da01196-d3b3-4963-b30c-fc26dd59a05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75894582-5676-4b6d-a5cf-b81d8bd8550c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf4ea14-3ec2-4996-a2cb-02a63929141f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d46e68ba-d4f9-4b27-a322-a2fb04793328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3dbede8-5d14-433b-a836-c1967afb088a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e3b7a7-e6c6-47ba-952f-4080b00fd76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac842dc-8e6c-440b-8162-fe86baa79652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac85e63-a4eb-4523-911d-047e197a9f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "611afa8c-cef4-4c90-840e-10c352a89720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67474f8-a5b6-42dc-989a-b00c27a91331",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ae722d-10c0-4ed1-a9b8-51912cb0d639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7c7db1d0-5f08-4cfc-8dd1-d08017997142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2572ffe0-fd1e-453c-bed4-3711ee58ae38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a04019c-a2e9-43ff-afbc-afca328212fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bfb6c6e4-94d6-45a2-80d5-9b664e50078a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f9620b5-8ff2-41ea-a2de-88d901e6343b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1af197-adfc-4120-b826-4e5800c55f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c2537ec-6be0-4ba9-ad7b-8a13524574a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180f0fa3-79c2-4e60-b402-942427b07e1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0121590d-860c-4ce7-bb60-b1fe7f434ee1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6eb65a94-5322-458e-b931-cc54e3aa3997",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e9053d9-b818-4e80-8ab4-624580d6b3e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33297507-db75-4f08-855b-58854a448730",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "010a3415-e37b-4288-ba0a-7e3d9d30297a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8696125-37ce-4a1a-984c-e83bc8d10ce0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee86a0b2-01c3-4433-a3f0-67fde26ddfc0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dee3640e-91c9-4204-a2e9-3cdbb7c78245",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b37cbd7-7168-42c8-9531-bc41fbe1842b"
                }
              }
            ]
          },
          {
            "id": "53071ddd-9fd7-4127-ba58-ebbc2e2504ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3c1169ed-9d1b-4638-b903-75dc84712681",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9f1bd91-9841-4c78-8b40-7bc2b10edfaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94d03ad1-ab28-420b-b407-d3b59e3833de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4b41f8f-1621-43cc-a1e7-d61b974845ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c2f62d4b-7c6f-4919-b88e-01e001994f48"
                    }
                  }
                ]
              },
              {
                "id": "339a8370-6916-4146-bf97-878d2a027fc5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b06bd80c-0b51-40f2-b991-0e42727e6ff3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4de013a2-e827-4156-abcc-aed6de0a2252"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a451060f-54b8-4968-856d-f1e4c926206d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "526543ca-ddac-44c6-8e81-59259d40931e"
                    }
                  }
                ]
              },
              {
                "id": "d30a9201-fef6-485d-9f1f-46018a1914dd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c29f654d-b9d5-4460-b072-f62e80cafb58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7732cb0c-ecdf-41ae-afef-594fe79e0654"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "548dddd3-0032-4dc8-8236-6f9c1e49aa94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8b30b47-d5b3-49b4-8f79-6aa4036da37e"
                    }
                  }
                ]
              },
              {
                "id": "23550554-6902-4871-b9b5-26e349f521c9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fc9d5e1-a370-46cb-965d-0d7e92d9a7e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "899ceaf8-921d-48ce-9c41-23e18da2da5a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ec545b6-7788-4f02-8052-ae1c52d8114b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "970e29be-dd92-493e-acd3-f1c78602c4ad"
                    }
                  }
                ]
              },
              {
                "id": "d3a4a7bd-e808-41c1-ae7f-4d0a7ea4fd2f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7566cb4d-d81d-4045-a215-4dafe02f6be8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb603426-8907-401a-9847-67d9a0b07e82"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dda0c8a0-af2c-4b07-804c-fa8dc7382c06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "88b99a05-f109-49b6-ab8b-7d89706442be"
                    }
                  }
                ]
              },
              {
                "id": "8b76fa71-fed3-4030-9ca6-4012864abe9b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4523ecf8-3dbf-4112-a060-6f088cb43eed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "311d85ec-f728-4e89-bcf2-b9fa8810f983"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99fbb660-eb18-4516-9982-6a82b1b728f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6ea2c623-dfb3-445a-9c29-8c5dd68892ce"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3c2c95f2-ed72-4ee5-b4b8-2d3df32b8748",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eee86b5a-80e2-4e26-ba4a-78fe9a6501ab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "25308786-4e95-448e-a564-65ea12340180",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b5d16019-a99d-4818-84a9-136210b94bf3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a48d8864-9699-401f-a1b4-07261fe34d09",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6969ac39-ec23-42cc-968c-cbd0a675ca80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "430d5268-9859-4c96-8ecb-9018e27f787b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "618f00c8-4708-420f-b3bb-29f9ad4c56f9"
            }
          }
        ]
      },
      {
        "id": "6b4162b9-2df1-46e6-9d10-960755ff141e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "489228fd-b6cc-4ca1-9f04-13a48001de36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e05a899e-5cf3-4677-b452-42c8815ee487",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ed44ee98-d771-4e0f-ab7e-29e13e1d004c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a6657e-f879-489c-a5f5-a8683f4f2e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f17341a-d7e2-4545-8064-31cf67567f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75d5c96-4931-4345-ba22-1472ffbac8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f92dae93-6fbe-4123-8f9a-0c9a79a95bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119c3424-cb1d-4252-bfba-e29535213667",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0742f0e0-fe86-404c-8211-7a7bb6fa707a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1abd126c-830b-4b5e-976c-9799f7ef9a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887b8286-cc11-490c-9f24-2c6d86e45c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea97c95d-69ee-4a14-a627-83ba6e606234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b193737-9f77-4023-95e9-b802fe974990",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b89aaa-88d0-4edb-bcd6-5d713eb910aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d981d385-a00c-4d4a-b33a-f694e98d79b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cea532-d5f7-44d1-bb36-db472766d6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1dcec4-52e3-4fd7-969e-e343022e40a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b051fe-e4e1-4cbb-a578-30187dac0db4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5788b0f4-74c5-4326-a9bf-8eb5d4cb6298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ad200c-f8ee-41e5-881e-8e06b9b17e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a1f720-5164-4bec-aea1-80ac38948cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a858ee8-4057-4a14-a8a2-d80f576066d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d161ac1f-a4b1-41c5-b194-4f3559a0e76e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13801f12-f308-424f-bf9d-a2291a911ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1516f0-5d07-415f-b07c-f3a88bd7f611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c380484-9d74-4619-870b-c00f3a10d72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4829903-f951-46e4-b05e-962755ac449c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10acda3d-fbc9-408b-811b-50d83689815d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf14b4dc-62e8-472c-9fb7-2213d08e51ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fa1463-840e-413e-b39b-9bf78cacdeb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7213f607-2e2f-4318-bfd4-813de4a07a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b650675-52c1-4ac0-ab96-a5d07788900c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70dcec7-b4e9-4ed4-a2da-32b6050bd664",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71690d96-6716-4a67-9047-5dfe5c517179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052a9b27-e554-4cec-b3b9-a7b3fbdda03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af2037f-c3f7-4659-9d8a-80a377097ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4928fa0-36aa-4c3c-9427-82980dc99927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d57d536-bd7a-4bb0-99c3-94cc06e7d82a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd15f46-0960-47d7-8397-03c9388b131f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e7a7bba-b359-4efa-9627-dd0bf197b09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf0bfc2-8e95-4682-96c3-41a78f0cecd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94e3caf1-df09-4e79-ab45-4a67e0a1babd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef01372b-6691-4cb4-b736-65bcc793a999",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cf15d8-565c-42b9-b480-ffda5e37a18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40fedd8-cc19-455d-9abc-abd94de98a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d27e0c-3c0d-4d79-85d8-2669f97287d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd852cad-8c25-444c-b10b-da329922efb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3b1f1e-a127-46e8-9dc5-d6cfdd4a7684",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798f230f-51d1-4e13-8366-af0d336cf31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d232f76-6872-4459-a8bb-fa739c90b3ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cee791a-1ac8-4148-9e4c-8b6c9a795e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0f3c48-6626-4018-b4f3-fedeb0de63f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e46031-cf49-4907-8697-6bc35d4043b7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9eb1839-5105-44be-b2ec-ee4284c8b966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63fe9d2f-e549-4a52-98bc-6dba9a31ab33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab46546-b8d4-4d45-81a8-e23a3a708b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3fa608-4c82-4a87-9754-400bdb3e310c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5a7f37-d6c0-4516-be46-b78bb11869d6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6cacd9-0f91-47b5-9d6a-ebe5acbe624c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35d9942-2ed4-41d3-b115-47939329cc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ecbcbd-ea21-4378-830a-94d2f938b253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a13ac183-9766-48cb-ae06-aa50108a62dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538f3df9-e128-4780-be88-95437520f80a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13da108-e0c6-4de5-a0a1-8f2bac4f8413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96be3b84-50ea-472c-896e-24b705790da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93536a0c-c157-48a4-955e-34d01f37c2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b36996-063f-4d6b-9868-9081817041d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977d2d4e-95cb-4063-84fa-543afe4b4e7e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec86fe0-e207-4a1c-9c5f-bfa85d6b5207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f5e78c-8fad-443c-9450-4f725c6d8bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1584a52-7cb4-42bc-a507-2e473cf94cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9114e033-01f5-4cf6-8695-fb6589b27d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fb57e6-aa4c-4f46-8bae-2db11502e7e0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70630c31-bc71-4b14-bf53-fbad98b3b139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b975dca-d2bf-4028-8f3d-0ff69f94e926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d98191-d706-40e8-bd14-d59087f39877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1da86231-7d1e-4ad1-9885-20a81e8be1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6e965b-e26e-4e16-abb1-71a7b44855e9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa0f647-76cb-415a-831a-8f16f7fab882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70aae3d-5124-437b-ab5e-3ce468d04dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17a8298-32f0-45ef-bdb2-6cbcd43b8dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8077361-9ec0-4992-b554-b8d19acaf810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d17ece1-165b-4dab-bc12-6dd4ab183b18",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67db419e-cfaf-424f-9238-fb34fe637ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f312c768-ac05-4f57-a72e-7d471a7953ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0492fb-f678-4cbd-90af-a6606700fbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaaee4b1-05bb-4f46-8385-e56d127bc0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8fbe97f-3e42-4bab-9c1f-58c917bca0d2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "badccac9-26b5-472d-909d-ad156e2fa2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d690a9-eb40-4ccd-a894-40d4d4424780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb81e32-884e-4c5e-ade9-86e62c1cad59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "24c08a45-ebec-45e5-9147-5377abb719ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0fc5bc-7593-4b7d-8325-3055369a30d5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edfcf56-1749-4e97-91ba-5ae01b56879f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8077899-65da-4177-99a7-c821172f3981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082bf94a-33a0-4ea7-9df5-7894e0080630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6e6c70-9186-4fc9-9244-06133f4837ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7216c0f5-3b13-4f20-95a8-6b590e94e425",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a3c8da-ea33-4e26-89ca-0d99ef668f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f02872-0260-4c86-a039-9f77cb9ee557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3d62e7-c424-4504-8dec-7ee7e64daa4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b800f26-49a3-470b-993c-dbc7c46e571e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fd9d34-abd5-4647-a815-9d4c064a61b7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24451de-45d0-45ed-89f4-4bc9e9ba2008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fdadb3c-0809-4c01-9c76-395a5b1d5622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f94f687-fd58-4b66-a1a2-1bb911979610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23897f38-6657-4af8-89fc-da739a11f50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637c8c99-4706-4f45-8bf0-828eff1a02f5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010700a9-752f-424f-b53d-fb1302a36478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf3d4cb-d45b-42d3-bf07-57176ec4cba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d640252-7f03-4374-a0a9-29b663ac3e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "021997ac-5f35-41a5-89af-69af3d8c65fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d19020-1507-4506-9897-9c8e3b1895c8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31257166-243b-462c-9dec-56a3dc5fb814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e90968-4f72-4c2f-b29c-d3a4488ab219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfed158-ba80-472c-9cfc-e5c2c2a5d219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "255adcbb-0421-4441-8203-ab09af4c01bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eeae4c2-4c58-494f-b015-3401cb83aed8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484f94b0-37ce-43ce-9349-5dd3170fa30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c54ad0-f532-4258-bde0-c76d7848eb3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c593b877-7ff2-470c-a2dc-29cf769be5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e366645d-2ea9-4949-8a6a-c10f2e4cffc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ad423e-b4e8-4a02-9a01-1101d127e200",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d43ae39-2a0d-4bef-bd86-5ce8d432b09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b6a7cd-c434-4c48-bbba-3e213c4d0557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72da6c51-9e71-4adb-88ba-8c71e6dfc897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2c5ee9-ce10-4422-8a4d-53df4d12c344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51c5f36-096a-4f7d-beff-d8789e123275",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5785368e-af59-485f-a2c2-e9c7b9a1ee63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffd3b03-a69f-4f56-b11e-8ddee5cb26cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec5d1f2-a7ac-4c75-a1c3-c556933e8275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "906a6045-9922-4346-b1b7-74c9137025e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc49c3d8-6676-46d2-9b61-e48ec6ca96e5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538b4ee9-e127-437a-aa59-62cb1b9a4dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7515fec1-c095-432e-912e-fba9ae50aa7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c3f329-7109-4902-b137-6401498a7d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8edc6aca-4b6d-45d4-bc93-158389f94542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8f1d26-2894-4668-9e52-05e01d6d8be4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02410fd6-2a40-4446-a28d-3528f2f81061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f56528b-f26e-4d51-9ec0-2e68b60ff5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12376ab3-2784-4473-8b5e-6b25bb4feb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c217b90-899b-4fc6-bcdd-427f6789f2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f093a41-5d5b-45ff-b489-12fa66445719",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ceaf286-1057-46fc-b30d-14b7db1b259f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4259d151-13ce-46ef-8580-61cbadcf375d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164a0622-8b60-4788-bc80-0d9d15eb4649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e673567-79a9-4a89-9d4f-da3355aaff15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae427c38-499a-4033-a866-bb339fb5f404",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c0ea82-31e3-46cf-91b6-dc1d945f0f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c04ad8-5e61-4ab4-91e7-e5dbebd19468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc401c3-9bd1-4a5c-bd76-d4e7b0c52181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a58a77d9-d4dd-432d-9adf-562d83a57a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259bd102-2f74-49d9-9aed-d9f3066633f6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f997b9-ee8c-4e33-a2ec-a92e2ae40ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8e1f83-26d9-40c6-abe8-8eb10a50358c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad28223-eaeb-45b0-ab07-955926baa087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb60343-3273-4ca4-a731-22efba7b72c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d5dc5b-c243-4534-b020-82e4b8cc4e50",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a86032-f392-4afd-afa7-b6e852307c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92761bbd-c225-4d8c-a467-53795abd7e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93156e43-45be-48c1-b16f-1a2d90c28548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2fa40fa-e1be-4730-ac91-8130888980a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1b6e4860-8d92-4f00-b166-a6b4447c61ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f431e98-d967-450d-a8ff-2c3a3339f561",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e43031-eb03-47e7-adcd-bcea1e85280b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f873a4b1-d74b-4979-8ce7-840a137ff0d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "267307d2-d9af-4968-8dde-d2442a4d93aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e69c7bb-a1a4-4562-8e1d-8324bff853ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46f1a426-9ffd-45bc-a1c0-e1ef8d0fab8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bfe4e20-6834-46b1-973d-6d40c24f1d83"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a80de9e-547f-409b-bd0d-8bcf11fe055d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f121c21c-f97f-4833-a2b2-9e2769211e70"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0bc26bbb-4406-4095-a305-06fd72a767d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f4a85229-f857-4547-8b7c-48bc0b831513"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f1f18ab-56fb-4676-ac29-4e9749fea453",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cc52114-becd-447b-a181-fa9fbe535514"
            }
          }
        ]
      },
      {
        "id": "06943662-5cb3-49be-8dda-b42386a5fe01",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "57cfb058-af5c-481b-8557-2910988846b0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90edbe60-3551-435c-9897-15619bf7a799",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "45b71021-42d5-4e25-9e4a-7fa132547fff",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14e79a7-9820-4e45-be3b-784e0dea332c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffca73cf-1d07-45c4-a8e4-70407d8dcf1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c493f4b-d3f8-415e-9c61-5c1edab20b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "29087528-e2f1-46c4-b84d-e6bdbd740be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd17b56-e0ae-4d0d-861f-b4bee99fd16e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fcc532-0494-4b35-8a3f-ce7ea50e3ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a56bef-9675-45e1-a607-894fa6794ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e9ef24-03b9-4706-a7c2-ee9dc3ed9fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10b3712d-1306-4644-938a-ef62dea7a1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f989379-9276-45b3-87c8-d82a9de9b8b1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2efa051-3e03-4bee-a01a-98a7808e6759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8476d3a-0a87-4b62-be39-db87b9a285fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7b6c31-dea8-49e2-9c03-7c3c448da7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c98dd2b2-42ac-4761-9c1c-82c9abd493f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e0805d-a352-4c8b-97d5-4f7c8b72e9da",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02926382-8568-4395-9d2d-89165d894edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca943ed2-3ad9-4315-87c0-d89d04d624d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de868dd-f691-43b9-ab77-ba6690e11248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a08dbe3a-7e1f-4669-b497-1b20fca11af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7873efb1-799a-40d5-910c-59c0c2ac1f5c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c189e8ff-4043-4204-b651-26921f8ddf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d434567-3c24-49f9-a29e-f564b99085c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03330c01-a55e-4dd9-b94e-9dd601d15298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b88355e4-105d-43f0-8fd3-907db5982be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa6e253-4eb0-4bc0-90d9-89f0ae8c4485",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103d948e-6d40-49e9-ad68-39911009382a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e46374-b78e-44dc-961b-e9add138bdb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6f6b01-4969-4c20-923d-3aed54c6fabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b7b074-a7dd-41e5-986c-67acf3ab6812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a859a75-a8f9-44bb-899b-e6814206caa2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db15ad15-63de-498b-8c95-6dca042ba599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5990486a-cfbc-403d-bc7e-e2a77225fdf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81be761-d886-4ed3-b0ff-d3e928d531bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "81e319ec-7acf-4ec8-b658-5de58f400017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b081bf7-8dae-493e-b369-d18bfcfd8166",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aad86b0-7727-4d0f-9f1f-01e43f31429f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb649555-cc06-42e3-80b6-bcc9062e32be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d3f5ca-be1a-4b42-950b-7838581d22e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa48d2ed-f2ca-4f56-a18b-0bb8100bf4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e549bfd5-0719-4c86-bd70-c8d62e1782c8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f864cc0d-1fb6-45a2-acfe-63720354f8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5136c694-6842-427c-8a13-178288653d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a119af8e-4d96-43bd-ba51-f0da562f1ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b38c33-c15a-419a-a50b-49a5e9357c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceafff4c-b0a3-453b-8b5a-fa4859d243a4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90252b63-2dee-42de-9881-eecf71d6ac60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5837abd7-5d56-4b5d-9831-fe6a154532e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9cf1b2-2eb5-4235-9520-6790bd4278dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ea797a-e190-4ef6-a37f-ac44a0deb658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2898cf26-f2c2-44aa-9b88-2a81093aca97",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d8eb89-f04c-4af8-bf77-ce9fdabb6233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f739456c-cd6b-4839-95fb-36007aede0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920dd189-02a0-4b30-b9d0-6be13a454da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8f225be3-2be3-4410-ac61-0430935471b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b8004a-4711-4c69-8c25-5e9b582ee048",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac4f3ef-6d80-495d-a521-8a07bf3d74dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7849ff46-4458-4e45-9253-45298b26fde5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92350e84-7eff-41d2-b575-05ad31ebd764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a50800f2-fcf4-4c69-a872-3e2146e0c8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951926f0-1072-4af6-ba5d-1f1df947722a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bb2513-6434-4d1e-97a5-071d2e9ddeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7e5b57-9cb4-4bdc-a810-21b9d52be45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3bbbdf-9e5f-4dce-a19a-2a802858f1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1b48f5-79da-4d13-a241-90176387b823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397c24f0-f2e6-433e-8e2d-3652898d6df7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381ad85b-ebf4-443f-828a-2897acf5c79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e538d1f-7f3a-46fd-9f5a-5766d364aa0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5f05ce-a748-4efb-ac18-f0d6d3e11b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "582f03d9-b298-4067-a8bb-d07f784fb1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e894c489-dab1-465c-a112-68102f3cdfd2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed617b11-f9d8-4cc3-b8c1-f2502c25103b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8f1993-9f63-453a-951d-688672c9c76f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103751d0-56a9-4e64-b184-0352511f869e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ee2737-652d-4341-9a1d-39ffdd857e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de778e1-79d4-45f5-a240-fc2bfd20f835",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed22bc9-f31f-4a7b-86f6-2263203e0ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77dfa6f4-ef79-4064-b44c-c26b6769664a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1caf90bf-e1da-42f4-a3bf-52e36ecaf8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1bbc6b1-18ac-4dc9-9b18-d1e7d222caf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fc6430-d403-4398-9a7c-b72cd6ddc038",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5052db67-fe72-4de3-8997-e20be0edce57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb37280-7ce6-499c-8cd5-ad59937ccaf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a62842-19c6-490c-b108-9102b40a334e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d7b60f-1e18-4991-94b7-902f875ebf7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66733e27-249c-4da2-82f2-924dd0334e57",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7cf55c-4bd6-44cb-bc02-cca458e3488a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97104a49-6268-4eb2-81ba-19c82b50269b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49801364-2200-4a2b-ae22-da1542281989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0671e086-0522-4c3a-9cfd-df37a8027d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e91eeb9-880a-4db2-b840-0e5e45f564aa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3666b68-a99e-468d-be14-d8d023cbf205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb10000-8f39-446f-bd34-d2d54d6b42c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b69cf2-8fc5-49cc-85f5-a0ee36a2e332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9601b48a-a53c-448e-a0ca-27324935f009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198e3e6c-286d-4b71-91f0-a86b02b969d8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2b092d-2ee3-47d9-a3dc-f5f3d5dc2a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6fdd25-f536-4198-bdcd-04fcbd7c8011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5380e5af-6000-4b4c-80b4-5cf16f3e7bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38913815-6ae1-4963-8b13-4f5bfd3a4db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715eb089-9665-4451-a44b-ecdf597839e7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6987bbb6-8e6e-4aa1-8049-84b32d8580a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7deb36c3-dc2c-42a9-a11e-1b4afcc34bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2be3533-20f7-4074-a131-4669a7ec29cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c168339-557e-4d75-88a6-95ea970967f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef630eb-5908-4c1e-ae13-ddf05798b9a9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c2bb9f-f807-46b8-a8b6-37f7969f9b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9bec43-1239-4052-a9a8-2d65fa9d15b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f50370-5cbb-438d-aa6f-1525e3fa0aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee93254d-e787-4388-894b-0284a0a5a040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259df39b-de3f-4003-9cac-ba30dab682a7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d91e1da-d6f2-4e2a-b344-19fb00080f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee3fd7c-7e15-457b-b157-3731b3a2cffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259a6b15-df22-411e-bba1-70c9356a0c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f04323b0-c1f8-4ffa-abc5-2811acef0f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17584bad-909f-4dac-a0c1-2dd748047102",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fcd8bb-1b67-40a8-995d-f876423cbbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9f426d-3352-4dea-ac46-a14a3ea0581b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be098a03-9da0-4e0c-b4d1-d9e438c386d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db55613a-ee25-4860-9aa7-8ae50d19f65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394ba8a4-19b9-4580-a9d4-b8371117ba91",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aecbcee3-3d29-4840-8583-73686aa1757a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49800555-bbe6-4145-a197-fb8e9029244d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd878790-43bd-4a92-a6d6-ba1c17b6305d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a70cb77-eedc-421a-aefd-a506de4f17f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c642297-34b3-4959-b634-3f25842f493f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6425fdc-f565-42f4-baf3-52458f7fa271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12950fb-c599-404f-ae67-be81f45a25d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb64f54-5da6-478d-bcd4-50e31ec67830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07dd1686-b3a4-4345-9629-ef830228d331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4352ce7-93ed-494c-9e7f-0417bda99408",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1df84f-29eb-4ab4-8da9-7c387c857e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6068b19-f8fc-46ca-b70a-7baaf9cefb78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24d8489-8e5b-40d1-841b-59b4b30afbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b71f20-fe43-46fc-b92f-8a7983468eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3bc1d8-ba06-4670-a135-b4cccc53cc39",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c457062-37c5-4ba5-a2db-ca827d68b0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e64ca155-61e6-4cd7-afdb-0f8387388d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9327052-9708-4d5b-96f4-aeed5646f8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f481fc01-caab-4e67-abb5-ad95ff0169bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cc07f8-1f8a-40b6-b747-ccacaceb342a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad54182-c9e5-46ea-b695-f92793beece0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c8ff54e-c854-473a-b38d-4defb7f9a2b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0211b55d-ee07-4f41-b1ea-c46848d52cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a705c0f8-4660-458c-9bb1-6ac6c1014262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950af8d9-21ee-4279-a931-68927863c3f3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cac6d89-0431-416c-8f82-5740091f5ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7951c3-3e7f-4d4f-bfc2-125ed90a5681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d181ab0f-10d4-4a33-bc04-649719df6414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02e9dacc-5234-4c47-90ca-e7dc54ff4032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfe0ab8-7b9f-45ce-82a7-19512f7ab72c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5acee45-15ed-4091-b07e-0645981c5930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f1ff90f-8a55-4073-a49c-85dfaf03bf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ee7fb2-867f-4c2e-82aa-07a5d6fb6444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91facd78-d3b9-40c0-a9e6-d27625667a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db9b7dc-2524-4d77-bd67-7494c1112d12",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12c40bb-3460-40bb-9cec-f7f6d9013a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d034331-eeef-418e-9ec5-0ca5cf8c7935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff30cdfc-9613-4bfc-bc39-a4f3d4b466b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3878392-07a4-460c-914b-4351e2f8301d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90091f57-57f9-43b2-a003-a36c9a09e313",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f609ef1f-78a1-4823-a279-b090579a8160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42360add-c29c-415f-bb0e-e3bfc21edcd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a61731a-329a-4dd8-885f-918fddc4f148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "490906c3-23fe-42db-85db-936b3d16e7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fbf65f-ab28-41e5-815c-4d12cc416a10",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b14f9ca-3ae2-4205-b910-7eeb69f9e4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a727b0-e663-4f7d-8adb-cab01254ae63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3b294b-ef86-4015-bc0a-4d831aaee4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d672936-0899-4d3e-a16a-dfaecd34dbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f666cc-f9d7-4b0d-bf4b-9cda49e94d09",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c95c8c0-b87d-4996-99a3-90ff106bdeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c558a4c-be14-4c61-b351-0b2672b0057e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744430d3-baf9-44d9-a19e-774fb5bbefb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac137c6-4d3f-454f-8c2f-fbca2bfc299b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e2798e-d9ed-42b4-ac8c-d48c631a890e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f6a484-3ee5-4b81-8c4a-cc27a2666f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f660f65-1446-4cac-b440-a0d6ecfec2d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ab401c-be55-47d0-ad61-fa318def8127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afa8d140-59af-4db3-a6eb-3d9611d14bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea2ce74-b54b-4cd7-859a-dbcfd2f14126",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df49330-4ce0-4bad-b167-db53fc9c3b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c278d6e6-6179-4074-9419-be24ae0d6365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f288e5-0d78-41dd-8e4d-ed56cea2e8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd96156-b4f4-45c2-97eb-723313920d6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c2fb76b5-f53f-483a-bdd7-2f35b443e22c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b769680-65e0-4076-b718-f0fef0427c1e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320264ac-2d29-4bc3-a8fe-62c18ffab6b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "86a33d7f-3ef5-46d5-b581-2e5965f46de7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5d7eb2-1616-4d6f-8eae-590de920c384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3bb281e-d021-40af-95c4-9069dde49630"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e1f3a93-bf07-495f-928d-76c29bf7daf3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "765ab7c4-637c-4175-a229-d88962be8ac3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e82933cd-4289-44c0-8f2e-0f773f3925cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "331135c4-e6df-4dab-9fdb-8e6c1b7e5a39"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dd46fc9-40ea-4001-a12f-341b7e00dbfb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d206993c-e665-4f0d-bba3-fba81a0ffcb6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ecfa722f-bd3c-4979-9962-bb4d06e11aa4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53afdd36-7558-46a7-adb6-baff5ff8f03f"
            }
          }
        ]
      },
      {
        "id": "27e8aeb0-6d51-44ee-b591-ca2fb69ba832",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "95d73fa9-5866-408e-9cbb-25deab0d9f31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e6cea94-3c49-4ebc-b0a2-4e4470e132f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3a6833bf-fe6f-4c8c-98a9-acb9d0565fbf",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff358d72-b5a0-4423-bff5-9785d3b244af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d71d7a-d2ee-4266-a5a3-e37e6365e19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23ed444-af26-4d92-8911-3f4867bea6ca",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d6d444-e163-48e0-ac80-30945bc25f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a319359-f9a3-4a85-b3bd-8687febf51cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad11a96f-9627-40e3-934d-66742440d43c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1404c86c-e4a2-4f67-8a21-038b818e35f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1bc1102-5f90-49a5-bd5d-6676ccc8da38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b930074e-1e93-4c4b-ace4-8be4abcf5ef6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f06433d-0d92-4cf5-9a41-50dcd2ebd13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56dfc92-e854-48ea-9869-0eea6c249cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85739fd8-961c-4bcb-b433-3bd6b265d010",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6565bd-6812-4511-ab31-79ef52d4c72a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ace1a36-ea44-4998-8ec7-33d5a8c612fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59be93bd-66cd-4bd3-b71c-fffad9aed360",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504340e0-1b6c-48a6-b92f-63c1e5903a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f30c397-cdce-48aa-a1fa-93a954fed48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c31c80-713b-44a3-b4ca-e6bc862621bd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26dcb06-353d-48e0-afae-5082183eb6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2469ccf2-5f15-46e0-9bbb-5517a813c866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea01ff1-3438-42b3-9bc0-5325b2d8c1c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ba40ac-f229-4edc-9481-859c72830952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c970da8-fb4e-425a-8dbc-41962212bd0a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdb27cf-3d01-4e17-9fed-2f298974926f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cb6e01c-0049-4d42-9991-1ca0b533b612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0ca72e-14ad-46cd-9894-d82126a1ef7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99eaa984-c18f-40d2-b681-5352f8cb7ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd721318-2a77-4ba1-84fb-75b20d7fdd0e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffcde88-da99-46ff-922d-df50aae39a15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad5a6c9c-1233-4790-8ad3-c486080e4719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66588fe4-18f6-4e59-a97a-2448c9636fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47714f49-99eb-457a-86a2-40958cb0687e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed0a333-e250-441f-b35d-5136ec8b6b36",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40aa1431-0b83-4012-a0cb-3b425dc20e32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d650fac4-5b55-4830-be17-b1cc543d2722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca5283d-d279-4aa7-923b-a2e9c1bf9b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6308cf-dc63-48c6-972f-2465eb3bb985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db985bd4-dab4-43d7-8337-603b36c4350e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb49422d-d609-4049-8df4-ffb0b8b9b0f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72bcf42-8331-4d78-ba45-db3963c583d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18457072-e413-4e8e-a915-ab40e5ef9dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af34441-fafe-40e0-82e5-2e3830afaba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca3f04c-5953-4c07-a741-91c7cf83331f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49db8750-cb12-43ae-9d07-5e742cf52bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd4b6b5-12fa-4049-97b5-f9283f0977e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c76f96-d0ad-4891-ac59-c5759db519a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e5ede7-8509-4421-8d53-08b59f9080d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124309e8-a7c8-42c2-87b9-b91b314c8d0a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d52323d-cc30-46d5-98b2-b1422f50e320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c47a764a-0878-47d8-ba3b-5abf219b82fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c299c2-a5db-4a80-9941-506919a050ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad44a3cf-c7b4-4d09-af3a-7de47629d119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f18a21-1f36-488e-ba54-95e1aecfd6a8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d629db82-c860-4363-a7a2-c20af8374388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00203800-736d-4aad-86a4-78711173b04c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de85ac4a-59ee-4008-b462-a03c767c1cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7195ace-93bc-4ab0-9208-7f6d1c7ce5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0f9fc5-25e8-40d2-80f0-333003964b3c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d1f1fa-3d9c-48b1-9825-84778a71e9b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8181041-0fd5-45d8-9e48-e20c877b145c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e373a45-2e73-4aeb-bbb9-ddf6c34c37d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f732ae2-2197-4f6d-b515-8d17458372a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580d86b8-5deb-4c9c-bedf-a65483a2385d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ee5250-1357-4c0b-8525-5030a9f517c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "730bb5af-974c-4f57-89e5-7d5175085ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c6a95f-1ad8-476e-8447-2f3b43b00cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79abed70-510c-4ebb-a397-97f75c04e999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c673ee17-7fc6-4be3-ab45-df45ce5873cb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32273b0-52e8-4221-98a0-b7ff4ed1d582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ce2423-f615-4482-8301-6aad45dcc651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d267ff-0436-4618-93ff-df4b10f9f886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0529108-f1ec-4e92-b879-af5a73b732a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2386813b-97bd-411e-a99a-bc5caaf41c8e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbe4d30-3718-4292-8d38-be3c26efe04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475399ec-ff8c-47f2-bd1c-34805924feb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46463174-5898-4542-8174-18e9d43d21be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1883a7a-269f-4feb-8e1f-5eac9ef1006d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfe51a5-47de-439a-beb5-77aaddef1c04",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b64da9a-366b-4378-8e2b-0da609113db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29c3e76-62b0-4607-9b47-0ed3607f6b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441c6569-70b9-41ad-9ef9-c5f31660212e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4081ab08-4b83-4d24-a5ea-6415580d3322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6bcc7f-d8bd-4d05-90ab-f2fd40741cda",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e547e4-ba6a-42b7-a5f9-703867568d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d64eb49-a532-4bd4-b581-6aef4c7cfa75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "556da2f2-e87d-4e1e-95fe-6538bb477959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49454c33-9906-4197-aac2-83eff8d9b22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c95ac4-9ec4-4895-8384-00959735fb52",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0266d149-ebf2-4a63-a9a4-0430832f1d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040bfa63-ff85-468e-abc0-cd84f1cbf114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cae1552-7f8f-4aee-a14f-a8f2d3bf35e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab40b266-5184-4a09-8764-11442d338e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6178275a-baec-49ae-868e-f2f2732ce38b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d6487b-257c-4834-a499-2ef3bb9eb794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162c216e-9272-4ca8-ac97-5748d2bef05d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26fd8821-6208-41b8-b293-d3c4620e8b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf27cec-c63c-4d3d-92be-ad522952da70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d933da3d-7356-4a07-b4f9-70a49e24c870",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1a3590-0cba-4c88-b723-9ed2d46613c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6a1a38-6954-41da-9b63-9d67c34e862b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468d52ed-e3c2-40d7-bc9d-7661dc04ae58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597eb209-4b22-4e64-b9c4-f0898440af6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15f93a0-e0d5-47cb-960f-edffc55ee7b1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f984587-593c-4fd7-8f11-95b17ccdcf56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7ad6f37-54b4-4d3d-b89f-cc2285fe1dfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b83bf2-2dc1-4f59-bc28-593db80fbb3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917864ee-f65e-408a-b623-4b280ff72f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f160850-9c16-4f55-8846-53e9c613c66c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592e4c1e-cf68-4249-9920-a75871fd458f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1cdb8ef-be7b-46f6-888f-5278c4bfa4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f780c3-94af-4c4e-9af6-bc7e5eb12f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ada34f-3b17-4602-b244-8b5a2d6ecee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4aebff-d956-4f87-8c07-6f7ab4a80e0c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e79db87-83d6-4ce6-b257-fa1e14aec245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "042465a3-7106-470f-9b0e-83d89c34b43d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69996f3-d20f-4feb-b176-c140fff7d983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b86c8ef-0f20-4dd7-88e9-bcb0bb3c5ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afde32e-6b14-46f8-aa7c-33c936b99d6e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a414f366-a0c5-44c9-b9f1-ae51bda3360f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73d688a3-531c-426f-bb39-7bd62d75f5f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd26fd8-a1ac-4382-bd77-948884b43a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9352c6-1793-41ac-82c0-6f21bdbd5b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2e3246-a26c-4b7f-a4b5-52f2f8382fe9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fff74b9-d09d-462a-bc37-b60ab50add5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc8d50c-2649-4508-82c2-e4820221f54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c8a941-2269-4f7f-9668-03603f808fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd95f20e-584d-45e4-aa2b-7399fb1a9387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f669dda-60a2-411b-a246-966eed4359fe",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59aee465-6b30-4074-90d4-14fe7a9fcb33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7d868ce-d8cf-4a7c-8d36-45629536c6df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8ba302-6924-44a0-a127-3a048010252d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605eb6b9-6394-4a47-9c13-754e2f3f170a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcda27d6-ecb9-426d-9df5-ae2eb0788645",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efab073-0237-4e4f-a529-970ef1ce0dac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d06ac74b-65de-47e2-b8cc-9c2e8da24cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09b4b06-0245-454e-be2f-10838d543475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52263d53-adc8-4925-a3ce-273561b355b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3dfd22-7317-4d41-87f8-220bef5bcacf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d0577a-4a89-41fb-b0ef-42c04a4ab2f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbbe8a35-7414-4ae9-9de8-589c465c6c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8610d6f3-a2ba-4f95-82c6-961c5eb6788c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e6a927-04bb-472c-bebd-a59136b7e0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779fbbb1-fbcb-4379-93fe-8780cd80fe24",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c36f5c-5539-4256-ac06-45e3fdbe04c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c23c37e-8d21-4c1b-a662-a5cbe9091061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4d6dce-5767-4ab8-bd72-524950d59a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807402b1-d690-4ba2-ba42-c7848aad1789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5b76de-a94e-4ba1-bb4c-61e096dac11f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abca8218-6d94-4804-9e51-418ddc10b9fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa5940ff-53cb-4ddb-8a00-97655ec168b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687e7a77-b901-4fbb-9920-8d6fe2dd0d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f46807-9051-48da-adc7-cdfab48124d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e562df6d-1e32-4b0c-bfc8-0bef5427fbb8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81eb2eef-e42d-4bee-ae32-1a6fbac60611",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff5f9e0-d246-425d-adfa-09d78c22c563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a687df5-11e9-4c48-81cc-58261140945b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a2ab8b-e434-412f-b275-7dd93b0cf0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0239e56e-204d-4c45-a24a-27d421dc1bc7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd699845-e454-445a-85cb-b2182a2bb0c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308112ef-e07a-4cf8-86f1-7c0beb253cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f3a2f5-8c9e-473a-8c0a-859d7d279a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deae2510-659a-4f42-a975-ed3c86671f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a6d8ab-8d3a-4d29-8a8f-b592425255b6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f9d548-da4e-4dc5-b3a6-559106a542d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af73224-d83b-4b04-8c95-ef05a0e5dafd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7508318f-8417-4552-8ba3-b8d5be1ddf52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e094ed51-33fd-45da-94c8-899133efdd36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0a58c7-c254-4606-9b29-68522d92395e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d7fe80-3cd4-4397-a960-1735599b562d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1692f5c2-84c1-42c1-b1ea-564427548d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9c0054-531c-416a-9051-02dd813a4c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd50059-14fe-4a5d-a160-ba51d0143701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9974138b-065f-4c0c-a49f-dea9d851d69d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cdc8ed-373d-4def-99f5-cb0e055e0fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdc34ed6-db4d-4cb8-915f-0e72e2cc9c0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be570da1-8c0d-4bd3-a43f-591c79f81a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e413919-76b8-453f-88e7-731ea9ad9770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eecaae9-ca00-4386-a034-ec667ca650e9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd829692-24b7-4cca-8eba-3cc809f387f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df76cd41-2ae4-4fa4-9497-662f0175cf8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9836bfe1-06b6-44f5-a65f-494d2f194ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396231e4-972f-45f7-bee6-6794bcc11e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1549d802-11ff-4c84-8d7f-2051274a2efc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939efc26-db8a-4aa0-b2a3-c8f187c3793e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5231ac1c-6d61-43e1-847f-18c3a5c878e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73990087-ea14-4ae9-8db0-0f1c9c12080d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc355e2-77df-4f05-8b68-a1aff21a459e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19d44d4-e683-4278-9e00-1aeef56d5384",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e8ba33-fbd8-4f76-8431-ace30fd8afc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bc79a4-fe9f-484e-9a23-6aa64755b488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccf054d-6440-41dc-88cb-617617e629e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d94fcb9-8d57-448c-ba89-7a6d29636713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237eefcb-786f-435c-9acd-b2c3a24b3b17",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c6567b-2059-446e-89d2-9f4df85b5150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa16922-44e9-42f3-814e-84bce771c6c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca499d44-d3c0-4157-bd6c-87ef3f63152b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d926f5-244c-4790-a1d7-4f5026b53518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3557034-3357-4d80-9cc6-bf1674f5e95b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30495164-3c05-499f-8232-96d2adaf4cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab0a6bb9-9587-4f15-9e59-0ffb119ea0a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1f29ea-7fbc-41a7-a033-2e7e27e914e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7029f88-0fa2-45bf-aae3-0a52b18ab94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993a59ad-7b16-40db-8eac-6adc45d4bcec",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041b8b3c-d9c2-441e-853b-e19a54c0bdee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078e4c02-9094-4d7a-8385-c0838ad7e09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd816b2-e389-4d84-a2c7-9803127df083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089223e4-fdd8-4486-9cbb-1ef7c4b90ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5571aa6a-3c37-4df4-b484-85d9bc3ed730",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3755a1-b91a-475a-8f6d-39f7eae6ac04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e77452-8aae-44d5-b2a9-3a0bfeed8c1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3900c821-5b24-4a48-8325-9379090d0167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c61028-a6a0-4603-a4ff-103678ca007e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978421a9-529a-4438-9d1b-b92725a0050c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d66c94-1104-4821-b381-8df251607cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40ba600-7219-438f-9b54-b0a65a7e7968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab61545-0716-46a9-917b-35e7ca612cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f8c65c-f537-4066-8d43-2621373fa18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1ab02f-c96d-4e96-98d9-e3255e1fe59a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92837575-238b-4dd1-8827-b377f2db474d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d7c65e-200e-4181-a78d-c0492ca0249a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b32b5e-469e-4256-9cae-968c83fcdd23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8908e9ef-34ed-4861-9157-51850908d5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7daed5-2a07-48ba-871a-99f82a767ce2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f70bd3-73ba-4f89-aa4f-7ee197926754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9c0ffc-9d26-4b56-8cc6-954394676ae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f1990c-1f2b-4afa-9199-b44e962e737d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d691b53a-fcbb-4f8e-bd33-1688dd0c6e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9089673-5816-4f38-b379-66f37f99700c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b863a886-7aa8-4259-bfbb-966d135ab3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b37a57-1402-4b53-9d2c-5bf8f585d97e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d344cf5-c621-439f-bada-4c062c67547f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ae918a-eb2a-4097-8171-d8f71ee32fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a932108a-e896-4ddf-a95f-fa39e9bc1aa9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a632aefc-a778-4f61-8875-70e6121049ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9257d1-f433-437e-8f02-bfcb38002086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45078a81-a825-4e6c-a2a0-40e1a3bc5107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5734ca-7484-4bb4-b4a0-f34417e3e6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95cf9c77-af6e-407f-805d-c26cfdda3825",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77c9686-c48f-453e-8b79-557381f1e72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac17159-479c-4d26-a434-fae448967127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "420f12cc-5a04-4e0d-bb99-0bfe1c507c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2dd60a-1e3f-4968-934f-3c5b6fb69f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250bd5dc-9f6f-44e9-99b4-b77e7e166697",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c636fb97-5ef7-42f0-9127-a0533bbcd696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42e2713-3a65-4d29-a0ed-6a3e7e046406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3a7725-264d-4f5b-a4e3-ac897429f467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b09495e-b9fb-4a47-8b1c-947a273f2b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab54145-dc78-430c-b25e-3bf11a183e97",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8262c4b-1325-4fbf-a493-1c063d07bf10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7e9a44-532c-48ad-bfd6-a8ae07798faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cbce05-1a77-4c8a-bcb0-9c0bf46c7c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e3b253-269b-409d-9a11-ecc31ed9f0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5734c9a-e909-4c97-a37f-fbb3a5c1e10c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8392788d-ed57-41a4-8d3d-98b88e00c571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c1f642-ac09-4160-bb3f-3314143443b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf182522-9b5f-4d77-8b46-e58f61f8307b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c304d48-3181-4bcf-be62-a2a2dc72578d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df16a5b8-a4df-4bd2-acf5-8c4c4a6c0dc8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d483a9-2194-44db-97df-e1f0688394a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9040c8-1157-467f-bc3e-21bfe1e09f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "143ce872-9613-4f29-9853-32e1d5e86ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5183bfed-7980-41ac-ba9b-4cf4b0d3e3a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00960bdc-bfbe-4437-a211-bc2c8c85214f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37697e3-2e76-4b6e-8bc2-4a57eba22707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee7521c-fb60-4616-91f6-83441993aab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2852a0-1154-4595-b49b-b8e42fd76d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7579d76-e052-4133-9fbe-6e10f0ea7b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c748357-9871-4ead-a08a-be6862cccd61",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a8dea1-be9b-43b0-ab14-e9e5f8b55b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064a51e9-0638-4e38-aad0-cf52ed867941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a7b5ab-3cf7-4cad-aaec-05d3c3d0a7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4057f69-5fb6-49e1-8a3d-935cdbae50a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad506a2-c515-4fc8-a288-ea2f284ca935",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eefd183-dc41-4214-8aff-98efa7c0c39e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d5fddc-b6f2-4889-bde9-14b5fb39582c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6343ef-3806-426b-bef2-f0edca4e516a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337c0b8d-91b6-4028-a9a8-8b9228bcbaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0b33df-945f-4622-935d-2906f7b9a327",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52b241c-fdaa-4341-8c71-7d4c9496b5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87429f17-a4e8-47d3-a307-0d8856798403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e27a9c-5f1e-4811-9276-61dd7194bda9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79eae3be-38e4-4d3e-a591-cc0618561803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd329ac-228b-4e1b-ae79-6c68eaa09385",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd582c04-b197-4826-bdc1-5227e2387990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46949c24-3ce2-49cd-9740-76d7c96544f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f777d6dd-9996-46b4-92f3-cd6b0dc34230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d404b9-d609-47c6-bc58-1c5decc584f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc39ff76-2ada-44e7-a1bc-0ff262f9229b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6ca041-97f8-4dd6-abef-851c55cfbdf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644d6f05-c484-4747-874e-87a60a8a6e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746bf9c2-6969-4e26-80c4-bed5bf45b33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f44d94a-b0e8-43aa-bc4c-d3f1d4a99d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee6e424-76a9-4f1b-9df2-862d12bbe0c9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83fbc30-1510-4e23-bc3a-81a840d553e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6c43b6-1cf4-4002-8674-8d155004677e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca96403-3732-4078-994a-1a352d516e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef480f0-9088-49b2-bc74-94240d638893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55213b5a-de97-4a01-9f3b-e9f6982a6b62",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca82e284-3995-4f71-a537-e8fc274b753b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6829f9b2-9882-44db-a76a-4d1053f154d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5267c500-5e48-476a-9c7a-b29d88041837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34df1a6f-ea76-403b-8961-eb90c54d5b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cda4896-84ff-4ed3-abd2-27f756d97d4e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68461582-600b-4bb0-973c-8964aada1d57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd1f1710-8b6a-4851-a4b3-32acb38abfb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f217f88-0d2f-451b-8241-25bbf01e6e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4657ff61-6542-4542-be8c-acc3f3ad5b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e00f1d1-3445-413e-ab69-e06e8d064957",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5900aa-6e84-4765-96ab-aa619077102c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80e99f63-a53d-4a58-b2fb-4bc7cb25284d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db725f97-6829-4b94-82c5-1af226cd57a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc45b1a-c852-4e56-a2e7-94c04047fc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959d3c83-7778-4230-9c1c-1809005a69d8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0993c9d-a642-4fd8-8617-bfd121a9d9c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dda9bb1d-d651-42fb-90f4-7b21d302ee1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87e93b5-a1a4-40e3-ba39-bb66219cb517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd33a0d3-641b-4a19-ac76-940562a6c84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144a965f-e6db-4821-aa76-1e3a74e7d2f4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879bd696-2fed-4663-b1b0-2d2b6900a89b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63cb0bca-4d56-41c0-8eb9-711bfe8ea095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd365f5-12c1-4112-a914-5a3d8de4923f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5627a1cb-d1b1-401c-bed3-5742dbda0aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339bdf77-b10a-4377-a2a2-860bf6f241f6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec639db-e22c-475f-a4c6-6904b90b3753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0825e4c8-4f9b-424d-a222-99accff2abf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c9e83b-e9ea-4f12-8467-8990728b1dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b20accd-1e28-4e98-8607-26beb3f87eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcc8509-1dc7-4765-887e-6f2de6f9b84f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbf805c-2e35-47cf-ae05-edc762a9be57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a231ef3b-0b22-4242-97d0-6d921074b593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4263841c-b795-468f-b274-c22d927bf8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e897196-1e4c-4182-8f44-98011e1aa9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c19ff3c-4ae9-49fb-b32c-d67fde6e25db",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb83bd40-995c-4e31-9bd8-ea700fdafcf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68c273da-d88e-4236-af6b-897769d036b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea227a7-e0ee-4ea7-878f-d368a5cb7e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02290e2-edbb-4cb6-8cb6-e07a96136d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40eb81a2-5c2c-408a-8849-27171f1441ff",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a5f30c-9c8e-465e-9320-642dc6167b1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d1862ba-a0df-44ac-8fae-839fd2b7ed8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26124e2-1f49-4f03-8163-0ce91e05e307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80fe41d9-e3c3-494d-aa2e-0005e11dae14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef82552-4012-4616-a438-046b716c98a8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9bb0cd-b75d-48b3-b812-defed6cafaa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df2678fe-4d96-4153-83ec-3cdcfb9a76a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ba3bbb-aa03-49cd-b88d-386d667fa4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0ed916-43c1-4fbd-839b-099c76a03147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1f2593-644a-4a60-9737-0e49dac7f366",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2de419b-01e0-415e-96ff-bebf8a855e11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51efe165-95eb-4e48-945b-ea2171852ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6745fba-3c05-43f3-acb5-5d74483f92ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fda7d3e-fb78-4be7-9897-c2a7051bc82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb16b322-980e-4202-8e7d-b4a5b8b12da0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fc2314-e6e0-477d-9f1e-14799975ed52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01333696-bc3e-46ac-9e54-1a639ebd5855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3f3697-6893-4002-8a78-edff93303eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08e7f7b-dfa4-4e9a-86e3-1b3a90b570a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fce439a-3117-4d11-aff4-965a296eaf8b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547a7bbd-0dec-417f-9e03-9ba2f2a0b1d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ed58090-6a44-48d0-bfa6-5954540d4543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11299565-5e0e-47ab-920b-c8af499b6a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593f1b85-63a5-4675-a721-1b8f3c545155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eca06fa-2227-4f05-9c63-36f769a8018a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95f967d-7c9e-40df-82bc-9600e869ccdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e4d116c-0adb-4ddd-8758-88a8bfc2e8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6084e20e-b6c0-464f-b8ec-8c049e56f9ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73139a9-da62-4159-9fec-c4bd434a72c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd2c770-d566-4c13-9ed6-d05af033e004",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fedd390-73d1-4dd2-85b4-a356e10e3d58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0a9d63e-8f89-43ca-8ae0-22d712d00f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2361bbdd-90da-40a9-a5b8-b05c3229ec20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5d82af-f3bc-4257-90c8-759ea635cdbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4926df9-306e-4775-845d-1d409da3edf6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7547ab-2a0a-40f8-88db-fe50ad0daf23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1780117b-a059-4529-bc48-8f93bbd47236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48b84a2-d357-4265-a04c-31ab4692c45d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4348185-a747-4526-9617-5c69ff9313d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b023f88-dae9-4393-aadf-d621f175c91c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0270f501-71ed-4fd2-8930-42239023c0a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df7e0e21-d593-4710-a5a3-69176c96cff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4e1793-61df-4210-aa05-f85c9bc0360b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a80cd3b-3a62-42a4-8f73-39f0f635ed35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bec3aa-4ee7-4df5-ac22-6804d791bf98",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ee0628-bf5a-4f0d-af0a-f9f4dd5116a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d04fa2c-7898-4d8f-bb0c-21f1fbf6aa41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b255b9-c183-42cb-920d-3c5b65a7724e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0934b7-0bc3-4ac4-9b27-ea1a8949fc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff903a1-2c99-46ff-8bfc-3e5ad501214c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694862d5-8c20-49e1-962f-df5d2c03bf7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6194462-2a6f-43be-a942-ce3cddcb34f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4b4e39-0d38-4f8e-8778-b21adf88ee6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd382fe-d740-4b27-bc38-9d414584699c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b77d51-8ee4-4b3b-90e4-524b86d53f77",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4a09e8-0178-4ce5-be13-a58b9b3dce30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9027ff93-9340-4804-8cd6-482b9c282a07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cd1f28-a8c6-4e81-b047-7eb0d2ab4244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098bdb51-f43c-4b56-9465-e0386d462d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dae542f-da4d-410f-aae1-7923a1358d68",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9eda33-579a-452e-9f3f-2d3be454c843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97b9db3f-afb6-41af-ab49-dc82d29f9e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ec9005-eff7-4a91-b166-5d22e131bb5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02cc9edf-db8e-4d94-a8af-4f9b1fea1ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be99b5a5-f9a2-4885-ad3d-530c45dd0c4e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b26932-d5c3-47db-b1e4-957793b83488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1022d041-8a5c-4218-b413-51294e12bbf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50b396f-76ac-4354-8c6b-9ec1ae440ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74537072-ead1-4bdf-af5c-a45896707c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc4feaf-fb48-4c04-8144-9ea1aaa56396",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5340cf8a-4c0a-4baa-bccd-30fe8e51d6b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7447ac0f-3fcc-42e1-9846-a0ea8d5ed1e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e33ab37-cd50-4892-b17b-c802ac36cb21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4f2325-f722-4c6b-a49f-a9a7842901af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf69984-e8f5-4964-b8e9-30d1fe7e4fd5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07f9d84-cf92-49e9-842c-0da43dad0ca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81b56604-b5e6-4c86-bec6-032bdf5cf454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20efb95d-2181-4b41-a103-cf81da988eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1991f45-d9d9-4af6-b14a-2abe66a7dabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a93e524-dc57-4d3c-8e5f-4cb1b1a4435e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d7bed3-d830-456d-bf66-d7670aa4e0c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1395baac-551f-4ba8-8b6e-514b2ebaca16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfe6acb-a55b-4203-8f87-8214abe5a2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba959a2b-711f-47aa-b2d5-41d7ed1205ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d279f5ea-a664-48a1-936e-35e594f1da0c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f5a3e6-7b9d-4d86-a530-67ef4f8774c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad60dfc4-70d6-4e36-814a-30e0402d60e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5247469-413b-4f1a-bf34-c6f3072ec766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a1c697-1735-454b-b103-63f10404c890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc8375d-b713-45b1-b21c-4c89c94031fa",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87554b2c-303c-464d-bd8d-3ef62384476d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a02a6cd6-e8e6-469e-a4f3-9b082cb203af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6c53ae-f62f-4bdb-97e7-20f8ad63b91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123d3663-9fc6-44af-80fb-436586e070d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806da3aa-1f3a-48f3-a865-b0d647402d92",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9231fed4-f3f8-4feb-a9f1-4fcb9304c4ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11320fde-d4a8-4bac-bc5a-52107546815b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e3e5b6-be6a-457e-ab4a-86903c38bd0f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8348323-df24-405f-9f8c-5350517b96e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efea7873-a3b6-4749-b619-5d1321e879e2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11275fde-75c9-4f8c-9c4d-7eeac649a0b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "137e8057-7946-45b0-b69b-72ff79017726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f03c1c-d96b-4f11-83f4-04c31ebc77ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb8c5bb-2578-4c47-8419-fa6f7e415a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd5e1e9-cdd9-4cb6-8f48-b184990da192",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ddb280-74c8-4a96-a73a-a7375b32c550",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e57ad89c-98ac-4d4a-8281-6c844b013383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69de7bd9-41dc-4721-a4d1-05a28dab5fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9288c56c-58d4-455b-afc9-af7a3d0ccf6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174a4e4e-bd11-4e16-8703-6de5cff19ac8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf8da01-3e56-418a-944f-02e56c67dfc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e40c7ea-a310-41ad-ba6e-e7422cca9128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c468f5dd-fe3e-4d77-8c63-ddadeb92d7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bcfa08d-c071-44af-9124-a8f26d70a81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bed4d0-bd6d-422b-bb52-8046375fe967",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea7f289-d1a1-41af-bbee-70926d0320e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb43853b-48a1-4e94-8cf0-1808d3011121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e93a55f-58e9-467b-a87b-e83db18844ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41760ef9-9d44-44d9-a0b8-7c3fbe778d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5777e674-576b-40b7-adb3-3093b40ae721",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8749741-257d-4643-982a-fb609c4b0b5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9cf7f04-5260-47c8-8173-427aeef8dcc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbb1dbb-86d8-4456-83a4-85b5d79b4670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dee1268-a2d2-40e1-98f2-ef9f763de381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbb77a7-82fb-4d5c-a45e-1b693e429b49",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e44bd0-a704-4981-9f3b-ecea5c75b7da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a79f2d2d-7fd6-4c14-a561-7aa3282b10b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566af19e-1253-406c-8075-b435d7f19c1f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2439a6a9-d11e-4c93-9add-48a9c0639bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c4181d-be33-4979-9539-74d148d11871",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77cd4f40-95db-4b7c-b630-be8cad916a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cab1d88-1315-4034-a2c1-882b85f5c85c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529b8957-919c-4f56-9b2a-10c044d9018e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672d261c-1a00-4cbe-8df5-f2150068a84f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb4dc8da-90e3-45ba-b444-0fbbdbd6e5ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95ed3d38-a6a6-48f6-adb9-8f824b9fdf32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c32bcf3-15e1-4ece-bcd8-44cf9bb72404",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4be4c870-e80a-436f-aee5-3f3d314c6698"
                    }
                  }
                ]
              },
              {
                "id": "bda8bb2c-0660-4eed-9b80-5f4f1218e395",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c394387e-b7fd-479d-82ff-3126e041caf8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a6b424-275b-4515-bc3e-e2d3442777fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5cb51fb1-2450-4f60-800c-980c0538babe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac4166b-f600-476a-88b3-5caffc31fb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e034589d-d3ff-4166-ab3f-4d67f79179f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5706ca24-1fe3-4439-b416-ed76e8ced240",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33106847-f662-41bb-a355-d60eaa20cf5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0312b731-1cc2-405a-8a5a-f77acd962d3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70d422c1-4310-43cd-8100-47fa4bc6f8a4"
                    }
                  }
                ]
              },
              {
                "id": "6a368d6d-e1e8-4ccc-baed-766b25b13aa3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1cc7e4ac-29fe-4051-acbb-016977e3f8b0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921e2f01-da5e-4806-888e-62732c557b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9a3a85ab-4898-4257-a3a8-238d22a18287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c4b042-e7f6-458c-813f-08daa87331da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2012d9f-27e0-438a-a9b2-9498490282cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cc5a245d-ebc1-4934-8427-d34e2a82ba82",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0c631e28-26d2-4a33-9f64-62802961e90b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f68e95c0-2ca3-412f-9ac2-c733d78a8135",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f72adbf9-fada-4e0c-9fd4-20265ae49630"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86a4d71c-6a9c-4772-a1e9-1a9c9afc851f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8154cb5f-27d7-4f1d-93c8-9b04777237d2"
                    }
                  }
                ]
              },
              {
                "id": "af6c17fb-92c1-4fe3-9196-d7b19b5955df",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77ac0d87-7a2b-435a-b1a3-8a1ae06f27d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e466d3e7-5313-4b51-b0a4-4e2219fe5612"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cae53de-8258-40d3-afeb-6132979d17af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4d42d43-73ea-46d9-a016-d53db6505f03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "747ee3ef-28ba-4994-ad89-89741209d61a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a251e7dd-f158-48dc-bcd5-bae3f81abb45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50a0ab57-e994-483b-9229-1c56e8406c96",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f54a2d1-1e48-48bf-acef-a2e4f781615e"
            }
          }
        ]
      },
      {
        "id": "b05d72b5-856d-4102-b6c4-e938a2922578",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c84e562a-e33c-409a-a5d8-974c9b050b5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31846509-8916-46d0-bd75-473d03742549",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aedd9b44-69ce-4973-967e-ccf69a536bae",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627faa7d-64cc-4e53-83d7-d528b4b7a685",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ff7ebd93-4ba9-45b3-9a72-e4d79b405867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18c4469-a719-4280-b6c6-1bd2106a42f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be302d45-0416-4d55-ac24-b6b6adc7cd34"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30a9f040-ac05-452d-a343-14588fdb3206",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3545f12-f104-4f3f-a1e0-b9a76de50c8e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc187d78-f3cf-45be-9daa-3c8f3e2fae13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b385c4b-5121-4364-915f-1f8269d338e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a5e1854-8049-4712-b0c0-32f005ec569a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4baa7b87-e1b0-46ca-bc64-e752aa576854"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6f3b151-a585-4170-aefa-7e097331f9dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8574bd3-084a-46a7-ae0e-80e458393376"
            }
          }
        ]
      },
      {
        "id": "e330ec72-1f2b-47b0-984f-21b0f69a5ead",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9eed7e54-265b-4d72-9d8c-d6a37a89472a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c6c5dd51-698d-4625-83eb-96162e425aae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7bff50a9-e38d-4c89-a0b7-39193481e7b8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e659114-ba30-4387-aab8-aaa6419924ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4aea34f1-b032-453c-aa50-9926fa499e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25960c1-0008-4922-83cf-24303dfdd537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf8f37ac-824b-446f-a7ce-4b92cf92839f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b0a8de2-a46c-4cdb-9c7a-5f7d93659d7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9df78dfd-2954-4b65-8eef-49c24ce64cd1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "866f4194-a6b8-4a6c-9d62-0656c216bbbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2ca15d9-0549-48f3-9269-3cce15c61f90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10db08b9-f07d-4edf-9096-a574bb4d6b85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e23f7757-f6d4-4d03-8c55-f7277403c2fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "930d02d0-2271-4f0b-ba79-7d411e3ea75f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da7fefe2-3179-4a9d-878c-47bda49bf1ce"
            }
          }
        ]
      },
      {
        "id": "d5a7d929-186e-4863-9429-d06899347b9c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0bdf85e7-3b38-41cb-8f08-3ef9859018e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e703c03b-914e-4662-a5ac-002bf189ce15",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "719b17e5-2e68-4d57-93c0-32578b4acacd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df80706-997b-4770-884c-3de2067bac97",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "084976f0-707c-4765-9df1-76771f091d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31446c8-9b1d-4375-98e6-7c57353d19fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "605577f9-5efa-4918-bbae-64c80b58927d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4db3bb4b-10ae-4189-9d74-8f43db374db7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f299a26d-d960-4f25-ba0c-5e758db617a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f38956ee-3de6-47a9-8c37-96ed709348cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0cd11b6-f5a5-4930-94eb-1c449213fa31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cde31d4d-0a63-4bf0-a47a-e4837a3b8c7b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "466a2cfd-3468-4c23-ae65-34808db472b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0222f77a-e594-4f5c-a931-564715d3604d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b88661b-d247-463b-acad-f2cab12af494"
            }
          }
        ]
      },
      {
        "id": "0363acd8-b9bf-4510-bbdd-606f24578df3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba6f9310-58c5-46b0-b5d3-0783887dc7c4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33f458cd-77dc-477a-9dc0-59eac80e9c44",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c4a87c85-12aa-4094-81dd-310c3f4896b6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9262c5c7-0f91-4356-928f-a967e8ec324d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3e68bb0-f40a-4ef1-9f5d-ef7f49f9d6ec",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 259.0035211267602,
      "responseMin": 15,
      "responseMax": 7879,
      "responseSd": 859.9059213946445,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688604583565,
      "completed": 1688604672118
    },
    "executions": [
      {
        "id": "28e30a45-cde6-40ef-962b-612b2b67e375",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7a2fd03e-6383-46c4-9290-0133206fe096",
          "httpRequestId": "3213a51f-5ebb-40c7-b02c-3befae0a9b54"
        },
        "item": {
          "id": "28e30a45-cde6-40ef-962b-612b2b67e375",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2d87a460-5f15-45b5-95f4-49c86b865b30",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 0
        }
      },
      {
        "id": "f6caa068-6486-4b7c-a92e-eeef7d983ad2",
        "cursor": {
          "ref": "5f4efccc-7ca7-4c5a-9a83-5a6e7e6f697c",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f96383ee-4f16-41f3-9ace-0bb86b301ffb"
        },
        "item": {
          "id": "f6caa068-6486-4b7c-a92e-eeef7d983ad2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bd22ca1b-dc80-47cd-9012-eecb9da68fca",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "e23eb4d4-073a-4b30-85e8-f065ef238ead",
        "cursor": {
          "ref": "52e3c837-11a6-4b9f-9499-2e30f1cc730e",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "79435ea5-4d6d-4ab5-83b2-c2562545774c"
        },
        "item": {
          "id": "e23eb4d4-073a-4b30-85e8-f065ef238ead",
          "name": "did_json"
        },
        "response": {
          "id": "7305a572-871e-4885-8ebb-880c50375952",
          "status": "OK",
          "code": 200,
          "responseTime": 414,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904b2482-f87c-4be8-834f-5a3836cbee7c",
        "cursor": {
          "ref": "48f76f16-6d9b-440e-a339-edf6db4014e0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2dff083f-b13e-466b-b97c-ba65499a387c"
        },
        "item": {
          "id": "904b2482-f87c-4be8-834f-5a3836cbee7c",
          "name": "did:invalid"
        },
        "response": {
          "id": "7ca3daff-feb9-4520-abb7-9d19b5cb6eda",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1950,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "904b2482-f87c-4be8-834f-5a3836cbee7c",
        "cursor": {
          "ref": "48f76f16-6d9b-440e-a339-edf6db4014e0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2dff083f-b13e-466b-b97c-ba65499a387c"
        },
        "item": {
          "id": "904b2482-f87c-4be8-834f-5a3836cbee7c",
          "name": "did:invalid"
        },
        "response": {
          "id": "7ca3daff-feb9-4520-abb7-9d19b5cb6eda",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1950,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ca9ac1d8-2306-4b86-bf5e-a60c6a47ad72",
        "cursor": {
          "ref": "427931c3-a5a5-43fd-9fac-37d4c84bfb8c",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4ece92be-5f4b-4802-9da6-f24bbf6748b0"
        },
        "item": {
          "id": "ca9ac1d8-2306-4b86-bf5e-a60c6a47ad72",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d0e5bddc-c9ad-4549-bb28-ac37b2a93418",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6180661a-d41d-46f4-b7d8-30bf5243de46",
        "cursor": {
          "ref": "246bdbcd-3070-4510-8f02-860347425766",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fe8680dd-7029-4611-b97f-401905394ecd"
        },
        "item": {
          "id": "6180661a-d41d-46f4-b7d8-30bf5243de46",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1fbb6d91-c585-4712-8eb7-16673ca529e4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772c1f4c-ee57-4d4a-95de-824b8bb20531",
        "cursor": {
          "ref": "c3961934-fb6b-4e60-b376-41b46df9a78f",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "eaabb319-e0dc-46ff-83b4-f2a04392811f"
        },
        "item": {
          "id": "772c1f4c-ee57-4d4a-95de-824b8bb20531",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "454b3185-10be-4f0c-b1db-b4ba29f2ee46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "5821484a-790f-4b5b-a725-a995292a156f",
        "cursor": {
          "ref": "7f2fa8f7-5871-4138-9595-9387a5f13ddc",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1e88ad39-a82e-4ee3-8684-b4f7717dfd03"
        },
        "item": {
          "id": "5821484a-790f-4b5b-a725-a995292a156f",
          "name": "identifiers"
        },
        "response": {
          "id": "1e0239d1-ea17-4c1d-8e80-75cd2b050eaf",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e3d49b-c40d-4e85-87a6-6da8a6b94714",
        "cursor": {
          "ref": "005e353a-0d8f-458d-afc1-75fccc4a0c8e",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b7dc8db6-87dd-4906-9719-09b1497fb6ce"
        },
        "item": {
          "id": "05e3d49b-c40d-4e85-87a6-6da8a6b94714",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "84a30068-cf30-4ccd-ac3d-32dd7047ed39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cfc053-154e-4c55-90e3-32f4fb93d075",
        "cursor": {
          "ref": "5be6f64d-f736-4f60-9d25-98d35f8038b5",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "42d5e6b9-4645-4c48-a882-f9b67ec5146a"
        },
        "item": {
          "id": "18cfc053-154e-4c55-90e3-32f4fb93d075",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c8e692c0-9c1f-437e-a58e-35bf99b81f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f6c9c8-67fa-4a61-8652-3d14fe451724",
        "cursor": {
          "ref": "1c3cec31-7201-476e-b642-6a647038c695",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b9bd7429-bad0-4c75-a7c6-de23e23d88c1"
        },
        "item": {
          "id": "42f6c9c8-67fa-4a61-8652-3d14fe451724",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "aeaab9b7-5a7a-42a6-be1f-897b9fd620b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfcccb0-4d16-4372-b4e5-d039dc96d4ee",
        "cursor": {
          "ref": "9bd0b5f3-0b37-4571-9e02-5d5f948698f9",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8748e63f-8434-4bc6-ba5f-dbd5d4bcd21d"
        },
        "item": {
          "id": "6dfcccb0-4d16-4372-b4e5-d039dc96d4ee",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "388fff0a-05bc-4ec0-a05e-591960c0938f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6892a733-3b13-42a3-a286-ba8b21550a9d",
        "cursor": {
          "ref": "c61f532f-8341-4cc1-962c-c9f33a264bc6",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "12cf0c49-739e-43a5-8fe9-10c72452bc16"
        },
        "item": {
          "id": "6892a733-3b13-42a3-a286-ba8b21550a9d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "71a509a1-5d27-4d1b-9c9b-33441583122f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d4c652-c1b2-462d-84e8-7caa45080a08",
        "cursor": {
          "ref": "c327031a-2790-4abc-984f-42d9f9afec4a",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "09399be1-d691-412c-9bf5-3d7041019a7e"
        },
        "item": {
          "id": "38d4c652-c1b2-462d-84e8-7caa45080a08",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5c1d80d0-7443-48db-933d-7eea0c458b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d2da91-9df4-4cb9-8fd2-c57871aefdf2",
        "cursor": {
          "ref": "fa78a732-a28c-49fa-9499-d87a93306bed",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2c98cdb6-c1d9-4635-a175-9fef7adf3cad"
        },
        "item": {
          "id": "79d2da91-9df4-4cb9-8fd2-c57871aefdf2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c0dd0364-60da-4b7b-a885-cb85c8bee8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3884f64-d197-4320-a2c0-bb02178f3b92",
        "cursor": {
          "ref": "c653374f-fb02-4f2c-bc69-b227797e3f6c",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fc312336-053b-41d3-96f0-656d65bf4a59"
        },
        "item": {
          "id": "c3884f64-d197-4320-a2c0-bb02178f3b92",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b3f6d515-a71b-401f-aefc-1d4165bd0cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03880389-2d38-41da-bb9a-a09c24d79e44",
        "cursor": {
          "ref": "4cb93551-2989-43a2-9dc8-325f1447dadc",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4b803cbd-86f3-4d5f-aef7-1791ca26af75"
        },
        "item": {
          "id": "03880389-2d38-41da-bb9a-a09c24d79e44",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8b9db782-2567-4caf-83f3-c4aab7f7ff8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83df4dac-0edf-450e-ad60-f0cb3fe950ca",
        "cursor": {
          "ref": "87c62382-9cbb-440f-8f8c-961d042732b7",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d0952372-3ae9-487b-a0f7-3a1ec90d52a4"
        },
        "item": {
          "id": "83df4dac-0edf-450e-ad60-f0cb3fe950ca",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9c655cb1-dd30-4598-baba-2160598ad269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489fa34f-73d5-4b4f-9cef-1d1966695f46",
        "cursor": {
          "ref": "536fde2c-65f0-4ad7-89c7-5a5d292e5ab8",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "aef93fc5-8476-44f1-b9f3-8e17a3fb4d64"
        },
        "item": {
          "id": "489fa34f-73d5-4b4f-9cef-1d1966695f46",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "059a29dc-236f-4a83-810e-a409e69e90b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e38786-b4ae-4642-83f5-0f6c36bed6ed",
        "cursor": {
          "ref": "d15f9e88-2977-456d-a512-24bb30111bec",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8aa0cbd5-1940-484e-a3b5-1af4486680d5"
        },
        "item": {
          "id": "f6e38786-b4ae-4642-83f5-0f6c36bed6ed",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7223def6-b75b-405e-bc29-eae42be97c5b",
          "status": "Created",
          "code": 201,
          "responseTime": 1810,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5804962e-6d54-433b-8b31-c6ae515100eb",
        "cursor": {
          "ref": "ffefbff7-8b08-4f92-abe7-1b8ec7f75265",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "783cc559-1cf7-454e-8e11-7885bededd21"
        },
        "item": {
          "id": "5804962e-6d54-433b-8b31-c6ae515100eb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "be07f594-11c6-4d01-ba34-c7325330262a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb9a646-d297-4780-b4c8-f113a1e364c5",
        "cursor": {
          "ref": "2c70e2bd-ca40-4528-a858-d4a93c01775f",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "00bfca23-e809-44b8-8b5d-ef5eff3d150c"
        },
        "item": {
          "id": "deb9a646-d297-4780-b4c8-f113a1e364c5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0aec01c8-54ce-4226-9f0e-aeeb6ad1b37b",
          "status": "Created",
          "code": 201,
          "responseTime": 7879,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "9e015323-03aa-4fc9-8029-5b1bdb37c86c",
        "cursor": {
          "ref": "b37e9b08-9bf2-42b8-ba5b-f14f1720fcf5",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "43c703a1-65ab-4f22-855c-b72cddb746e7"
        },
        "item": {
          "id": "9e015323-03aa-4fc9-8029-5b1bdb37c86c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "595f84f8-b500-45d6-bd18-b255258b7d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c0c38c-a086-41fa-af23-712b567ded2e",
        "cursor": {
          "ref": "ce940c86-a2ad-4e83-93b8-6ef8c25ae8a3",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "541ad79b-2dc3-4561-9181-42ebba62a94c"
        },
        "item": {
          "id": "e4c0c38c-a086-41fa-af23-712b567ded2e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9d75919e-e1df-4a33-b12e-2e99439afda9",
          "status": "Created",
          "code": 201,
          "responseTime": 6145,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4ddc481a-4079-40a3-b39d-e57e0adb28ea",
        "cursor": {
          "ref": "5797a78e-ac6b-4197-b59f-a3a119873c25",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4743e65a-eeef-42c9-9f9d-88c0c0a55811"
        },
        "item": {
          "id": "4ddc481a-4079-40a3-b39d-e57e0adb28ea",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7565c8e7-cb3c-4aca-92de-8ae8af8bc6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb66034-3467-4dc3-a8fc-5c3bad0efcdc",
        "cursor": {
          "ref": "76fd28c6-f22b-454c-91dd-3951efb38dda",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "992a8598-3722-445b-b5e0-736f2c028422"
        },
        "item": {
          "id": "eeb66034-3467-4dc3-a8fc-5c3bad0efcdc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1403c39c-3343-4272-bc68-fcb30ac14626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1249a74-65d7-4ebc-b2df-d6405f61dee6",
        "cursor": {
          "ref": "3a129356-6d27-4db9-a3fa-d47da34dfe43",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "45a01a96-309b-4c81-a1f8-3a756b9fc082"
        },
        "item": {
          "id": "e1249a74-65d7-4ebc-b2df-d6405f61dee6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "48a14232-5972-403b-ad1a-5de1b5ee2196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d1ae3a-b7fe-4df1-a297-647fe900a0b8",
        "cursor": {
          "ref": "d9ecbfd4-6920-49b7-ae7c-fb39a4cfde95",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5595a4fd-0d3b-4da9-b1d1-24abaf18b127"
        },
        "item": {
          "id": "05d1ae3a-b7fe-4df1-a297-647fe900a0b8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "effa2c02-6c96-483b-8303-db043048a5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcfe18a8-207e-4eb0-9697-823e09eea757",
        "cursor": {
          "ref": "1ed64963-e4bc-48ca-8dec-1db922218c4d",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "aedfaeea-703a-4370-a715-183ed7fffb68"
        },
        "item": {
          "id": "bcfe18a8-207e-4eb0-9697-823e09eea757",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c0b72da4-8a2d-46db-abd1-5ae4bfc10dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d046adb-ec5b-4064-811e-128c4ac8f36e",
        "cursor": {
          "ref": "bd9e56ce-1b44-484f-bfa7-be5bd9b567e2",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ea1c2658-a7b7-43e8-9a46-5ade70a79493"
        },
        "item": {
          "id": "3d046adb-ec5b-4064-811e-128c4ac8f36e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9cd35047-45d3-497f-b302-3fc09624c17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af079338-2eab-4331-8588-3132e7a67b2d",
        "cursor": {
          "ref": "eb31bc2b-edc8-4104-b6f1-08f761d4d717",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "13b02830-8e86-48ea-b7a1-34a861affe42"
        },
        "item": {
          "id": "af079338-2eab-4331-8588-3132e7a67b2d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "da990f86-a5de-41e7-b707-5d1b1c01270c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e457961-0bcc-43b2-a4dd-e00fb62722f6",
        "cursor": {
          "ref": "a9453e5d-3b39-4206-a3ce-12aaf116cf36",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e8a970fc-c77d-4752-a231-9ed80bd452d5"
        },
        "item": {
          "id": "3e457961-0bcc-43b2-a4dd-e00fb62722f6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8aa915a6-98d6-4c93-b8f5-8ee8af1648f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6706b34f-3611-4a58-91ac-609e6517fff7",
        "cursor": {
          "ref": "afb49acc-c9a6-453f-a778-0d5e19c80847",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "098eb3b2-85de-414f-a9be-d24bb814c0e7"
        },
        "item": {
          "id": "6706b34f-3611-4a58-91ac-609e6517fff7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fabd2aea-99de-42a2-8e0e-09d448d73974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df0a01e-1a3c-44a5-8822-a1903bab71df",
        "cursor": {
          "ref": "43bd27c0-2ecb-4278-8a7f-9d1b7b2fa1b3",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "58819187-ec1c-4ba2-9488-944702e75136"
        },
        "item": {
          "id": "1df0a01e-1a3c-44a5-8822-a1903bab71df",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "775538e5-6ec8-464f-b04e-cfd95c481e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c452785-14d1-42cc-95d5-fde95ebfb432",
        "cursor": {
          "ref": "b405e1de-84ca-49b1-aec6-032ce231b366",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "12914245-40f1-4778-b2b3-7b5712300369"
        },
        "item": {
          "id": "7c452785-14d1-42cc-95d5-fde95ebfb432",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "135395de-a266-421b-9660-dea752a7d550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21666914-eedd-423e-a3a7-9e7d0faaaec2",
        "cursor": {
          "ref": "ab298c01-0ca8-478a-8afd-10d3c3f60e42",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "34833986-e876-4e97-965f-e4552994344e"
        },
        "item": {
          "id": "21666914-eedd-423e-a3a7-9e7d0faaaec2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5b0f5a66-f371-4efa-91db-1c83d9974913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc82902-7c7d-4878-9b53-ec24e10615ba",
        "cursor": {
          "ref": "0078a642-c89a-4d81-b4d0-4580ed2b4cfb",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bac59f0d-3bb4-4abb-8755-17125003b568"
        },
        "item": {
          "id": "5dc82902-7c7d-4878-9b53-ec24e10615ba",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a9595928-6355-48c2-8a54-7a693d01033d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091b5708-0c3b-406d-8ce5-f808ac80f88a",
        "cursor": {
          "ref": "d65c26f9-90bc-4f0b-b029-2accd0724550",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ef82a404-ef5a-478c-bf33-1ec48156b695"
        },
        "item": {
          "id": "091b5708-0c3b-406d-8ce5-f808ac80f88a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "59025956-dd43-448c-bd1a-38f863730d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf11343c-afb4-44a4-9063-369b2c48b193",
        "cursor": {
          "ref": "93c118c3-5142-4c45-b52b-e79d9932c21a",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "92474ab4-e392-4bd6-ae03-96fd9f03c869"
        },
        "item": {
          "id": "cf11343c-afb4-44a4-9063-369b2c48b193",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fbac49a1-ccc6-44c7-8fe1-d6f36ab1520e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610e19d7-f358-4551-90eb-164fe09b42f1",
        "cursor": {
          "ref": "4a0779ee-5e70-4551-9be9-631c5c2b1f34",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "929c82e6-480a-45af-a1c3-86da89a44f79"
        },
        "item": {
          "id": "610e19d7-f358-4551-90eb-164fe09b42f1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6fb361ec-9261-46c2-bcac-cd52414e628b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31819426-2750-4a68-a853-f11e2c450c0e",
        "cursor": {
          "ref": "03097570-fd75-4964-8a3f-9c43d7b1b97e",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b9030604-0140-4bf4-81ae-86c42c2d5069"
        },
        "item": {
          "id": "31819426-2750-4a68-a853-f11e2c450c0e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2c069d85-04ef-4f79-b71d-26aa2c9cbcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf60bbd-1fe2-4a24-bf93-67b23e749857",
        "cursor": {
          "ref": "f3b0e748-4eb2-4429-8772-f59f0e204dbe",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "feecbd27-c661-40c7-9d5f-268e9c410c02"
        },
        "item": {
          "id": "ccf60bbd-1fe2-4a24-bf93-67b23e749857",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "52e0dfe0-1f84-48cf-b4b2-72c027145bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005d5eeb-4a6c-4add-a34d-1706b45442be",
        "cursor": {
          "ref": "05cc99a2-5f0e-4882-bd4d-5251bc8e50e3",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "69830f85-de29-4f25-9c2e-f964054c261a"
        },
        "item": {
          "id": "005d5eeb-4a6c-4add-a34d-1706b45442be",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "aa583e3e-393a-4da0-ba13-8964c320970e",
          "status": "Created",
          "code": 201,
          "responseTime": 2992,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "cb3391cf-8246-4994-9752-1cfa27a00076",
        "cursor": {
          "ref": "2ce91e13-8bb0-42a1-bbcc-def4f0071989",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a405151a-116e-49a3-9700-364b738f9b64"
        },
        "item": {
          "id": "cb3391cf-8246-4994-9752-1cfa27a00076",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "31f36422-94df-4273-a8f5-fc780bb301d7",
          "status": "Created",
          "code": 201,
          "responseTime": 5545,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "45918540-6b75-4735-a8a2-792e64dc7045",
        "cursor": {
          "ref": "405cf8ae-2efe-4314-9f7a-8644cfbc1e8b",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3d7f0b1c-0cf4-4cc0-a7b0-e8aeb485d088"
        },
        "item": {
          "id": "45918540-6b75-4735-a8a2-792e64dc7045",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a391d888-d0e5-4f7e-a061-ff07e1872222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b307e3fb-c289-4959-a9a8-b361f3eb8e09",
        "cursor": {
          "ref": "c9ca58da-fedb-462e-a51e-f1e1e89799c8",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "31a51440-3b65-4588-8076-304065fd8ada"
        },
        "item": {
          "id": "b307e3fb-c289-4959-a9a8-b361f3eb8e09",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "128810d6-fc97-49d3-b073-2cc2299a1869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b84e2fa-fbfe-43d0-91d5-3d0b0589a9eb",
        "cursor": {
          "ref": "2fbd89df-95cf-405f-b1a9-2bdd158cbd03",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "087d4bec-eb28-4ea7-af2c-2ff59fd922a1"
        },
        "item": {
          "id": "2b84e2fa-fbfe-43d0-91d5-3d0b0589a9eb",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e8874658-e349-40ea-8faf-4c2768934938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4760e2cb-05ad-49d2-9343-d95d6c352341",
        "cursor": {
          "ref": "da9eefaa-2693-44b0-a8d9-3466be10a0b3",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1a6b65c7-47b9-4f85-b0a2-65a173495a3b"
        },
        "item": {
          "id": "4760e2cb-05ad-49d2-9343-d95d6c352341",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a42c6619-d5a9-40ee-84db-8a78b302f7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb77aadc-c37f-4800-ad7b-9271659df462",
        "cursor": {
          "ref": "6d903446-8542-447b-85bd-d21971ebe1c2",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4be61334-081b-4a16-994e-8ba543227f98"
        },
        "item": {
          "id": "eb77aadc-c37f-4800-ad7b-9271659df462",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a6fa978b-5c3d-4f94-994e-3ad53b79ee98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d7213e-b066-4d60-84f1-f4c7aaba9b47",
        "cursor": {
          "ref": "adfc4482-846b-40f4-9a3c-5a3674cb3561",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "09af229b-bb3e-46ee-bd72-b49f0e227f34"
        },
        "item": {
          "id": "b2d7213e-b066-4d60-84f1-f4c7aaba9b47",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6cc33886-42d0-43ff-8c75-74c725c9f5dc",
          "status": "Created",
          "code": 201,
          "responseTime": 2995,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "034acd51-819f-42f3-839f-818722e97f53",
        "cursor": {
          "ref": "a7cef3ce-4c99-41a3-9869-a61e556e7b16",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d5547a6a-d8db-4ba9-96a4-d258fcb2b7b3"
        },
        "item": {
          "id": "034acd51-819f-42f3-839f-818722e97f53",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e75894a0-0ee4-4d0a-8487-c82af9cfcc42",
          "status": "Created",
          "code": 201,
          "responseTime": 2933,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6098d94d-fc4c-43f2-8bab-ff187c9efe8d",
        "cursor": {
          "ref": "d71efaa5-dcce-45b3-8aa2-c89fb9a986fa",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2c3355fb-a507-4d7d-a311-e1987dc143aa"
        },
        "item": {
          "id": "6098d94d-fc4c-43f2-8bab-ff187c9efe8d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f5adc98e-ce6a-4202-a189-e9ea2b28dfc4",
          "status": "Created",
          "code": 201,
          "responseTime": 2605,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3f1bac23-7de9-4ac9-a96b-d9e5d8f4eec2",
        "cursor": {
          "ref": "4422904c-7d48-4518-ace2-b956866218ec",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "16f5b1aa-6ca4-40c0-8229-cd79e6fd237b"
        },
        "item": {
          "id": "3f1bac23-7de9-4ac9-a96b-d9e5d8f4eec2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "836ee08d-fa9c-487a-9d11-0d825a8a38a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34312f7-9ab7-4664-ac62-6fe98be4e363",
        "cursor": {
          "ref": "c1c01246-9286-475f-bea2-e3ca938c5111",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "583b5a9b-05c7-4ebe-ab9b-ec7bae1cb7b1"
        },
        "item": {
          "id": "f34312f7-9ab7-4664-ac62-6fe98be4e363",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fb7243f1-8ea5-4484-9f28-dc250a1c1b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fda15a4-975f-4304-b464-aee8c49872dd",
        "cursor": {
          "ref": "06f76e73-908b-4348-b130-b8b5a374543d",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1473c887-5d76-49fa-9bf8-d4e36e268ad5"
        },
        "item": {
          "id": "3fda15a4-975f-4304-b464-aee8c49872dd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7fa4e4a2-fd0a-47e8-b394-467050943f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2434e3-4a73-4bdb-89ed-5c1c123ea35a",
        "cursor": {
          "ref": "165c8988-a00b-45cc-b947-10331dbd68b2",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1fed6397-5313-458f-9bc0-ce33edd381e7"
        },
        "item": {
          "id": "3a2434e3-4a73-4bdb-89ed-5c1c123ea35a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5eb8590a-4ba0-4c1e-a5be-15856c93067b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77e4d7b-463a-422b-af99-a75157eb8620",
        "cursor": {
          "ref": "5970c58c-9dc6-4350-bded-e976297222a8",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ecc20d1d-b35f-4bd4-a805-acbb3f3f2729"
        },
        "item": {
          "id": "c77e4d7b-463a-422b-af99-a75157eb8620",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b71b427b-1038-4746-a5a7-97abcbba8d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f53bde-fd63-4788-bf9b-c3b6e7c7146a",
        "cursor": {
          "ref": "df938699-5cea-455b-b70d-7615d0d76ef1",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1dc25cbb-ac00-488a-b59c-b5cda4adf3ad"
        },
        "item": {
          "id": "31f53bde-fd63-4788-bf9b-c3b6e7c7146a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0effc7b9-6d0d-4180-8747-8f9d6c4028a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e4eb8c-d273-4bf0-94a5-4954594cd9fe",
        "cursor": {
          "ref": "c98693d1-7193-4c28-a127-be29b02829a1",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "dcb25acc-21db-4475-a8de-736906a0faf6"
        },
        "item": {
          "id": "c4e4eb8c-d273-4bf0-94a5-4954594cd9fe",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a420d9fb-9d7f-4d5b-97fc-01e017e7cff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d305b3b4-e221-4957-82d9-3d77fb301b9c",
        "cursor": {
          "ref": "24ee462d-e450-4ad4-b950-700221cdd8e2",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f461c4cb-f284-4340-a63d-2c2b6aaf83b0"
        },
        "item": {
          "id": "d305b3b4-e221-4957-82d9-3d77fb301b9c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "538dc716-db55-496f-aa8a-fdf7665a0abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e558b19-eb51-4dbf-9299-2da8a49da271",
        "cursor": {
          "ref": "68fe839b-5c46-4e82-a02b-15cd80a17534",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bd36b29f-85a5-4c17-945a-4bba52176e00"
        },
        "item": {
          "id": "9e558b19-eb51-4dbf-9299-2da8a49da271",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "93a09430-af13-47f3-83f3-44e677bf67e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2cfee1-8781-44ba-8984-cf4612dd4b58",
        "cursor": {
          "ref": "1f269dfb-70d7-4795-8f4b-362c95aa9bd0",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a0b46ca4-1a65-421f-b6ec-6ef6154eb6f8"
        },
        "item": {
          "id": "7c2cfee1-8781-44ba-8984-cf4612dd4b58",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b7617bc4-eb30-417b-893e-e3ddd0b02eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bba5c80-cbb2-4542-aaff-0ec5370bf8e1",
        "cursor": {
          "ref": "3eaed680-b17e-426d-9fb5-3e6cc733d446",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c962d1ae-99af-4c65-a95b-e109418b8977"
        },
        "item": {
          "id": "3bba5c80-cbb2-4542-aaff-0ec5370bf8e1",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5f260101-228a-4adb-8b9d-8b3ec1cb222b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7c13cf-b6be-4486-84df-d8f50701ecb5",
        "cursor": {
          "ref": "0e1dcc22-5a0f-44b6-9a8c-d3483805763c",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d482e695-e10d-4eab-89f0-997ce49288af"
        },
        "item": {
          "id": "2c7c13cf-b6be-4486-84df-d8f50701ecb5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d70fb0ed-a678-4619-ad74-78f7ee0c8b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d79ece-152c-4ce6-9e30-14d8a4b26cd2",
        "cursor": {
          "ref": "1144df0e-93f4-40de-9b77-048ca8b10706",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e5582912-37a9-4f9f-9aa6-50796ef28fe5"
        },
        "item": {
          "id": "90d79ece-152c-4ce6-9e30-14d8a4b26cd2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "75e41ef1-dd4a-4118-bb36-d5c9ea1a1eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd22e32-54e7-47d2-a71d-9c866f34107f",
        "cursor": {
          "ref": "061dd58a-9089-444d-a98b-6b54178abf9f",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9badfb7d-6cd3-4c5f-88cd-e1dcc6281228"
        },
        "item": {
          "id": "9bd22e32-54e7-47d2-a71d-9c866f34107f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "28a2d807-f31e-46ec-811b-9ce95b6ce69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61052ea3-60aa-49e1-8f65-0a35dca08f0f",
        "cursor": {
          "ref": "6d90451e-6c11-4519-9782-567fb8aefc1e",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c54d9073-78c6-41e1-8f2c-8d8ac48fd669"
        },
        "item": {
          "id": "61052ea3-60aa-49e1-8f65-0a35dca08f0f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "26c2325b-2f95-49e1-9710-d2b3c6ceecdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bffd1794-3c0e-443a-8e18-5ff043bd7edb",
        "cursor": {
          "ref": "7541fdc3-d44b-4904-99d5-b5f2774e26df",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dc2bd262-2ada-4dcf-8e18-935d69dcc678"
        },
        "item": {
          "id": "bffd1794-3c0e-443a-8e18-5ff043bd7edb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bc43beab-9cd1-48d5-825d-b37a299456e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8811cfd-eadd-452c-9fbe-ea3085c170e7",
        "cursor": {
          "ref": "fdb1d0d8-618f-4190-b237-08a9da1ed55c",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "26dbf0cf-a456-4bde-8412-6e018fb66dc1"
        },
        "item": {
          "id": "e8811cfd-eadd-452c-9fbe-ea3085c170e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a67e9469-627c-443e-832d-d41d0172b3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a781bbd0-8409-423e-ad7c-ad2273250f3c",
        "cursor": {
          "ref": "817636fa-4f8e-4282-89c7-fc5813b1f8b6",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ff19ce0e-f3b0-4d4f-bb7b-2a9e2fcfc39b"
        },
        "item": {
          "id": "a781bbd0-8409-423e-ad7c-ad2273250f3c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f5c2d00a-d3a9-49d9-aa5c-867b8b995eee",
          "status": "Created",
          "code": 201,
          "responseTime": 2294,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "d89fd888-b235-4105-9743-0d22df984426",
        "cursor": {
          "ref": "c1352977-2456-4793-a6de-57795c43a351",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0442fd45-decc-4a30-9baf-5f2d6ba1c5c0"
        },
        "item": {
          "id": "d89fd888-b235-4105-9743-0d22df984426",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1fa12d94-7c1f-4fb8-8a42-cda2c8542c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643b2839-a911-45e2-bf2b-94e1fc7c9037",
        "cursor": {
          "ref": "1e002426-6b9d-44c9-9ec2-992b2bbe2c99",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c7d517ce-3728-4b19-a735-6f0bff05931b"
        },
        "item": {
          "id": "643b2839-a911-45e2-bf2b-94e1fc7c9037",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "517434c8-282d-4b67-802b-ba049f1edce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c656530f-1195-48ec-9b62-2723c34e6776",
        "cursor": {
          "ref": "0faf713b-8671-45a9-8559-87a696a6eb5a",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d2210400-f400-4db3-be86-21a345eb8c65"
        },
        "item": {
          "id": "c656530f-1195-48ec-9b62-2723c34e6776",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "909d7ae6-e999-4690-9bae-87787923cabe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff2bdd6-d497-4aaa-9f62-1c2e72e9a3ec",
        "cursor": {
          "ref": "532525b8-935d-4ea5-ae84-6b3aad77476b",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d4646f69-8baa-492f-93e8-da97d8e67d1c"
        },
        "item": {
          "id": "2ff2bdd6-d497-4aaa-9f62-1c2e72e9a3ec",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a4db242c-1c61-4ab3-a253-73651a5a9044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2eb0e6e-7de4-4047-ac2d-a3052074cb0b",
        "cursor": {
          "ref": "ea552fbe-a712-4255-bf53-38198af58483",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ef2d01a4-6720-4509-89f9-6abfc9237f9a"
        },
        "item": {
          "id": "c2eb0e6e-7de4-4047-ac2d-a3052074cb0b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7fb5de7b-ebbd-4136-9362-d5846d9120d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9577592e-ac8e-49fd-9945-4db3dd53ab89",
        "cursor": {
          "ref": "dd8c2930-4d74-44d1-9a25-58c22faf46a5",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e9352fa9-0e2f-40ba-89fc-ffb221a51209"
        },
        "item": {
          "id": "9577592e-ac8e-49fd-9945-4db3dd53ab89",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0ab61a2e-163f-4cfa-94e5-30282985263d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830d3830-ea7e-4e8b-872e-fc4a7fc0f746",
        "cursor": {
          "ref": "250e52e6-6e84-4afd-8661-712e4dde746e",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "88159f9d-27c0-426b-9e76-246e3df9a88d"
        },
        "item": {
          "id": "830d3830-ea7e-4e8b-872e-fc4a7fc0f746",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8363f96f-b580-4705-8ca4-0caaaf71235c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd74918-9768-4359-af53-c73657887ade",
        "cursor": {
          "ref": "a8937efa-e3b2-4319-858c-0a6ad29ce787",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7a7ed9ba-3795-4e85-b176-5ca12f9c2ef5"
        },
        "item": {
          "id": "8fd74918-9768-4359-af53-c73657887ade",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "76d0eb6e-b572-4e02-835d-76cf70884acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b628ebc3-3c96-4992-915d-853e615a6c7e",
        "cursor": {
          "ref": "44c1c737-6a39-4ea3-b856-b91663000f0c",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3bb47593-115b-4935-a117-b40fc419510e"
        },
        "item": {
          "id": "b628ebc3-3c96-4992-915d-853e615a6c7e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "222226a8-f413-4fde-a374-e3ae1afbd504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0048a3-147b-49cd-8f53-283a7a9b608c",
        "cursor": {
          "ref": "af9a6d93-1837-45ad-a421-ffa33722d2f4",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "873dab26-37a3-4d06-bdea-7b94c7eeff6e"
        },
        "item": {
          "id": "fe0048a3-147b-49cd-8f53-283a7a9b608c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e8fe9bcf-0439-4743-b521-440e3b58d3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd43731e-8deb-4a96-bf20-05031424edcd",
        "cursor": {
          "ref": "9cdfd41c-f3a2-4624-838a-07044d41109d",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "01f9c257-e178-4e7d-88ee-4595a01d6442"
        },
        "item": {
          "id": "fd43731e-8deb-4a96-bf20-05031424edcd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "05c273db-6861-41a1-9123-0d6c3960655c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc038e6-5b9f-4b4d-92a1-ba1d1af3eb6d",
        "cursor": {
          "ref": "5aa54e34-a690-4ac2-9f37-1212f6af2a4a",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f3d293f1-a8c4-4705-9fc4-558a11788a03"
        },
        "item": {
          "id": "7fc038e6-5b9f-4b4d-92a1-ba1d1af3eb6d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e1a4642f-06cb-4d52-8901-ae61972564b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440500b4-4783-4117-972f-6929627bcc40",
        "cursor": {
          "ref": "11cd734c-1047-4926-860c-b23850865112",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0bbe1c94-471b-4826-bb39-42300442e6f4"
        },
        "item": {
          "id": "440500b4-4783-4117-972f-6929627bcc40",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "00f639a7-fd35-4027-9692-c761914342d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c866436-ca3a-440f-b32a-7300ce8a5f74",
        "cursor": {
          "ref": "7454419a-ceb1-4310-9e0e-f383f6a6abd0",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bcd2e7ce-fda9-42d2-80c3-1c6d03ed63ac"
        },
        "item": {
          "id": "1c866436-ca3a-440f-b32a-7300ce8a5f74",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "84bdbe05-fdbe-4b69-9605-c8905d8b90c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b006dd-95f5-41aa-a580-d3a6bba0356e",
        "cursor": {
          "ref": "69aab58a-bb28-45f4-93ce-705731064211",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "49e97a37-2e60-4445-ada1-1d76321c722e"
        },
        "item": {
          "id": "41b006dd-95f5-41aa-a580-d3a6bba0356e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "09077c67-3582-4a81-ac2d-e56f9ba9b793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb5f633-73c2-4eae-80a6-4a28dcdeee75",
        "cursor": {
          "ref": "00394296-ac89-4c13-a33d-f03ba813edb4",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "46d2ed06-288d-407e-9c16-f339ca9e48c4"
        },
        "item": {
          "id": "bcb5f633-73c2-4eae-80a6-4a28dcdeee75",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8b0a0fc3-d469-449b-a566-2ec5ae8146ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7199bd-c0f6-4660-985a-af17264304c9",
        "cursor": {
          "ref": "46d9d6cd-5abb-41d4-87ec-387b2e2696fb",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4a5dbd8f-4ea2-4c4a-a2f5-405615c33459"
        },
        "item": {
          "id": "fe7199bd-c0f6-4660-985a-af17264304c9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "aff9df2c-4d1b-4a32-84f9-dc81e53e92b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f13fb0-d712-46d0-a371-d7f17f7fee88",
        "cursor": {
          "ref": "6f4d6283-9882-4f81-9926-b06c78b03586",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8693b52f-c538-47f9-b838-a1ca73d0d984"
        },
        "item": {
          "id": "d0f13fb0-d712-46d0-a371-d7f17f7fee88",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0172104a-88b8-4c7c-a8a7-a82d6c72429b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409faa4d-a12b-472c-a8da-8d7c65ca446e",
        "cursor": {
          "ref": "359f4925-9127-4bdb-808b-6fdc4f4736de",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f5384516-eaa8-4db6-abb4-c7624cb18bdd"
        },
        "item": {
          "id": "409faa4d-a12b-472c-a8da-8d7c65ca446e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "22f58a05-6d4b-4fcf-9429-c1dcb9da8aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 444,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac3570a-8d53-420a-b5c9-8c7f0a3e11d5",
        "cursor": {
          "ref": "751591f5-6f5f-48fe-9a0d-549004d982ce",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "714f04e6-b0f8-4485-886a-36d546c04e42"
        },
        "item": {
          "id": "4ac3570a-8d53-420a-b5c9-8c7f0a3e11d5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9e224608-2649-4dae-9a83-661697dd724b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea0132d-dcdc-4b9a-919c-d35704d9daae",
        "cursor": {
          "ref": "39fb9139-93fb-4f46-8acf-494d9ca461e0",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "514af6d2-1821-4eb7-922c-2dab6ae6d232"
        },
        "item": {
          "id": "eea0132d-dcdc-4b9a-919c-d35704d9daae",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "072669da-9c91-4012-9611-13eeeeb214f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33bbe9a4-24de-46c1-819b-f27becb44211",
        "cursor": {
          "ref": "991a6842-69de-45b9-b291-70796fd807b6",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fad46585-cc2c-44a8-b0ef-29f55245c194"
        },
        "item": {
          "id": "33bbe9a4-24de-46c1-819b-f27becb44211",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "abdcc80c-4bd4-494a-8f57-f68d6072e07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b531f826-4034-4993-bd9c-6515760a9ada",
        "cursor": {
          "ref": "c3b0274b-e2ef-45ac-a5a7-60aa1a1d07b8",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "08266b31-f997-426b-8d9b-5810d3a85858"
        },
        "item": {
          "id": "b531f826-4034-4993-bd9c-6515760a9ada",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "382b7527-619a-41ee-8351-3858b765d5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57e5ee9-f6c8-4093-8f7a-d04f527e40cf",
        "cursor": {
          "ref": "5405f40c-38dd-42aa-8814-b65c30e00dd4",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6f84ff7b-2b51-4622-a1e5-c705cbef5d72"
        },
        "item": {
          "id": "f57e5ee9-f6c8-4093-8f7a-d04f527e40cf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "374a6b01-93db-40e6-8a7f-b9247e2fef87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83325297-c1dc-4918-8a26-2757a6cd4a59",
        "cursor": {
          "ref": "732e1f61-a2cc-4208-b0ec-6c137ec19a68",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "16f5fc9a-e6a0-42aa-8768-0413842a6293"
        },
        "item": {
          "id": "83325297-c1dc-4918-8a26-2757a6cd4a59",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0d30d234-1e71-468c-a091-e74f8c7326f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f618b0d-9dc0-41bd-b6a5-b1b45813409c",
        "cursor": {
          "ref": "2b7e0645-bb29-4118-b43d-e37ff761825c",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "31236531-4ff7-4081-a4f0-d5e39978b22f"
        },
        "item": {
          "id": "2f618b0d-9dc0-41bd-b6a5-b1b45813409c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "beb73086-f3e5-4627-b199-46bda5ab5f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a925fd-b87c-43e1-be7c-5fb8c3b31b2c",
        "cursor": {
          "ref": "29a7c6c1-92b8-4fe0-94da-22deba3abeff",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fb5d4935-9ba2-44a5-b3e4-4ed0cff06fc9"
        },
        "item": {
          "id": "47a925fd-b87c-43e1-be7c-5fb8c3b31b2c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8ef16726-9e21-4fd4-b408-4739e95b64aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd627f5f-04b1-471e-877f-bfe4ecbb10ce",
        "cursor": {
          "ref": "95d8969a-ba81-4fc6-a2e2-329a8ec7548b",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b74ab4ba-8eb7-44db-9f60-83f0ea315c6e"
        },
        "item": {
          "id": "bd627f5f-04b1-471e-877f-bfe4ecbb10ce",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0baf934a-930f-4ca5-8fe6-e1544e34b473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3dbede8-5d14-433b-a836-c1967afb088a",
        "cursor": {
          "ref": "069f34d3-46cc-4a13-9e60-9b6a6a80d478",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bb3bc8d9-4f43-4fc3-b250-ee28a80c3ee3"
        },
        "item": {
          "id": "a3dbede8-5d14-433b-a836-c1967afb088a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "67249d99-0fa3-4991-82af-607367c9dbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67474f8-a5b6-42dc-989a-b00c27a91331",
        "cursor": {
          "ref": "544f1ca2-efb3-4f99-a7a2-6d8ac16e2ead",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bad037fb-0e38-4eae-8a57-08d26c4d5895"
        },
        "item": {
          "id": "b67474f8-a5b6-42dc-989a-b00c27a91331",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ec21d18e-bda5-4d9b-8f52-84d0e7c4cdb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9620b5-8ff2-41ea-a2de-88d901e6343b",
        "cursor": {
          "ref": "e2e3b947-728e-4256-81a7-062287b113d2",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "171e6397-813f-4f64-b2c3-0decd7c57e70"
        },
        "item": {
          "id": "2f9620b5-8ff2-41ea-a2de-88d901e6343b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "00580295-96bb-452d-81a4-7083c783d707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "3c1169ed-9d1b-4638-b903-75dc84712681",
        "cursor": {
          "ref": "a686a60d-a6bc-42cc-b0f5-aaa2de3a9fb6",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b72f9a3d-beda-4dd7-9406-426e43fea083"
        },
        "item": {
          "id": "3c1169ed-9d1b-4638-b903-75dc84712681",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a85a716e-c907-40d7-9639-1c3a5d9a388e",
          "status": "Created",
          "code": 201,
          "responseTime": 2185,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "339a8370-6916-4146-bf97-878d2a027fc5",
        "cursor": {
          "ref": "900cb4bd-c1d6-4216-a748-86cb3fd9f8d0",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ef6a5ceb-f61a-4d99-b9de-52f9c44965dd"
        },
        "item": {
          "id": "339a8370-6916-4146-bf97-878d2a027fc5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8954c154-086c-48a4-bcac-ad678e6a331f",
          "status": "Created",
          "code": 201,
          "responseTime": 2472,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30a9201-fef6-485d-9f1f-46018a1914dd",
        "cursor": {
          "ref": "ca7040ac-0b56-4ce4-83f0-49f895b17dd7",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2c395191-1feb-4668-bf70-487b2e497a54"
        },
        "item": {
          "id": "d30a9201-fef6-485d-9f1f-46018a1914dd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "52128f52-971b-4830-9bb3-d40524f7a1c7",
          "status": "Created",
          "code": 201,
          "responseTime": 2730,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "23550554-6902-4871-b9b5-26e349f521c9",
        "cursor": {
          "ref": "525b971b-d7b2-46d9-9814-a44bf80c123d",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c8e654c7-8c67-45b7-8ef9-11e900a793bb"
        },
        "item": {
          "id": "23550554-6902-4871-b9b5-26e349f521c9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "39b7db5f-8a49-4649-809e-525c5f6ff328",
          "status": "Created",
          "code": 201,
          "responseTime": 2586,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a4a7bd-e808-41c1-ae7f-4d0a7ea4fd2f",
        "cursor": {
          "ref": "2c330390-7c54-4b07-bd0d-d00d16d67f14",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8d3f2d4c-50aa-406d-a2b0-7098f15004de"
        },
        "item": {
          "id": "d3a4a7bd-e808-41c1-ae7f-4d0a7ea4fd2f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2a1b2e90-890c-4f13-a928-9ccba6b0495f",
          "status": "Created",
          "code": 201,
          "responseTime": 2697,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-06T00:50:45Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-06T00:50:45Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "8b76fa71-fed3-4030-9ca6-4012864abe9b",
        "cursor": {
          "ref": "08954ff0-6d0b-4b6f-9a56-e8b12136ca86",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "92deab3f-87ca-4708-a2a7-e64267b8d49f"
        },
        "item": {
          "id": "8b76fa71-fed3-4030-9ca6-4012864abe9b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2bf85074-dc87-4bd4-a889-f8843179fd8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "ed44ee98-d771-4e0f-ab7e-29e13e1d004c",
        "cursor": {
          "ref": "470e5469-df00-4d0e-afda-e1b8c0a67a66",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "30a7f8f4-cae6-4534-8180-b1604e47f2d7"
        },
        "item": {
          "id": "ed44ee98-d771-4e0f-ab7e-29e13e1d004c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "edf451f5-0189-4495-bd83-544706f4cba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119c3424-cb1d-4252-bfba-e29535213667",
        "cursor": {
          "ref": "962f18dc-3f43-447f-8162-ccd0f7477566",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7c1ad667-d5fd-4767-8390-a77738214db1"
        },
        "item": {
          "id": "119c3424-cb1d-4252-bfba-e29535213667",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5cc7f252-f2d6-4cd6-b296-1450e878c425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b193737-9f77-4023-95e9-b802fe974990",
        "cursor": {
          "ref": "b7fa1753-ad8a-43f8-a10a-6bad986bf950",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "930b0f3f-41c8-4682-9691-c57b0eb6d1af"
        },
        "item": {
          "id": "0b193737-9f77-4023-95e9-b802fe974990",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3b5b585d-0157-4ad4-a8df-d13a76e16a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b051fe-e4e1-4cbb-a578-30187dac0db4",
        "cursor": {
          "ref": "a4867831-09e0-487b-9e3c-21b856370fe4",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "afc5edd9-ceb5-4e6e-86bd-46eef5eeb462"
        },
        "item": {
          "id": "39b051fe-e4e1-4cbb-a578-30187dac0db4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3d24f195-0a1b-44a8-83b3-2d97848e4c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d161ac1f-a4b1-41c5-b194-4f3559a0e76e",
        "cursor": {
          "ref": "08799896-b470-41ab-ab0e-29fd95466253",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7502f83c-f58e-4545-ada3-a83fc1d1d0ee"
        },
        "item": {
          "id": "d161ac1f-a4b1-41c5-b194-4f3559a0e76e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d36f13e9-e17f-4f0c-8237-c88b37712fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10acda3d-fbc9-408b-811b-50d83689815d",
        "cursor": {
          "ref": "e14c3295-051a-435d-8fd1-6b9cc3b3137f",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3388dd96-2ff4-4b7b-b73d-078a29843c5a"
        },
        "item": {
          "id": "10acda3d-fbc9-408b-811b-50d83689815d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "499aad64-9392-494e-bcf9-0f20a4e31dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70dcec7-b4e9-4ed4-a2da-32b6050bd664",
        "cursor": {
          "ref": "e614068b-0cdc-4bb1-a27c-aea3f73ede02",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ed593011-f5a5-43cf-a325-a0ce168d5d43"
        },
        "item": {
          "id": "a70dcec7-b4e9-4ed4-a2da-32b6050bd664",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c1ecd15a-c48e-4df0-aad8-135e3bfac9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d57d536-bd7a-4bb0-99c3-94cc06e7d82a",
        "cursor": {
          "ref": "d1a0ba29-bc17-43bb-b6a2-174d931ccbc0",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "96cbc4f3-9f1f-4b6e-aee8-6cf6ee116be9"
        },
        "item": {
          "id": "7d57d536-bd7a-4bb0-99c3-94cc06e7d82a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4f2e6ab8-72c5-408c-a7b6-fb35c3f70941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef01372b-6691-4cb4-b736-65bcc793a999",
        "cursor": {
          "ref": "c2fd1a82-d656-40b4-9834-19482f302713",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e1152d8d-ce63-4c58-89d1-dc7e3a3dc0f6"
        },
        "item": {
          "id": "ef01372b-6691-4cb4-b736-65bcc793a999",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ccf87b64-3397-48a1-a55a-dbc082098025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3b1f1e-a127-46e8-9dc5-d6cfdd4a7684",
        "cursor": {
          "ref": "e23319ca-293a-415d-aba7-1c9dc90869ee",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e7d781ea-eb83-447e-9199-19404c3ce2d4"
        },
        "item": {
          "id": "2e3b1f1e-a127-46e8-9dc5-d6cfdd4a7684",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ea17e42c-8484-4db7-9b77-63af60d9c385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e46031-cf49-4907-8697-6bc35d4043b7",
        "cursor": {
          "ref": "f8ce4a53-056d-42cc-be4b-7f3ac003ce70",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c90242ab-3836-4007-8ef5-8c0e9514630f"
        },
        "item": {
          "id": "c1e46031-cf49-4907-8697-6bc35d4043b7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e5aaabb6-0b83-4633-9e86-1a273817252a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5a7f37-d6c0-4516-be46-b78bb11869d6",
        "cursor": {
          "ref": "1e82dac7-a3b7-4c5d-866c-0c3c93f20f4f",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4602a2e2-efb5-425e-97fa-6dda2d0660dc"
        },
        "item": {
          "id": "ac5a7f37-d6c0-4516-be46-b78bb11869d6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "aa9cd7e0-e61d-4a43-9489-2440bb1edf58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538f3df9-e128-4780-be88-95437520f80a",
        "cursor": {
          "ref": "dc4bc488-f055-41d0-81fa-b104c25901cd",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "53946472-69a8-410a-a85f-aee72c9e456f"
        },
        "item": {
          "id": "538f3df9-e128-4780-be88-95437520f80a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0da11c74-1db4-46bf-a36e-6f66753eca1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977d2d4e-95cb-4063-84fa-543afe4b4e7e",
        "cursor": {
          "ref": "57c770a1-6f19-416d-b1c7-549abaaf9613",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "20dc7ccd-1796-4ea7-bb58-07647d7a2602"
        },
        "item": {
          "id": "977d2d4e-95cb-4063-84fa-543afe4b4e7e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "86b937c1-b5cf-48a3-8792-27e533d153a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fb57e6-aa4c-4f46-8bae-2db11502e7e0",
        "cursor": {
          "ref": "4d77a336-768b-4475-814b-73092b76a6f5",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "74efc986-9c36-49c4-ae3d-85961251232e"
        },
        "item": {
          "id": "b9fb57e6-aa4c-4f46-8bae-2db11502e7e0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7af81a6a-952a-4718-8e77-f899959e88a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6e965b-e26e-4e16-abb1-71a7b44855e9",
        "cursor": {
          "ref": "42608034-cd73-477e-87c2-9d4d2fbe62c8",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cc0f1da7-7c6b-4ec9-b561-005fed8148dd"
        },
        "item": {
          "id": "8a6e965b-e26e-4e16-abb1-71a7b44855e9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5a42d50a-86e1-427d-9760-816293b7d3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d17ece1-165b-4dab-bc12-6dd4ab183b18",
        "cursor": {
          "ref": "ecbbe729-248b-49cf-bd87-43a4d71c383f",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "90b7eca5-5ea3-461b-bb94-e8f5dfe5905c"
        },
        "item": {
          "id": "6d17ece1-165b-4dab-bc12-6dd4ab183b18",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "07d57c17-4d93-427f-a5fc-fb2bf83544bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fbe97f-3e42-4bab-9c1f-58c917bca0d2",
        "cursor": {
          "ref": "dfc3f9ae-3298-4701-8854-0af59820ee69",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "765ee71f-267a-4ed8-be68-406c1467fa17"
        },
        "item": {
          "id": "f8fbe97f-3e42-4bab-9c1f-58c917bca0d2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f6d5de3c-50a3-43c7-9b6a-3a090ed01fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0fc5bc-7593-4b7d-8325-3055369a30d5",
        "cursor": {
          "ref": "b8cb3598-676d-411a-a108-3ce35da66f77",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0bb885db-9dfd-45fd-96c0-7dfe37929f64"
        },
        "item": {
          "id": "3f0fc5bc-7593-4b7d-8325-3055369a30d5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ab53ea99-8a86-4000-9259-0ae4d2beb274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7216c0f5-3b13-4f20-95a8-6b590e94e425",
        "cursor": {
          "ref": "21ec2c49-37e9-4b83-b23d-cd636061bc88",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cd65310d-6684-45d0-a775-c28b59ab8c69"
        },
        "item": {
          "id": "7216c0f5-3b13-4f20-95a8-6b590e94e425",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "34ed0734-03bb-4744-90bc-c1891c41ab28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fd9d34-abd5-4647-a815-9d4c064a61b7",
        "cursor": {
          "ref": "d6a79907-0479-4c15-ba7d-53d4a4e1ca7f",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c7bf2dfb-da56-48c4-8079-d2842e563119"
        },
        "item": {
          "id": "74fd9d34-abd5-4647-a815-9d4c064a61b7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ab137f5c-2ee7-452d-ab5e-993d1d913eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637c8c99-4706-4f45-8bf0-828eff1a02f5",
        "cursor": {
          "ref": "aba1eadf-eb97-4cbb-a214-4f1d213f7bfb",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "42a4fd51-87ba-4c3c-86ae-9657767239fc"
        },
        "item": {
          "id": "637c8c99-4706-4f45-8bf0-828eff1a02f5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0338f279-3b37-4dec-8de8-c2f328c0be52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d19020-1507-4506-9897-9c8e3b1895c8",
        "cursor": {
          "ref": "d503e1c8-ccbb-4f9e-83be-6df99d3be15c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "afb96dbf-b44a-4bad-a421-0917327fdac1"
        },
        "item": {
          "id": "b9d19020-1507-4506-9897-9c8e3b1895c8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "74021447-8c5c-4eb8-a976-53ac48799f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eeae4c2-4c58-494f-b015-3401cb83aed8",
        "cursor": {
          "ref": "45cde693-a1dd-4429-9a74-2d9ae26ba693",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e07d110d-7bb0-43b2-b597-5ea94a6e84c8"
        },
        "item": {
          "id": "1eeae4c2-4c58-494f-b015-3401cb83aed8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ea1a3ee9-2903-4b8c-a066-a212f687eb12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ad423e-b4e8-4a02-9a01-1101d127e200",
        "cursor": {
          "ref": "34dd78e6-9fa8-408f-aee4-52cf0f623a92",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "88845274-0e2c-47fe-8b2f-4cb544b0d60c"
        },
        "item": {
          "id": "b2ad423e-b4e8-4a02-9a01-1101d127e200",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7a6ff960-9583-447a-8a44-ff65cf842d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51c5f36-096a-4f7d-beff-d8789e123275",
        "cursor": {
          "ref": "db1905f8-7884-480b-ad41-151d71d18e2e",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a2a86630-2849-475c-aab7-3eb52fb2af11"
        },
        "item": {
          "id": "f51c5f36-096a-4f7d-beff-d8789e123275",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "81f5f073-289d-48dc-80d9-dcdac3810447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc49c3d8-6676-46d2-9b61-e48ec6ca96e5",
        "cursor": {
          "ref": "f9098036-2d1f-43ed-b78b-bc435ba250a1",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b0ba315e-b4ab-4c6f-988c-af90aca547a4"
        },
        "item": {
          "id": "bc49c3d8-6676-46d2-9b61-e48ec6ca96e5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6fc9feb4-b9f6-47a2-b4ce-be0cda1a8e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8f1d26-2894-4668-9e52-05e01d6d8be4",
        "cursor": {
          "ref": "1a828467-01f0-4fec-ba38-5ecc2ed45aec",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4ad502b3-9bc2-4b91-b4db-8c3c3668857b"
        },
        "item": {
          "id": "9a8f1d26-2894-4668-9e52-05e01d6d8be4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c2fb3444-8def-4817-8522-5541b2d68a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f093a41-5d5b-45ff-b489-12fa66445719",
        "cursor": {
          "ref": "06a26e83-be3c-4731-aa18-fa05c5f76e95",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "89a0d03d-df1d-4637-a5a7-d6ba6366b595"
        },
        "item": {
          "id": "6f093a41-5d5b-45ff-b489-12fa66445719",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "959f0385-f559-4d42-bab9-c81e91f15147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae427c38-499a-4033-a866-bb339fb5f404",
        "cursor": {
          "ref": "d013ef56-6588-4e2f-bbdf-8fa1029c7469",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "903a79e3-fc24-45d2-8cd5-e778779693b2"
        },
        "item": {
          "id": "ae427c38-499a-4033-a866-bb339fb5f404",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7db5eeb1-dae8-43d7-94f6-3d98d2fe86d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259bd102-2f74-49d9-9aed-d9f3066633f6",
        "cursor": {
          "ref": "a69b92af-6baa-41ec-9322-4581c3ae07dc",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ba9729cd-392b-44c7-8757-e66293c26f44"
        },
        "item": {
          "id": "259bd102-2f74-49d9-9aed-d9f3066633f6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "35d189c5-49e6-4d44-8cf3-c548a79107c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d5dc5b-c243-4534-b020-82e4b8cc4e50",
        "cursor": {
          "ref": "63c06892-7fb8-4e74-88e1-d356aebe6a8e",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9d3d4e6f-a11e-441c-80f0-80df58bb298a"
        },
        "item": {
          "id": "67d5dc5b-c243-4534-b020-82e4b8cc4e50",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "435d642c-2d92-44ac-94fe-84c19f3bd99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f431e98-d967-450d-a8ff-2c3a3339f561",
        "cursor": {
          "ref": "07b2df3b-99fa-4b58-9531-fd3369db0432",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1ba2a18e-efc7-4a6c-a617-b9beb51df717"
        },
        "item": {
          "id": "4f431e98-d967-450d-a8ff-2c3a3339f561",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8982b6e9-febe-46a7-a1d3-29c8b1b33d56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "45b71021-42d5-4e25-9e4a-7fa132547fff",
        "cursor": {
          "ref": "e99bbb69-0b68-45de-9d2c-39c3cb058b03",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8d674bbe-5b20-4981-bf05-6c121ad4bafa"
        },
        "item": {
          "id": "45b71021-42d5-4e25-9e4a-7fa132547fff",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b662bf18-6e3a-4761-b5b8-4b912a9cb281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd17b56-e0ae-4d0d-861f-b4bee99fd16e",
        "cursor": {
          "ref": "406d7ee9-d03a-43bc-bfc5-7c505d66a8e6",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "afdb4166-f773-4106-9557-6f777cdc302e"
        },
        "item": {
          "id": "7bd17b56-e0ae-4d0d-861f-b4bee99fd16e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fa8d8119-b779-42dd-9e9b-e35ef2c32da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f989379-9276-45b3-87c8-d82a9de9b8b1",
        "cursor": {
          "ref": "d89bb3d1-241d-4ccb-b4e4-2e395e2d0ee2",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3bd9330b-a383-4d42-ae4b-65a2207e58d5"
        },
        "item": {
          "id": "3f989379-9276-45b3-87c8-d82a9de9b8b1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "61fce849-663f-43fc-96da-6912dfc896fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e0805d-a352-4c8b-97d5-4f7c8b72e9da",
        "cursor": {
          "ref": "c77979b7-8b09-4831-8073-f9c63c87e56e",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dcb653c3-e352-493f-80b7-ce40f58d7945"
        },
        "item": {
          "id": "01e0805d-a352-4c8b-97d5-4f7c8b72e9da",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "82e05a1c-0196-4e1d-992d-d2b289222619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7873efb1-799a-40d5-910c-59c0c2ac1f5c",
        "cursor": {
          "ref": "1c20f5a1-63f3-4e0f-b212-c92b49cc9a18",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "316f400c-fc81-4f18-b812-376172cbf6fe"
        },
        "item": {
          "id": "7873efb1-799a-40d5-910c-59c0c2ac1f5c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bd57d064-3618-4b26-b23e-fa223c9c7376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa6e253-4eb0-4bc0-90d9-89f0ae8c4485",
        "cursor": {
          "ref": "28d67483-1359-4531-a265-cde21d15638d",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "aa62f1ca-692b-4624-9bdb-217ac8b83e9e"
        },
        "item": {
          "id": "afa6e253-4eb0-4bc0-90d9-89f0ae8c4485",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1131e64a-dcb7-4fcc-8bc0-626b64279b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a859a75-a8f9-44bb-899b-e6814206caa2",
        "cursor": {
          "ref": "9b430c1c-e8ba-4161-8b6c-fbcf9fa9cbe9",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ed8f259b-c9d1-4b85-bf36-a63e36e31ecc"
        },
        "item": {
          "id": "0a859a75-a8f9-44bb-899b-e6814206caa2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d494b2ff-1300-4f87-878b-ba06164850cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b081bf7-8dae-493e-b369-d18bfcfd8166",
        "cursor": {
          "ref": "243c1d5c-2a38-45dc-accd-954ca5af0d6f",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c596ba97-c32f-419d-b5f2-05ec6ccbb86a"
        },
        "item": {
          "id": "2b081bf7-8dae-493e-b369-d18bfcfd8166",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f2e26ecd-5490-4a04-b1a0-122d0e2e8f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e549bfd5-0719-4c86-bd70-c8d62e1782c8",
        "cursor": {
          "ref": "1f74e752-cd87-47d6-95e7-cf320af39c70",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e2713a3a-2023-4694-8ca7-8c16d1136855"
        },
        "item": {
          "id": "e549bfd5-0719-4c86-bd70-c8d62e1782c8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "59c7d54e-dc1c-4ca2-8018-1b0bbc427378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceafff4c-b0a3-453b-8b5a-fa4859d243a4",
        "cursor": {
          "ref": "9b19bc4a-6cea-469e-b0b9-f2724f11a817",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9b2c60f2-a915-4b0c-97d4-5936ac0f88a6"
        },
        "item": {
          "id": "ceafff4c-b0a3-453b-8b5a-fa4859d243a4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a933ba41-0139-4aa0-9762-87f1c75b1ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2898cf26-f2c2-44aa-9b88-2a81093aca97",
        "cursor": {
          "ref": "25b7542c-aaf0-4884-b5ee-1ac86b1cac09",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "69b0f2ea-5713-465a-9d43-79372403c94b"
        },
        "item": {
          "id": "2898cf26-f2c2-44aa-9b88-2a81093aca97",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9a1f7f31-71f0-4284-abca-476477465347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b8004a-4711-4c69-8c25-5e9b582ee048",
        "cursor": {
          "ref": "d2a4e2a3-d657-42d2-b894-5694842b2563",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4d4724d7-c887-431a-8328-a4bfc6fb232e"
        },
        "item": {
          "id": "d4b8004a-4711-4c69-8c25-5e9b582ee048",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2721f1bd-f835-494d-8f80-0379395d9248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951926f0-1072-4af6-ba5d-1f1df947722a",
        "cursor": {
          "ref": "c3188e28-9116-464a-8881-79c1978b45d1",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5b648ed6-6fde-4f03-ad25-1223b1a96430"
        },
        "item": {
          "id": "951926f0-1072-4af6-ba5d-1f1df947722a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9e432b4d-316b-4be2-b247-3dc863f924da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397c24f0-f2e6-433e-8e2d-3652898d6df7",
        "cursor": {
          "ref": "ffc5e4e2-cf4d-465a-a937-1b92ff728d7d",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e2d520a8-d011-47fd-a558-423b486d5df7"
        },
        "item": {
          "id": "397c24f0-f2e6-433e-8e2d-3652898d6df7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "572ce549-de9e-483e-94d4-0da77b23e602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e894c489-dab1-465c-a112-68102f3cdfd2",
        "cursor": {
          "ref": "426e2465-ced2-4418-bf59-001cbfba8d10",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fd5bd4da-dbd1-49b3-a0c8-18c3c4407639"
        },
        "item": {
          "id": "e894c489-dab1-465c-a112-68102f3cdfd2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "83ebfab1-44c6-4c79-9884-2288f2c48e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de778e1-79d4-45f5-a240-fc2bfd20f835",
        "cursor": {
          "ref": "c25170dc-ff5b-47c3-b154-630ec93074eb",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3eef3be3-4cfc-400d-b0e0-65b97f41cd92"
        },
        "item": {
          "id": "5de778e1-79d4-45f5-a240-fc2bfd20f835",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e9e9c065-8b78-4cfe-9dad-86ac7cafec4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fc6430-d403-4398-9a7c-b72cd6ddc038",
        "cursor": {
          "ref": "ef8faba5-0789-4a0c-8ea3-acac029f5247",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7ea05287-2649-44f4-af8c-1f2f6fdb450b"
        },
        "item": {
          "id": "04fc6430-d403-4398-9a7c-b72cd6ddc038",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b344985f-55d4-48f5-b05b-b312a06f6c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66733e27-249c-4da2-82f2-924dd0334e57",
        "cursor": {
          "ref": "34c55b3b-16e4-42c7-98c1-5b58b0b38721",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f85c09e4-e4c3-48f1-bb15-a3cf5deb0529"
        },
        "item": {
          "id": "66733e27-249c-4da2-82f2-924dd0334e57",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "59dd5f03-d249-40a2-9a6b-226a81272d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e91eeb9-880a-4db2-b840-0e5e45f564aa",
        "cursor": {
          "ref": "e9cc11ef-d019-489a-b791-7d1251b13a71",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b0ab4b56-6dc7-411f-b4bf-26e1ca7f1709"
        },
        "item": {
          "id": "8e91eeb9-880a-4db2-b840-0e5e45f564aa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1dc1d490-111f-40fc-9dc2-d04e1368a7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198e3e6c-286d-4b71-91f0-a86b02b969d8",
        "cursor": {
          "ref": "368a0b46-8580-42fa-b194-d584b5dcc2a3",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7fb6aa8f-605c-45d8-9364-44b5e86e6dc4"
        },
        "item": {
          "id": "198e3e6c-286d-4b71-91f0-a86b02b969d8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9f6de5e7-4c80-427c-8112-04a60f87ad89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715eb089-9665-4451-a44b-ecdf597839e7",
        "cursor": {
          "ref": "a803bf23-f389-4175-8d7f-34c73ffd969c",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "010f6ee7-dff7-4c74-ad61-e281c192ee59"
        },
        "item": {
          "id": "715eb089-9665-4451-a44b-ecdf597839e7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "294c0af1-31a3-41ca-b4f2-af71cbe561d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef630eb-5908-4c1e-ae13-ddf05798b9a9",
        "cursor": {
          "ref": "c2d90e1e-9702-44d4-8933-f8a509f46cfc",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e56f71d8-8a00-47e7-a74c-660802b1c778"
        },
        "item": {
          "id": "eef630eb-5908-4c1e-ae13-ddf05798b9a9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a1257a47-251a-4288-9ce8-a03c30f45bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259df39b-de3f-4003-9cac-ba30dab682a7",
        "cursor": {
          "ref": "abe21fb8-d110-407d-8689-f53f42daa792",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5249eeed-0484-4918-b383-87edc06d0d91"
        },
        "item": {
          "id": "259df39b-de3f-4003-9cac-ba30dab682a7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c4a398cc-9340-4fbb-8a93-63fba19f7f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17584bad-909f-4dac-a0c1-2dd748047102",
        "cursor": {
          "ref": "ba85b649-0a85-44ce-a687-62939ff739b5",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "67801385-2ebb-4fb9-a538-dcc8733bf50f"
        },
        "item": {
          "id": "17584bad-909f-4dac-a0c1-2dd748047102",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6670d6a6-0cd2-4367-b99b-8b226d12e965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394ba8a4-19b9-4580-a9d4-b8371117ba91",
        "cursor": {
          "ref": "bec11c33-7d9b-41ba-a36a-ac18acb0dfed",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7cd8baaa-5f53-4322-bc7d-ef116fccfb64"
        },
        "item": {
          "id": "394ba8a4-19b9-4580-a9d4-b8371117ba91",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a85c6715-943d-48a3-a6af-28435ab25ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c642297-34b3-4959-b634-3f25842f493f",
        "cursor": {
          "ref": "7fb463e1-8362-4c68-b6b1-d24926f2d3cc",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d8e9115a-d883-4734-bd64-bb26a07c7da4"
        },
        "item": {
          "id": "3c642297-34b3-4959-b634-3f25842f493f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d59abdaf-182a-4272-9abb-1d68b9fa03ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4352ce7-93ed-494c-9e7f-0417bda99408",
        "cursor": {
          "ref": "a186035a-5567-4edc-b12c-692704974772",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f8e0e662-63d2-4451-a084-8f094f8e4a1a"
        },
        "item": {
          "id": "e4352ce7-93ed-494c-9e7f-0417bda99408",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0a26bab9-ff27-42a1-845d-348fcdee3fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3bc1d8-ba06-4670-a135-b4cccc53cc39",
        "cursor": {
          "ref": "a3355259-6fc9-40e9-8bcf-3676628289e2",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6923779a-9ce6-43af-a30d-211633cd00b3"
        },
        "item": {
          "id": "bd3bc1d8-ba06-4670-a135-b4cccc53cc39",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7d6fcb44-aa6b-42e5-ac17-1b7dcdc3d249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cc07f8-1f8a-40b6-b747-ccacaceb342a",
        "cursor": {
          "ref": "1a3490d9-392d-4ece-9684-59af78d33299",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a4fb1ac6-64e2-4c2c-a3d7-95de5fcc0389"
        },
        "item": {
          "id": "12cc07f8-1f8a-40b6-b747-ccacaceb342a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3e98c160-d723-4c25-a608-ebadc6df5ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950af8d9-21ee-4279-a931-68927863c3f3",
        "cursor": {
          "ref": "95e482e2-c208-4b75-8c5e-fc80a0491b1b",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5cc75a20-f9d2-4491-a011-0f2603669556"
        },
        "item": {
          "id": "950af8d9-21ee-4279-a931-68927863c3f3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4ba4e670-4988-4636-a206-1644dbbc7c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfe0ab8-7b9f-45ce-82a7-19512f7ab72c",
        "cursor": {
          "ref": "79cb1a67-807b-4f6f-bf74-01c44fbeb603",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6270c9e9-bdbf-434b-bd2d-2b9a6e6b21b7"
        },
        "item": {
          "id": "fbfe0ab8-7b9f-45ce-82a7-19512f7ab72c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "be582331-2672-4e13-bae5-c95187128336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db9b7dc-2524-4d77-bd67-7494c1112d12",
        "cursor": {
          "ref": "b063993b-0e2c-4313-99f4-a79f8d0b1ed3",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b392968b-0ff3-4f11-bd86-56fde3b74624"
        },
        "item": {
          "id": "3db9b7dc-2524-4d77-bd67-7494c1112d12",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "41ad92b6-2791-42c3-9feb-393fd792f2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90091f57-57f9-43b2-a003-a36c9a09e313",
        "cursor": {
          "ref": "94098aa5-72f0-4477-a5eb-cc098e6bc766",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "505dad2b-1b0d-4e1e-b2a2-e99e30c19af1"
        },
        "item": {
          "id": "90091f57-57f9-43b2-a003-a36c9a09e313",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2685b21a-2b53-4502-9a05-d4c5c671ab67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fbf65f-ab28-41e5-815c-4d12cc416a10",
        "cursor": {
          "ref": "0e599ecd-339d-47b6-8959-366ee5b9cdcf",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0f44c0e7-8289-425e-8a49-dd8780a9bca3"
        },
        "item": {
          "id": "b0fbf65f-ab28-41e5-815c-4d12cc416a10",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9643925c-363b-449c-9d11-f986726d66e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f666cc-f9d7-4b0d-bf4b-9cda49e94d09",
        "cursor": {
          "ref": "227f662f-6509-4037-a7fd-eb4067add481",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d2bc2b6c-ee3f-4ad6-be14-9d3def712dcd"
        },
        "item": {
          "id": "c7f666cc-f9d7-4b0d-bf4b-9cda49e94d09",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "55612411-d696-471e-b44e-de94c88c8bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e2798e-d9ed-42b4-ac8c-d48c631a890e",
        "cursor": {
          "ref": "e7ee74a0-474c-41c0-971b-0aa8a9243fc4",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "93bf0ff0-5e79-4b6a-abf9-569a503fd7f1"
        },
        "item": {
          "id": "48e2798e-d9ed-42b4-ac8c-d48c631a890e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7b8bc450-9d20-46c4-9396-5e4dd3cf7517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea2ce74-b54b-4cd7-859a-dbcfd2f14126",
        "cursor": {
          "ref": "060836d9-251a-41c8-90f3-13ddf99c69e3",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2aecc559-a601-4782-bbb8-6b6fd7b6a95d"
        },
        "item": {
          "id": "dea2ce74-b54b-4cd7-859a-dbcfd2f14126",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9f165e4d-0994-4f02-a563-f2e19d5ab216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b769680-65e0-4076-b718-f0fef0427c1e",
        "cursor": {
          "ref": "dd84e94b-6a0d-41fb-b904-fae6e58e1d73",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b4036ee9-0998-49aa-8f5a-aa46ed30f4d6"
        },
        "item": {
          "id": "1b769680-65e0-4076-b718-f0fef0427c1e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f0e60190-726f-4600-b2c1-8693bcf3d8c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "3a6833bf-fe6f-4c8c-98a9-acb9d0565fbf",
        "cursor": {
          "ref": "236f86aa-2bce-4fd6-94c0-c348eb4efb68",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b80c41bd-4d3e-4957-8253-803724c3e425"
        },
        "item": {
          "id": "3a6833bf-fe6f-4c8c-98a9-acb9d0565fbf",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "139827ce-b79b-4516-b556-afc810945ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23ed444-af26-4d92-8911-3f4867bea6ca",
        "cursor": {
          "ref": "9c948ebf-c278-401f-a258-bc844f7b2951",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2288b97d-3bb7-4246-b73b-c403d5542379"
        },
        "item": {
          "id": "f23ed444-af26-4d92-8911-3f4867bea6ca",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "78d78f0f-8d06-4d3a-b791-050818fac012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad11a96f-9627-40e3-934d-66742440d43c",
        "cursor": {
          "ref": "104755db-3a8e-49de-9bac-77ffb7aec50a",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "475394f5-1bd5-4722-ad61-e8b318c80a66"
        },
        "item": {
          "id": "ad11a96f-9627-40e3-934d-66742440d43c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "eef5ba9f-50f6-4f95-a6d4-b6e7b28a4d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b930074e-1e93-4c4b-ace4-8be4abcf5ef6",
        "cursor": {
          "ref": "a7436186-bd8a-49b7-98ff-171b9335295c",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f8531f54-5fb8-4cd1-90b2-6de444ebc380"
        },
        "item": {
          "id": "b930074e-1e93-4c4b-ace4-8be4abcf5ef6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ce3dc7e6-8be1-4e78-9b62-e65ceb9727b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85739fd8-961c-4bcb-b433-3bd6b265d010",
        "cursor": {
          "ref": "17f8f44e-a7cb-4a39-ab58-c5c995c8d4f6",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ded663b1-e657-4736-8bba-ef7552124efd"
        },
        "item": {
          "id": "85739fd8-961c-4bcb-b433-3bd6b265d010",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "cffd3b7d-63b8-406b-a248-dba048392ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59be93bd-66cd-4bd3-b71c-fffad9aed360",
        "cursor": {
          "ref": "ce83d430-5a2d-4af1-acf7-74e4bf6893b3",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c1981fc7-4a20-4c40-bb15-ae837748ff32"
        },
        "item": {
          "id": "59be93bd-66cd-4bd3-b71c-fffad9aed360",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "afddf5f9-b205-4813-8687-e2e248f61c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c31c80-713b-44a3-b4ca-e6bc862621bd",
        "cursor": {
          "ref": "e4e67a83-8358-414f-9cec-d5ae15fdf605",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ad191a29-b6c7-4148-848e-542e4f6f6815"
        },
        "item": {
          "id": "c6c31c80-713b-44a3-b4ca-e6bc862621bd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d7652b07-bc32-4f6c-bea6-a0cc77d3db11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c970da8-fb4e-425a-8dbc-41962212bd0a",
        "cursor": {
          "ref": "0d514b64-ab67-40ea-a2df-b671614063de",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "545818b8-3a14-4864-89fa-b298ff0806d1"
        },
        "item": {
          "id": "4c970da8-fb4e-425a-8dbc-41962212bd0a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f2efb9ac-3e95-4a67-b49d-08029bd90708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd721318-2a77-4ba1-84fb-75b20d7fdd0e",
        "cursor": {
          "ref": "679aee13-ec61-44a0-94c8-e6f7df9bf54b",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9684d1e0-b836-4f12-81e6-00eb450a7522"
        },
        "item": {
          "id": "dd721318-2a77-4ba1-84fb-75b20d7fdd0e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "27ac78fa-875d-425d-966d-4a763374f1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed0a333-e250-441f-b35d-5136ec8b6b36",
        "cursor": {
          "ref": "78b9c140-6c43-4740-946a-0cb6e2ee5522",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e6f5fe9b-f5e7-4fb9-b275-36b9206dca93"
        },
        "item": {
          "id": "7ed0a333-e250-441f-b35d-5136ec8b6b36",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "94fe5bca-ab59-4ede-8ee1-558d1673bcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db985bd4-dab4-43d7-8337-603b36c4350e",
        "cursor": {
          "ref": "589f0861-f6b3-4c39-aaa8-ada21b843856",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cf2e193b-c633-4421-a4f4-51df6526d4f4"
        },
        "item": {
          "id": "db985bd4-dab4-43d7-8337-603b36c4350e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "229965a6-a704-4a9a-ad01-89afa752b038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca3f04c-5953-4c07-a741-91c7cf83331f",
        "cursor": {
          "ref": "780e3141-806a-421b-b17e-8788c4a275bb",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0edc8f03-dd88-4f41-ad42-0eb0e38167bd"
        },
        "item": {
          "id": "cca3f04c-5953-4c07-a741-91c7cf83331f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6c507427-9691-421b-8a23-fc2c49317aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124309e8-a7c8-42c2-87b9-b91b314c8d0a",
        "cursor": {
          "ref": "93a844e8-f40d-4931-ad17-60c1eb337aeb",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a7982658-4ecf-41dd-999c-62772a5f50a6"
        },
        "item": {
          "id": "124309e8-a7c8-42c2-87b9-b91b314c8d0a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "aabe5b49-6778-48bb-b70a-37e4bbbbaefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f18a21-1f36-488e-ba54-95e1aecfd6a8",
        "cursor": {
          "ref": "6196b8c5-b4f5-45df-b09e-12a3c8f72116",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "530e24e4-bcd8-495c-b5fe-15cbbe6baee7"
        },
        "item": {
          "id": "83f18a21-1f36-488e-ba54-95e1aecfd6a8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "98ddcd09-c569-4242-ac20-a7d768031683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0f9fc5-25e8-40d2-80f0-333003964b3c",
        "cursor": {
          "ref": "2fb24bf1-94e8-46f7-b184-6c62a929de23",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "689b4499-4ac9-4b19-ba90-c76e980d3e5b"
        },
        "item": {
          "id": "fd0f9fc5-25e8-40d2-80f0-333003964b3c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1a30f9d3-2692-46a5-9377-bb4f0abb9d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580d86b8-5deb-4c9c-bedf-a65483a2385d",
        "cursor": {
          "ref": "0eb83f0c-475f-4850-8c5b-29444c4cb44e",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "778c2235-d55d-48d0-9bc6-d5bdf63df8d7"
        },
        "item": {
          "id": "580d86b8-5deb-4c9c-bedf-a65483a2385d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2f2a874c-1375-47b1-99c7-0e3a993933a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c673ee17-7fc6-4be3-ab45-df45ce5873cb",
        "cursor": {
          "ref": "a1d19ca1-c091-4aac-baf7-1d5b32b53add",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e2ef30e0-b64d-4425-ad72-64a015c9f26f"
        },
        "item": {
          "id": "c673ee17-7fc6-4be3-ab45-df45ce5873cb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "af680026-98e6-4924-8c32-0cf737f0d499",
          "status": "OK",
          "code": 200,
          "responseTime": 650,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "2386813b-97bd-411e-a99a-bc5caaf41c8e",
        "cursor": {
          "ref": "671448a0-0957-4c30-baa6-5546660948e3",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "65309772-c8e8-4c0c-940d-02103c09e18c"
        },
        "item": {
          "id": "2386813b-97bd-411e-a99a-bc5caaf41c8e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4c658306-401d-4d75-a0e8-463e79c56774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfe51a5-47de-439a-beb5-77aaddef1c04",
        "cursor": {
          "ref": "4db46fec-6260-453f-a9cf-e2cae3b93ec9",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e09ea252-6e6e-4506-8b63-00dcebc828ed"
        },
        "item": {
          "id": "8dfe51a5-47de-439a-beb5-77aaddef1c04",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0cab17ad-5155-4938-b69e-22b92eb9fca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6bcc7f-d8bd-4d05-90ab-f2fd40741cda",
        "cursor": {
          "ref": "5a4ec549-97f4-4daa-ad94-88d1055283ec",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2c3cb126-6079-4274-b069-a599e1e99df0"
        },
        "item": {
          "id": "7d6bcc7f-d8bd-4d05-90ab-f2fd40741cda",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "17dbfd6e-a576-4ee4-a32d-465711a93ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c95ac4-9ec4-4895-8384-00959735fb52",
        "cursor": {
          "ref": "5ace47f1-8c6b-4a5d-968a-6191d7d099f3",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a856ec3f-fdeb-4c59-bae4-d5f69bf1d933"
        },
        "item": {
          "id": "e2c95ac4-9ec4-4895-8384-00959735fb52",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a3e0edf5-10fa-4951-b36c-97cb2c11f2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6178275a-baec-49ae-868e-f2f2732ce38b",
        "cursor": {
          "ref": "c29fc8b4-74d9-4388-a750-08fe35056756",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c3474f95-432c-41b6-a1e2-28737f0913f5"
        },
        "item": {
          "id": "6178275a-baec-49ae-868e-f2f2732ce38b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "44ee6a95-4151-4491-8a76-085151e2e2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d933da3d-7356-4a07-b4f9-70a49e24c870",
        "cursor": {
          "ref": "3ee539b2-2ae3-4e42-b4b0-08f9226017f3",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "805c0779-5f77-4af5-bdaa-acc6a4c89d29"
        },
        "item": {
          "id": "d933da3d-7356-4a07-b4f9-70a49e24c870",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "754ddcde-9fd7-4144-bdc5-410a84ac49bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15f93a0-e0d5-47cb-960f-edffc55ee7b1",
        "cursor": {
          "ref": "35eabd18-db83-459f-9000-859c30c9cccf",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5be715db-2595-4250-94e5-326f098a869e"
        },
        "item": {
          "id": "e15f93a0-e0d5-47cb-960f-edffc55ee7b1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "50d08815-9d3a-40f9-8e9a-f00dbe351d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f160850-9c16-4f55-8846-53e9c613c66c",
        "cursor": {
          "ref": "9b8eea1d-c321-48dd-80ab-a88b1e070abe",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "72f3eb40-61f9-4646-a016-e2528796b63d"
        },
        "item": {
          "id": "2f160850-9c16-4f55-8846-53e9c613c66c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e8170695-cc28-4dac-aa2f-7778ab1411b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4aebff-d956-4f87-8c07-6f7ab4a80e0c",
        "cursor": {
          "ref": "92ca3c17-bfd1-429e-b416-81fa1dbf8c2c",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e5709677-edcc-4ff8-a178-62d568c7728c"
        },
        "item": {
          "id": "cf4aebff-d956-4f87-8c07-6f7ab4a80e0c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0a630beb-dee6-4a8d-8e4a-2da8a6d5746c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afde32e-6b14-46f8-aa7c-33c936b99d6e",
        "cursor": {
          "ref": "21cf2765-8aa4-4964-ba6b-ccfb765918b4",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "639eeea7-d648-4702-9cb9-b0ac74913c44"
        },
        "item": {
          "id": "2afde32e-6b14-46f8-aa7c-33c936b99d6e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1bd22436-a12a-4c55-8615-3cf06324aeb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2e3246-a26c-4b7f-a4b5-52f2f8382fe9",
        "cursor": {
          "ref": "f8dd8c63-3d96-47a8-8828-2dcc44f3e7b8",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e8a7d243-cb11-4e54-9b67-8ac7d39b7164"
        },
        "item": {
          "id": "7b2e3246-a26c-4b7f-a4b5-52f2f8382fe9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "53426b74-271b-4b50-bcc2-58f5d95c716d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f669dda-60a2-411b-a246-966eed4359fe",
        "cursor": {
          "ref": "0b0a4178-4868-4bd4-9a89-509029704fb3",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "532ed278-443f-49d6-95c7-493411e3b5f2"
        },
        "item": {
          "id": "1f669dda-60a2-411b-a246-966eed4359fe",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "96f2e07f-61eb-4d91-89f3-96968a9ff8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcda27d6-ecb9-426d-9df5-ae2eb0788645",
        "cursor": {
          "ref": "2cb14463-6065-43b7-bd1f-233733acb413",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5b472f59-1aef-4e42-ab41-7d5d577833e3"
        },
        "item": {
          "id": "dcda27d6-ecb9-426d-9df5-ae2eb0788645",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c39ff1b3-0df0-45da-9bea-cf828264c5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3dfd22-7317-4d41-87f8-220bef5bcacf",
        "cursor": {
          "ref": "a5108d3f-f05f-4189-82a2-9c2f840d6254",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "364b1e28-cdfa-4d10-9650-6d61fed9b0c9"
        },
        "item": {
          "id": "6e3dfd22-7317-4d41-87f8-220bef5bcacf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9d6f0345-0a99-4ecc-851b-c437223dbddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779fbbb1-fbcb-4379-93fe-8780cd80fe24",
        "cursor": {
          "ref": "d767b895-c6ae-42a1-a11f-68664be78d7a",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1491d3e9-a592-4d30-9dc5-99b4d9dc0b33"
        },
        "item": {
          "id": "779fbbb1-fbcb-4379-93fe-8780cd80fe24",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9ea58287-9c44-4381-9cfe-be63bd5e5499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5b76de-a94e-4ba1-bb4c-61e096dac11f",
        "cursor": {
          "ref": "69564620-60e1-40e7-8d05-580848cc1b82",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1765f3ff-2f19-4198-9a28-be1c71ca1bd8"
        },
        "item": {
          "id": "bd5b76de-a94e-4ba1-bb4c-61e096dac11f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cd7d8c71-bcad-4bbc-b8c9-6724e4a3c10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e562df6d-1e32-4b0c-bfc8-0bef5427fbb8",
        "cursor": {
          "ref": "fa3b7936-22d3-4b86-a264-00b5ac829f16",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "98aae322-27e0-459d-94c8-93e581de827e"
        },
        "item": {
          "id": "e562df6d-1e32-4b0c-bfc8-0bef5427fbb8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "46670c3b-f85c-4767-8d39-c7b1b6d72b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0239e56e-204d-4c45-a24a-27d421dc1bc7",
        "cursor": {
          "ref": "86638bd1-ec3a-455d-ba94-cd0a9c72a297",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2d741f4c-0d99-4aa1-b1df-a8f2bbc62436"
        },
        "item": {
          "id": "0239e56e-204d-4c45-a24a-27d421dc1bc7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2baa9812-a619-4c94-973b-eb3d9a947803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a6d8ab-8d3a-4d29-8a8f-b592425255b6",
        "cursor": {
          "ref": "7e504111-6e5f-454f-9997-30866dbb2c2e",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "70b1559b-febe-472f-8409-e55c76368774"
        },
        "item": {
          "id": "d1a6d8ab-8d3a-4d29-8a8f-b592425255b6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8c1b37d3-1364-4d09-ad03-45458f7d0fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0a58c7-c254-4606-9b29-68522d92395e",
        "cursor": {
          "ref": "a47f0625-9004-4a6c-be06-d6699bde0c53",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f1df695b-1fa4-4f2a-8be7-bd17409a7dae"
        },
        "item": {
          "id": "0f0a58c7-c254-4606-9b29-68522d92395e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0ca2d095-1657-46dd-857b-fa6b9b2fbfae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9974138b-065f-4c0c-a49f-dea9d851d69d",
        "cursor": {
          "ref": "19b752a8-7361-43d1-9c3f-f00455c197b4",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d9bee102-2a2e-4ed1-a764-f3cfe0ae176b"
        },
        "item": {
          "id": "9974138b-065f-4c0c-a49f-dea9d851d69d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f77806a8-4d67-4f4c-a5eb-3aba932f2ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eecaae9-ca00-4386-a034-ec667ca650e9",
        "cursor": {
          "ref": "3dad6f04-c4e7-40b5-aba4-59c609c22e47",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1eaab23f-ff34-439f-94f9-618ae740aa83"
        },
        "item": {
          "id": "8eecaae9-ca00-4386-a034-ec667ca650e9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2e23ce28-8f88-4cc1-abe9-3e4acede7a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1549d802-11ff-4c84-8d7f-2051274a2efc",
        "cursor": {
          "ref": "32d6271e-30f0-43d6-9624-af5a5d21411d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d97c7b7d-ccfe-49be-95b1-fc30cf24d04d"
        },
        "item": {
          "id": "1549d802-11ff-4c84-8d7f-2051274a2efc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f9d37965-1c4e-4715-af77-27d7bd2db40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19d44d4-e683-4278-9e00-1aeef56d5384",
        "cursor": {
          "ref": "1ca01b6a-2d99-423e-b959-f6d4d4e8ee1a",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5bc9770d-fb50-487b-b425-995d5550a591"
        },
        "item": {
          "id": "e19d44d4-e683-4278-9e00-1aeef56d5384",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f6f9d60a-6437-41f6-bd57-c645e4d797ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237eefcb-786f-435c-9acd-b2c3a24b3b17",
        "cursor": {
          "ref": "ef9eb947-e30d-481d-bbfe-e141c68d959e",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "16e80fac-9ab9-4b70-8861-a3f9e1f731d9"
        },
        "item": {
          "id": "237eefcb-786f-435c-9acd-b2c3a24b3b17",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a1b3fa56-0ad4-4571-89cd-4432814da33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3557034-3357-4d80-9cc6-bf1674f5e95b",
        "cursor": {
          "ref": "92ac2bfc-9dd8-463e-b243-ec3941648640",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ee7eaab7-649a-422c-a11e-baedd4459378"
        },
        "item": {
          "id": "b3557034-3357-4d80-9cc6-bf1674f5e95b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8c8b531b-cd9f-4e5f-a926-fbb539e2a9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993a59ad-7b16-40db-8eac-6adc45d4bcec",
        "cursor": {
          "ref": "03263d9c-fd0f-4b09-8c7f-a0e806d1517f",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bcb8a3fd-8720-4215-bf0d-27bdb8dcd72e"
        },
        "item": {
          "id": "993a59ad-7b16-40db-8eac-6adc45d4bcec",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0589aaec-f188-47ca-932d-07423136c52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5571aa6a-3c37-4df4-b484-85d9bc3ed730",
        "cursor": {
          "ref": "55543cd1-67af-4f1b-9d9d-9f00fe87fa4d",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c94cbfad-fb24-4260-9483-4de1fe5d4983"
        },
        "item": {
          "id": "5571aa6a-3c37-4df4-b484-85d9bc3ed730",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "83c1977c-f80a-4fba-9746-b2b1d768ca15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978421a9-529a-4438-9d1b-b92725a0050c",
        "cursor": {
          "ref": "8376bdb6-b22e-49d9-843d-987e59582403",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e7d360f0-9347-41ca-becb-97b723d3a789"
        },
        "item": {
          "id": "978421a9-529a-4438-9d1b-b92725a0050c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f90f5952-2a83-4dcf-a9a3-f82ee2d1f291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1ab02f-c96d-4e96-98d9-e3255e1fe59a",
        "cursor": {
          "ref": "4b6b3a1b-d5f0-4231-aeda-6386eec1bfa7",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0c655299-9dd1-45db-86ca-9530e20645a9"
        },
        "item": {
          "id": "fc1ab02f-c96d-4e96-98d9-e3255e1fe59a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "904933b7-9187-4077-a5d2-d5f598c940a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7daed5-2a07-48ba-871a-99f82a767ce2",
        "cursor": {
          "ref": "b9202848-a18a-4f8b-a663-dcf7f7b47c16",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "db27c509-ef3e-4040-80b8-a9f76c67999a"
        },
        "item": {
          "id": "9e7daed5-2a07-48ba-871a-99f82a767ce2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bb4d0f37-6359-43de-818e-d45c06778362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9089673-5816-4f38-b379-66f37f99700c",
        "cursor": {
          "ref": "8598f595-4b33-4c06-a7c3-2bb139e9cbf6",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "621cccd4-906c-4871-854d-c3b529cf1cde"
        },
        "item": {
          "id": "f9089673-5816-4f38-b379-66f37f99700c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3f329fb5-f615-4cf3-8057-9c521cb29d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a932108a-e896-4ddf-a95f-fa39e9bc1aa9",
        "cursor": {
          "ref": "e3425de2-582e-48b2-b4ef-f6c1dc5556bd",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "32f19a89-4bc0-4869-80b5-eb6d69ff71cf"
        },
        "item": {
          "id": "a932108a-e896-4ddf-a95f-fa39e9bc1aa9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "87da11c9-6be9-4d70-b50e-fd332b5b45eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95cf9c77-af6e-407f-805d-c26cfdda3825",
        "cursor": {
          "ref": "44013c73-5728-4f20-b95d-a7b9580a87d4",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e981f648-2d82-40cb-82b2-4b8d213d7c2b"
        },
        "item": {
          "id": "95cf9c77-af6e-407f-805d-c26cfdda3825",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c29f7295-d09a-4c6f-ba71-8d3fdd97d213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250bd5dc-9f6f-44e9-99b4-b77e7e166697",
        "cursor": {
          "ref": "4991d37c-6edd-484d-a829-df4b5986d3a2",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ed50699f-31e0-46f9-8c62-ff03b817c243"
        },
        "item": {
          "id": "250bd5dc-9f6f-44e9-99b4-b77e7e166697",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "de587e65-f016-42e3-8150-2c530fc23474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab54145-dc78-430c-b25e-3bf11a183e97",
        "cursor": {
          "ref": "bfe5ea8f-8361-4e9f-8c02-eded0f569ff9",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3ff057ce-95fe-40de-9a3c-093626b8aef1"
        },
        "item": {
          "id": "2ab54145-dc78-430c-b25e-3bf11a183e97",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2ce77d02-e302-443e-8d3c-010e6f80ec9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5734c9a-e909-4c97-a37f-fbb3a5c1e10c",
        "cursor": {
          "ref": "bf0883ab-ce3b-4c5f-b2bf-2d3aa8d09f37",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b47f59e5-316a-4ba2-889a-17c54b7bd0c3"
        },
        "item": {
          "id": "d5734c9a-e909-4c97-a37f-fbb3a5c1e10c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6cb6fe85-6f8e-47d6-ba29-3ef5528a970c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df16a5b8-a4df-4bd2-acf5-8c4c4a6c0dc8",
        "cursor": {
          "ref": "8832bc94-2548-4d1f-9597-759e7f251150",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5078f2bf-3488-4b52-8a68-3385cb63cc79"
        },
        "item": {
          "id": "df16a5b8-a4df-4bd2-acf5-8c4c4a6c0dc8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "99428928-1b47-413c-b1b2-71e43f8a2626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00960bdc-bfbe-4437-a211-bc2c8c85214f",
        "cursor": {
          "ref": "85826aae-bd9d-4388-a720-b46310408044",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9391b7bf-43b7-4cfc-ba50-8104a83efb0b"
        },
        "item": {
          "id": "00960bdc-bfbe-4437-a211-bc2c8c85214f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fdf000bc-4e61-419e-8862-f13723c61da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c748357-9871-4ead-a08a-be6862cccd61",
        "cursor": {
          "ref": "4a63737c-b43b-452b-8aeb-d2d8bd9853c7",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2bbf62af-549b-4628-8bad-32cf36c7f92c"
        },
        "item": {
          "id": "3c748357-9871-4ead-a08a-be6862cccd61",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a16a46b7-2b25-4668-8155-935bdc3ca299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad506a2-c515-4fc8-a288-ea2f284ca935",
        "cursor": {
          "ref": "146d5704-9255-41eb-89e2-4fdc1d0f8d3a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "066d4c82-f4c8-42a2-8bf9-614fb5102d82"
        },
        "item": {
          "id": "fad506a2-c515-4fc8-a288-ea2f284ca935",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a6ed99aa-843b-4d92-a2db-f51526bd929a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0b33df-945f-4622-935d-2906f7b9a327",
        "cursor": {
          "ref": "3415a20e-16f8-4eeb-a3b2-7fca3b3a30f7",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "870cc063-9f8a-4b5e-8e2a-887343f65c79"
        },
        "item": {
          "id": "cc0b33df-945f-4622-935d-2906f7b9a327",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "eb23ec3b-43d0-467f-ad9e-184ba1a3fdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd329ac-228b-4e1b-ae79-6c68eaa09385",
        "cursor": {
          "ref": "6f12978f-9d00-4020-9ebc-8248ddfd7fda",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "737d923a-4efa-4d8d-bc6e-00448fc2a45c"
        },
        "item": {
          "id": "3fd329ac-228b-4e1b-ae79-6c68eaa09385",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "87e8c945-aad1-4542-936b-551527faee6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc39ff76-2ada-44e7-a1bc-0ff262f9229b",
        "cursor": {
          "ref": "ce083220-1054-47be-8bf4-4a792b5d46c1",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "70b1e12c-e86d-4507-a719-575eafd5fc59"
        },
        "item": {
          "id": "bc39ff76-2ada-44e7-a1bc-0ff262f9229b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "10abadc1-2a83-4f05-8d79-f06190773b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee6e424-76a9-4f1b-9df2-862d12bbe0c9",
        "cursor": {
          "ref": "f622c5ba-9354-4866-ad32-19758399e172",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1aef7171-391b-4963-9736-7b3ed6a72683"
        },
        "item": {
          "id": "7ee6e424-76a9-4f1b-9df2-862d12bbe0c9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d3f1624b-9054-49e7-89dc-d90f3343a9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55213b5a-de97-4a01-9f3b-e9f6982a6b62",
        "cursor": {
          "ref": "fbbfd384-c3f8-464d-b9aa-c25be7f190f1",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "443065d8-26c3-4454-972b-4bbd12c185fd"
        },
        "item": {
          "id": "55213b5a-de97-4a01-9f3b-e9f6982a6b62",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f3369fb3-7481-4a50-9b4b-749073beb4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cda4896-84ff-4ed3-abd2-27f756d97d4e",
        "cursor": {
          "ref": "cdcf1e32-f29c-4294-8716-e3d5c8d08ab1",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8050b8b8-2e7b-4d85-8891-acd45e214e09"
        },
        "item": {
          "id": "2cda4896-84ff-4ed3-abd2-27f756d97d4e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "59e7c1bd-c186-4570-a4a3-46b61f49dbd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e00f1d1-3445-413e-ab69-e06e8d064957",
        "cursor": {
          "ref": "3fd712de-1d9c-42a9-b436-94bd987c1d37",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "25323fee-f815-43b5-8674-fc2774b9b05a"
        },
        "item": {
          "id": "5e00f1d1-3445-413e-ab69-e06e8d064957",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c897d45f-ba6f-4143-a512-6fe673a8f877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959d3c83-7778-4230-9c1c-1809005a69d8",
        "cursor": {
          "ref": "4c01a149-d26b-41e2-a599-35525c50fbbd",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6e53e07a-7462-4f16-8f64-3ee77e02d702"
        },
        "item": {
          "id": "959d3c83-7778-4230-9c1c-1809005a69d8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6df37591-dd22-4bb0-913b-14cef59a90fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144a965f-e6db-4821-aa76-1e3a74e7d2f4",
        "cursor": {
          "ref": "e2275ef6-e1ca-49aa-8909-7120c671ba80",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fab227c8-45c2-4f84-8638-f54fa269ddac"
        },
        "item": {
          "id": "144a965f-e6db-4821-aa76-1e3a74e7d2f4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dbdaffd5-10d6-40ab-ad0c-d686b72f9077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339bdf77-b10a-4377-a2a2-860bf6f241f6",
        "cursor": {
          "ref": "e9d68a6b-1ca2-4e4e-bd1d-78cecf87fa07",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e3d6d778-d65f-46a6-a63f-a794bc1fa422"
        },
        "item": {
          "id": "339bdf77-b10a-4377-a2a2-860bf6f241f6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3ba7a398-086e-4c2d-be37-ec8524cfdf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcc8509-1dc7-4765-887e-6f2de6f9b84f",
        "cursor": {
          "ref": "6ad25e63-83ad-4447-824b-04d8259e51b7",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5c5b6abd-2be1-41e9-aa04-cf6d9f89b425"
        },
        "item": {
          "id": "ffcc8509-1dc7-4765-887e-6f2de6f9b84f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4095daa8-61c8-476a-9e5d-926ebbe0ee50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c19ff3c-4ae9-49fb-b32c-d67fde6e25db",
        "cursor": {
          "ref": "97d05fee-df3d-4324-9a97-e18dd645a23b",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "74992865-c9ad-4cfe-a99d-d6d99ede7374"
        },
        "item": {
          "id": "8c19ff3c-4ae9-49fb-b32c-d67fde6e25db",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c51508b7-6c6a-452c-b525-41b8c0586977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40eb81a2-5c2c-408a-8849-27171f1441ff",
        "cursor": {
          "ref": "2f756ff4-4f45-4516-a878-46864f299695",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "df422422-9dda-42aa-a2a8-09174bcf0a21"
        },
        "item": {
          "id": "40eb81a2-5c2c-408a-8849-27171f1441ff",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "938d5ba4-509c-40e8-a40b-8cb8b7055f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef82552-4012-4616-a438-046b716c98a8",
        "cursor": {
          "ref": "c13703a7-af1a-47f9-97ed-3f710f9104a4",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3ac6024b-b1d0-40e2-9c6a-e65d2c087d0b"
        },
        "item": {
          "id": "bef82552-4012-4616-a438-046b716c98a8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "05076ce3-ad17-4204-ae6e-e782ce0c1d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1f2593-644a-4a60-9737-0e49dac7f366",
        "cursor": {
          "ref": "5618881e-e792-46f5-a03c-19ccc2a09bec",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1c674384-4441-49ab-80ab-7ad4cb16aed9"
        },
        "item": {
          "id": "2e1f2593-644a-4a60-9737-0e49dac7f366",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4142e92d-e9be-4b73-91b4-9dde2bd8c1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb16b322-980e-4202-8e7d-b4a5b8b12da0",
        "cursor": {
          "ref": "0a9f9028-b458-4abf-9fc6-128430734673",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3bf568ea-6904-4276-a0fe-1fc4e97f5c37"
        },
        "item": {
          "id": "cb16b322-980e-4202-8e7d-b4a5b8b12da0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8f387434-77ba-4937-b143-774c54f3b3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fce439a-3117-4d11-aff4-965a296eaf8b",
        "cursor": {
          "ref": "cb766088-630a-4d8f-8b59-2ad976314db6",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "64c56f71-6d6b-4d37-a069-a76278f3c433"
        },
        "item": {
          "id": "0fce439a-3117-4d11-aff4-965a296eaf8b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ba7a14cd-5432-43dc-8697-8baac947dec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eca06fa-2227-4f05-9c63-36f769a8018a",
        "cursor": {
          "ref": "5a5420d0-cb59-4f17-9c11-53f5ea771ecc",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "59bab40a-0e67-45a9-b55d-d738573cfcb4"
        },
        "item": {
          "id": "7eca06fa-2227-4f05-9c63-36f769a8018a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "91af837c-b686-47f8-a17f-f12aa4e14327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd2c770-d566-4c13-9ed6-d05af033e004",
        "cursor": {
          "ref": "9d92279f-451e-40ce-83d4-1d0267ba5cc7",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "83a78b02-182f-4f01-97f2-9ae1049634ed"
        },
        "item": {
          "id": "3dd2c770-d566-4c13-9ed6-d05af033e004",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c404f8c9-a40b-4e85-b49f-863e2da6dd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4926df9-306e-4775-845d-1d409da3edf6",
        "cursor": {
          "ref": "f44f5102-dd81-47b4-8966-63ea7d15d77c",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e2a380f2-3607-45dc-a662-c66a2c664d88"
        },
        "item": {
          "id": "d4926df9-306e-4775-845d-1d409da3edf6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6f1d5892-55bf-4de2-8255-911c167df02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b023f88-dae9-4393-aadf-d621f175c91c",
        "cursor": {
          "ref": "823e58da-c955-4958-ad9a-15c775840ece",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "32faa57a-2d4e-49c0-8e53-7f9b7018755a"
        },
        "item": {
          "id": "2b023f88-dae9-4393-aadf-d621f175c91c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bd86cf61-6729-4317-b2c8-060ffe05bbd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bec3aa-4ee7-4df5-ac22-6804d791bf98",
        "cursor": {
          "ref": "d092a732-6519-4d0c-9ea3-411fbcd91b89",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "415638ee-8ef2-45f5-a212-c9fcf9755bec"
        },
        "item": {
          "id": "62bec3aa-4ee7-4df5-ac22-6804d791bf98",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "20927701-ac50-4cb0-aeae-2162259af4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff903a1-2c99-46ff-8bfc-3e5ad501214c",
        "cursor": {
          "ref": "387dbe5b-78a2-40b2-8106-a17976404e48",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c620364d-0272-445b-bc4a-ca2290f97da2"
        },
        "item": {
          "id": "9ff903a1-2c99-46ff-8bfc-3e5ad501214c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "50db05ad-59cf-410b-80f7-516ca1cb463a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b77d51-8ee4-4b3b-90e4-524b86d53f77",
        "cursor": {
          "ref": "5b08770c-f636-452a-a016-9e7115dbb239",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "56020274-e218-4125-b30a-095ba0e2d05a"
        },
        "item": {
          "id": "45b77d51-8ee4-4b3b-90e4-524b86d53f77",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "17f57e73-ea67-4673-a92f-ff0f389ae2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dae542f-da4d-410f-aae1-7923a1358d68",
        "cursor": {
          "ref": "f68cb1cc-de98-4e64-82f3-1516886b03f3",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "e44eb763-cede-458d-8407-d2396f11f3a0"
        },
        "item": {
          "id": "5dae542f-da4d-410f-aae1-7923a1358d68",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9ae3645d-8b44-46db-b493-5c5d2d72313f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be99b5a5-f9a2-4885-ad3d-530c45dd0c4e",
        "cursor": {
          "ref": "184bedf8-7b85-433f-b014-95edbf15f09a",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f0cf75e2-85e0-489f-9418-890d33d78051"
        },
        "item": {
          "id": "be99b5a5-f9a2-4885-ad3d-530c45dd0c4e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "05b78204-014a-44e9-bfe1-2d22926c81c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc4feaf-fb48-4c04-8144-9ea1aaa56396",
        "cursor": {
          "ref": "cb195abb-151f-450b-9e71-5e580e40a529",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6597c109-be8c-40d6-b7b8-4cc05ec15dea"
        },
        "item": {
          "id": "9cc4feaf-fb48-4c04-8144-9ea1aaa56396",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "67896202-31e5-444d-b896-83d846195985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf69984-e8f5-4964-b8e9-30d1fe7e4fd5",
        "cursor": {
          "ref": "c1357b43-7ced-4891-95c6-888efa4cd78e",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "cb0cff08-73cc-4116-a185-47152ad1839e"
        },
        "item": {
          "id": "ebf69984-e8f5-4964-b8e9-30d1fe7e4fd5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f2c55b1f-28db-4077-9cb7-a63c9639e075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a93e524-dc57-4d3c-8e5f-4cb1b1a4435e",
        "cursor": {
          "ref": "0522fc36-f36b-42b6-93c5-ffd92a33fb88",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e0d7fc61-98eb-462b-9bb1-0e795401e4b6"
        },
        "item": {
          "id": "3a93e524-dc57-4d3c-8e5f-4cb1b1a4435e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a83341e3-766b-4659-8f58-2f23b430e205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d279f5ea-a664-48a1-936e-35e594f1da0c",
        "cursor": {
          "ref": "5a249106-57a4-45cf-82b9-6c31a62ed808",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "514baaef-e548-471c-8c9a-c9b8d945de1c"
        },
        "item": {
          "id": "d279f5ea-a664-48a1-936e-35e594f1da0c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7aec8b19-c45a-43c8-a581-58e9dcbf6366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc8375d-b713-45b1-b21c-4c89c94031fa",
        "cursor": {
          "ref": "845a5b4c-d115-4d03-8ed4-ada0697e8a1b",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6d0a2c32-72c4-4148-bc51-bef034ab2000"
        },
        "item": {
          "id": "dfc8375d-b713-45b1-b21c-4c89c94031fa",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "33dd3ded-94eb-4a4e-a2b0-a5cf1d5387e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806da3aa-1f3a-48f3-a865-b0d647402d92",
        "cursor": {
          "ref": "7c8df114-9d84-4351-b4e2-094f72f63983",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "346329cc-9593-41b1-93df-aa5a18e49edd"
        },
        "item": {
          "id": "806da3aa-1f3a-48f3-a865-b0d647402d92",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "84eb8cbe-91b8-43fb-a83b-d78e12ff7981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efea7873-a3b6-4749-b619-5d1321e879e2",
        "cursor": {
          "ref": "c5c2cb72-9a28-4a58-af52-39b08d585ae5",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5a09b848-766e-4a17-9890-82206e5c1888"
        },
        "item": {
          "id": "efea7873-a3b6-4749-b619-5d1321e879e2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9198001e-f66f-402e-af6f-768f719336ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd5e1e9-cdd9-4cb6-8f48-b184990da192",
        "cursor": {
          "ref": "ff6a5d11-2f1f-4a64-829e-5d4cbcfb6fab",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "acedcf3a-a22a-4259-b612-1450eca8d585"
        },
        "item": {
          "id": "bdd5e1e9-cdd9-4cb6-8f48-b184990da192",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2b503bcb-78ec-42d8-ba63-7350062df3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174a4e4e-bd11-4e16-8703-6de5cff19ac8",
        "cursor": {
          "ref": "da3810c3-102a-48e2-a7b2-d0f5d3881ba9",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4b45dd84-4091-4729-8324-4171c9a2fded"
        },
        "item": {
          "id": "174a4e4e-bd11-4e16-8703-6de5cff19ac8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "67c1d06b-d97a-485c-91f2-1211f5cd7b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bed4d0-bd6d-422b-bb52-8046375fe967",
        "cursor": {
          "ref": "06b312e7-6719-46cd-a178-73bdba5c5107",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "b90f0a1a-448d-4f8c-9ae7-b9890b025513"
        },
        "item": {
          "id": "b3bed4d0-bd6d-422b-bb52-8046375fe967",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "75417e0f-31c3-4717-922a-fd09c37a9a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5777e674-576b-40b7-adb3-3093b40ae721",
        "cursor": {
          "ref": "23e369c1-4564-4df1-8192-a21c5ce2cd47",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bee6e2d6-aa1c-43b3-922a-b7c026e13e4e"
        },
        "item": {
          "id": "5777e674-576b-40b7-adb3-3093b40ae721",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4f296a0d-99ec-41c3-8aa5-28ff331950be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbb77a7-82fb-4d5c-a45e-1b693e429b49",
        "cursor": {
          "ref": "970db998-e809-4251-b4b1-9ecb3cb796dc",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1c85d8c5-9f7a-4977-9b4a-11b6ef518b06"
        },
        "item": {
          "id": "6cbb77a7-82fb-4d5c-a45e-1b693e429b49",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "007bd6cc-b6d8-4002-9e6c-9c0fd8952cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c4181d-be33-4979-9539-74d148d11871",
        "cursor": {
          "ref": "218d9ff0-2adb-42a9-9f70-dcb47705edfe",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "659b275e-a209-4c00-b2c4-092984db7881"
        },
        "item": {
          "id": "07c4181d-be33-4979-9539-74d148d11871",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4c5c537e-c1bc-435b-83b1-c07f5e2a3fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c394387e-b7fd-479d-82ff-3126e041caf8",
        "cursor": {
          "ref": "e27de16f-9eb1-479d-bf48-381ad0ab9f0e",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "889abf1d-9fcc-455a-8172-5c547a3aa800"
        },
        "item": {
          "id": "c394387e-b7fd-479d-82ff-3126e041caf8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "aea280ad-f0e2-422b-8d2f-5669bbf7d756",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "1cc7e4ac-29fe-4051-acbb-016977e3f8b0",
        "cursor": {
          "ref": "2528e75e-426b-4318-b5c9-b60c36bb46c6",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "fd70a836-686d-4c09-bf6e-eb0821e0fa62"
        },
        "item": {
          "id": "1cc7e4ac-29fe-4051-acbb-016977e3f8b0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "300b82ba-66dc-4de7-866e-a40e4b8e6f55",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c631e28-26d2-4a33-9f64-62802961e90b",
        "cursor": {
          "ref": "edb3af72-3380-4bc1-9629-a8ebf5d22c32",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "b7cb895a-a9eb-4fb2-86e4-c7065907239a"
        },
        "item": {
          "id": "0c631e28-26d2-4a33-9f64-62802961e90b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "282c3050-2465-48ae-9fa3-1cb0e8e33f4f",
          "status": "OK",
          "code": 200,
          "responseTime": 2629,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6c17fb-92c1-4fe3-9196-d7b19b5955df",
        "cursor": {
          "ref": "9c2ce780-5bb4-4a3e-8d59-e37d4fae41c0",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "55d51ed9-d71f-4c40-a441-1eca731073bf"
        },
        "item": {
          "id": "af6c17fb-92c1-4fe3-9196-d7b19b5955df",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "000c53c7-f526-44c0-b706-84f7c0155c5d",
          "status": "OK",
          "code": 200,
          "responseTime": 2940,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedd9b44-69ce-4973-967e-ccf69a536bae",
        "cursor": {
          "ref": "4d7f8e9a-b9e6-4b75-af81-266f582116a7",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f1adb515-2660-4ad5-a95f-08ced26c6c2c"
        },
        "item": {
          "id": "aedd9b44-69ce-4973-967e-ccf69a536bae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a084db66-01bb-4769-a038-87b5ed91b9c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "aedd9b44-69ce-4973-967e-ccf69a536bae",
        "cursor": {
          "ref": "4d7f8e9a-b9e6-4b75-af81-266f582116a7",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f1adb515-2660-4ad5-a95f-08ced26c6c2c"
        },
        "item": {
          "id": "aedd9b44-69ce-4973-967e-ccf69a536bae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a084db66-01bb-4769-a038-87b5ed91b9c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "7bff50a9-e38d-4c89-a0b7-39193481e7b8",
        "cursor": {
          "ref": "81c50b65-c94e-47cb-bc5f-50e837c97b93",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e0fc2326-24b2-48c0-9fe3-8e63fbb8cfdd"
        },
        "item": {
          "id": "7bff50a9-e38d-4c89-a0b7-39193481e7b8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f3689bc7-24ac-466f-807d-70039901371d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "719b17e5-2e68-4d57-93c0-32578b4acacd",
        "cursor": {
          "ref": "c95dba54-23c7-4ae4-b291-37d979d12c9c",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b5fd6bf4-90b2-4882-926c-207aead18713"
        },
        "item": {
          "id": "719b17e5-2e68-4d57-93c0-32578b4acacd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "da98ecb5-08e8-4f17-af6f-14a79af8bde7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}