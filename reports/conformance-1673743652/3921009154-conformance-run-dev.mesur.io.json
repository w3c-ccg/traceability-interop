{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "899573ea-750b-477f-8ab3-9dbf68bb3a74",
        "name": "Clear Cache",
        "item": [
          {
            "id": "03869397-6a0e-4ae8-bf14-a01eaa34239f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "752eca44-6191-4d07-b7ac-8e263c9dc616",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ac99face-1b56-4624-84a5-506ebbcc9e7e"
                }
              }
            ]
          },
          {
            "id": "cd834cfd-ca35-402d-be6f-c7f7e76ede0f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e4081ed-da04-4f78-95d3-9970256a3afd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fb34408c-a1ec-47fc-baac-14f941fa6458"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "89f0f4ec-c0b8-4798-8627-d1d29a5b4ecc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4f8ddf2d-3843-43c7-b9f0-3d7c7698111a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "677fc084-a6aa-42c5-b986-137e17d28dc0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75cf0fbf-f475-47c0-ba4e-a05b9a22e28b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63618573-36e0-4a3b-b84a-8d613ff128d4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5bd0e3f2-5b41-4bb0-b420-095fe44f19b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a84f865f-50ac-4acb-9a42-d8e4522c801c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0083e55b-1115-4bec-83e8-1a148b092bb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85d7d7d7-f75f-416d-8461-7bef0bdaf70f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a07e792d-2a79-40e2-a70c-d542b0308f6f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "19147d31-d4f9-4774-b81a-e4084d74d8dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7567d914-cb99-4f19-9ab6-543140321c40",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee9ebdbc-d1bf-49e1-b699-c15d29e67772"
            }
          }
        ]
      },
      {
        "id": "bd636e97-baf3-4828-8fff-8b6069c32bf9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "41ffd36a-ff1e-4099-8454-b054985958ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1cdcdbb-85c2-4cd7-a307-68bcf74c3298",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a9fe85d1-8efd-4b16-8943-9f540577508a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fb18b2-a101-42c9-850a-acd9709c587a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec9b82bc-ad6d-4f7e-b777-1ec63e257fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a8f0c6-42bd-4c64-b304-16aa043c6899",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05caa9ee-1adf-403a-be2f-f8f27955b010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "922bd2e1-8214-4909-a670-fcf4706590f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea0874b-df8a-410f-9149-5e86a24efc05",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde8c24e-14de-44fb-8faf-48ebdf1cad31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2db52b3b-9fad-4da6-90b0-12fe6c611da0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0968e120-e5e2-4ec1-ba66-80b05f119670",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3c144e0-82b8-47b6-86ab-a16190e38d97",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa223667-0364-4ccc-8cfd-042e2221d1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4f45082-3bc4-482c-bebc-116e2885894e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b93bff-1d41-480a-9e9f-afc52c746976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcdeca05-27bf-42ca-9642-a57e1610a5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d837250-1c8b-4778-a58d-519e77e9e57f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1914854f-3567-4b87-b353-d39517a21aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64afc607-dbf5-4553-9653-f0682e9691eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8268510b-56c2-4bc6-a9f5-dafb26712ee1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7d739cce-f371-4652-9156-f1a17f7dfb78"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b8c33250-0184-457f-ade4-c78fef56c087",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db02247d-88ea-4018-b76d-5354523f2df0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bf8f787-4dcf-4e00-afb4-9b1c1c567914",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bbd7014a-83c3-4dba-8545-de1ec6ee8c75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b478243-d124-4e8b-ab9f-10ba0f36b896",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5cbca509-12fd-451b-8398-c2b3bb190d12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "415440c9-90d8-426d-8e0d-eb87621c60d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2a74bde-ff5a-4ca7-a054-71fe9ac974d5"
            }
          }
        ]
      },
      {
        "id": "33e79768-dafd-46e6-ac7c-39172735930c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6353f883-73a5-4ca3-8910-2ded83425a8e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90ac6bcb-dc5c-46de-b311-8652fbb8b4a9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6d0372f5-893a-498b-88bd-3c2062dd3327",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecccab13-1d42-4b98-b013-8dfb16804ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17d1530-0262-425a-b287-ae461acd2c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e377fde6-303f-4191-863d-8d5a38c45aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5bdf976-d00f-47cd-9fb3-6f2068db071c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4f5169-1de1-425f-9562-aae2d2976c87",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64754b3b-03cb-4c82-aee9-816e1d064622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2938543-7e95-44d7-ae9e-0f4326354ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d77be6-1751-4821-a48f-a255893e9279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c5ba90a-8eaf-4a1c-9ba9-0ae7ec09b01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9e997c-5aee-4bda-98eb-b19e596dc070",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba254dbd-af16-4833-ad6f-970a332e78d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9323e82-6e02-4b55-a589-d3d0ee5157cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f14a27-68fd-4737-a00c-7b67d852b685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae2b7b73-dddb-4283-9969-7161a579287d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142c6ae1-9487-4ac9-ac70-aeaa2d02b4b4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72a6e4f-c40e-443c-be13-254b10ce554b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c2ff8c-32d9-4a93-9a6d-8ffb4b6e4060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7abc0f4-08bf-4b0b-9319-c0a0f77c1dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc8794d7-3ade-461d-8188-f393e387dbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2aab375-41ad-45fe-97c1-ab0ff3aabc27",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32e5aee-9221-47cb-8254-2e343e2f743d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9253ae7e-49cd-46de-9ba5-36f5638946a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95d1f2e-d662-423d-aec7-4614e4905a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe99648a-e1e9-42ba-8163-134a355021c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67605dcb-6d6f-4990-a5da-f650f8ae4881",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3ca4c3-0886-4f97-8238-d656518f8ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786ca360-ae9e-417a-9357-23cea23734c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0f17eb-2200-4316-8d76-41e71714817f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bd38574-2cac-43ee-899d-fd158c50bae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da82b256-79d6-4d48-9267-c58256ee3ca3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6883bec-f963-48cc-bc02-c2078e7342ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4787fe-ebda-47f1-ba8c-87e0b326f125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4acbacb-9834-4b3c-a57e-4df5c3550447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d934b788-46c8-4c84-a3cc-10a1f9777b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3616a9-c82d-483e-931c-524fde9246bb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb64954-835f-451f-b091-72f0e1f93449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2550154-79fe-4c4b-bae4-eb6d950515e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97249ae4-f938-499b-92b0-15ac3455b545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f70bb657-84df-488b-801b-f3cd70833e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e382302-9583-4089-9746-0c668769c915",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c78d86f-655d-4892-aabe-dfcb6716391f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe1168b-0e2d-4d20-a688-d055f82b3d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b7013f-4bd6-43f7-ad51-132db34d7dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e422bf92-9ece-4dc2-8db0-d93b55f2e8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2410e8c4-fd40-47cd-a901-d6ef36bc5c2b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d99fdd-39fc-4ced-a89a-1caa1d8965a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd4c032-1a4d-4829-aa0b-76e30ffe4172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13ba3a1-4e75-4b04-8ccc-6054c9618b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2c972bb-75a6-4f66-a046-41cd4ac4d8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a99d456-9f72-421e-a02f-c37912c7e084",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a304007-60d7-4bf8-a2d6-1b45abc0571c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae956e0-72e7-4bd6-bdc8-b5bdbe4e0335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c256bd9-331c-4e95-9a23-9feb1e1ca72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e73525aa-9260-4ddc-9c2b-e7966a176432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379e149f-6c25-425b-a914-a1d94c82ae1d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9516f658-dea4-45d8-ae9f-56382d2c76fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d085eb1-3f08-4730-bfa9-c8302c59335f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af55c538-f47f-42e5-a5f6-12b1bcf1a3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b20dcd70-e98c-4d0a-876b-e91c9e29dd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ac2c87-03e0-4d4b-9d02-d34e880cffbe",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400910d6-e845-4ae0-9780-ee2e875eb945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20069328-2531-463e-97d3-67643671b3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67edd4a2-8454-4d7f-b156-1b90c1dc32a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83e61b62-7a82-4eaa-9ec8-891de0e2d907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b458d3be-2f08-4a6e-aeb4-198a214c8206",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96ed59f-8f8c-4d4f-a85d-840aa85a5d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62cd87ca-5ca4-4ae3-8a88-eb318eda8fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a74986-c592-40a7-b420-a3fdaf2a4fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "2551d21e-01f3-4bf7-b23e-a8634c2e4e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541c0801-c019-42f5-9277-fc743408d5c2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346a228b-6a29-40c9-bc4a-a518555b69a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ad32de-76e1-4abc-aac0-35c4fd20f536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfd19a8-0c4c-4184-aba3-03f83c352fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d8794ae-7371-4c27-a4b0-ce5b06a5425e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0181aba7-d3c4-4137-8f30-735baf31136c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0068b3-7ad4-44a1-a094-3e737f987425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d9541d-a555-489b-99f8-4d18f0f4c115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2028ec7-0d2c-4490-bda7-3baa738fda14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3c21f9d-68a7-4de2-85bb-719c80cd5086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9f535c-caaa-49fa-ade5-fe3b9d4abd4b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e337609-95e9-4a65-bbfa-cd921fe7e1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd2e110-b811-4d59-9d50-a4e194e84460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad6177f-91c0-4588-9bb2-2f7bfe71d7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62ee03fc-2d9d-452a-a08c-ca8e7b9454bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e1c9a6-10f3-4323-98d2-dc9c965be410",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bedf6ac-b28e-4cd3-a749-b1313bd36ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d3dde3-6823-49b4-96ef-5c8dfaef6f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd1044c-a026-4e92-aa9c-22d5738f64a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6794136e-8e3d-485e-a48e-4f9e1812a6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c96a10-c9b7-4540-b7ca-108de939d0db",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab591d4-a205-47b4-ba49-e20431282407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9927e0d-fb5a-450f-aba5-54b4060a8370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b62d565-a59c-49eb-b9c9-c86908b601fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36530593-f8fd-4a97-b923-ff3ebdad2a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583b982e-927a-4d49-b29a-a3a2f455f918",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a28b49-bb29-47f3-a16c-d0e8daa65631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441251dd-2c9b-467d-a8fc-f4c305cd644b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7629413-5676-4a05-ae91-93f5dd4dada3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4912045d-a8fa-4e59-8b06-c15d5be79161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54679f2-e1fd-4813-a88e-4cb602814ce1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4da7fb-f1a2-44ea-abf6-b8e86bc4f637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00710f7-1353-4b23-b6a4-7eaafa46ceb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fcd7831-3876-42ad-b5ed-4277ea297992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da1265cc-d266-448f-b8d7-325a6eaed197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f86760-b835-419e-8bca-88a56aa82a11",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c1ee93-2a57-4594-9ce6-e3055ae6e5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd6a00a-58ab-4c45-af3e-002f806fdd9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9ae504-1228-4bd2-a9e0-99ac296faeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "764cfccf-9a1b-47fd-a4e0-eed986a180d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f994de16-6e6c-4e5e-8c3b-ca1ae28b8214",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159ca2d9-e0c6-4903-881b-8ced4e4a2445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738e12a8-9d28-4966-b5e4-2686ea49227a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb1dd44-7566-4386-966d-d228756426a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebfe42b-6f9c-4d66-aba5-6f5bc67435a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cb976e-2d6a-4ab8-9e8b-e95438d4bfee",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6697ba46-3465-4c08-9141-191e5a38fed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102994de-10a0-472e-b2fa-c2762b4b8a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46003ca7-e675-4966-975c-e8872667f172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8009378a-1350-4601-ad46-9e5ad78d4bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c960ad9f-11ca-44ae-a972-a65bc6a24e86",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5403a056-e9d0-4964-9d49-c5f82351fd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ef522d-4a45-4af9-bc7f-b12ca753a65a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cd19cd-0e4d-466f-a5cd-678a9058b408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbeaf4c-f9a7-4d60-81e7-478303ecdc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b189ad4-6074-47b6-b301-9779336a90a1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be5249b-cd61-4e0e-a129-ea397f6d2c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e327ae-4109-45ac-94dc-e792ebad0776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76e9141-2675-493b-8fa7-91ca5aa1ba85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cda13876-3906-4f6f-93d5-aa0d88e4899b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d184fd-0593-49ad-8236-1fb405f0d090",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fcf35b-042f-4ba3-9a6c-3d69d68df284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba09f51-9433-4905-b660-41d6eb792207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edb2b5f-ec5a-4001-ae4f-22c459229141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0aab537-7f40-4e41-9437-722ffff92a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341b5eb1-cee7-4534-ad41-4291641ede7a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "339f41fd-8805-4e8b-ac24-5008363c68d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52b357f-c881-47ad-8aed-217b8eda247b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1a6bb8-4e10-43a0-b584-6a8b47bbe8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1893dfc8-95a9-4d24-8f3f-45de269bc52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18cc2bc-a83b-4eea-bdc5-40565e263913",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6f2b56-3762-45f2-aeeb-3358b54604ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62564e06-2c86-447e-80c8-fda9d1d8418b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30c0648-ecd5-4a30-b87d-291e5fdac6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e08deb7-eb0f-4729-9181-91002a9a9b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646788b3-c938-41a7-8f0a-fdc7e7660fdd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c4af4c-ec0d-4b2d-bbe0-1d8ef12fe734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95f414a-3096-48ba-b1b1-e454def08457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e05af5b-bed2-46e6-831a-7a5f1558cff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "27099603-9d15-45a1-99db-3986fbd95ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba54036-f1aa-4359-a1a8-fdb46992c336",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4139d217-1592-4a4b-bf8f-38540bcdfec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f93e865-38d7-4e6c-98a8-9c5c8305aa3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddedc55a-190c-49be-8abb-00447ab4b696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "584e02f9-1154-43ce-b6d2-bbd10b290080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c15915-82aa-482a-adaa-8a0f7777d10d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6aeb22-c985-483b-b940-f8ac416e0ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a684683-2e61-4c07-9e6b-b7d35e028a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a45a98-5adc-4348-9978-fa32643e1f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8987e32e-fd3d-44b9-a5b1-548cd6f5f5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48d105f-e2de-40b1-b3aa-22838a1067af",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df56c14c-2293-43e5-8b0d-120c177d3fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6709a95e-543c-442a-bc74-8f10272b49f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aab6384-c0c4-4b6b-ae96-eb31fbe25c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49756647-bc7d-4962-bcf6-bff480c6dbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1865f0f2-4ab9-4afc-849a-5749eadac9b7",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f19513-d713-4872-b38e-570c17901481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82786f1b-e080-492a-a958-e241cc4c9506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82272598-eb13-432a-901e-e281df516b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2974f87-8f18-4a1d-84d3-ed76ad04ad4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddac4f3-a31e-4201-832a-eea8b13047dd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0901e30c-85d6-4c4b-822a-b11aab82c47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f3fdb9-afcf-4b30-9fd2-a1b6c28f9a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4dfaf2-651a-4481-8c8c-0ef694214bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42258362-54be-415e-a238-a6a40ce703a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b460dc-205b-4676-85b1-542823d08ae9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d64744-3885-4088-b760-403c1c295e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bf212f-54ee-4dab-9b49-88d3fd4403f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2308afa-09e9-4991-adf0-c31182e999c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe4d99a-b643-4748-8b34-d1e7e0326c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d637ffff-0c7e-4842-b4f9-d3a4a50f454e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b58aae-9659-486c-8de3-5d4755349a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36b148f2-b2d7-4aa0-9a8a-2021045383b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849f5977-581f-4ff6-b1e0-6fd29a5f4d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4d8c601c-f2b1-4f07-b922-da9d6d3175ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b380b2-7951-46f7-99fd-1db5f7505c28",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3f929b-c681-4a32-8d28-619a1578ce45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d827d803-34b8-4142-95d3-ff04636ec3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83157e0c-a842-4a83-a622-e674b6c1156d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41dd6dd6-aed2-4d80-97fd-8cbed34c3ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b055be-a40d-481d-a057-0b7d17ce757c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566ec13f-bfd6-4a9d-aa8a-3b89b634248f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1773a61e-5a63-4d3a-80b8-80d333412209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9823b3b1-f474-46a8-ac86-d88317e0e216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cfaf1a0-f09a-41f1-9936-d4c828de8cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35719041-986f-4198-aba9-3eb6ead6b4b8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ab647b-6737-4865-aa97-b003025a07e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60c89b6c-574d-4d46-8f71-ccdbbe816668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aade4af-bad1-4075-9459-75e1fd66ce9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2771f8-47d5-49ac-8379-bd75a6dbf4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee448a5-9817-4c14-8c08-c27e00610381",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7d2129-5bfa-478c-9105-05af7c93046e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f647f9-daac-4092-8065-25b2b3ac054c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f239dbd8-4ade-4bba-a785-4bc83aac0cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4043b9d-9326-4b25-a674-c4b31cf6c59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b27e49b-080d-4881-93ca-cb59483cc3fd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d9d522-925e-4661-8470-77c612da8010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0eecf13-58d9-4de6-97c8-1bf1ac65a13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902a6859-b6b8-429b-bc09-70a531da7044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c45b39da-c2fc-4f97-9d3c-d15ff22dd7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545777c6-2b94-4fc3-b0d0-36aa7b504c69",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d856e3bb-361b-42b6-8445-0143f64ff285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc09d56-e6f3-4cee-aad5-e6c135da426c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1798487-0ad1-4505-8c05-6ebe233f0ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c60fec2b-ef45-4a06-bed5-b3c31533e8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7599dd14-c34e-4f8a-b586-2101c0557d47",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb3fc47-6b16-4fbd-b691-790dabd7aa49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac252b6f-4617-4a34-a055-164d34fc65e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196b9bf7-a695-4ed3-b5f1-6e3da016f7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e04ed40e-d5e1-4b13-952f-cc0b5f3149a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fa314a-9fcd-4c11-a919-1eb7ff00a385",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44f460d-9f58-47c5-b228-d1095616d8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caa63447-89cd-4e4a-860f-e624e551db71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84038a06-bca1-4d98-9fd9-ff56e68c09d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5dfa5b-c98c-4451-90d8-c834129f4db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2b444d-01b2-4203-8186-96b90836ab35",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df17adc0-0e25-4c5d-a78b-d198a2392ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27883cb-348e-4ff9-ad62-826f8654ae7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a8e9bb-8139-40ee-9ceb-ea8731fb2f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f4e273-7c7e-4594-bb69-ddc8ebfa217b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279a4f69-cea9-485a-895c-e9bab15eaafd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18442802-3e7a-4353-8a8c-c61250c6ab33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e049d903-0038-45f3-96eb-6aaa339cd564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca18e56-dca2-47a1-b435-651e4299daa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce13442b-fb9e-4c7e-bf9e-acf58c48eea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be9719e-793a-4568-ab14-7c1284208e87",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce585ade-7b0d-4f7a-ba51-17be36fe38aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2827d212-7d50-4bfe-8ce7-99ab1d7360bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f949a3-2ca5-4520-9738-00c1d7e885eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61330616-f87e-41f6-9f13-f8e1b70b5cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44a6cdd-9ef3-45f9-90fb-955fb6a7647f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf5b6b8-01ec-43c5-b82d-dae4c391a42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c16037-b38b-4c20-b20f-44dc7501ccbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b58685d-3ff2-4e7e-b37e-295865c2114d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f728005b-82c2-4c2b-b2da-571789c7d54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde50e74-0851-49bb-a9a3-de60af746439",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f0a4b3-222e-461c-a850-322370688535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096f6f66-cea0-4530-a37d-9f1a237ab6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88feaa51-7f4a-4bfe-9951-9de2e2c0ad28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92612e5e-b137-4edf-a779-27dca6ac69da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7785daee-1449-4463-998c-616e70d0118d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24de7b88-f716-4e89-beee-4be13034b53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a739e52-8f66-4d68-b20c-34ecb1f5cb5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea4bec2-cb99-40ea-8eb0-25e5f5856794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38a7cc7f-7731-4a1c-a6ff-b1091188e30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad97beb5-8ea1-40d6-9a33-8c7beafe8c81",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b5c364-30f9-49bf-9387-d6bee9a326f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95535ede-977d-4772-9e6b-377d305e9700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018c9c20-90c3-4cbb-9f40-56d8ef9e0877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "196db296-eb93-4d01-834a-87561cbd880f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cef1add-636a-4b1f-9e18-f261844825d6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9dd40f9-ba28-44a8-a5f2-491f0b6b7d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e56dcaf-4171-4f71-9f8e-695f1453514d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e00fb67-78d2-4d69-818e-27d1bd00ada5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "728fc4b3-a1af-40ff-ab4d-88b75a100df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fd5b6f-237a-441e-a8d4-f9aaea540bfd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72195973-8b51-426f-9af3-310c8fa8211b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3e9648-890e-4c85-a510-3c98097b9a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58b0c5f-cbd8-47fa-a556-ecd8c54c22d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6665f331-59c9-4f5f-9283-834e3d360d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1448f9e0-22cd-4e47-80e3-ee83f375c636",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35921ced-0f43-4291-a48e-ec9aa5dcd226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8308f400-44e7-4e4a-a923-a9b12b7f2c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eaf7cce-5b65-40af-970b-84a83d4edd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d259ceb5-6bd3-4c50-b4ea-7273ef1d3ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf355de-5655-476d-85a2-c85bef08b732",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "726fb09f-71f8-4b75-a418-0f1b354a3513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71ca47f-ea54-4536-a0ff-03f4fd7e7fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528e89c1-fc4f-4bab-97e3-d5c4da541cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8da6f8-02b0-4858-903a-91406a222477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb481064-c65f-470d-b305-68fe91ff95ae",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5ac427-fea0-4685-94c0-0888bee03052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40fa77b-8999-42f5-9f4d-5014ef976bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f952ec-18ef-4776-bfad-2f17fafe447e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3adc6e-c0e2-4c0c-81b7-89d9733b7546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f22dca0-f77c-49c0-a033-95455abb8c01",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a60a16b-5065-4cba-94a0-9b713410b2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82351d4-fd52-4ec3-9566-03af5a9ba677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc1a535-93b2-426a-929a-f6d1c40bfd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5662e383-5441-4a24-9731-e3846108556c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882cb36d-9b66-4d1b-aa76-5323e59e27fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8e4050-7889-4da5-9466-cd173fc6d448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37fd5db5-d727-49d6-a064-2ca4e917aeac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76faea4-dd8c-42c8-aa6d-5860f5122e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f34eb38d-9333-4c51-bbb7-f28f9f4b8fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e73dd1-ee5c-46c6-aa68-ab205f79b075",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d57dd46-447b-4f5c-8683-f9d48e988cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86365701-8f1b-4ec8-a431-a17c4ba74607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904a1ed9-1128-4973-b87e-36fd4db57ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d05b79b9-18b1-434e-a2b0-ba94b3f2f037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b7daa9-b74f-4f51-a782-0d286a96adae",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e89df4c-4033-44ab-afa0-b37a6e6c72dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b5ac17-5288-401c-b4ca-a671d7fb572e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8918c9-9927-4f29-8345-5278ba224a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3940c0b7-3ddd-4a35-ba42-e88a96a99c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917636a6-1fe4-4ea8-b746-80e172fa9150",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af84d15e-16ee-4504-abc0-dc7963ae540e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690ace7a-cba4-4ca7-8b85-5e9a0eb6ec89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6e7605-d7d6-49da-8bb9-f8e74320e868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b7b9403-3927-4593-8472-29bd94ac6141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0905841e-e8b9-4224-9659-55a60ead0dda",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8a4262-6080-4f42-8bc4-4a4f2dd65bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8eb1a70-fb0e-433e-a0ed-e57364a7a754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf96148-64e6-4243-ab2e-10fce84a745a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b6f691-54d1-4bc1-b19b-12969da7d915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74da0195-5fba-4640-9ce4-59297c3fde2a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33f4900-13fc-4204-97c1-135164976834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de869c57-6494-4bd4-8aab-fe4230f24183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32d9f4e-eebe-4743-9c0d-eaec8f4dd0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4743bbbc-d270-42aa-8d67-7489ffe0480e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c7352b-cabe-4639-93d2-37399bb211d9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c00925a-a4d8-4422-89df-2e00791e501d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf9b241-2fb7-4b2f-befd-9d7e73440887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd3c0de-ecd3-426b-8d15-2df9132ce3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e84d2802-1d90-4a13-8cdf-d492dc2540fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa2be1f-4ff3-432d-af41-c7f6786602ed",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abaab46c-b495-4456-9e15-03d5a262757e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4390c65d-f42f-4abc-9a53-7c8906da9ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a046a1c-494e-4f3d-8946-9d3a62029e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eecea79-8f45-4412-a6f0-20ec531d4243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212e6ddb-1c19-4c00-8fbb-58dd467b3706",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0270a18-be77-465a-a0d8-4e30b1ea7fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e91a6e70-5b53-4bd2-85e1-8a236cee482b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f979d432-afa9-4c11-8511-b8338e5a28bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4c1033-aa28-4739-be32-d68aae85954f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda2f4b5-8f9f-41a7-be82-7553b752a67a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d85d08-55eb-4d7d-8c95-cdc3b7933d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f183fe4-cf20-4fad-ac4f-c2829dc622fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d4523f-fe5c-4ca0-824a-a898f9ad6800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98d0e5dd-cff1-4e02-9c09-47ceaa8d9d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a8d6f9-24f0-4970-b093-cfd15204b19b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255859f0-c024-4e0b-8631-42549defd8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fbcda8-5131-4e8d-8732-63b7e83f1be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c92ed91-1a6a-45f4-9746-764a659a720a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35736732-c171-4913-8e37-b3a12798b3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0fe2ee-3fea-4d25-9c20-f818598e056c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b9f781-23de-4962-9b2f-fe2226e7ecd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b1d588-b732-445b-832a-7a15a9282f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b029318-270e-4dc9-8096-91b8dc3858db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "891b448e-7206-42a2-8da1-cc31cd99f2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3641c14a-7bc8-459f-b896-77af040cae4a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b026c8-1e4e-4061-a4cd-0a673c6beecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb6e5b1-1319-4c9d-9d42-a3b5003a20df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b788fafe-262c-447a-b8ec-5476092c2307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7edca7c0-9645-4085-88fd-6efcc9169018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9cec272-9cb0-4536-b46c-fbe854e5b583",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2738e84-a195-4d9e-bd2f-8a516e6bde06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd320b8-2ee5-4cf2-bb7b-10622d711150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3af231-42f7-4487-8856-152c3413607b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d500bd5-5120-49c7-b6c5-93b5b86f1726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851ad6f4-c467-494b-9f98-9a280ec4b665",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9831a66-bd1e-423c-890a-0d090ba8537b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2d839e-d592-4ca7-8abe-b0d7d434c307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4d052a-2b05-4e0f-be9d-b6e3f4c101f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d09ee689-9f51-4815-bb63-196788120434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd6b5d6-65b5-4931-8d46-a7da94c67cdb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "998300f7-6b4d-49ac-bccb-60c68be714be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce1875d-f604-442f-a64c-f2b4736822f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128ad979-7a40-48f3-a6c7-d97f6ce53467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "673df85b-f157-40cb-884a-8780c067f231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4538d32f-a72c-4e5d-be59-b256843d3055",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2877825-e7ee-4968-8da0-d370c9682b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fdb8db-f8e3-438c-bdc9-0772282122c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28eca3c2-8ec9-41be-92b2-9361ac146734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2d2158-1116-47cb-8abf-dcf37105dc01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e44232f-1fd2-486d-a3fb-c69d30003380",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09118559-c3e1-4942-87a5-729a4be8735d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e0ede7-2027-42c7-8320-7da307f545ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e88946-0451-46fd-9bd3-cdda8d69c588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a01720-325b-41dc-a3af-7368593ce04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa152e9-9fa4-4a65-9370-c321add3bb42",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df05904-cda6-4a19-b879-076f3289920b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b9008a-e4a1-4129-8c54-c4dfc4d141e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0347a4-3bc0-4624-942e-53585f320d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67daf515-75aa-4a91-a0fa-8915b50178e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b288963-cb2f-4f09-a120-519d725762f8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca0de43-dda8-4eeb-a22e-49c27d4220c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a5f259-f47f-4bae-ae54-cf4706329f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5193d62b-7216-4f48-b0dc-2cca89a61ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc07d65-4d99-4a79-99f3-83183bef4316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc388fd-e864-4344-a90d-4691031cf839",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4af674-c1a7-4370-9e33-1d97606cc7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7182c46-c8ae-4f94-85e4-0280f66db6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2aa1a5f-7805-48ad-ab1f-76fb4c424c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8c6043-e9c5-4f08-9a3d-c248ca89183c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77a5dc6-884a-4a68-9d7b-f3ecb558d8bc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f904ea0-8050-441e-8d8b-66df7354d99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec99dfcf-a841-40bd-93ca-1e1fa78ec205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603f32ab-f9e0-45ac-a46c-1b937a228b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a50ac9df-a19d-4da0-9aa4-ece4583caa96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91071595-3a39-46ad-83cb-748119a8a52e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b94ab30-9b21-4d08-aad2-baf223c4b022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1459e71f-1ba2-4e68-80e4-de365834d069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6b437f-aa64-4e95-81dd-13c981ade599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83e8e189-26c0-40d5-a3df-f088be449b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090ff3cd-8576-4d44-9da3-2d237eee0386",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ad153f-68a4-41c2-9619-929758f2c40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f8b8e0d-4fe3-430a-abd9-e163880037e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bc2c3f-c588-4b95-af45-f8e7320c4452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb97743-781b-4729-b7e5-1bd1626ea5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f081d991-d743-40d6-aac6-88c0a313c1fc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab38220-048b-4265-bf4e-3e3d1c260ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f2fa49-38ca-4171-8de5-9be174876434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4f33d8-c949-4644-a380-2ed5a0bc3ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "311b7a52-a81c-4ef7-b996-8f2644751ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906fcee5-33b8-467e-b1af-a7975a6f6cfe",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e3df79-301e-4144-a623-73f16285f469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9b0fdf-013a-4661-a5ee-16f04b4949c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a9f23c-6a25-4b1e-96fa-0b780ce307f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "186216ab-a823-4ef5-839a-67759ee8dc86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94a6ffc-f7da-4476-b3c7-62857e15a5a5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fd78eb-20b6-4b6f-8112-aeab05a836b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aedffde4-164d-465d-8301-69690974c5e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7670d3e4-1c83-47e0-89a2-dd8ce8462f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8acfb3-5c61-46a8-83db-16528be7749a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc997de-4c5d-4a1d-8c46-4f8b15db2629",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab76c9c-0aac-46a9-88b1-13444706aadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c375796-b040-47e2-b03d-0cfe3ff797ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fc74be-88f1-4220-a6ba-4e53e0ea20b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a673401-5385-4304-a537-d007b3b85748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec2fbe9-d874-4322-8480-3b8081d22b47",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fda26e-cf54-4d85-8008-0180e9f1c2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa2e4ad-196a-4cd7-ab29-38b03591d5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32126e5-eaad-4739-8bb1-714c8b90be3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96950e97-fb63-4f6a-a08f-04e5241dfad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba89bf78-9826-44f7-ba50-aae244b45c3a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07316de0-6fb3-4c7b-9122-27e9e113015c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3acbd3d-529d-45fc-ac0a-2f8dd01b1a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9eaa9a0-56ad-4fae-bf84-05766e271c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "854c87e4-0825-4522-b3ec-d352490c7bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aded24c8-b873-49c5-844d-ae74afdd61c9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ee720f-16f1-4034-873f-912cf912166a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8bc3d1-b1c7-4e05-b4b1-d5390570fd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01cd4b5-dff3-4cd8-aed7-a66979b7d600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab3fefc-949d-42d5-b628-feaeb4c04430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9b6c57-af19-4b62-b7a9-291f5bc5166b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d456d2-4fca-4867-80e7-77f83973155c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32810db0-0b66-48d0-aca9-6acba9912bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c942365-5385-441d-b727-725abd4d5b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8964f47-53d2-416d-9241-b573cf624def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e338277a-174e-48cd-9890-d359ae2f5864",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a37823-0463-4b6a-b453-8c6284167dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b7a6f9-331c-43a7-a689-db36556acf25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88ba9f8-927d-4e5d-b626-1f7fcfbd87e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a790498-7147-4ea9-a8da-99347b2bc0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa4bf17-821e-4111-ac5c-7019510c365f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ce3883-fc0f-414e-a6ba-a12c188ec37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd1c7d6-55d9-4188-ba16-191d2f858da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e24363-7853-4f02-9874-b83302974a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "26292730-f83b-41f0-8d56-9dae19002b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4befb31b-9bda-4d8f-a6e9-3dad0832322a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4623106b-0af1-438e-9526-a4da3d8f4269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56cb7136-707e-4c7c-8b5f-7f6fa0b01aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb8d522-3ee7-4915-bd1f-e7585ba911b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab7b720c-d024-4e9e-b35a-fdb3fb2c30e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee3bb1c-8dce-4b7d-b3c2-4287decdb74f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7444e1-abbc-41b6-90f5-c9eef6f09bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5c6debb1-cb60-437c-a9fa-be862ab9aa36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d493c7c0-3d61-4add-ac7c-164196898f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb6bd27-a178-48b8-96aa-abe3e5f4dafa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af934937-9398-4102-936d-1c41a6d24dbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "216ef5e3-148d-416d-b838-b0bfe8ac0721",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cf2122-9dfb-44b6-bc52-8193916e4713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a842e2d-539a-406a-a5c9-4aaced32843a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ac2366-c14c-489f-b2b7-62e7645fa0e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "62c27c38-51ae-42e2-95db-8d6f0b38223f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7119d4a2-7555-434d-be34-b507c1cde0eb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db49b1d9-f883-49f7-99fc-cd128238dafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f71c1060-a6f6-4fc5-8093-ed3dd623263a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1c5fac-7151-44b3-9c90-ce877b30935e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ef39e8d3-adda-4a48-b5de-598079670082"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b57c45c9-adfa-42d5-a0d4-d0aa4a905747",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d330af2-afe9-4b29-8a53-e8199781dbf0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9adbd487-b436-49c6-83f8-e52ddbb02303",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee1b7830-20ea-4fe1-8a93-7e7bd4e82d0a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4443cd8-aa64-4355-b3f1-5bef86cbe574",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "442f9cb2-9702-42c1-a2f8-9ad7f647ca5b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c890bc5-6f8c-4054-9a56-ead2dfb0b507",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd4e9bf1-2101-497d-b0e5-d857c68b8efa"
                }
              }
            ]
          },
          {
            "id": "9727690e-beec-40fe-99dc-203d55406fde",
            "name": "Positive Testing",
            "item": [
              {
                "id": "08c2fe9a-9f41-4441-9e10-ece3f7af2706",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7caa9679-e487-4114-b84b-477ba60ad677",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4565e3bd-47e6-4f67-b7f5-06da34624e73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e51873ec-c92b-4c85-8ff3-05cf7c2f322a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "22909814-3e11-4ad2-93b1-bc23426dad8e"
                    }
                  }
                ]
              },
              {
                "id": "5292748b-3965-4cd7-960b-05c55216d451",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd6c38a5-e8db-426a-a742-04e58c864671",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0e3d33d-75b8-42b4-845c-6cd231f321cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efd7b7a2-8790-4cb6-9576-fb5dc237a02d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ca7a084-0dab-4d06-b82c-7ab603db1654"
                    }
                  }
                ]
              },
              {
                "id": "b0b96567-2b9c-4382-bb7a-f1f386b65ed0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24a70913-ead8-41bf-a27e-97380ddbab2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "adfccb4e-70a2-40fe-92a7-04a8a9624c8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69bd87d9-357f-44c2-ac11-461ecb7ad636",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2784ce39-e485-4d70-be5b-d5b0477cb20c"
                    }
                  }
                ]
              },
              {
                "id": "301db6fd-d51a-427b-bb1c-465b0d24336f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb21a310-24ce-4d28-8361-8123e6af01c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "574df0f9-10e2-402a-b831-5cdfea956cd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b804d80-8ea2-493c-b1a0-1122dda58c4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "218985af-26d5-48a5-aa4f-d2e86b9b8412"
                    }
                  }
                ]
              },
              {
                "id": "685e9612-fec6-4b82-a453-4243d331f357",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b6d6c89-d149-49ac-b3d6-fc9f358d46a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f3ba8a4-7f4a-4a35-9ada-c6d128ba657b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14cf7dfb-ce46-4107-9cfa-55b4c0294788",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e7a7ccf6-d5a5-4f90-88ac-91ad1fd373b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae9db993-dee7-4d07-8a99-19776fdb98c3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d57d5346-e9b5-449c-b409-301c630578d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "71d4bbdf-a41c-4a36-956a-ae11efd7d036",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "35fd2d5f-6d21-45ec-acc1-8457c35c430a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80f51dff-bca5-4df0-b9c5-d55d09ef4725",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ad0c7593-bc2d-4192-a41f-a30142cfdcab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46850e55-d85e-40fc-b045-5400a5e48570",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9042993-bcad-4aef-be49-0bdeb76b5099"
            }
          }
        ]
      },
      {
        "id": "ab131cbb-3c18-4a4d-95b9-7ab11c9ab940",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a3db28ef-b4dd-4dfe-b9c6-394cc85cd004",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ca88492-8754-4290-9ca5-576b50afc771",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f3ea48af-0a8f-4e0d-8b3c-a6d9cd52e329",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528a2547-1ab1-49ba-9439-45a00cb8ec1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e9ef5b-429a-426a-9c51-39a6ed9fe5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db31c80-05e6-4b76-9b46-ebb7afaf64dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "05a815e8-b8c2-4de2-824c-253a6d811c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925902d3-9e07-4181-b415-a9de71ad013b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391afd63-9930-44de-8cf9-fd74e85810c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c590ad56-3b7c-4198-90c2-d630ed27a90e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4397f0d1-c5ca-4a3f-ae2a-615cedeb025c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d7cce5-630f-4bf6-b596-710c5c102965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ba8496-498a-473e-a1c7-7b42fefd90e5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25252056-c748-4cc4-8b6b-be2a09dce184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db53c75-2c66-4c9a-9e61-dd0a7068a54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14db619c-0385-4a93-862b-c74e09dd6067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0f5200-615c-4afe-9526-3b96ef07086d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ac02b0-cfb6-4928-8971-2d127bb8b914",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f4263f-cd78-43fe-880b-f31a55839ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1133a51-bcb9-452a-9df0-b97229aff9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52697fc7-f206-4dee-9dc8-e760cde97d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a36251-c374-4539-b4ba-451a17c5d060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8ed51f-12c6-41d1-9a2e-d8abea758d5f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e34bb3-6a98-43b5-8d42-207c4e53c07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d9e013-e312-4df8-9b5d-f2fd39594b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fa03f9-85c5-4483-8041-d4a3b36f1f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b226f012-c68f-4907-b16c-63f03e4a3812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3abeb1-512f-4ced-9593-5cbcea854e7b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b2e04a-c9d1-463a-9911-9e96ea88dd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944d39f8-be9a-4155-afd9-3b78f051d35b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c483782-1272-42e4-af03-81cdc999f597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f27434b6-7b08-4071-ade5-432042e0473e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e7e5d7-a3dc-43a5-9914-0e39e9489f6d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fbf1e6-8a3a-4a36-b160-ed94d8570aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391d4203-9ae5-4b9e-abaf-3e7ceb4598ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f232747-e2f7-4b91-9062-58449cadb030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4109052-99ed-4ce7-b828-b136e076a82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69af5d5-2e17-48bf-a2b3-a85058ac2a9d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0293ab-1635-40e8-a973-9303af71de71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a78d08-740f-4cc8-b6e1-024b153c99fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e68fad-7510-42f1-90ef-b0093681aeb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eabfb00-7348-4255-aede-6e216f332645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bceb0bc1-21f6-48dc-bc42-c23229444601",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac32a1d-b668-4f91-bd94-a04b1459eef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4381ad-82ed-4622-b7f5-ed4936a8c6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fcb552-b15e-4bf2-abd9-84f0eac3bf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3056b837-4734-451b-ba66-8f42a2a4fe37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c7066b-7678-474c-8f27-885ca161f26e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2bfdc8-6e44-4985-a801-fe71760d71a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d03ab84-04d9-42a9-8497-273ff14fa48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59afc940-0a78-45c1-bb3e-3700912fea6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b00b81f-b100-4af1-99b0-934bb23e65c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00217d13-ce40-44e0-92a7-7a7e8d57893c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c41944-74e3-454a-8c61-a5c1b59a72eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1acbe32-2eb4-4a60-8e4c-c665fc1558dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a160948-68ca-4f68-a13e-cfcd014c5822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e1be495e-27e4-4bf1-bce9-801cc0ab7ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b985979c-b686-44c9-b742-41ec3a394de8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243c90e5-115f-41bb-9948-a52e717f8d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392652c2-54e6-4dcf-b7e8-24b6d651a974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d194d1b5-663f-4975-a275-47baea370232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48b6ccc0-0464-40b5-b202-053ac51fa9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d43f24-12bc-41a2-a767-c4f15c08b5c1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26383aaf-638d-4f5e-9e56-3d472e1492ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010404f0-942d-42a1-9c1d-94a076fb68a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbad947-6c57-4678-b5d5-976d3d5ef8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44551881-6149-44aa-9672-c565ddc5d043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa05f49e-3e9c-4c3f-a8d1-b0e924ca8e1a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca4647a-f9b7-4900-b163-75fa5e05da34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ebf65ce-0a65-42c6-92f8-3ff7afdcb7d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5eec7c-3133-40e3-ba00-e3d3fd7c6cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "094a9a4b-2e32-4774-8f36-d567a312a086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21761445-9d23-4853-9d3a-7d43a762f2ed",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80dbf57a-a582-4f72-8079-677497887452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d406cc3-04b8-4211-af80-177a4d1efdf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005a50f5-7151-4fb7-8865-a719d440e124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f3b5ab6-483d-451a-9c8c-2d699a788a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e43965c-bd32-4775-93f1-df1bf2163e97",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24a738b-4aec-42cb-84f6-795144165398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ce6a37-8c66-4cec-9b91-f6a6147672fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7b4d00-3690-4c67-b1cb-6a30ea911f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "11bb7963-2711-472f-8150-040a296f806e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c020ad-a0b4-48c1-8a62-04d797845307",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca965c35-f83f-40aa-8c84-197713a454f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e3f0ee-29aa-4638-9d34-a3a08e8ee4d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad68b0d-4b81-49b8-a734-7ac475a42b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "79b178fb-82b9-4c60-9b20-56bf88ecef54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956a12ef-e354-4f39-8205-faf757b83882",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13682d9b-1d45-4657-8d9f-3b36a710f7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579a3812-424e-4b97-a42a-45e794141852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff05b48-b324-4d60-9792-ba800f8cbab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdccc5b9-f53a-482d-9ef7-8ab4dd83d7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb93e42-ad31-4237-ab08-db519c4cc285",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8758a4ed-0d3f-4bec-bba6-acb7722594d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120669c8-bd81-4666-ba4b-95e4723d2206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b356d3-15bf-4f1e-aaec-03c906dad1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29dac5c8-aa1d-4dda-94cd-50a7d32194ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96de6d83-ea60-4b3b-ac30-4ec50c8713b3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754af210-d004-43e3-b37a-4cb387f26dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5faabba1-95b7-42a8-90e0-db264d80efed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf41757-9b93-4eb0-882f-6a71a1fd5507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5c1e83-3cde-4167-826b-7fea668383d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9301e0-2e89-4819-8597-f7be71abdc1d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33872ba-05ad-4da8-833b-130731e1d440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ce279c-b5dc-4a61-8356-4f79de0b111a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1990cdee-e63b-4642-b319-3ee6eb2274cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28a55d5d-9fab-4b9a-86b4-40265adbb5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0f4968-ea27-4da8-b2e8-2f1a67aff1c9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eead3368-9942-4227-9ba5-4cb7bcdfaf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6584c43-4bf0-4b10-8ac2-ca5fbc81d06f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649a9f1a-53d3-495a-bf58-d8b01d3ca429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e4e5c0-2720-415c-a321-ab4c1ad5788e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee69d23-244f-44ad-a65b-ca12c7347f27",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d05900-3da1-4d65-b943-4ee5a1ba18c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43573572-6f18-4942-ad39-3c81c8d006cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2117cf-85fb-4dea-8d77-88554344a234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d35b62b-4482-43c3-a75b-65181d5a95ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14564810-8be9-4ae0-bd6e-68302a664de2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65be4b8-25d1-4304-a9b8-b5b4b6d22bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62d7d94-7053-4993-a2fd-614acf422389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50eb248d-869c-4e30-9c92-ad738be83e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c33ed2fb-bea2-4fbc-8fff-731cfba0bae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e993ff-a375-4910-a7d9-b538aa25bdf1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7886e51d-63bb-41ba-8b65-8d043bfd7f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d70886-4c32-41ea-83e2-d01e07eb031d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2693e261-eb42-40d2-b369-ee4e45cf17dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08b8f8f6-b8cc-4c75-9d3d-f6c5b713a632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85655217-93b9-4474-b6c4-637e0af94b0a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e08f248-6812-4c40-9ee3-045294c4c98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209b8660-e488-4344-b4ad-4a950cd6dead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e9943b-eb4f-4783-ab3a-67231820d4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3286a907-b46c-4fa6-9e5f-3525e1cdc1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d67309f-b4fd-4acc-8e83-30cc2a81ee06",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214c0776-2e28-4bab-9f90-d35c522c242f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d621ca0-aa30-48ff-bade-c69eeba9d476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35aecb74-de40-498a-85a6-849ca8dcfb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb11ec44-05b3-4475-92d9-cdc48db8d9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07aa9ba5-846a-4765-b4f9-60610d8ea544",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8a818c-4123-466b-ad6a-824f28928ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797ddc4a-0c6c-4795-8038-6b1561ce4cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9b0470-cf77-482f-9d2f-ddc0ec19d33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "967356d6-397e-474d-a4e2-9f55688a8a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242bf6d6-4193-49c9-84f1-10838c9e06a4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9f6f81-2273-40f9-9a20-9ba1ed6132e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4551764-f018-4bda-9071-0a1b14f9ce41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5130cef-0e61-4d62-912a-b866e45b2d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fee34f77-e8fe-4141-a92f-98d7a8c770e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622e2ba5-3c8f-4429-bc8f-58ec9010900b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ef7782-883a-47c2-a736-cd7ae0bcea00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e4d834-18aa-455d-b2d2-21e6c44fb6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf096fb5-da88-4d6e-b4ef-7872a49553e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57dca3d5-b769-4287-8138-069e4eec407b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231aa859-2b03-435b-882c-c4deb6e4bda4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e79e1f-df2d-489f-bcd4-24dbf47646be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dea56f0-9114-4896-8d9f-3fe179f92038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11f311d-6f99-419d-a3eb-4e598b4fb0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84cba8fa-ba9e-490d-bbaf-fd636664078d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551f084a-7cc8-489a-bbe6-8a6033939d13",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5747acd1-b633-4307-99b3-fbec8b403081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a896e255-5000-4dff-aeb3-f0c218fa6c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9febe29-8add-497d-b5b8-0f62415d6430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44d44923-6b09-4b1b-9bc9-2016517c20a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4760932c-853b-4d86-9e54-77c573a16130",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6cc11d6f-da7b-419d-b459-9681bccd07fc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474d8454-4e61-4531-a73e-688640c90021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d959bf77-637f-4405-b825-bac27c300c99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04eb1657-47e4-47cc-ae51-321a7bb99742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46ec11c9-eaa9-4fd4-be5e-d2b939d66937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f547a03-ce7d-4e44-9126-182f51bc5015",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d89d75-0495-4b48-ba12-bd844c8163ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cad6ad6e-f7be-482f-9832-4f9db0bba970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44437af-927a-4894-a9da-a3c4674c3c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0709601-c1ad-420a-958d-1755e67a0cf2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "171250c0-4c84-42cb-893c-cc874eddd94b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75361c1a-8b13-43c6-825a-3c6b9eeea0b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d191f525-db7a-4a5d-adae-db453128af06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e270aaa-0a90-47d3-bf96-345c4868c672"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d2f3c0f-3982-4268-8096-985337deb2f5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ad9978e4-e9c5-47d5-831e-7f18280aa53b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31b62198-07e1-468d-a8b4-13118f35a2b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1bac5607-0e7e-4640-859e-79280c50fd6f"
            }
          }
        ]
      },
      {
        "id": "fadb86b2-d77c-4814-b75c-832d11c53ce4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "347ac427-0e60-46aa-a0da-24afa2d2f3d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20ffeb18-30b4-4c2f-8b0b-841a1ba50837",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2eba35b0-fba8-4f54-bbb2-05ed08c0f768",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17cff64-d5b8-4a13-a244-263a10753cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c2629c-c3e1-48a1-9aa1-f2ccf5d5e5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab5962e-bb03-4982-af4f-fa87e56b7719",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebac81c-16dc-4b03-a7a1-1e9445a2bca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "effb8b6c-5ba6-4a55-9817-aefc92d93390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736132d0-679e-48ca-b522-85d386b06876",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a986d5da-3ad1-4b18-98d9-6af3d62db530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1903002d-5b52-41f1-bbac-f4b2bae97c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e865212-7b06-4cdb-b673-b0c0891431e6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdae21e-b2b2-4391-aaff-f5720f3a859d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8e5ae2-91a7-4306-99f8-c9b02fca1ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028f397d-a631-4af9-8956-bb73e568918d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a11b5ec-6544-44d0-bf46-178e6f4574ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab7147c-d491-41da-8e5b-bf9c38841122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926bb992-c73a-40d0-9c63-318c7dcef240",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa1b1d6-a523-49f3-9af3-71f729d0f18c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675e6a81-5ef1-4268-82a9-221d83784a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c41862-cb3d-49c9-aefa-0ace53fdfcf9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca484acf-809f-4704-888f-80320d159388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c3e131-ec3a-461b-9c99-d5bacfeba732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125f9618-78d9-4180-8dbe-94e16ba190f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e9aca9-5c2b-41bb-85b1-f67679fe9e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0c94c2-1db4-41d7-ab76-33c5fb254ac4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7d21fa-89f3-4d9b-958a-68d12f16f87b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2bad4bf-2f31-4f18-b80e-a20d1f6935cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e86418-5218-47b9-bcfe-9d29204f06d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1a0431-9f29-4967-bc68-68df4592fce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6737289-c5bd-44b3-8512-444d137aeda7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3a13b8-ef6e-4aba-ba93-0a892e6e4c13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "586b5438-7238-4523-ac7f-3efa5f59d0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdd0820-8b03-4a88-b27d-86383769fa58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceb332f5-96b9-4086-bde0-b14170cbcd50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc243c5-bb1a-46f6-92a6-e070efc5213a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427ca2a4-f6b8-4f47-b682-bc125a9d6488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e970b6-af9b-4bb7-96cc-66f7176b001a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60dd28e8-4c0c-4727-93c2-2f1e1f740e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e5b86f2-6258-4c8e-a7b6-531c47198088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f953993-976f-48f2-929d-42f13eee6765",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b1ba15-afcc-4c30-9c34-575e7276ff3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b6826f-6054-42c2-ad47-14d52fb0f868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "682de815-dcb3-4f96-a336-9a038b33a852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55427c1-7f76-40ef-8252-819d817e64a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feccd181-9ba5-498e-99b7-cb2c6ca44027",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc63b7a-499b-41c1-af55-ae8033661028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8381df61-c598-4086-85aa-e651df7dfd92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4e0a82-6fad-458e-9313-a53aa8639653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50967756-f37c-4270-9cf7-8f3fd9773be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae8560e-aa6e-413e-aecf-14e4cf87ec70",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930efb5d-e325-442c-89e7-f1b960875d94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a582acba-3376-4e7e-a68a-0fce57719c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97c8a0f-6a15-4488-afa8-269ea4c7268f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ec7162-6f8c-4f74-9d46-613b018fcd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff129fa-7c52-4dfe-aa90-91c05644ff5a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9510bb95-18d0-4493-af59-a2c88e7e6f73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1e50b2d-e1fb-4363-9a59-43b0a7a7ea54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7163ba6-f2ba-4126-9acc-8348688b7a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00842c28-d332-4bea-a7ea-899bff739bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e137f08d-6671-4f32-9374-8656112f2a3c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e2c4c1-47ca-4e1e-8a13-af5de1d6f17b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b109239f-02b2-4d4e-8935-6405bacd56b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "415d1950-4e33-47ba-acec-0b1d564e696f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72efdd60-01ce-4605-b780-0c68e069eb7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322233ab-a6f1-42b8-a978-29a40b84ff8b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ae16e1-388f-43b8-81dc-67722e6b6d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8afa3b6e-9d4c-4bde-aa96-28a72addad45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ddf3760-dd13-40be-916a-68290e163ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce97c112-07e3-4650-9d06-5260a203d1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d8ecff-3051-4b1a-8f33-1e0dc90f5f3b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b48accc-ee9a-4aa3-bda6-6eb30dccbd1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6d3d42-f28c-431a-a7a4-74a008f0d603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fa9964-7edb-423e-bdcf-616790bc6893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda43ae3-3212-46ed-8aae-d0ce7fa7173f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166b1555-86ce-4a54-9630-e323aebc708d",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9a8bd1-3f0c-412c-b2bb-c8241d1d9007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2570108-209b-4834-b03f-2f77d5d8830b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c919134-e979-4801-a348-5f53c78201f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ebe494b-b6f2-4fc7-8347-71acb5fd01e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b59ecdb-ae4a-4c75-b341-59d87e2f1efe",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f11367-0db8-4d40-a2fe-7309d8f94712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d517e3-8897-49c8-ad06-9a925d797898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efb93dc-43a1-4bdb-9be9-05d95a0fe776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83d04ae-4faa-4ea1-9e6a-92cad487672d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a54e34a-dc06-4cbc-b1d7-64f81a4d52a9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27035c79-f682-4164-ab99-0acf818284d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43601ab0-ef86-4ab7-bb7f-176747631798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0516dc63-c06b-4548-b857-9d37a2737a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632c6b65-8209-4fd7-a2ec-81aff0e5c1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa76fb60-68dc-4cab-83bd-f03acb549e84",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ad9599-22b0-4084-a0b1-368cf9103dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e85f7e2-2b68-4d6c-84f0-e1ef5415b219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01223c0-ed42-4e77-a9ab-5305c73d7a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99b0bbe-d45a-4e9c-a72a-a76aa523cfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37790d21-ab0f-4ecd-9cc5-5e6fdfc52434",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e88eb5e-81cb-457b-bd7a-d943e15f9563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79247b0-c0c9-4c4c-860a-79b6e8ebcf72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec4c141-ae7b-4dd2-b9c3-e91c713f4678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96926e04-ce32-4ac9-bf43-9e325a0c4209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e867a7-5f5d-4f8e-b395-9479ef7b3912",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710dc87a-4170-41ec-8163-17b8a5e1210e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "decee0e2-e083-4e8b-abfe-fa2ffc96d140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8efc8e7-d750-485e-924c-0915d05e2a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad8d524-d032-4896-b2b2-34264cf6fb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae431f39-b694-42cb-b5b4-e5cbb0d634ac",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc03462-2a70-428f-8a57-3b81bbbe5a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15a92b7-75ad-4903-ae12-afffa028fb68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead6b4d5-8784-4520-b150-7357aba737bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56fcc43-6a95-4edb-8b36-d87efc714dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15195200-8322-443e-8a1a-9f10eb2ffa4d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c908d7e6-7288-46ce-8e73-d5d42ec09954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c41e0fdb-6c3d-4c3e-b4e8-3b7a9fbc71fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f790bc02-221c-48d0-b8d9-2a05a6850633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f3734c-5467-44e5-891e-4ba8de26db21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112ec82e-f257-4250-adfa-356319123fe5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb0b728-7129-4f69-a843-6cbe174b2b84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79468106-8cf1-4dd9-a5e9-35c06e31c017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea5d85e-b299-44d5-ae26-e585b7d225fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b30da42-9577-4a91-9014-b3c6c6bb1525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac085230-f2f3-4fc3-a3d0-e966bedb66eb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e2210c-8fb6-423a-ab6a-d648c84de48c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f17690a1-3f98-4637-a12d-8698bc776d19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "937bf794-9692-493b-9fa5-47bef020f0b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dfdf3b1-a6bf-4b1d-8bfc-36b8582cfab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbeb2ac-b224-4a1c-8e77-619084232d2c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18b83cd-e309-4cf5-93c2-228727555f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63441823-a3cd-466d-8abd-9483138ec1eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc16fe2-f088-46d7-bf20-aa2f34afc0e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe41e38-fb8f-43b6-bc32-61c20d5d814b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9e2e31-cfe2-4bf4-9650-ce41c88b9760",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec6fd00-9bb2-4381-8169-e8a0ca9c4ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183378f5-492c-402e-b4dd-38d7f7a15bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549130d9-a6ff-4884-b91b-ffb3b17e9040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73d327b-43ee-45fd-9bc3-ec48f657944f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1ad395-b7a8-481b-996c-05601ee4e5ba",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5554012b-7e0f-47da-8456-231b3a0efc75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a0d8da8-8f44-44d9-84a9-2ff87c30e33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "128148c2-7f66-4815-bb96-4567f82dabc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639a867d-ee22-48d6-8f49-98641070bbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1394e2bd-7d6f-4d80-83bc-e9e1f84eb1b6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9d4859-483f-4db2-8275-272c043e30dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af2a2391-831f-4cfc-87d6-8e8830207ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e742215-6164-4ebf-b4ae-2d4544963f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3596fa-4483-4054-9e69-61ae40486ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654649cc-265e-4dc1-86c7-518e825152cb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29257f8d-6176-4609-9dc8-f71c0b7552cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9e3a514-d23d-40bc-93aa-ada54e01791b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b895bd6-d4ea-485c-a730-53b3319d1bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b52296-6333-4ab8-a780-cfea217c881b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e1286e-4e71-4234-8c22-1bafa67ee3d8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e940146d-0a5e-454f-b943-16d4f56eab33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94091fc0-f0a9-4a14-852f-9ee1d310effd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5814613b-d897-4c44-8353-b5c8e4346552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53fb069-1156-4e10-bf43-3754ac6097d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7931c39-9592-4594-9a9f-6359dbf7f403",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4195ac88-31ff-4fe2-8a10-9664001be69c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68259928-cefc-43e4-8cff-6f144bf324a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65837ab-b5bb-4c55-87d4-08692efd8a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b707ce54-8c62-45d3-8011-b20e16785b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a73f836-0be9-49ca-a941-c4ec8822822e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2514f88b-c0b5-4005-a03a-830279f6d199",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a296997-7f08-4615-b44d-fab93c4b5dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996a2098-2c7d-485d-9c06-bb22a8ca49fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2c44d4-7f20-4616-ab2f-c870e4d282b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3899c9ce-7b07-4412-a73d-aaa27b195af6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa828603-215a-44b0-834e-707923514020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e2c7ba-de9f-41cc-a5ee-22de1355030a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7495c1e6-640e-4d88-8b63-952512be79df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e37a02-8a48-4908-b07c-0829062314c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f224519b-ecd4-4213-a972-492ca1b895c1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ca15c5-9166-43a3-9226-52f95d9a2987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2822d6d8-b955-47fa-a346-741fbce05225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2eb239-107d-478a-b673-970864cd42a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b5599b1-40da-4b87-81d7-15837e9789e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6981f9-b097-4ab8-a191-34c564f63e07",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac861dc9-bc43-41fc-bbba-e4e3e0a127cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd9beb5-6dbd-4c7e-b695-d86f4a9b79cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "228de26a-ac7a-4f58-8c1f-1b162334ca7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e26b70e-f89b-4530-b5fb-86fc077660dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99042395-931d-48cb-bc2a-d94ba2dcf2f2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec53c9e3-15dc-4c98-bd53-79bdb9a5f1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9fccec-55fe-44ab-83da-769e5c993a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7880a42-b29a-4e4c-a7f6-714d0b85f384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be91ec4-5c00-41c8-bff6-b9ddd56b1b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226256c4-05c9-46e5-b1eb-53a407180670",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32a428a-1466-47c3-be7b-060f8338679f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649bd680-ec7e-46d9-b864-ddc5a067b461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3708030-00cd-4552-b16e-007a98dea07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f724eecd-b270-48b0-8acc-c60914500a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9fb767-f961-427f-bb1d-66c66785bc74",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11ab24f-5622-41ec-bdae-56d178798503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff8e975-2fae-463d-aa3b-bc30498aa99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949a7678-993e-4ede-8ca3-c5f38401c224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4319f21-fc66-439f-9bb2-1450f534df25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a03fb7b-419a-45aa-acca-bbd47e0986b0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54a51ff-e58f-4ebb-b45f-1bae168408ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f34dabe-1d2a-41a2-bd91-5f2e4d7cfad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e4851b-086d-49dc-8566-ba51a8f346ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c3112e-9d68-4851-94bf-fc41d7a436fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be9b20e-0aa9-40ab-a4ba-e8c6b4acd993",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01cbab9-a463-4a6d-b8da-4834d4437ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9277b5-2347-4b0c-87ce-5e2224022697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f4e294-2800-4778-b7c9-17ff8e551677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b777a5-115f-41eb-97f0-a8dd7dcfb4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed4bea4-afea-4aba-b687-e67efb31f3a4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830b2efa-da39-4baf-9d80-fa3c716f2220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff073bc-113d-4f48-83ef-2c22ec49e121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fc8319-5f9c-4e43-8d9b-2b205f0280a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f493ae-06ae-4b28-8c6d-99120e061593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2b2c2b-81fe-4dae-ae05-e81cb0ff6f60",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4531fa2a-a0f9-4c0b-ac68-5efb8b99d8b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84398a4a-1ceb-4f8f-81a3-8c3a60fbc898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3ded00-d4a5-491f-8395-909a8b6b9c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e636dde7-3e07-4388-b88f-56531de87ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699d0523-4eca-4f0d-a765-92224626efe5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c560350-f219-40f5-a24d-0be63522d180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d918f269-da27-43b6-b1cc-4251612f823b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181fcbc1-f3f7-4fc2-ba00-90e0a5b1e3ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c752b4b4-fc05-46d1-9f14-5cfe08b2b068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610a0d50-1981-4520-96a3-b7381174158d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f4a043-bcb5-448c-8471-fc2ba6739963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf68a531-f74e-4f40-9391-b5b9c12a53cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13daf70b-71af-43cc-9242-137521e32925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af65c19f-0649-437a-bb80-140ee3d290b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f1c9ad-c13d-4ee3-93e7-172fbc13f4aa",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a8edbb-2d84-438a-9d0b-4dc266acdbc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a637f91-ad6a-4cca-8e60-6c136a26f493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05f4e13-f120-4823-a823-46c3ec8fae9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0470bf26-c39b-4668-8644-d61e7c0c8b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f801be75-45d7-47d2-be3e-e9b5d90db630",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab02573-cc12-4756-a44f-5fbc7eac8519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63753e2d-bf7b-4ffe-9464-f4a9a1f9d810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81b03cd-8780-4045-a691-7ee76ef82b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282e239b-587a-4f41-ae3f-62a8c63e7cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9217443-9d9e-4d02-844f-85fc6c40d65d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562281ea-b35e-4835-8da4-726c940d530d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31710a1e-a617-4cc5-8137-58e310d561c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9d97a8-b73a-4f93-88dd-eb37b385e7b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6747a6-aee7-4b66-94fd-4bfc707960eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c03629-d680-4127-8ae9-d57bf40b776d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4dab38-8066-4cbf-9454-0b199c771a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f7e5858-a098-4c39-9ddf-8843b6f3793c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a003e97-cb21-48ef-96b9-659be93d9ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35310daf-e887-499a-ab33-1efe923f5d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7429ca-e6fc-4f2b-9984-45a87d611dc7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae64082-520a-441a-a1f2-62222801f918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98fdf2a0-5330-48f5-bf32-7196532c0e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266f03eb-6447-48ed-b777-f6a49be2d554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9502267a-8dde-47c9-8756-5f6e54805947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e898f3-aefa-499a-91bf-38295bd9696c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937838c3-13c9-4e85-b334-a2690c9a5f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b4d417-074a-46ac-8a26-7479ce52101d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ba7ba5-f20e-404e-83a3-dbc570078fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8dbfbcf-6c14-420d-afe4-12459fa9b0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c272c7d-cbcd-448b-89eb-66e135cf9a80",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0567f07e-e9f1-4d4f-a2cd-1599ec1026e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a2cd50-c941-438b-ae20-4229468dfb64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c0eca5-47c4-4a84-a113-00edc37e989c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5f5e6d-da35-4e1e-9949-d6d8d65ce397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea9ddc3-42e8-45a6-8226-36fe8201ae82",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4f143a-34bc-43fc-b9e1-fdc279b9b61d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e604a3f3-f176-46fd-b25e-3d8fc662c1a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7b811e-a438-4c44-a0c2-d40a498a9fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70db3599-5109-4341-b281-5d5a6a29186e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc1328e-0828-465f-bfd2-f32dd6b73c9c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b07b698-919d-434f-8af8-80d25f9e44fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9307d78-2bee-4e3a-a6c8-0831caa54139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c50fc4f-ff78-4895-9fb9-fc99945b73c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d657569a-2e75-4a3d-897b-5f3851d9276b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb98e3e-057a-4b14-933a-cd58f726e27e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d0e4c1-436c-4e41-8b85-4921cda2737f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae93212d-fedf-4054-86ee-14a43f9780c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137ca2b3-3963-4197-accf-d8fc26ba192a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "647fd9fe-9651-44d9-a70d-504269fe0e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c517eb10-43a1-41e4-84e1-60a9a9f8775e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c530c5a-c8c4-4b1c-9131-db0bbb0dd090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b99847-a1df-4f18-a641-655c4d2e2361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ed0cc1-1d74-4e15-8ecf-25adefc6dae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6e099e-8707-4d5f-aacb-424d20ccf1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe53bc99-2900-455d-a657-5254728a47ab",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6519cb-66b1-4eb7-a705-0a4464e38d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1bcbc3e-123c-40f6-b7d1-1a2b9ded3035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01ce162-c2e5-40cf-9d99-313ac106f19b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61374b02-4d69-46a3-a99f-312dfd7c69f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb338e1-c9c9-43c8-9f95-5de49c3f797a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78c2c41-ff57-4423-ad0e-d02b9fea3b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6320cef0-6d62-4338-a988-e0d0f35ee9af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44fbad6-5d77-42f9-aa3a-4fe18328d547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f332dc-eee2-4731-ab73-e04eabe487f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fe3f14-180f-4801-854f-b8a1b83a2045",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822b939f-94b3-4641-90fe-433fc0f9be76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d43047-aa24-4eca-9836-9097eadb6d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949f2cc9-4f2a-464b-9161-fc283e71c661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b14617c-1846-495f-8c38-7e60a6653cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ede635d-1a37-4609-bf9d-88700dec0774",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee42155-39c1-49e8-a752-a3a710d5284c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe58c1a-dce8-41c0-bb00-1a6bc0a9ef9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9257424-92af-464e-985b-942186457525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3137d8eb-b940-4f5e-9481-d1a6f4a73699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fe7b6b-5c22-47d0-9d04-cfd85dad2015",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a975f9-e7e6-443b-9c07-f741dd9c402f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9261d39f-5ee3-4674-b2e8-b0b636c6eb44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be92643b-5ad7-42b2-8b42-04635207cf7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5558002-7063-4e0b-a2b0-09ce23762d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c5b04d-ae5a-4c71-b714-48a17a9bfdac",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3799b04f-ed61-45f0-bd75-98b8c963a888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff14ff25-f4c7-4f90-9eec-11b815969252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0c123e-4b51-4923-b879-4c45987c73a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115a4d5f-8678-4ff5-a3d4-ce1012a692b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318b344c-4006-46dd-8f20-65e346cbc69b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a9e356-d349-4b0f-9a5f-3ff67f7ed24f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28bded3a-360b-48c9-bf18-c53301022d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e960d4-df2e-417f-ad19-a0d4822f72aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a531f2-6cb8-4c01-8d91-2a066504fea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2646c65-accd-4da2-a977-332991649184",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af33e6a3-002c-4832-8ef7-507abcbd04d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0ea5905-bbe4-4854-83c5-76663651f039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2e3b69-492e-4f10-94ca-7e436d7e9283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b40881ba-4ae6-4e23-bc31-6baa0d21217f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb10b86e-600a-4326-bf03-5a6b3593ea5b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0c90fa-45ff-4805-9faa-57ec08c6b413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beac2d86-2da5-49a9-b018-bf199c5f5ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99d5af4-ef81-4831-8657-76eb77ef1698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79520944-f787-442a-acd6-5fdc0d417e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2add2672-5656-4453-9f95-33a078aebf9b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8546ce8b-ff02-447d-b535-cec3c2b5b382",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb253291-a387-4c6a-bd42-529a28eb0981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba08d17e-aed1-4932-81b5-8e71d9a453e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3caba15b-8dab-452c-b106-4e3236b96d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69863fe5-f122-4a08-9045-7087ca4e6fac",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc692e26-5ab9-4367-a785-05b83f292e3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc317c33-3f0c-48d6-b674-6c84ba4d9fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b830e4eb-4c26-459b-a70b-f4587d8b5059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2707548-2cc6-4c14-a4d3-e8aa148f62a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13e1105-a3dd-4f67-aab7-f4040a989ffb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8af9e2-f77e-4301-9f91-75de15c6df50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e2f2dc2-a5c5-45b2-b82e-cb61fed291b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6cfb6d-057d-4382-812f-f693c6e20bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d781fd3-858c-4080-9a51-c6401cf674d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18371de2-9b1f-4d77-992f-5a6f6ee71358",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f634dd6-3d63-4109-8782-9508fcd5d029",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c420eafd-392b-4f63-be22-f89bf4352cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa2a12c-9eed-4e63-9483-9d18b9972254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e58393-19e5-4a6b-a339-25e1f0746d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d4d76f-ee37-4563-9ff7-4191e23adc56",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99125bb-18fa-49bd-afd1-133281cad5f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34ddaf2b-aad9-4338-8853-3821b51815e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc28821-12b7-4ae2-bf63-6f832205fdc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45bd79b-5e1e-4648-bb8c-5e5172f1f592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985785d8-3a23-432d-aa11-38e13ad047e1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f43cc63-4739-432d-85b1-9aadd9f06144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ba4dc7-bd87-46e2-8dfa-434fb2cf36bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d00580-3178-4df8-ab44-95a3bbb2b2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd917dd5-3083-4a1a-a129-2f6f1db083c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9ae0d2-19e1-45c8-b7e6-7d2db65451dc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b809d62-9413-4753-befb-95f1482140cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9da2a27-5c49-4e09-8e19-2dc81a55f075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a301bdf-fc3f-49f2-871e-52d3cfba0291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7056972c-6b5e-4b56-b056-b832f6d39bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb21653-ead1-415f-9f40-80f944a4b480",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafd3eb0-b49f-4b8b-964d-aaf10742f409",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa7cea60-75b5-4b0c-a968-0538ba91a308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b7a249-3c2b-408b-ac85-0cdcc9a45e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ddf430-efa2-466c-b226-3bc29c942491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b6689e-fa88-4eaa-a876-8acd8a474ea6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af76746-97c1-45c4-8d4d-ef452468a581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86acb540-2973-45b2-a859-8769f229db83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7262ae04-1b80-493c-a560-5d39dbc5895c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb97abe8-8953-4b89-bcd4-dc014f81f6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45308e09-91fd-4a00-96d6-c23e67df379a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0ab37e-afd7-4f58-8712-c04171337419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1454462-7c90-4a6e-91b1-53e335a80426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a42c786-627c-468e-972c-d8cdb5381023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765e1e17-9208-4366-b4f3-1abe04684792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22914d4-c0f4-4d24-b0d6-7e0c26a08f89",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4db168-48f1-47f3-b935-30ca9bbef132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f2ad6a-416f-4214-a316-42682a88fe47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acfe99a-15a0-47f3-9368-15812c1e0559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f7a1af3-8673-425d-a25a-7446c87e2c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b33803-4a28-4d55-85ab-50e959001c6b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e4cc0d-8c41-4ca9-b035-8a3363a3356a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "410fb8eb-c803-4a21-995d-2f67d181347b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc6cbb1-d199-4d94-b00c-38173da40f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f4d8c5-af9e-400d-a279-566a1b917703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede54277-5d7f-4ded-b772-34510bf5dd5e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbf58e6-89cc-4da8-a2b5-fe3757f35135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da19525a-346b-4a82-8aee-094211f9c635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41952610-e27c-4356-b95c-b97bad5191a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4fe96f-e701-40c6-8a73-c51b9ce638eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892201f6-27ec-41fd-9b26-57e25792b751",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580c87bd-884e-4aad-81dd-18102bc124a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d22b229-b8c9-49db-8987-821b34f673c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d179b63d-9503-48d8-911e-55ba561dd7af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f3e410-93b8-4806-8184-fe6227e28c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e465dddb-a77c-47b7-a391-1949cb1f0682",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8db245a-d5fd-4ea2-b896-0385b72c1e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c12d6a-9840-4803-a4d8-a44e2b958485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7c1311-7633-4a19-b02d-32cdd83d6f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd4a93b-9774-45ab-b757-3ae77c5b15ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9add21-6467-407d-8012-35622747a557",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabe899f-bcb8-4595-91a7-aa1a7c9c576c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb858f67-406c-4dd5-b9f2-6808fb73d3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28c3339-f2bf-480b-8ca5-86b3153502dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037869ed-5a7b-41ab-a4b6-8fdef2ed4491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727106ab-a471-4360-81a0-0bf18c745d52",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610942a9-b754-423e-9c81-244f5023dd3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38d49574-532a-4d0a-b1ea-03b608842eb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc28b9f-3e50-444a-8b9e-efedadeb79f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b202f9cc-0556-40b1-abd3-865ecc0f81a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020a925a-33b8-43a8-8b68-f0744cd6640e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057f273b-c1df-4f5f-a18c-9dbce200d4ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39b9fb1c-538a-455c-83ff-6cf1d6d4edb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42449bca-4893-4a3d-b015-fe906fec7cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fa1eee-c87e-407b-98a1-ffe617564af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7571497f-5df9-49e9-b4ff-6c0d6ff48bcc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe282017-c5ed-4302-8e29-628ce63a738f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b70b3b0-aa70-4e5c-a66d-ca31aeda3d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1398dcc1-23d9-43be-b284-f2c5ea28beb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83663ea-d246-4903-90b5-658e2ce176c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e58e42-a749-4410-9a9a-6b7622652428",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e71e34-3289-40c7-946a-ab3a81ea7065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "041d8574-4aa7-4ab2-8b0d-d024760874c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce82547a-1de8-4551-b353-da0a8afd11bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcda24c3-b403-425a-ba37-8e831c88e2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266f3723-2d02-40a1-85e3-b5a6235586c8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943e9b0a-9c0a-47cf-8d42-fe62345a8eb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7530822f-fb1f-4277-89cf-21f65aa78b40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfd1f58-eac5-4ee1-9b72-4cc5e4fcbaaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4b7c32-2e6c-4b4d-9a17-25ec20c3d6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedb501d-12d8-4a8c-9225-f974f71f781c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772a8894-d620-4b28-baee-18fcb7859100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96cba03b-e130-4944-b6f2-2bd11170175a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2c78d4-869a-4825-9b29-ac0fd5d9f46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff11369f-8456-447a-8bfb-8b80fa4211f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e173e02-2e1f-4dac-bf92-7f61b8941e7e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7621d74b-6e7d-496b-b327-7e3685b0a2db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c4b2425-6bf3-4a47-8879-40a7e3830d1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f523f043-69c8-463b-b0b1-de841abfff8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044e495a-fd1b-4c57-a08b-b19782acffb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d13f6c-4a0c-44d5-8f36-f02cf4783fbb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1170f41e-b687-4f04-a291-1efe1a9816e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91d982e6-8d88-46fb-9107-079ba20b295f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c964145e-f95c-4daa-9a59-ef0b74cf6311",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389ae3d3-5b08-41fd-b4de-5acc06ce5cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21437426-c0c4-4fc1-8056-f4ad8990026f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37961cf-50d6-41e0-b42b-0345ac0392b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f72851d0-3e25-47b3-876c-913675cf2c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee792a02-f922-4b2a-9d40-fbe0c5bde72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3b0974-34a6-4421-aca1-6367e0e69d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cadc28-22b0-4c08-b7ba-9d3285c59567",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9929ad-0739-471e-a8db-8bb62bbd57a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ec2ac5b-9115-4f9a-a76e-d419bf3ec41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81644151-b86e-4f77-9ad1-a3d44345d095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7af47d-1793-4599-8f89-e7f67495e0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55cb9c1-b5a4-4774-a3d6-b8ebd566ef7e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9137fb00-41d1-4558-9f3d-a4a709fb47ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38cb60fb-f3c4-4752-a736-a434b24763ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf66549-8f2a-42c2-b0c4-52115fffdd57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2b0cf9-8fa2-4b91-90aa-5f03b2a5e3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5f4957-0070-477b-bf6f-a8b5a62a46a1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4ad6af-8c0f-4aa4-a5a7-213cc8936e15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3169b02-0999-4130-a81c-df38fe472514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d4977f-4ff7-43d3-a717-0a3ced8dde8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91da4474-e4f2-4f48-bccf-842d334f7a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9718aeda-cfa0-4727-bda8-c35f3f51504b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c7f84d-c87b-4292-be9a-4787c8639f1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cba8d6a-459f-40b8-9e0a-66fdf4f26047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d2cd8-b864-4673-8e5a-5cd4545708b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b3fce42-e827-433a-ad6c-fed93522380f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6662de4d-ab56-4df8-b5e7-b0ceab7b9c45",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75209c95-679b-498a-9642-930cb4d09ae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e163d9e-275f-488f-a570-49d1e0f13e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0074207e-812c-43a6-b3b4-18a63e44ae2c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ff3a49-cdc4-420c-9946-e9651e008d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c27e39-e45d-4cc9-81d3-afeccbb7f581",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8264bc18-bdbf-4b80-8a36-a9446e1b20cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4477b806-dfea-42e5-82c9-a31b65c8fdce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d9bc6c-3980-4c45-ab87-db76a375beb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715f0241-c249-4c33-99c6-ae34d2af50f4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac5ca8fa-28aa-4e95-a66e-929f6d6af858",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bbefcd9-2cf6-45e4-b5da-290ead081cdb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5234e355-1009-4251-988f-d49f4d44101f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ad8764d-540c-4a48-9585-11dd0dce63c1"
                    }
                  }
                ]
              },
              {
                "id": "beacd1f2-a045-4e38-95de-35caa0d4a67d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b297628-ddad-40a1-a139-4e7ea2f4f3d1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c282da2-3f66-4635-bd0f-f1c2c408d56c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cb81687a-0c8f-4d29-be97-a3c569095578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c86d77-db8f-458a-ae10-2f2a2fca4cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "584eb05b-2f98-4704-8142-c6c9d8fee51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764aa74d-e2d3-4780-a650-661abcf8e0fb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0893c7-7efc-45b7-8e7d-d41cd5efceee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5a28905b-ff7d-4432-881f-19d6350b5955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b405a892-6fb0-4553-8681-0d85739d610a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffd7c070-063f-453d-9c55-e7d89f06b4e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c580dc11-3531-4b0a-b106-bd2188f17f15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e34b76f6-9477-466d-8423-62bd13eeaa48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0a0c6b8-8195-42ce-85cc-27bc331e6241",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1730be4e-3cd0-4795-95c5-876c90c49f77"
                    }
                  }
                ]
              },
              {
                "id": "d457cb6f-766f-437c-80ba-172da47d8ed9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "36c07274-ac73-46bf-8a58-5613750d1857",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e891be-6130-4219-8137-dcffcdc9921a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "14a1646f-d33c-49d9-bf1b-5a73667a2f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070dda2f-b5f5-4466-b2f6-f9b2f03bfd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a884556f-9780-4b48-ad17-4e56e3d83bed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b72f3672-de16-497f-9718-1583056fb2ef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "05d5ec98-dd2c-44ea-bbd1-81945a80e6b8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e02a88ad-cbe1-4f58-b570-57f3335bf0c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5a733667-f6cb-4cdc-bf94-396218705deb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3b86aeb-76d5-4435-8b1d-9f4c94a07865",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f08f66d1-b0ce-40dc-b3c9-348567a29046"
                    }
                  }
                ]
              },
              {
                "id": "44513035-a83f-4ed9-b600-8d6644cea142",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8f8280d-49e9-4b4c-a472-f185150655bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f2945852-f385-41d6-8ebc-a0584bb2b903"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98989062-97d1-4fa4-837a-2e3ffe1dc74c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a72eb0b-e3ff-422f-9dde-9397288a3141"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2427ff2-2d9d-4048-a6ec-4dca1801f6c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c02e07a1-d006-4171-8fd9-2449fa3ccb8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba94aa7b-c955-4ed2-9022-21330004f0c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b21cc10f-f0fa-482b-a617-e25324ecde01"
            }
          }
        ]
      },
      {
        "id": "6749e15b-d2ea-4896-80ea-ae91091fd222",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8c94f47b-5c1b-459f-9ff3-8b87a7e08009",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ebdf698-c119-4598-b4bd-8a53e0ae5d7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b07e3198-c827-4912-a727-b0d8004f1d0b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4669898-8fd1-4cfb-a201-224d2463df5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "24adf2f1-9638-4468-bc37-e68c653fd8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b78f231-830f-4792-aa0b-65ff9e4dbdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17b643dc-d6bc-49ca-a1ae-72daca701f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71645d3a-2a04-4669-8741-1f296950e7f7",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d91b98-f47b-4065-9011-9b063f679056",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8b6042bd-07c4-4258-bc0b-23161b7d4d8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b51382-cd4d-4b53-a6a6-ca2274bd84f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b420832b-c1d1-4d48-9a30-9426f3180f98"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5f79068-5951-4195-a5bf-d04e57f50a0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1b5e2b5-9107-4a86-8606-3f11367e1b2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33325e7b-2680-459e-adba-a8cdaf6591ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04f99902-b8e4-49fe-aeca-6bb79acee192"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d736f50-212c-4807-984b-0041c0c146b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "be3c2a3d-9497-424f-86eb-bc8782ae3c1a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d3c7c69-b074-4786-b398-eef08925a4bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26cefdfb-aaae-48b2-94ac-7a7de5339b23"
            }
          }
        ]
      },
      {
        "id": "17c79274-cb2c-404e-bfb4-3b235aeb62b1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "03ab08aa-5616-4ab6-b055-b35fcd06d8b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "336e93d3-cd4d-447a-81ef-f929fe6ea8d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "831a3a62-cbe9-4238-812f-b369cddbe4be",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a522ec-457e-44eb-99e1-34edee6670a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5ed8af0e-c58f-4190-9169-0e6b94bbc033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1680b855-34a4-4b20-8191-00d39d6de52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c6873ff-cd93-46ec-b191-7f47703cc5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e576f4ff-afc6-46ec-bc51-ded1dab69729",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19731b35-74d3-430c-bf3d-6e88e23e51c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "78839fdd-20fe-4d6f-868a-3ca5e137092b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bdbf7d-7065-4f13-866f-b0bf5c3c4c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9577cc8-1617-4387-82e6-a0d41928caf0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cc345ee-e3bc-4dbc-9b3d-b42c4f816c64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70ec14c9-549a-4a31-a304-5af689b08daa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "024506a8-7e4d-4665-844b-2db308f73067",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05123a5b-2620-4114-8192-12307d380393"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe40677b-0a61-4939-8e68-254644159315",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0c451155-4d30-4e61-b445-ef97c4906302"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4da4b4a-eb90-4d01-8899-32d6607c7ef1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e01ac370-1166-4900-92b2-5a7425411c75"
            }
          }
        ]
      },
      {
        "id": "321813b2-2f87-4dd8-b832-6179f0f29185",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f61990da-3b99-4688-95fc-75567a477281",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f49e4eb-d42d-4a1f-9ee5-bac3acf3ad66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ee9eeee-fdeb-44f5-afcf-048a7a6c1838",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f237b9-4949-40ab-b4ba-e1e62e4d7f6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ed90b661-5dd7-4a96-bf5d-dd85b42a0b0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0566a3ce-06f1-4a68-852d-e77ac41c7855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e45ef11a-a65f-4205-a361-e954b4ca127c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8816091-3950-414d-8d69-b1ba938c52e1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ef409b-da08-40b5-b3ba-5e7779c565ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d24ce4e-fed7-4c6b-819c-7fbb44046fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34463d8-3dac-41b0-995d-7dc144ca4009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe2995c8-cbc7-4273-9cc4-6badbba98e28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe261111-0f22-44d3-970d-dfea79e73ef1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64231ef4-91ea-4b37-b005-72b9f7b644e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "820c4561-ff42-4973-b484-6013f58630bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6cfa823-cec1-4316-b04c-51b148881834"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed5252f8-83bb-4811-8fc5-51ed89c99239",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bc0899f6-cbbd-442e-ad2e-e8f9ca72a431"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a686522b-e35d-4006-9665-b6ddc98b7b29",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d59b8fa-ce8f-478a-a82e-3746ec8f7713"
            }
          }
        ]
      },
      {
        "id": "37561de4-90ca-4241-833a-ce246cebcf28",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f0c0699-28db-4008-a311-b1cde88e7063",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e12ee129-fd26-4e4a-8ecf-2f71a8ad3774",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ddcdc612-2b74-4e7b-b70f-ca16af200315",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d3d9841-a4f3-4ed8-8520-3ff87609e79f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59370a98-c560-483f-91e9-a57660c2bfb9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 131.9656488549619,
      "responseMin": 21,
      "responseMax": 1142,
      "responseSd": 169.95033727712777,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673743308333,
      "completed": 1673743353538
    },
    "executions": [
      {
        "id": "03869397-6a0e-4ae8-bf14-a01eaa34239f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4a817199-592a-4cc1-b418-980282492cfe",
          "httpRequestId": "1154f90a-ae0e-4bd6-a6df-e141979f94a9"
        },
        "item": {
          "id": "03869397-6a0e-4ae8-bf14-a01eaa34239f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6695959d-4233-42c8-9429-1cbeb9daf512",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 0
        }
      },
      {
        "id": "cd834cfd-ca35-402d-be6f-c7f7e76ede0f",
        "cursor": {
          "ref": "192c2a64-e427-4352-ba08-a3735705ef96",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "dd7610dc-4979-4325-9dbf-448680d59f88"
        },
        "item": {
          "id": "cd834cfd-ca35-402d-be6f-c7f7e76ede0f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e3f5a2fa-0e42-4ba9-8039-bf4f8ecaab44",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "677fc084-a6aa-42c5-b986-137e17d28dc0",
        "cursor": {
          "ref": "78fa832b-27f6-46f0-9e1a-6b40c519bf5f",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a461517a-0922-46e2-8941-4720e867c3d6"
        },
        "item": {
          "id": "677fc084-a6aa-42c5-b986-137e17d28dc0",
          "name": "did_json"
        },
        "response": {
          "id": "d12fa41f-54e6-4981-b60c-250b7f375acc",
          "status": "OK",
          "code": 200,
          "responseTime": 360,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fe85d1-8efd-4b16-8943-9f540577508a",
        "cursor": {
          "ref": "8415432e-c331-45f8-8bcd-644adbd545de",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0eb27b8d-5ce2-4849-8c3a-91d511cb85b6"
        },
        "item": {
          "id": "a9fe85d1-8efd-4b16-8943-9f540577508a",
          "name": "did:invalid"
        },
        "response": {
          "id": "1dc74d79-2ef0-4fbe-b217-5e045affa338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fe85d1-8efd-4b16-8943-9f540577508a",
        "cursor": {
          "ref": "8415432e-c331-45f8-8bcd-644adbd545de",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0eb27b8d-5ce2-4849-8c3a-91d511cb85b6"
        },
        "item": {
          "id": "a9fe85d1-8efd-4b16-8943-9f540577508a",
          "name": "did:invalid"
        },
        "response": {
          "id": "1dc74d79-2ef0-4fbe-b217-5e045affa338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a8f0c6-42bd-4c64-b304-16aa043c6899",
        "cursor": {
          "ref": "87e9525e-78b1-497d-8289-e988233da495",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "88e5ef32-ea9a-44c9-ba58-92ac3a915a5f"
        },
        "item": {
          "id": "84a8f0c6-42bd-4c64-b304-16aa043c6899",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d8887c2a-0c94-403a-a6f7-44ae30440ae0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea0874b-df8a-410f-9149-5e86a24efc05",
        "cursor": {
          "ref": "273c39c3-2ccf-4a5d-829c-e833386534c4",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "edb4e5b0-29a4-4030-a877-b945a33fd088"
        },
        "item": {
          "id": "9ea0874b-df8a-410f-9149-5e86a24efc05",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a30291db-d625-4eac-86b0-14e4f26224dc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c144e0-82b8-47b6-86ab-a16190e38d97",
        "cursor": {
          "ref": "bdec7c6a-b7aa-4d52-ac47-57a1b57fa3b6",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "975741fb-0c2f-4689-b7d4-c22c37391cef"
        },
        "item": {
          "id": "d3c144e0-82b8-47b6-86ab-a16190e38d97",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f9461ae6-8dee-4387-ba8a-064dd2ef0867",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d837250-1c8b-4778-a58d-519e77e9e57f",
        "cursor": {
          "ref": "8ae52615-a45d-4ed7-a22b-812515e3dc90",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "97467175-eecb-4411-b273-3712da72aeb1"
        },
        "item": {
          "id": "3d837250-1c8b-4778-a58d-519e77e9e57f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cbec90f0-ae2d-41e1-886b-e990a721c9aa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d837250-1c8b-4778-a58d-519e77e9e57f",
        "cursor": {
          "ref": "8ae52615-a45d-4ed7-a22b-812515e3dc90",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "97467175-eecb-4411-b273-3712da72aeb1"
        },
        "item": {
          "id": "3d837250-1c8b-4778-a58d-519e77e9e57f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cbec90f0-ae2d-41e1-886b-e990a721c9aa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db02247d-88ea-4018-b76d-5354523f2df0",
        "cursor": {
          "ref": "7aeb0c6c-0698-4e83-821f-4244f85bdedd",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "01e01e05-1353-4816-a937-88937a0b160e"
        },
        "item": {
          "id": "db02247d-88ea-4018-b76d-5354523f2df0",
          "name": "identifiers"
        },
        "response": {
          "id": "9de09e30-4c17-49d6-8b2a-ba8a23ffb9cf",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0372f5-893a-498b-88bd-3c2062dd3327",
        "cursor": {
          "ref": "017ddf4b-3c3d-4599-89f9-8b44c857dcad",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "df2818a5-d7df-400c-8310-e3801c23758a"
        },
        "item": {
          "id": "6d0372f5-893a-498b-88bd-3c2062dd3327",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "be50287e-2d3b-4417-9cac-bccc4640bb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0372f5-893a-498b-88bd-3c2062dd3327",
        "cursor": {
          "ref": "017ddf4b-3c3d-4599-89f9-8b44c857dcad",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "df2818a5-d7df-400c-8310-e3801c23758a"
        },
        "item": {
          "id": "6d0372f5-893a-498b-88bd-3c2062dd3327",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "be50287e-2d3b-4417-9cac-bccc4640bb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4f5169-1de1-425f-9562-aae2d2976c87",
        "cursor": {
          "ref": "79690416-14cf-494b-9f72-5faa96dfdcc4",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c091e5ce-a50e-4fb4-a27e-d141fc3e22f8"
        },
        "item": {
          "id": "0a4f5169-1de1-425f-9562-aae2d2976c87",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "109c9905-ed54-4d76-9ab5-9d40f4e9a124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9e997c-5aee-4bda-98eb-b19e596dc070",
        "cursor": {
          "ref": "cce0f492-53ea-4db2-8c68-30bad1539a61",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "87e5c1c5-0dce-469f-8889-25c1c9b309ec"
        },
        "item": {
          "id": "bc9e997c-5aee-4bda-98eb-b19e596dc070",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "44f35cec-199a-482e-9a8c-e81de9fa1603",
          "status": "Created",
          "code": 201,
          "responseTime": 634,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "142c6ae1-9487-4ac9-ac70-aeaa2d02b4b4",
        "cursor": {
          "ref": "20d27246-8d27-4717-b4ae-1aa9c1d136af",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b4821de8-2979-45ae-b99b-281136b76dca"
        },
        "item": {
          "id": "142c6ae1-9487-4ac9-ac70-aeaa2d02b4b4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "806b3d56-9465-4569-b038-2c04b72e22ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2aab375-41ad-45fe-97c1-ab0ff3aabc27",
        "cursor": {
          "ref": "4ad016c9-af3d-4f02-aff3-e7d96fb0c45d",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "847644a4-0d26-4be8-9af0-069ce41a96ef"
        },
        "item": {
          "id": "a2aab375-41ad-45fe-97c1-ab0ff3aabc27",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f46b76e9-418b-414d-b3c9-236adb50c07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67605dcb-6d6f-4990-a5da-f650f8ae4881",
        "cursor": {
          "ref": "beb55b89-8dfa-4831-8b3f-40c627cd8b30",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2ed91bb8-a767-4ad0-89d6-e981dfee9da2"
        },
        "item": {
          "id": "67605dcb-6d6f-4990-a5da-f650f8ae4881",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2548d859-cf5d-4783-9586-d0fe504d4be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da82b256-79d6-4d48-9267-c58256ee3ca3",
        "cursor": {
          "ref": "fa8ce318-10aa-4b95-9403-d7151763495c",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3d163a37-671f-431f-9693-7eebbdab2b78"
        },
        "item": {
          "id": "da82b256-79d6-4d48-9267-c58256ee3ca3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a01e62b4-e9ce-4a92-aae1-98a5ffb0eb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3616a9-c82d-483e-931c-524fde9246bb",
        "cursor": {
          "ref": "082d5407-9709-4881-9785-97e956ed589c",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "40028e1c-9ff6-4850-81f8-6d141f16ac6d"
        },
        "item": {
          "id": "df3616a9-c82d-483e-931c-524fde9246bb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "fdcaf841-f50e-47f0-b8f7-af5d03fc9560",
          "status": "Created",
          "code": 201,
          "responseTime": 537,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "0e382302-9583-4089-9746-0c668769c915",
        "cursor": {
          "ref": "6b570e5e-0560-42f3-a911-1ed03775a0c2",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b4adc194-75ce-4a95-91eb-e335008e370a"
        },
        "item": {
          "id": "0e382302-9583-4089-9746-0c668769c915",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1f1b79ba-7d6a-465f-8bef-2b1b812529f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2410e8c4-fd40-47cd-a901-d6ef36bc5c2b",
        "cursor": {
          "ref": "5710e151-9749-4a70-8fb6-810d801ff0a2",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "78cbb62e-4279-4287-96f7-45dbe30d8578"
        },
        "item": {
          "id": "2410e8c4-fd40-47cd-a901-d6ef36bc5c2b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d38d37fb-39d4-4079-8a2d-45b3303744ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a99d456-9f72-421e-a02f-c37912c7e084",
        "cursor": {
          "ref": "7dd8f256-3237-4636-a259-7dfc2e0c4d76",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9019ec2f-9cdb-469d-8b40-55c7d921e786"
        },
        "item": {
          "id": "3a99d456-9f72-421e-a02f-c37912c7e084",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f45fcf3d-70ab-4577-be9a-c9d5430c5010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379e149f-6c25-425b-a914-a1d94c82ae1d",
        "cursor": {
          "ref": "21dc7ce3-59ea-4d73-a676-e07b69bb65ea",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bf0efd39-d6ef-4c86-8117-e5cdcb755f1e"
        },
        "item": {
          "id": "379e149f-6c25-425b-a914-a1d94c82ae1d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c7a5c2e9-b3e9-4995-ba37-fd1d9dc789c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ac2c87-03e0-4d4b-9d02-d34e880cffbe",
        "cursor": {
          "ref": "d0122f7e-2730-43e7-9846-f6c2c2e05b7d",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "62385d31-cea8-4c1b-b98b-bd73ef73c40e"
        },
        "item": {
          "id": "82ac2c87-03e0-4d4b-9d02-d34e880cffbe",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cba251c6-7efc-47e9-96af-b8a35d50eb8d",
          "status": "Created",
          "code": 201,
          "responseTime": 537,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "b458d3be-2f08-4a6e-aeb4-198a214c8206",
        "cursor": {
          "ref": "6164fbd8-b917-4f22-8b66-6e5d5970082d",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "63809fe7-b19e-42d3-845f-17d7a08399ef"
        },
        "item": {
          "id": "b458d3be-2f08-4a6e-aeb4-198a214c8206",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "c234dc9f-3f6f-4efc-bd9a-f585ca943297",
          "status": "Created",
          "code": 201,
          "responseTime": 1142,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "541c0801-c019-42f5-9277-fc743408d5c2",
        "cursor": {
          "ref": "0a59351f-606c-4ac4-81d6-5070c45b7305",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7fca87f0-1ca5-4c3b-9798-1668f67180f4"
        },
        "item": {
          "id": "541c0801-c019-42f5-9277-fc743408d5c2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "04d68637-b463-432e-a6bd-d6d7f737b45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0181aba7-d3c4-4137-8f30-735baf31136c",
        "cursor": {
          "ref": "bd9494bb-5fef-4728-98c6-09efb65f6531",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dc82d9a9-1758-439a-8848-2fe8f0296e1f"
        },
        "item": {
          "id": "0181aba7-d3c4-4137-8f30-735baf31136c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "48b92ebe-322f-4b58-86bc-e5b310045d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9f535c-caaa-49fa-ade5-fe3b9d4abd4b",
        "cursor": {
          "ref": "22d1b38c-657a-4519-9d51-4633265f7784",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "02868d27-796c-4525-84fd-5ae52d6bd03d"
        },
        "item": {
          "id": "6f9f535c-caaa-49fa-ade5-fe3b9d4abd4b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5f5dbe8e-dbec-45a6-875e-53e279449284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e1c9a6-10f3-4323-98d2-dc9c965be410",
        "cursor": {
          "ref": "73bed6ce-8e6d-4ed5-8e3a-a23d11fdc700",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8d02b3b6-d122-4f67-84d3-eeeeb159b52e"
        },
        "item": {
          "id": "e8e1c9a6-10f3-4323-98d2-dc9c965be410",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b357bd31-49c6-4979-a7cb-188eba0fd01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c96a10-c9b7-4540-b7ca-108de939d0db",
        "cursor": {
          "ref": "abccf6e3-8db5-4f9b-97d3-4c55c6f0eec7",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2a5018ab-1c97-4829-9fc6-ce9031645dea"
        },
        "item": {
          "id": "a1c96a10-c9b7-4540-b7ca-108de939d0db",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1307b94f-1e78-4e95-99f6-2636179d9d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583b982e-927a-4d49-b29a-a3a2f455f918",
        "cursor": {
          "ref": "1d9803ce-0b5f-4b71-b44f-fb1b2a8b395e",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "777bc8cf-0fb0-481e-90c5-1b0ab7caf01e"
        },
        "item": {
          "id": "583b982e-927a-4d49-b29a-a3a2f455f918",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e73bc084-2897-4925-8cfe-49d228b6dbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54679f2-e1fd-4813-a88e-4cb602814ce1",
        "cursor": {
          "ref": "a3bc9f20-eb00-4c28-9bb7-360df90ef5ba",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "88da2ff7-2b5a-4ecc-9a24-f872b9f01236"
        },
        "item": {
          "id": "e54679f2-e1fd-4813-a88e-4cb602814ce1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "84369a68-22d0-4e26-8094-e346169c6751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f86760-b835-419e-8bca-88a56aa82a11",
        "cursor": {
          "ref": "e7b17411-7b7b-4586-9203-c7bdea9bdde4",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "33f742ae-1368-4dc6-ac50-71921b55ff06"
        },
        "item": {
          "id": "f1f86760-b835-419e-8bca-88a56aa82a11",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "09f5cd6a-e4a2-4547-94d8-bef64497ca47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f994de16-6e6c-4e5e-8c3b-ca1ae28b8214",
        "cursor": {
          "ref": "fde2fe62-5b8f-4a3a-bb45-c584075c3820",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d1a6044b-c275-4023-970f-4108b0289c19"
        },
        "item": {
          "id": "f994de16-6e6c-4e5e-8c3b-ca1ae28b8214",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "38773277-60c2-4bb4-af31-0822088f4bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cb976e-2d6a-4ab8-9e8b-e95438d4bfee",
        "cursor": {
          "ref": "45d746df-4d17-4e86-9a59-3dfd2561f39b",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3b17e082-b321-496a-94c0-40f5539661a0"
        },
        "item": {
          "id": "f6cb976e-2d6a-4ab8-9e8b-e95438d4bfee",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4d9b3f2a-4935-441a-bf19-67b1b1bc3e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c960ad9f-11ca-44ae-a972-a65bc6a24e86",
        "cursor": {
          "ref": "10a26db7-5a92-44a6-8ee0-79b596a73334",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ae9cf44e-d8a5-479e-8f5f-b42e0263b3d3"
        },
        "item": {
          "id": "c960ad9f-11ca-44ae-a972-a65bc6a24e86",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f04877c7-0a07-4568-bd89-27817a842ade",
          "status": "Created",
          "code": 201,
          "responseTime": 743,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5b189ad4-6074-47b6-b301-9779336a90a1",
        "cursor": {
          "ref": "c69181c3-b0de-4596-863c-e5a3a19ac3b9",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d45e2ec9-c6d4-4500-a26f-701812c796e3"
        },
        "item": {
          "id": "5b189ad4-6074-47b6-b301-9779336a90a1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c6685ad1-da01-4405-b92c-719aeb6385e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d184fd-0593-49ad-8236-1fb405f0d090",
        "cursor": {
          "ref": "5b201a12-3da7-4f91-b7c7-906058cdd1b5",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fe53dc08-f778-46de-8d16-0672f3ed849d"
        },
        "item": {
          "id": "d4d184fd-0593-49ad-8236-1fb405f0d090",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "723e3129-dd5e-4bbd-b1db-786a2c1ed673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341b5eb1-cee7-4534-ad41-4291641ede7a",
        "cursor": {
          "ref": "510f0199-8a5e-4720-95bc-e90cabc7be55",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f3dba34d-ad9d-453d-a879-1031464b4a1d"
        },
        "item": {
          "id": "341b5eb1-cee7-4534-ad41-4291641ede7a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6cf3268e-94b2-4c28-9726-ab0bdd6e6eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18cc2bc-a83b-4eea-bdc5-40565e263913",
        "cursor": {
          "ref": "935d30ec-63c0-4e6e-9551-b0250d24aecb",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a8e5657f-5849-4e89-930b-0e954f82eb85"
        },
        "item": {
          "id": "e18cc2bc-a83b-4eea-bdc5-40565e263913",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bbf848a4-0d3d-4e8a-99d3-0c3aa941c6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646788b3-c938-41a7-8f0a-fdc7e7660fdd",
        "cursor": {
          "ref": "11e9e670-cddc-4615-92fd-52ecadf1be20",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8bd4dbca-24a4-4a61-88d4-ef3cbe62747f"
        },
        "item": {
          "id": "646788b3-c938-41a7-8f0a-fdc7e7660fdd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8ed98451-3799-4fee-b37d-30e62922e41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba54036-f1aa-4359-a1a8-fdb46992c336",
        "cursor": {
          "ref": "be9f88e0-72e2-4715-95a9-85c6d7a3a9d1",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "50c45a34-7ae3-41d8-9177-d9fec31477c3"
        },
        "item": {
          "id": "9ba54036-f1aa-4359-a1a8-fdb46992c336",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "91746bb9-1622-4a49-b871-7978107d9737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c15915-82aa-482a-adaa-8a0f7777d10d",
        "cursor": {
          "ref": "23956b95-df8d-44f7-bdcb-3f16d6f3d198",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b8b9d9f0-7591-4a62-b58c-48c0d75aa510"
        },
        "item": {
          "id": "86c15915-82aa-482a-adaa-8a0f7777d10d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8724c939-f5a1-4da3-b42b-c7b17b511bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48d105f-e2de-40b1-b3aa-22838a1067af",
        "cursor": {
          "ref": "e74131d2-e76a-4acd-bae5-5aab6515a64a",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "dd787f83-9896-4145-bcaf-b2bee13b7b84"
        },
        "item": {
          "id": "e48d105f-e2de-40b1-b3aa-22838a1067af",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f71d91e4-8021-432d-9091-c3af0f9f52a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1865f0f2-4ab9-4afc-849a-5749eadac9b7",
        "cursor": {
          "ref": "6896d15c-ee98-4cfd-9b9c-8707e8e3954f",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1fbaef19-eaa7-4117-9cd0-78627d9bda6d"
        },
        "item": {
          "id": "1865f0f2-4ab9-4afc-849a-5749eadac9b7",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f2f2b362-08db-40fc-bbeb-704826152660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ddac4f3-a31e-4201-832a-eea8b13047dd",
        "cursor": {
          "ref": "a28031d0-6992-4429-983c-48423e4b9841",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d1344637-ef43-4e92-b325-8098b07c004b"
        },
        "item": {
          "id": "4ddac4f3-a31e-4201-832a-eea8b13047dd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "56fb0dde-2ad9-4c7e-8d1f-1051d0127b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b460dc-205b-4676-85b1-542823d08ae9",
        "cursor": {
          "ref": "56538105-1202-401c-b84d-1c7b75f3c3c6",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cba857f9-ee6f-4799-95d2-12c21973998e"
        },
        "item": {
          "id": "43b460dc-205b-4676-85b1-542823d08ae9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b534a4a6-1800-4b76-b126-a0a329c379d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d637ffff-0c7e-4842-b4f9-d3a4a50f454e",
        "cursor": {
          "ref": "23c9b3b4-396d-4787-b778-d16191a35189",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4d9663e3-4e94-43d6-a9f2-3938d4022277"
        },
        "item": {
          "id": "d637ffff-0c7e-4842-b4f9-d3a4a50f454e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "dad7aad4-9d89-4177-b4e3-485f5e5d3df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b380b2-7951-46f7-99fd-1db5f7505c28",
        "cursor": {
          "ref": "a0e84453-ae9e-4839-92a8-107b9283824b",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "08159947-e126-4f73-a7ff-40008182d6f4"
        },
        "item": {
          "id": "e3b380b2-7951-46f7-99fd-1db5f7505c28",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ef24825a-a5a9-4717-81f5-bdf7c54ebbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 360,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c8b055be-a40d-481d-a057-0b7d17ce757c",
        "cursor": {
          "ref": "6a9f0a89-1029-47b7-b5f4-46a874e49168",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2434f78d-aaca-4663-994d-b6d7386e0c85"
        },
        "item": {
          "id": "c8b055be-a40d-481d-a057-0b7d17ce757c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "109379e7-6005-404c-b70b-d6d8087b7170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35719041-986f-4198-aba9-3eb6ead6b4b8",
        "cursor": {
          "ref": "e3aa4479-8dcc-4595-8fe1-48db57f2694b",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c64f6830-3221-4e15-89b3-8af4690c6a5f"
        },
        "item": {
          "id": "35719041-986f-4198-aba9-3eb6ead6b4b8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "413a38ef-60e3-4292-b40c-90c6cf627f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee448a5-9817-4c14-8c08-c27e00610381",
        "cursor": {
          "ref": "5edee49d-b312-44aa-9848-a1c929dba4b6",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c3195325-5401-4897-8845-724aab572918"
        },
        "item": {
          "id": "5ee448a5-9817-4c14-8c08-c27e00610381",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3d843e81-371f-4275-bb26-3b58ffbd43f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b27e49b-080d-4881-93ca-cb59483cc3fd",
        "cursor": {
          "ref": "429950ac-d7d2-4d50-87f6-c51433f2f28e",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3533df3c-af56-4f19-bf9f-c3f7f0ca3584"
        },
        "item": {
          "id": "3b27e49b-080d-4881-93ca-cb59483cc3fd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d52ca2e4-d5bb-4d1b-9bf0-41445b24e141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545777c6-2b94-4fc3-b0d0-36aa7b504c69",
        "cursor": {
          "ref": "a1d71442-af6b-4f80-b7f9-30600cfe5025",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2b36a92e-f6bd-4692-b888-d53dfcda7f57"
        },
        "item": {
          "id": "545777c6-2b94-4fc3-b0d0-36aa7b504c69",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5fe93495-2e10-4ec7-b974-7eec03192e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7599dd14-c34e-4f8a-b586-2101c0557d47",
        "cursor": {
          "ref": "2c2d4752-f6e9-42ae-ab64-6ca3c436fe49",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b452c625-11ca-40aa-b697-d52597a61a38"
        },
        "item": {
          "id": "7599dd14-c34e-4f8a-b586-2101c0557d47",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "14cf1944-26c0-4cc6-a250-55c750c9bfb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fa314a-9fcd-4c11-a919-1eb7ff00a385",
        "cursor": {
          "ref": "35d62b71-e0a2-4a30-ae48-c4a3b8dc34eb",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "db2d85de-1ab6-479c-92b0-58afb62c925e"
        },
        "item": {
          "id": "10fa314a-9fcd-4c11-a919-1eb7ff00a385",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c2ae06df-2530-468c-99e5-33571046e34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 362,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "ea2b444d-01b2-4203-8186-96b90836ab35",
        "cursor": {
          "ref": "ce95ca78-e08a-4b63-af3a-4c48450d22a2",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e0d9f627-771b-4c57-b3d5-7225d6bdc1fa"
        },
        "item": {
          "id": "ea2b444d-01b2-4203-8186-96b90836ab35",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c9b8f573-b269-4646-8178-14f13cfdc904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279a4f69-cea9-485a-895c-e9bab15eaafd",
        "cursor": {
          "ref": "143b4b6d-8f8f-4796-bfac-2920358a6e01",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "24c1646e-4fcd-45e7-8199-4f1a91b430be"
        },
        "item": {
          "id": "279a4f69-cea9-485a-895c-e9bab15eaafd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4a99ed22-54c6-4848-a533-4bd44fd9fbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be9719e-793a-4568-ab14-7c1284208e87",
        "cursor": {
          "ref": "a43b7b55-0c0f-4010-a3b6-70b048dba974",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4e33a3f4-3905-4a2d-9169-33d887b6fd94"
        },
        "item": {
          "id": "4be9719e-793a-4568-ab14-7c1284208e87",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fe8c6177-d2ce-47b1-baf5-1f8bcc80eccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44a6cdd-9ef3-45f9-90fb-955fb6a7647f",
        "cursor": {
          "ref": "c3cbb5fb-7b61-41a5-a616-3cf52b790a04",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cf671f0c-624d-4947-ae8f-b7b3845c473a"
        },
        "item": {
          "id": "b44a6cdd-9ef3-45f9-90fb-955fb6a7647f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9e90b043-4072-498c-809e-c049b9f6ecdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde50e74-0851-49bb-a9a3-de60af746439",
        "cursor": {
          "ref": "63510198-e806-4550-b79c-fac9b378ab01",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b3a60788-454c-4844-acec-7905532da6cd"
        },
        "item": {
          "id": "dde50e74-0851-49bb-a9a3-de60af746439",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b32da28c-2e3d-41c8-bf74-f427924463d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7785daee-1449-4463-998c-616e70d0118d",
        "cursor": {
          "ref": "497cbbf3-780b-472c-9397-63dfe48243c4",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8aeb4404-b534-4066-9146-6fd52bc2a3fe"
        },
        "item": {
          "id": "7785daee-1449-4463-998c-616e70d0118d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "41dfaae7-8644-41f3-b1fe-9ca1f80a27d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad97beb5-8ea1-40d6-9a33-8c7beafe8c81",
        "cursor": {
          "ref": "f0340d28-879e-430e-b091-2b49a0643d8b",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "45dce66b-b657-4681-8647-afd45992a330"
        },
        "item": {
          "id": "ad97beb5-8ea1-40d6-9a33-8c7beafe8c81",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a9329997-7c79-47af-ab0b-1342b87b2fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cef1add-636a-4b1f-9e18-f261844825d6",
        "cursor": {
          "ref": "addf8e8b-6598-40bf-a52d-7ead2e80014a",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "17348fd9-668c-4a69-8f81-141eb04ee690"
        },
        "item": {
          "id": "1cef1add-636a-4b1f-9e18-f261844825d6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "969248f2-a17b-4e05-b4c5-5f3d223b0e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fd5b6f-237a-441e-a8d4-f9aaea540bfd",
        "cursor": {
          "ref": "98a39869-ff5b-4ceb-b5c4-31f5f4f5c685",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e8d67ba3-02d1-403c-910e-4fde17ae16ef"
        },
        "item": {
          "id": "09fd5b6f-237a-441e-a8d4-f9aaea540bfd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f87a5252-cd5f-4ceb-ac1d-85c2475452f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1448f9e0-22cd-4e47-80e3-ee83f375c636",
        "cursor": {
          "ref": "ff2f75b9-3c8f-4e51-9445-19daf559c219",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3d45a054-fbbe-4c64-9eac-2d3300ca5c44"
        },
        "item": {
          "id": "1448f9e0-22cd-4e47-80e3-ee83f375c636",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0ab46c37-074f-4eb3-88d5-95517d9c272f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf355de-5655-476d-85a2-c85bef08b732",
        "cursor": {
          "ref": "c7581e83-6d7c-470e-8829-e231d2c38708",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9b13dc24-a1be-4a23-b381-649075b99331"
        },
        "item": {
          "id": "cbf355de-5655-476d-85a2-c85bef08b732",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9ebc744e-e30e-4ac1-86be-af2bdc8d19b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb481064-c65f-470d-b305-68fe91ff95ae",
        "cursor": {
          "ref": "874ed084-78f1-444b-b84e-2eeb033e01b4",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "842b131d-31f4-4155-80b5-f7ba8d67ca55"
        },
        "item": {
          "id": "bb481064-c65f-470d-b305-68fe91ff95ae",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f67c324a-a01d-4faf-9cd2-ff2a95532292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f22dca0-f77c-49c0-a033-95455abb8c01",
        "cursor": {
          "ref": "5a7fd8c9-418e-45e0-84f5-2fee2533e758",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d3fbacb5-58f7-466e-8fa5-5345eb81e977"
        },
        "item": {
          "id": "6f22dca0-f77c-49c0-a033-95455abb8c01",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1947e835-49ca-4384-a367-3a62970c3516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882cb36d-9b66-4d1b-aa76-5323e59e27fd",
        "cursor": {
          "ref": "539f4b14-6470-47d4-8a8d-b40e36f456e1",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a92f7a33-c30e-47c5-bf36-e2a8bc0d5b3d"
        },
        "item": {
          "id": "882cb36d-9b66-4d1b-aa76-5323e59e27fd",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9f62f648-17ac-43c6-af2b-1d54644bd85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e73dd1-ee5c-46c6-aa68-ab205f79b075",
        "cursor": {
          "ref": "9b5ca301-8ade-4875-a3ad-6df462133f53",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7f738997-4ab1-43c5-bb58-37e9142e3cf7"
        },
        "item": {
          "id": "47e73dd1-ee5c-46c6-aa68-ab205f79b075",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ba5c11d0-ebf3-43fd-96d7-7d21dbcefa1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b7daa9-b74f-4f51-a782-0d286a96adae",
        "cursor": {
          "ref": "879b5d4d-34e1-491a-bfb4-9224f08cf2cd",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "233b8755-bb12-4aaa-b30e-e98b5e73f294"
        },
        "item": {
          "id": "a2b7daa9-b74f-4f51-a782-0d286a96adae",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "711abc18-0f46-40db-a67c-a8eec27d625c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917636a6-1fe4-4ea8-b746-80e172fa9150",
        "cursor": {
          "ref": "d6ea1cdb-38f3-48c7-bc55-0385e7cc5985",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f6e1c8d4-f1db-4882-9537-8a48ead0ac4a"
        },
        "item": {
          "id": "917636a6-1fe4-4ea8-b746-80e172fa9150",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "329f9c8f-1dbe-4037-af3c-ebc2ccafe30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0905841e-e8b9-4224-9659-55a60ead0dda",
        "cursor": {
          "ref": "8174f8be-60b7-4478-8a2f-7a975d0c2f2d",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "680146fe-04cb-45f5-8c68-3452e4066f7e"
        },
        "item": {
          "id": "0905841e-e8b9-4224-9659-55a60ead0dda",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a62d4249-102e-426a-8b40-d49a3290ebbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74da0195-5fba-4640-9ce4-59297c3fde2a",
        "cursor": {
          "ref": "7afe96b6-6a89-4db6-ab90-7f2c391210df",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a7298b7a-697a-429e-8c80-88f2d3c386ac"
        },
        "item": {
          "id": "74da0195-5fba-4640-9ce4-59297c3fde2a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "78d379ea-0fd9-476c-b74c-69c5cbeaf2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c7352b-cabe-4639-93d2-37399bb211d9",
        "cursor": {
          "ref": "d2fb04c5-c365-4cbf-97e5-50d72db6e62c",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f421515b-780f-4209-82de-fecad5b775e6"
        },
        "item": {
          "id": "70c7352b-cabe-4639-93d2-37399bb211d9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "06efa8c3-7e46-479c-ad37-2ec60ed0812a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa2be1f-4ff3-432d-af41-c7f6786602ed",
        "cursor": {
          "ref": "46465e3d-1e10-43a8-98a5-5bf1319cab90",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7aafdc2f-a754-4fc9-af8f-d1f9cccc1b22"
        },
        "item": {
          "id": "faa2be1f-4ff3-432d-af41-c7f6786602ed",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "64e80777-d369-4744-bf03-1e3ee646844a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212e6ddb-1c19-4c00-8fbb-58dd467b3706",
        "cursor": {
          "ref": "06a5bbcf-e8e0-43c9-88ea-6cf0107e6364",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "87eff4d6-fd74-4464-815f-6758f12ebc37"
        },
        "item": {
          "id": "212e6ddb-1c19-4c00-8fbb-58dd467b3706",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6ddb6c01-4129-490a-877a-bb6a94f651ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda2f4b5-8f9f-41a7-be82-7553b752a67a",
        "cursor": {
          "ref": "54b3d895-641c-4eab-b5e0-8e8ed72d87d3",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "05a5d1b2-f4e6-447c-8e13-f9d56b0d4355"
        },
        "item": {
          "id": "cda2f4b5-8f9f-41a7-be82-7553b752a67a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "03d060de-20b0-4a15-ae85-3463cea3e40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a8d6f9-24f0-4970-b093-cfd15204b19b",
        "cursor": {
          "ref": "099bad4d-f453-4be8-a9b2-edbd5a4349f4",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "27cb294c-34e4-4761-8c6b-2f4e66578f0d"
        },
        "item": {
          "id": "19a8d6f9-24f0-4970-b093-cfd15204b19b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e36dd7be-8e5f-4917-9f8e-a7349ace5920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0fe2ee-3fea-4d25-9c20-f818598e056c",
        "cursor": {
          "ref": "48eb7ce1-d430-433a-a92b-bc72b3de59a2",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "42d74b2a-8a34-4a3d-9433-a872c1256e8c"
        },
        "item": {
          "id": "3c0fe2ee-3fea-4d25-9c20-f818598e056c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2de93728-9023-426a-a17c-d82ad3f2787a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3641c14a-7bc8-459f-b896-77af040cae4a",
        "cursor": {
          "ref": "296d29a9-3830-420f-ad5e-6421d89c18dc",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d2785983-086f-4f2c-9289-eb1e096b5c54"
        },
        "item": {
          "id": "3641c14a-7bc8-459f-b896-77af040cae4a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "dfaf8041-9c0d-4efa-80ba-5d32178f9469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9cec272-9cb0-4536-b46c-fbe854e5b583",
        "cursor": {
          "ref": "c9d243af-629f-4001-8546-57879c4d3e49",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b9753f3a-bc80-469c-b3d7-ad1962614633"
        },
        "item": {
          "id": "f9cec272-9cb0-4536-b46c-fbe854e5b583",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3bb2b7f9-ed22-423f-b005-98bd2fac524f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851ad6f4-c467-494b-9f98-9a280ec4b665",
        "cursor": {
          "ref": "9fe0422c-4f55-45d7-9781-601a35305dba",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "089036b9-8851-406f-a35c-38524d098f5d"
        },
        "item": {
          "id": "851ad6f4-c467-494b-9f98-9a280ec4b665",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6568d5c2-11cb-4407-8c62-9c723fd48b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd6b5d6-65b5-4931-8d46-a7da94c67cdb",
        "cursor": {
          "ref": "50e2bee4-ad6c-4956-9236-ec60b1891fec",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "399fc6ad-096a-40d3-bc64-83ac3f625cab"
        },
        "item": {
          "id": "5fd6b5d6-65b5-4931-8d46-a7da94c67cdb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "34c220e3-2360-4db8-b52a-1954dff23498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4538d32f-a72c-4e5d-be59-b256843d3055",
        "cursor": {
          "ref": "46ed2e07-541c-42d7-8ea0-60ac9b4e02ff",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1b099ba7-229d-4a24-ae85-869486fb1c2d"
        },
        "item": {
          "id": "4538d32f-a72c-4e5d-be59-b256843d3055",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8acaf3bd-e3e4-4905-bbe1-e18b3a26e333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e44232f-1fd2-486d-a3fb-c69d30003380",
        "cursor": {
          "ref": "9c007e5e-5f9f-4f7c-a74d-278438e281ac",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7d651f7b-4757-4f11-98dd-42d08c177a06"
        },
        "item": {
          "id": "6e44232f-1fd2-486d-a3fb-c69d30003380",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b45dd9fb-9d3e-47d7-9701-d34438702765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa152e9-9fa4-4a65-9370-c321add3bb42",
        "cursor": {
          "ref": "e2a1b6a4-9ce8-4a18-a061-1c5ccb6fc038",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5c468cae-3f28-403c-910b-859123a71ddb"
        },
        "item": {
          "id": "aaa152e9-9fa4-4a65-9370-c321add3bb42",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7b1b4196-7360-47a3-9007-a3a2686a841f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b288963-cb2f-4f09-a120-519d725762f8",
        "cursor": {
          "ref": "10abb670-f373-49ea-8598-6a44ea6d947d",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "59c9a418-2b2f-4e3e-91cc-ee4d1e01c65b"
        },
        "item": {
          "id": "9b288963-cb2f-4f09-a120-519d725762f8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ea40cb9d-fa9c-427e-aeb7-f3862ece5929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc388fd-e864-4344-a90d-4691031cf839",
        "cursor": {
          "ref": "4468f560-f60c-45d5-9489-adf5a908e0d5",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8b090f8f-4780-4f08-a2da-9624ea60aba2"
        },
        "item": {
          "id": "ccc388fd-e864-4344-a90d-4691031cf839",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7a948e2d-797f-43dc-b551-297f16166a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77a5dc6-884a-4a68-9d7b-f3ecb558d8bc",
        "cursor": {
          "ref": "8ef196c7-6761-4028-94ab-0dc0af8d2d61",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "69dcefea-0337-4519-9c22-9b9195a5220d"
        },
        "item": {
          "id": "a77a5dc6-884a-4a68-9d7b-f3ecb558d8bc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3f7957f5-e4b0-4086-b0ac-ec63788ab9dd",
          "status": "Created",
          "code": 201,
          "responseTime": 669,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "91071595-3a39-46ad-83cb-748119a8a52e",
        "cursor": {
          "ref": "733e6232-af1a-4a5c-b02b-755bb95147ea",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d50f5a09-4b07-4b51-96c3-2ffeb6bde5ca"
        },
        "item": {
          "id": "91071595-3a39-46ad-83cb-748119a8a52e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c9098071-31f9-4dc4-b3e9-c12601e883d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090ff3cd-8576-4d44-9da3-2d237eee0386",
        "cursor": {
          "ref": "454a29a3-fc54-456f-8216-568f614acb79",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bae47084-cef7-44f5-b918-90cd3e5cd473"
        },
        "item": {
          "id": "090ff3cd-8576-4d44-9da3-2d237eee0386",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4119fcc3-7f24-4b6c-9d22-ced3d1ab2f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f081d991-d743-40d6-aac6-88c0a313c1fc",
        "cursor": {
          "ref": "cf2548eb-b438-4cda-903c-9df758046238",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ba30caa4-9e0e-4744-8802-8f42461a5d5c"
        },
        "item": {
          "id": "f081d991-d743-40d6-aac6-88c0a313c1fc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "578d3f7b-0f1a-47b6-a949-cbe970bb1bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906fcee5-33b8-467e-b1af-a7975a6f6cfe",
        "cursor": {
          "ref": "38fb2324-404f-4395-823a-0fa444944455",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c3972381-7ea1-4817-ac5d-46312125f564"
        },
        "item": {
          "id": "906fcee5-33b8-467e-b1af-a7975a6f6cfe",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "330ec5fc-2457-4a3a-b4db-b72d59480d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94a6ffc-f7da-4476-b3c7-62857e15a5a5",
        "cursor": {
          "ref": "85f87e30-18eb-4aec-a7ff-a3616aaefeff",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "57bc9b8a-4cf9-471d-a6ec-8238ecd3b229"
        },
        "item": {
          "id": "c94a6ffc-f7da-4476-b3c7-62857e15a5a5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b864ca9c-df89-4db9-af83-b9c75ca022ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc997de-4c5d-4a1d-8c46-4f8b15db2629",
        "cursor": {
          "ref": "ff3b011b-e90a-48e5-87c4-3415cf5cf29e",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "08b8ee6b-1f8d-4ef2-899a-0b7f06b5d5ec"
        },
        "item": {
          "id": "ddc997de-4c5d-4a1d-8c46-4f8b15db2629",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0e5360d2-bd69-4708-b99e-81883698dce0",
          "status": "Created",
          "code": 201,
          "responseTime": 662,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "bec2fbe9-d874-4322-8480-3b8081d22b47",
        "cursor": {
          "ref": "a936f792-d993-4425-bbd7-aceaf2bb9d35",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7f4b4842-7208-4109-8af4-035d9aab316a"
        },
        "item": {
          "id": "bec2fbe9-d874-4322-8480-3b8081d22b47",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f4d076d2-946e-4db5-b5e7-dfe4c12b62a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba89bf78-9826-44f7-ba50-aae244b45c3a",
        "cursor": {
          "ref": "0b6349da-a61f-49f7-88dd-117ce0d478bd",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "71a448fe-d952-4983-a34e-bb4f1061069d"
        },
        "item": {
          "id": "ba89bf78-9826-44f7-ba50-aae244b45c3a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "33f9c4a6-5e87-4788-b5d9-df6c94eb816d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aded24c8-b873-49c5-844d-ae74afdd61c9",
        "cursor": {
          "ref": "3f88da18-659c-4de6-a56a-290cc4b16742",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a69032c7-eb09-4b7f-ba86-7c12b6a5c6ce"
        },
        "item": {
          "id": "aded24c8-b873-49c5-844d-ae74afdd61c9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fc7e81e4-327f-4d03-b664-9c186b68cec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9b6c57-af19-4b62-b7a9-291f5bc5166b",
        "cursor": {
          "ref": "f3ddcb80-f21e-40f5-956a-a8b1ec848e32",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0eb22cce-4e23-4dd5-bb72-001ca21277a2"
        },
        "item": {
          "id": "0a9b6c57-af19-4b62-b7a9-291f5bc5166b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3c98f2b0-9c7a-4d05-b6d4-cea6f39c5bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e338277a-174e-48cd-9890-d359ae2f5864",
        "cursor": {
          "ref": "155c082a-60b2-4597-83d8-b758f906526c",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "07242f22-0140-47cb-bebc-ac022f54a9eb"
        },
        "item": {
          "id": "e338277a-174e-48cd-9890-d359ae2f5864",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2ec4fca2-e3dd-45c6-bf77-2abc83b5aef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa4bf17-821e-4111-ac5c-7019510c365f",
        "cursor": {
          "ref": "2eef5b4d-dbee-457c-a847-749944392ccb",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8fb9de6b-dcca-4e51-be59-f82f41d5c6ec"
        },
        "item": {
          "id": "1aa4bf17-821e-4111-ac5c-7019510c365f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "14c629aa-544e-4d47-b639-b94693d62b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4befb31b-9bda-4d8f-a6e9-3dad0832322a",
        "cursor": {
          "ref": "d3708fe2-dfba-4a2e-978f-a8d82e43b0e4",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f384f930-9151-4c6c-9844-aea6aa612acc"
        },
        "item": {
          "id": "4befb31b-9bda-4d8f-a6e9-3dad0832322a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6cab89fa-233b-498c-a3c7-a59e0d00059a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee3bb1c-8dce-4b7d-b3c2-4287decdb74f",
        "cursor": {
          "ref": "c656fcfd-70ef-4fe9-824f-87d2aefb9b24",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0b0a9c33-d405-472c-a7be-388500393b00"
        },
        "item": {
          "id": "cee3bb1c-8dce-4b7d-b3c2-4287decdb74f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "292b5e8a-17ff-4f52-816f-eea32d4b8429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216ef5e3-148d-416d-b838-b0bfe8ac0721",
        "cursor": {
          "ref": "a20b821a-59c5-4d53-8a69-1165e6e1a038",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "867eb352-9a9d-4902-b214-be21ace3de48"
        },
        "item": {
          "id": "216ef5e3-148d-416d-b838-b0bfe8ac0721",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "58acb997-2a9d-45dc-ab95-f81a00a529be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "7119d4a2-7555-434d-be34-b507c1cde0eb",
        "cursor": {
          "ref": "3b78fa78-1b34-4661-a080-e526fe0949f0",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5dea1f20-6c92-46b2-8415-37194e4da7a8"
        },
        "item": {
          "id": "7119d4a2-7555-434d-be34-b507c1cde0eb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1bd8279e-f2e2-4867-9dd4-7f32041b7cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "08c2fe9a-9f41-4441-9e10-ece3f7af2706",
        "cursor": {
          "ref": "361be4da-506c-4829-87d2-1aa98ee6ab47",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "af28f31e-ddeb-4e39-a567-79ec733171cd"
        },
        "item": {
          "id": "08c2fe9a-9f41-4441-9e10-ece3f7af2706",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d52d79c9-5ade-4496-a456-fc9d08e2ee8b",
          "status": "Created",
          "code": 201,
          "responseTime": 659,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5292748b-3965-4cd7-960b-05c55216d451",
        "cursor": {
          "ref": "27616902-b294-4392-8d85-942171039afc",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c23bbd83-4ba9-42c9-b173-48fd6828e200"
        },
        "item": {
          "id": "5292748b-3965-4cd7-960b-05c55216d451",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3b43bdec-5d5d-40e8-85f3-7a155ac0abe0",
          "status": "Created",
          "code": 201,
          "responseTime": 710,
          "responseSize": 723
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b96567-2b9c-4382-bb7a-f1f386b65ed0",
        "cursor": {
          "ref": "e4dff108-b58d-4a70-af05-7b3420a7f3b4",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2cdaa5cd-8614-4a1b-b3ae-e1f0a0957cbd"
        },
        "item": {
          "id": "b0b96567-2b9c-4382-bb7a-f1f386b65ed0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7a63b15d-817d-4250-99f6-573b4f776da4",
          "status": "Created",
          "code": 201,
          "responseTime": 686,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "301db6fd-d51a-427b-bb1c-465b0d24336f",
        "cursor": {
          "ref": "cb1ae724-781b-4f97-875e-c6949499ca54",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4736f991-f6ea-4971-81b8-05559fa1e98f"
        },
        "item": {
          "id": "301db6fd-d51a-427b-bb1c-465b0d24336f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4c9b385c-52ba-4ddb-82e7-61e4a6ab1e3c",
          "status": "Created",
          "code": 201,
          "responseTime": 714,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "685e9612-fec6-4b82-a453-4243d331f357",
        "cursor": {
          "ref": "701ec882-69e9-4cf5-8827-a79e864c7658",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9c952c81-bcc5-46ca-9009-0ce262dfed7e"
        },
        "item": {
          "id": "685e9612-fec6-4b82-a453-4243d331f357",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8b71d15c-feab-40a0-a101-36b76d50f7d7",
          "status": "Created",
          "code": 201,
          "responseTime": 676,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ea48af-0a8f-4e0d-8b3c-a6d9cd52e329",
        "cursor": {
          "ref": "f4b10898-84e3-48b6-9b3b-db240871a7c9",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a5fb3245-1793-4edc-a8b4-8951c6d834c2"
        },
        "item": {
          "id": "f3ea48af-0a8f-4e0d-8b3c-a6d9cd52e329",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8949f3c3-de79-43cc-b186-b173d3170754",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f3ea48af-0a8f-4e0d-8b3c-a6d9cd52e329",
        "cursor": {
          "ref": "f4b10898-84e3-48b6-9b3b-db240871a7c9",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a5fb3245-1793-4edc-a8b4-8951c6d834c2"
        },
        "item": {
          "id": "f3ea48af-0a8f-4e0d-8b3c-a6d9cd52e329",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8949f3c3-de79-43cc-b186-b173d3170754",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "925902d3-9e07-4181-b415-a9de71ad013b",
        "cursor": {
          "ref": "464ff68b-f085-41d2-81e8-436d9fafd555",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "652cafe3-7fee-4338-93f3-d07792b39858"
        },
        "item": {
          "id": "925902d3-9e07-4181-b415-a9de71ad013b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cd40c236-c391-45b5-b258-33ab4cf72109",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "f1ba8496-498a-473e-a1c7-7b42fefd90e5",
        "cursor": {
          "ref": "0802e687-49e8-461d-bf40-49b598bbd6f6",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "eee5c6e3-bcbf-4015-baf4-8f09af4c867f"
        },
        "item": {
          "id": "f1ba8496-498a-473e-a1c7-7b42fefd90e5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3435954f-f405-485c-a518-12cad0945bcc",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "39ac02b0-cfb6-4928-8971-2d127bb8b914",
        "cursor": {
          "ref": "c5353924-0a8b-4713-85e7-48ba7d2bafee",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4c85945c-c697-4754-a430-78133e8b3eaf"
        },
        "item": {
          "id": "39ac02b0-cfb6-4928-8971-2d127bb8b914",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8ede044e-f5eb-45ba-92cc-a0c9b89439d2",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "5d8ed51f-12c6-41d1-9a2e-d8abea758d5f",
        "cursor": {
          "ref": "ddbb76f3-eb7a-46fc-9958-b283e694fea1",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "05ebc0e2-67cf-43d4-92cc-2c98722a74db"
        },
        "item": {
          "id": "5d8ed51f-12c6-41d1-9a2e-d8abea758d5f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8a5d7d5d-b583-4135-b34c-4e851352a7d0",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ed3abeb1-512f-4ced-9593-5cbcea854e7b",
        "cursor": {
          "ref": "1617554d-fd46-43c4-a07d-2458e507ae72",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5ad4ad1a-c9e7-4c2f-be5e-d4970a6d3949"
        },
        "item": {
          "id": "ed3abeb1-512f-4ced-9593-5cbcea854e7b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e17dd075-95cb-42c3-abaa-e3099e5aa0bd",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "a8e7e5d7-a3dc-43a5-9914-0e39e9489f6d",
        "cursor": {
          "ref": "d185ba9e-2356-4d83-a0ef-0698244f2c85",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f6a2a4bd-6df0-488c-9016-f92714dcf7f9"
        },
        "item": {
          "id": "a8e7e5d7-a3dc-43a5-9914-0e39e9489f6d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8f63c83a-3eaf-4896-a829-46fdf77570c1",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b69af5d5-2e17-48bf-a2b3-a85058ac2a9d",
        "cursor": {
          "ref": "d558345a-3fb0-4e78-8173-ff9b85804fab",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6f0b0393-254d-44cb-8d21-e7e1d9a7c656"
        },
        "item": {
          "id": "b69af5d5-2e17-48bf-a2b3-a85058ac2a9d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cf2ab3a9-5c94-4a0a-93b3-94ee1bd55412",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "bceb0bc1-21f6-48dc-bc42-c23229444601",
        "cursor": {
          "ref": "8822d4b3-b9d6-483d-b467-19ee39569586",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "94ee68d5-95cc-4a64-9b98-9864b81d766f"
        },
        "item": {
          "id": "bceb0bc1-21f6-48dc-bc42-c23229444601",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e77e0e86-535d-4e1d-8e14-891f019e0878",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "d1c7066b-7678-474c-8f27-885ca161f26e",
        "cursor": {
          "ref": "afc53c1f-96fc-4d7b-8ed7-33b484d727d5",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9f7aca23-cfbe-4dea-a810-cd57bcd3c80f"
        },
        "item": {
          "id": "d1c7066b-7678-474c-8f27-885ca161f26e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "db675c51-b097-4f24-88b9-aeebc42a1808",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "00217d13-ce40-44e0-92a7-7a7e8d57893c",
        "cursor": {
          "ref": "bd48b2ab-67eb-4053-a01c-926210adf89a",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a8328db3-f993-4a7a-a6a3-ae1ee448ac73"
        },
        "item": {
          "id": "00217d13-ce40-44e0-92a7-7a7e8d57893c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2e56504c-69d8-45c3-ace2-78d02280d9ec",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "b985979c-b686-44c9-b742-41ec3a394de8",
        "cursor": {
          "ref": "2f563f23-111b-4479-811e-e7175eacf62b",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ea25e7e5-f25e-487d-98d1-0b75de788efe"
        },
        "item": {
          "id": "b985979c-b686-44c9-b742-41ec3a394de8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "668ef9b8-d89f-44f7-a7f0-c89c12a0203d",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "42d43f24-12bc-41a2-a767-c4f15c08b5c1",
        "cursor": {
          "ref": "ee299dce-4149-444c-b99b-a23a02a666d1",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d076f638-56c8-469d-bab5-08df6ed1fc60"
        },
        "item": {
          "id": "42d43f24-12bc-41a2-a767-c4f15c08b5c1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ca7e1259-bd16-4196-b50f-320b84f0c198",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "fa05f49e-3e9c-4c3f-a8d1-b0e924ca8e1a",
        "cursor": {
          "ref": "f2d4f549-d530-454e-ac68-7c85b71a26e1",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "29b08dcc-bbe1-40bb-ad73-971690088761"
        },
        "item": {
          "id": "fa05f49e-3e9c-4c3f-a8d1-b0e924ca8e1a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5eddf6a7-14d8-46d4-ac06-a97c0e76eee6",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "21761445-9d23-4853-9d3a-7d43a762f2ed",
        "cursor": {
          "ref": "fbcda7f9-e473-434f-a154-42a7c4275ed1",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6aeef591-f297-4175-8cbd-3969118601f8"
        },
        "item": {
          "id": "21761445-9d23-4853-9d3a-7d43a762f2ed",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3d7a165f-68f0-4596-a79c-88fe449377e9",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "8e43965c-bd32-4775-93f1-df1bf2163e97",
        "cursor": {
          "ref": "c092f3d0-c712-4237-9f6d-9a1ca4701609",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "800c5977-891b-45e8-b12f-9af86be5b8ba"
        },
        "item": {
          "id": "8e43965c-bd32-4775-93f1-df1bf2163e97",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e2887af3-a68f-4519-a459-8a0e8d73c827",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "14c020ad-a0b4-48c1-8a62-04d797845307",
        "cursor": {
          "ref": "60b062df-ec22-4dbc-ba42-497f7ef515b8",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c6d84fc9-a7ec-48c5-b6e6-8d200ec18456"
        },
        "item": {
          "id": "14c020ad-a0b4-48c1-8a62-04d797845307",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "95c19d97-9c0a-4b52-aa3d-eaee2b4c40e8",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "956a12ef-e354-4f39-8205-faf757b83882",
        "cursor": {
          "ref": "c6f48ff8-ff56-47c7-b6ed-c37da66e5315",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7cf43f78-e2da-4ff7-b635-cb9d45bdb4fe"
        },
        "item": {
          "id": "956a12ef-e354-4f39-8205-faf757b83882",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f1ea9c28-e189-4904-b746-3e5d8e212221",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6fb93e42-ad31-4237-ab08-db519c4cc285",
        "cursor": {
          "ref": "a1506841-7fc4-4be8-8e0c-a020e6c9df4f",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "66a99e82-a8ae-44e2-86d7-f63bafbb9314"
        },
        "item": {
          "id": "6fb93e42-ad31-4237-ab08-db519c4cc285",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e6dceafe-bdb2-4a68-930d-909c4e2999ab",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "96de6d83-ea60-4b3b-ac30-4ec50c8713b3",
        "cursor": {
          "ref": "dd33789a-44af-4ca1-a713-14b5a469261e",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "dd9f4b54-1a8b-4972-a5ef-319737bb1b5c"
        },
        "item": {
          "id": "96de6d83-ea60-4b3b-ac30-4ec50c8713b3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "112cd76c-b9d9-4cf0-b540-7e151f4fa318",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "8a9301e0-2e89-4819-8597-f7be71abdc1d",
        "cursor": {
          "ref": "0a5252d9-f4af-4d88-af58-294cb4d3d57e",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fb59d27c-26e8-4248-8024-0b7b4f050263"
        },
        "item": {
          "id": "8a9301e0-2e89-4819-8597-f7be71abdc1d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7921c202-1039-4d6a-80de-d34ea96ab192",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "2b0f4968-ea27-4da8-b2e8-2f1a67aff1c9",
        "cursor": {
          "ref": "ebd3deab-2c65-45ff-893a-77afa60a790e",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8facced8-31d3-460f-ba0e-5d9c824e935e"
        },
        "item": {
          "id": "2b0f4968-ea27-4da8-b2e8-2f1a67aff1c9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3a730dec-02e7-49d6-a62e-de83519e94ef",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "bee69d23-244f-44ad-a65b-ca12c7347f27",
        "cursor": {
          "ref": "94fda073-1ee2-4181-a27c-e68811bea8de",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "63bfdfb9-8667-40bb-b8c9-f8725be50340"
        },
        "item": {
          "id": "bee69d23-244f-44ad-a65b-ca12c7347f27",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c2689350-a909-40d1-ad72-8de6b3a3f6c4",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "14564810-8be9-4ae0-bd6e-68302a664de2",
        "cursor": {
          "ref": "c9e29018-78b5-4c3b-a12d-748278f31fd9",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "20ce6546-8a6a-406f-9ff7-25d660e7d659"
        },
        "item": {
          "id": "14564810-8be9-4ae0-bd6e-68302a664de2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c9d7057a-95ee-4eeb-923c-c01f980f44e1",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "b4e993ff-a375-4910-a7d9-b538aa25bdf1",
        "cursor": {
          "ref": "1fce0af9-369a-4639-ad46-dc007024a140",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "75adccf5-8e98-4d10-95d3-fecae7214592"
        },
        "item": {
          "id": "b4e993ff-a375-4910-a7d9-b538aa25bdf1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a4ae58b9-26c4-4b8a-a0c6-b0803ea8a38d",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "85655217-93b9-4474-b6c4-637e0af94b0a",
        "cursor": {
          "ref": "46ae3dda-da9d-4561-b6f3-d142bee943fd",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "69858c4f-3816-493f-bc41-2785c3b1cd78"
        },
        "item": {
          "id": "85655217-93b9-4474-b6c4-637e0af94b0a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "18a25d3d-2c21-4066-8924-f0301596da07",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1d67309f-b4fd-4acc-8e83-30cc2a81ee06",
        "cursor": {
          "ref": "ba55e099-a6bf-4933-a5ea-e6d8ca10a915",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "74c6e896-f4f1-4902-ab92-18050ad615e9"
        },
        "item": {
          "id": "1d67309f-b4fd-4acc-8e83-30cc2a81ee06",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "072e9074-7356-49ee-8896-8fb306c2048d",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "07aa9ba5-846a-4765-b4f9-60610d8ea544",
        "cursor": {
          "ref": "e794c607-cb10-4113-b430-cdda2db1e831",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "50082b20-5098-42c9-a7fe-7dfebf507c18"
        },
        "item": {
          "id": "07aa9ba5-846a-4765-b4f9-60610d8ea544",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9e345962-5ca7-4c71-a732-3590822cf975",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "242bf6d6-4193-49c9-84f1-10838c9e06a4",
        "cursor": {
          "ref": "4df3afbc-a3ca-4bf8-9356-8572b0ba366c",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "42a1b307-a951-474c-95fc-4b7b552eec9f"
        },
        "item": {
          "id": "242bf6d6-4193-49c9-84f1-10838c9e06a4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "63a834f6-ce55-4b26-b3d7-8e3e796d4316",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "622e2ba5-3c8f-4429-bc8f-58ec9010900b",
        "cursor": {
          "ref": "f95aac5e-d918-4544-b5bb-fd5aa6cdd55c",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "14cde324-922b-4f58-a008-f2ccfafda187"
        },
        "item": {
          "id": "622e2ba5-3c8f-4429-bc8f-58ec9010900b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a1fd7bd2-edeb-4db8-b897-9a79f60e32bb",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "231aa859-2b03-435b-882c-c4deb6e4bda4",
        "cursor": {
          "ref": "71e3bcab-15bb-41e7-8ed2-ef86abee66d6",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ca7a46cb-dd9d-4d12-9fdf-d72ea7cb4906"
        },
        "item": {
          "id": "231aa859-2b03-435b-882c-c4deb6e4bda4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "05742a9f-84c3-4f4d-a27e-907bb54c3cb4",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "551f084a-7cc8-489a-bbe6-8a6033939d13",
        "cursor": {
          "ref": "fdc3e10f-8b8b-40ee-83a7-d380dd026454",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a316ec56-f75a-4e3a-91db-7b4030665c28"
        },
        "item": {
          "id": "551f084a-7cc8-489a-bbe6-8a6033939d13",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a0d66b7f-6f1b-4e25-ae3d-43c04a4b71f4",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "6cc11d6f-da7b-419d-b459-9681bccd07fc",
        "cursor": {
          "ref": "263114ec-df8a-495b-8a23-050e5e75e9bf",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2258dd0e-ae8c-4dac-82e5-4a2b4f2c5d66"
        },
        "item": {
          "id": "6cc11d6f-da7b-419d-b459-9681bccd07fc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cc3234c1-8780-4449-b1cf-483c46f04457",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f547a03-ce7d-4e44-9126-182f51bc5015",
        "cursor": {
          "ref": "bf90f489-a544-450b-8947-98de04ce1cbc",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b563660d-b58b-410d-b27f-1ead8b2c36bf"
        },
        "item": {
          "id": "8f547a03-ce7d-4e44-9126-182f51bc5015",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "00aecf56-422e-485b-9e8e-651e444e0bce",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 49,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eba35b0-fba8-4f54-bbb2-05ed08c0f768",
        "cursor": {
          "ref": "e4e52799-b3ac-433a-85a4-eea06e68df50",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d1aa9982-4391-4379-9e72-b359d385c1d5"
        },
        "item": {
          "id": "2eba35b0-fba8-4f54-bbb2-05ed08c0f768",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6480a917-d94d-42ab-bd92-be21a72fedbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eba35b0-fba8-4f54-bbb2-05ed08c0f768",
        "cursor": {
          "ref": "e4e52799-b3ac-433a-85a4-eea06e68df50",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d1aa9982-4391-4379-9e72-b359d385c1d5"
        },
        "item": {
          "id": "2eba35b0-fba8-4f54-bbb2-05ed08c0f768",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6480a917-d94d-42ab-bd92-be21a72fedbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab5962e-bb03-4982-af4f-fa87e56b7719",
        "cursor": {
          "ref": "0d0f3434-d1f9-48d3-b325-a2509af5884d",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "93f2b227-5b98-49a0-8f41-c9d123d71a99"
        },
        "item": {
          "id": "2ab5962e-bb03-4982-af4f-fa87e56b7719",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3d09714b-696b-4fb8-9287-8bfdeb372cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736132d0-679e-48ca-b522-85d386b06876",
        "cursor": {
          "ref": "6ecfc99c-d947-42c3-89dc-8f075658e2f0",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0f38dfc3-5f63-4341-85d3-2ca8d3706d22"
        },
        "item": {
          "id": "736132d0-679e-48ca-b522-85d386b06876",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "07f2a4d0-223b-47c3-a3a7-879b5f698a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e865212-7b06-4cdb-b673-b0c0891431e6",
        "cursor": {
          "ref": "b65f9553-5c6d-417b-9d91-63822d302e1d",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "84947a19-d88f-4284-b872-546932d923d0"
        },
        "item": {
          "id": "9e865212-7b06-4cdb-b673-b0c0891431e6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "811aa8b1-1a71-4948-9a0c-9ed6ca0f7bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028f397d-a631-4af9-8956-bb73e568918d",
        "cursor": {
          "ref": "5b8f699b-e817-4a9f-9517-7bb9b3e27250",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b62ea274-329a-4142-92b2-d85aa02d1acc"
        },
        "item": {
          "id": "028f397d-a631-4af9-8956-bb73e568918d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "24fe3ba2-ebcb-4896-b528-03ce09992006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926bb992-c73a-40d0-9c63-318c7dcef240",
        "cursor": {
          "ref": "1557f989-f460-41b8-975b-9896846440d0",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ef9b8605-e219-49fe-9c65-630eaf92ab06"
        },
        "item": {
          "id": "926bb992-c73a-40d0-9c63-318c7dcef240",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0637c65e-9618-4c43-a2d2-858549884171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c41862-cb3d-49c9-aefa-0ace53fdfcf9",
        "cursor": {
          "ref": "b39453d0-6e3f-4489-9fc1-668961491710",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "77942f72-0592-4092-9166-f7882dca548c"
        },
        "item": {
          "id": "56c41862-cb3d-49c9-aefa-0ace53fdfcf9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "291abc48-069a-4b65-8f0a-c63ee3a41872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0c94c2-1db4-41d7-ab76-33c5fb254ac4",
        "cursor": {
          "ref": "9178f2be-c5d5-47a5-8da3-ce2ae7e497a1",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b1e4f909-7fa0-4d1a-a117-a444cca907cd"
        },
        "item": {
          "id": "ce0c94c2-1db4-41d7-ab76-33c5fb254ac4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b730e013-5aad-411f-99fe-a1992df046cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6737289-c5bd-44b3-8512-444d137aeda7",
        "cursor": {
          "ref": "098fb9db-b4c4-4661-a47d-fae88576ed35",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ff5b5301-d662-434d-b99d-c7b137155491"
        },
        "item": {
          "id": "f6737289-c5bd-44b3-8512-444d137aeda7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "78e119e6-248c-4e48-9964-83c347c5fb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc243c5-bb1a-46f6-92a6-e070efc5213a",
        "cursor": {
          "ref": "68d78aa5-717c-4a8b-8ad0-f28b7053bdd1",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "40727196-d3e9-4966-855c-76b25b63bbca"
        },
        "item": {
          "id": "efc243c5-bb1a-46f6-92a6-e070efc5213a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "047bc92a-c0b3-44b5-b593-0ea22510db11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f953993-976f-48f2-929d-42f13eee6765",
        "cursor": {
          "ref": "c8985423-67f7-4667-93a2-d5bee05a808e",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f9281e3e-09b7-4ff9-a372-a23554754c0c"
        },
        "item": {
          "id": "4f953993-976f-48f2-929d-42f13eee6765",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "247f07c9-edb0-46d0-9ebf-3a806360084c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feccd181-9ba5-498e-99b7-cb2c6ca44027",
        "cursor": {
          "ref": "cc552399-ed69-4219-aa4a-1c09552f9d99",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fd347637-7731-497c-88ea-fc66d91eec70"
        },
        "item": {
          "id": "feccd181-9ba5-498e-99b7-cb2c6ca44027",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cd67b2ac-a52a-4b0f-a046-5a928452ceb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae8560e-aa6e-413e-aecf-14e4cf87ec70",
        "cursor": {
          "ref": "3481e157-c76a-4f09-b1b1-417e3847e3d3",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "68ebac34-f782-4f86-8819-d8432597f693"
        },
        "item": {
          "id": "1ae8560e-aa6e-413e-aecf-14e4cf87ec70",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1ebd72c0-e403-4337-8723-fce0df0d2d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff129fa-7c52-4dfe-aa90-91c05644ff5a",
        "cursor": {
          "ref": "e0bf18d7-b899-4a5e-9aeb-7323e857db31",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a3d0567a-d1e5-4505-be58-1e7927ea886f"
        },
        "item": {
          "id": "4ff129fa-7c52-4dfe-aa90-91c05644ff5a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1eb6b202-ad16-4189-b1f4-200e5522c343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e137f08d-6671-4f32-9374-8656112f2a3c",
        "cursor": {
          "ref": "8dca765e-8f38-4a26-86c1-859e37a249eb",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "490a1219-dd5a-44a8-892c-3b7a450a8153"
        },
        "item": {
          "id": "e137f08d-6671-4f32-9374-8656112f2a3c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b956b182-9009-4fa5-8027-792391660992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322233ab-a6f1-42b8-a978-29a40b84ff8b",
        "cursor": {
          "ref": "d298d482-182d-46b3-af1e-402bc45ddd70",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f7119edf-8f78-4251-af0a-148ab5750cd9"
        },
        "item": {
          "id": "322233ab-a6f1-42b8-a978-29a40b84ff8b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bcb10089-c92d-4d41-9863-18440ed9e812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d8ecff-3051-4b1a-8f33-1e0dc90f5f3b",
        "cursor": {
          "ref": "9f087c9f-514f-41aa-b8c1-2d125d591884",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5280a520-b60d-4494-b0e7-fb8449c6accc"
        },
        "item": {
          "id": "97d8ecff-3051-4b1a-8f33-1e0dc90f5f3b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "dd8e5bd0-abc4-49ed-ac27-452f72321bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166b1555-86ce-4a54-9630-e323aebc708d",
        "cursor": {
          "ref": "82f4d073-3e26-4175-aa7a-c68f19cb3274",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "359d49bf-4bb9-4723-889f-4cb3bbd6537e"
        },
        "item": {
          "id": "166b1555-86ce-4a54-9630-e323aebc708d",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "37246eff-9cdf-4d51-92fd-38af9c7a27be",
          "status": "OK",
          "code": 200,
          "responseTime": 604,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "9b59ecdb-ae4a-4c75-b341-59d87e2f1efe",
        "cursor": {
          "ref": "877b05d6-8077-4cb5-95aa-219e30e38c87",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0ebec6c6-4153-4535-be41-fc27acc7b487"
        },
        "item": {
          "id": "9b59ecdb-ae4a-4c75-b341-59d87e2f1efe",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "15646043-437b-4f83-8fc5-fabc1c125aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a54e34a-dc06-4cbc-b1d7-64f81a4d52a9",
        "cursor": {
          "ref": "eb279e0e-e446-4d39-adb1-e05c945d9a1f",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "212cf60f-9091-4113-88fc-47ef3fc86ac4"
        },
        "item": {
          "id": "9a54e34a-dc06-4cbc-b1d7-64f81a4d52a9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d9523d7a-b066-47dd-9b61-24454802d2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa76fb60-68dc-4cab-83bd-f03acb549e84",
        "cursor": {
          "ref": "355906e4-2f5a-4422-8f54-d0364915062a",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ce64558c-ad7f-4807-8e91-aae1bbe513f6"
        },
        "item": {
          "id": "fa76fb60-68dc-4cab-83bd-f03acb549e84",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "59b769c5-8eaf-4eff-a911-716f845fe0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 395,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37790d21-ab0f-4ecd-9cc5-5e6fdfc52434",
        "cursor": {
          "ref": "39ae0db9-582b-4307-a879-fdf2c6d367e4",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "be511e2e-981c-4fea-a557-430e43d27044"
        },
        "item": {
          "id": "37790d21-ab0f-4ecd-9cc5-5e6fdfc52434",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1ce1077a-81c0-4de1-b552-ddb6210a44aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e867a7-5f5d-4f8e-b395-9479ef7b3912",
        "cursor": {
          "ref": "c7b37e2c-83d5-4cf1-9c2e-54681f2109a9",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a71dda55-80c6-4a6b-95fd-a03339c2601b"
        },
        "item": {
          "id": "f8e867a7-5f5d-4f8e-b395-9479ef7b3912",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cff5fd5a-b665-4a26-8f67-e47478c8244f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae431f39-b694-42cb-b5b4-e5cbb0d634ac",
        "cursor": {
          "ref": "c377f407-909a-4369-bf8d-4234786bf997",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "68093c95-0de6-45f4-bba5-0072eacf5703"
        },
        "item": {
          "id": "ae431f39-b694-42cb-b5b4-e5cbb0d634ac",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "500d5273-3015-47b1-bde1-05850bcabf0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15195200-8322-443e-8a1a-9f10eb2ffa4d",
        "cursor": {
          "ref": "6732fb9b-1b4d-4d04-900a-7070e9630117",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "109cfcb4-f150-499a-bb16-ebefd71e7163"
        },
        "item": {
          "id": "15195200-8322-443e-8a1a-9f10eb2ffa4d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a9e32579-bc5f-40dd-89bc-1b2d487d2bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112ec82e-f257-4250-adfa-356319123fe5",
        "cursor": {
          "ref": "8a8e348d-7991-42de-b286-61a9fc169018",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e7041f61-bf24-4629-9e82-d88ecb73afc7"
        },
        "item": {
          "id": "112ec82e-f257-4250-adfa-356319123fe5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f2acd6ef-35c4-46b9-bf9c-bbb693d300e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac085230-f2f3-4fc3-a3d0-e966bedb66eb",
        "cursor": {
          "ref": "bfc95948-82cb-4064-a2f2-141cb4a91f63",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "20a0cad6-305c-4682-9b88-0f67fba184d7"
        },
        "item": {
          "id": "ac085230-f2f3-4fc3-a3d0-e966bedb66eb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f731ed85-c8ea-4116-9406-b3823261fe0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbeb2ac-b224-4a1c-8e77-619084232d2c",
        "cursor": {
          "ref": "cfad2335-c9ed-4f53-a258-d3c3146578b3",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4b8bb56e-dc38-420d-93ba-e0475a52baa9"
        },
        "item": {
          "id": "dcbeb2ac-b224-4a1c-8e77-619084232d2c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0b7b8cbf-ba2d-416a-afc8-c3b460af301e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9e2e31-cfe2-4bf4-9650-ce41c88b9760",
        "cursor": {
          "ref": "becce63c-0453-4453-9900-39a789e806f5",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c0b15e1b-2980-4bde-8116-1421bdf8815a"
        },
        "item": {
          "id": "4e9e2e31-cfe2-4bf4-9650-ce41c88b9760",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3d66dfcc-311b-4648-a831-e227364a2c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1ad395-b7a8-481b-996c-05601ee4e5ba",
        "cursor": {
          "ref": "e4435804-439d-44e1-a39c-80eab824f1fb",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f0e546f8-aeab-4006-ba78-47fed0c16999"
        },
        "item": {
          "id": "1f1ad395-b7a8-481b-996c-05601ee4e5ba",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1774c296-d959-4ea6-b5b9-7a28c8bc65a9",
          "status": "OK",
          "code": 200,
          "responseTime": 249,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "1394e2bd-7d6f-4d80-83bc-e9e1f84eb1b6",
        "cursor": {
          "ref": "05a6166f-7e3f-4f9c-ad54-126d0b9acee5",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "373641a4-d7c0-4e87-83fb-cde3f0187be4"
        },
        "item": {
          "id": "1394e2bd-7d6f-4d80-83bc-e9e1f84eb1b6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b68dc650-2257-4504-bee3-07443866d819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654649cc-265e-4dc1-86c7-518e825152cb",
        "cursor": {
          "ref": "290d6196-1e84-41b2-abde-077fa858de80",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e66eabce-d398-4159-a4c9-42925138e1ef"
        },
        "item": {
          "id": "654649cc-265e-4dc1-86c7-518e825152cb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d4c9ca94-64f9-4d08-b3e1-7cce262a5c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e1286e-4e71-4234-8c22-1bafa67ee3d8",
        "cursor": {
          "ref": "5baec383-a34a-4056-9b99-9b3eac6f15f7",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4b8eac5a-725a-48de-afae-c7966c05c1fd"
        },
        "item": {
          "id": "67e1286e-4e71-4234-8c22-1bafa67ee3d8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2f67c2e7-2523-4429-93df-a79beb8b6be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7931c39-9592-4594-9a9f-6359dbf7f403",
        "cursor": {
          "ref": "46dc4235-b948-4f36-b0d3-2713e6ee9b8a",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e9f8f5e3-7315-4db1-ad36-da55831e1604"
        },
        "item": {
          "id": "a7931c39-9592-4594-9a9f-6359dbf7f403",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6236a4c0-b558-40b7-8a31-f46944489364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a73f836-0be9-49ca-a941-c4ec8822822e",
        "cursor": {
          "ref": "b5bc1f61-0050-42b2-b85e-bfd8950a915c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ebcf5806-5a07-4565-a5d3-b84098502803"
        },
        "item": {
          "id": "5a73f836-0be9-49ca-a941-c4ec8822822e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5b9de65b-a2db-4cb7-a688-871cdbfc3e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3899c9ce-7b07-4412-a73d-aaa27b195af6",
        "cursor": {
          "ref": "ad69b7f0-743a-4bbc-a8f5-a02a9edd1584",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c161e7b0-1ccf-4cc4-993e-26a783e6eac4"
        },
        "item": {
          "id": "3899c9ce-7b07-4412-a73d-aaa27b195af6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "210819bf-20bc-40de-affd-79bbf796297f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f224519b-ecd4-4213-a972-492ca1b895c1",
        "cursor": {
          "ref": "3ca8ee88-9808-470e-a8ca-447a5d8f6ff3",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6e28e31e-9d37-42f0-8e5f-070806971d25"
        },
        "item": {
          "id": "f224519b-ecd4-4213-a972-492ca1b895c1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "be229d45-e5ba-47e7-992a-8c5f0a168c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6981f9-b097-4ab8-a191-34c564f63e07",
        "cursor": {
          "ref": "1a805bc7-8002-49d7-acb0-60c0eb527178",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2ed4e426-d53e-46c4-bf70-c724550880c3"
        },
        "item": {
          "id": "af6981f9-b097-4ab8-a191-34c564f63e07",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5583f166-6968-4a63-b25e-68b19771db88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99042395-931d-48cb-bc2a-d94ba2dcf2f2",
        "cursor": {
          "ref": "4a387364-4638-4910-8bfe-e5f992db1f40",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fb5337a0-3a4e-4a46-a69d-692b53f46f72"
        },
        "item": {
          "id": "99042395-931d-48cb-bc2a-d94ba2dcf2f2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "883b3cf2-c760-4301-a0a2-a6f7ff976939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226256c4-05c9-46e5-b1eb-53a407180670",
        "cursor": {
          "ref": "a82cb5cd-a43f-4af1-9c26-5d5123c3a324",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "235dbe91-46ef-4824-9955-3b46c92b8639"
        },
        "item": {
          "id": "226256c4-05c9-46e5-b1eb-53a407180670",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4312399c-f4cf-4923-ac38-c5a93982cb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c9fb767-f961-427f-bb1d-66c66785bc74",
        "cursor": {
          "ref": "cd5395f2-413b-4081-9394-965d6c076d20",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "72d2b2ee-a5d9-4a43-9d44-0666cf180ded"
        },
        "item": {
          "id": "0c9fb767-f961-427f-bb1d-66c66785bc74",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "283686a0-ad29-4cb8-80e1-79ed903ceda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a03fb7b-419a-45aa-acca-bbd47e0986b0",
        "cursor": {
          "ref": "d3ecdf34-7e74-49bb-98f8-755fd8ef7b7e",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "63d25484-2109-4ee4-a70e-c9b63fa0815c"
        },
        "item": {
          "id": "5a03fb7b-419a-45aa-acca-bbd47e0986b0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7817765d-6d3b-4c91-a50b-9d3cd94e9e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be9b20e-0aa9-40ab-a4ba-e8c6b4acd993",
        "cursor": {
          "ref": "f1193846-7bdf-4a2d-98b5-1de8f71c2cd8",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "26630d4f-cbc4-4eda-bf25-950f29e8bf33"
        },
        "item": {
          "id": "5be9b20e-0aa9-40ab-a4ba-e8c6b4acd993",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ed04baf4-cefa-4325-a367-a7cb6014eee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed4bea4-afea-4aba-b687-e67efb31f3a4",
        "cursor": {
          "ref": "c4267793-669d-40b3-922a-63e19ab84624",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "42f7bb4f-1c18-408a-a8bd-2eca20db1e4c"
        },
        "item": {
          "id": "8ed4bea4-afea-4aba-b687-e67efb31f3a4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "07ff49b3-5c40-4fc9-ac77-74c7529985e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2b2c2b-81fe-4dae-ae05-e81cb0ff6f60",
        "cursor": {
          "ref": "084b5896-f277-409d-93e9-0366138fe80b",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1033eb31-5ebd-47ba-b1c9-1b1e59034abe"
        },
        "item": {
          "id": "bc2b2c2b-81fe-4dae-ae05-e81cb0ff6f60",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c26db9a1-275d-4657-8b06-f4ec50e85aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699d0523-4eca-4f0d-a765-92224626efe5",
        "cursor": {
          "ref": "df86a228-857e-4971-9a56-1961fe2df8d7",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "82f4418a-c7b3-4370-9918-416443c18280"
        },
        "item": {
          "id": "699d0523-4eca-4f0d-a765-92224626efe5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d5418b05-169d-44d5-a93d-18ed8360da8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610a0d50-1981-4520-96a3-b7381174158d",
        "cursor": {
          "ref": "ec7bae84-54de-4082-b50c-b497c6886dc9",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9c642653-2c41-49ff-8f7c-242159be6edf"
        },
        "item": {
          "id": "610a0d50-1981-4520-96a3-b7381174158d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a811f2bc-627e-435c-8a41-9bfed58704d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f1c9ad-c13d-4ee3-93e7-172fbc13f4aa",
        "cursor": {
          "ref": "35a09ca2-0208-45ce-ba21-daeafef8b44e",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "24d14f0d-7574-493a-8237-00eabc38735b"
        },
        "item": {
          "id": "f4f1c9ad-c13d-4ee3-93e7-172fbc13f4aa",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1f45fa2d-19c7-4e36-9a3c-3503b676953f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f801be75-45d7-47d2-be3e-e9b5d90db630",
        "cursor": {
          "ref": "a4b7c9c4-02ff-42e1-9ef1-0d847211c2a2",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "55b7008a-7436-4be4-85ae-d661656714c7"
        },
        "item": {
          "id": "f801be75-45d7-47d2-be3e-e9b5d90db630",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9c6b5c77-ece2-4250-961a-6c94524cfaf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9217443-9d9e-4d02-844f-85fc6c40d65d",
        "cursor": {
          "ref": "6b7ea7d8-6bb9-4108-b6c6-ccefbb3d3cb6",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1c955956-b9bc-4823-a7dc-6458844ec61c"
        },
        "item": {
          "id": "e9217443-9d9e-4d02-844f-85fc6c40d65d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "73b46f64-522d-4ea2-b806-de7c09c5b4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c03629-d680-4127-8ae9-d57bf40b776d",
        "cursor": {
          "ref": "2f808316-1e13-47a6-a94e-72fb6b6d8839",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3c73ff08-29fa-4ac8-bf74-3065d9a62ebc"
        },
        "item": {
          "id": "98c03629-d680-4127-8ae9-d57bf40b776d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0e41ad7d-10dc-46ad-ac4b-471dd20ce027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 388,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7429ca-e6fc-4f2b-9984-45a87d611dc7",
        "cursor": {
          "ref": "7095cf39-0b22-4c89-b7f2-8c80ce909128",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "962c9aaa-d36e-4de1-83ca-f59e5d3c2f74"
        },
        "item": {
          "id": "5c7429ca-e6fc-4f2b-9984-45a87d611dc7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d2d56195-d7ea-4a7d-9cec-24b8168e84f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e898f3-aefa-499a-91bf-38295bd9696c",
        "cursor": {
          "ref": "b75b1afa-44be-4347-90a4-fa83eb7515a5",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d42fd0fb-b538-44ff-a760-3aa1cf274fb9"
        },
        "item": {
          "id": "88e898f3-aefa-499a-91bf-38295bd9696c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "45b98c81-0aea-488d-9895-f310356c703c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c272c7d-cbcd-448b-89eb-66e135cf9a80",
        "cursor": {
          "ref": "7b8e6217-79b4-4a2f-926a-5151d480a6df",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "633e3551-5fe7-48e5-af52-66931849b8ba"
        },
        "item": {
          "id": "7c272c7d-cbcd-448b-89eb-66e135cf9a80",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fa7d8657-4ea6-47a6-8050-96504e9f5453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea9ddc3-42e8-45a6-8226-36fe8201ae82",
        "cursor": {
          "ref": "b5c2c80a-46c3-4e97-abf1-f5814010b4a0",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "59020cee-617d-486d-81a3-59dd96e0cbde"
        },
        "item": {
          "id": "5ea9ddc3-42e8-45a6-8226-36fe8201ae82",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7905f7ba-6ad8-41d0-95a5-e02d362eb9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc1328e-0828-465f-bfd2-f32dd6b73c9c",
        "cursor": {
          "ref": "54f2f996-7397-4057-8d40-02df2839a459",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b1d9215d-112e-4ff2-bae3-bc6dab8aea96"
        },
        "item": {
          "id": "4fc1328e-0828-465f-bfd2-f32dd6b73c9c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3c55307a-895d-49ad-9575-388eace74d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb98e3e-057a-4b14-933a-cd58f726e27e",
        "cursor": {
          "ref": "77352dd9-8382-45a7-a2eb-16e22e22a4ab",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cd5a5fd9-b383-451a-8c46-26e1fd860ecb"
        },
        "item": {
          "id": "1cb98e3e-057a-4b14-933a-cd58f726e27e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d631b682-7773-449e-861f-898acaac3e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c517eb10-43a1-41e4-84e1-60a9a9f8775e",
        "cursor": {
          "ref": "eb8a212e-4bd3-478c-a0ae-e89981a4cc3a",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "92eec9b1-bcc4-4e4e-8c24-590cfdbff0d3"
        },
        "item": {
          "id": "c517eb10-43a1-41e4-84e1-60a9a9f8775e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8238d322-7814-4f1f-bddc-81ab510ffb80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe53bc99-2900-455d-a657-5254728a47ab",
        "cursor": {
          "ref": "c98676dc-1ed4-46da-a052-251fc8f24f1b",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "83a2454c-b2a2-4578-aa9c-dc84b8a15d7d"
        },
        "item": {
          "id": "fe53bc99-2900-455d-a657-5254728a47ab",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c242bf03-ade5-4e70-824f-fde37617f9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb338e1-c9c9-43c8-9f95-5de49c3f797a",
        "cursor": {
          "ref": "6236f16b-fcc8-42b2-9857-6005c068ae3f",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d8a77457-6b36-4a9d-97f4-45803e13b5dd"
        },
        "item": {
          "id": "fdb338e1-c9c9-43c8-9f95-5de49c3f797a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "79fb4481-7b18-4cee-b4f1-065e15161079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fe3f14-180f-4801-854f-b8a1b83a2045",
        "cursor": {
          "ref": "aa832e41-1ae8-43cc-989c-b7f894a6a555",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bee44608-a36c-4163-a21e-cf26d9bc2ea2"
        },
        "item": {
          "id": "60fe3f14-180f-4801-854f-b8a1b83a2045",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "69bcccce-72e2-4b43-b666-59cef68ae0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ede635d-1a37-4609-bf9d-88700dec0774",
        "cursor": {
          "ref": "ea70905b-c385-4c16-92e0-1a47b0a7138b",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fc89707e-be75-4185-b80e-b29bde6a80ff"
        },
        "item": {
          "id": "9ede635d-1a37-4609-bf9d-88700dec0774",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fca09bc7-9b9e-42f9-81b9-9ea85cc87814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fe7b6b-5c22-47d0-9d04-cfd85dad2015",
        "cursor": {
          "ref": "ef036b7a-e2cf-4f26-84a0-e6e9c05ad9f5",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "340da9c6-fc76-4f80-999e-477fa498a1dd"
        },
        "item": {
          "id": "02fe7b6b-5c22-47d0-9d04-cfd85dad2015",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d52a7175-32f1-47fe-861e-e59541942ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c5b04d-ae5a-4c71-b714-48a17a9bfdac",
        "cursor": {
          "ref": "3dec4a76-2281-4df3-b6e8-2c7ef95c7072",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "34cb8dbf-ea92-40ff-84a6-271d9eb4df34"
        },
        "item": {
          "id": "e1c5b04d-ae5a-4c71-b714-48a17a9bfdac",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0142cfc3-3c47-42e1-84da-02c7dd770cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318b344c-4006-46dd-8f20-65e346cbc69b",
        "cursor": {
          "ref": "0f6b99e8-ffe4-406b-be1a-8899a4935a69",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "02dd30e9-1f75-49a9-a615-2daead49853f"
        },
        "item": {
          "id": "318b344c-4006-46dd-8f20-65e346cbc69b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "661d846a-15e9-4ef6-b818-193ac316c3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2646c65-accd-4da2-a977-332991649184",
        "cursor": {
          "ref": "9df377ce-e21d-4667-a80f-34dfb69b8ce3",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2fba5905-3600-428c-80a6-fad1b0820acf"
        },
        "item": {
          "id": "b2646c65-accd-4da2-a977-332991649184",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e1265d82-21af-416a-b00c-caec5f6f2986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb10b86e-600a-4326-bf03-5a6b3593ea5b",
        "cursor": {
          "ref": "86b1e271-b179-4f9c-a332-94d138991620",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "de64e1e9-308e-4169-afe4-7426b4c21d15"
        },
        "item": {
          "id": "cb10b86e-600a-4326-bf03-5a6b3593ea5b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "543c48ff-a116-4568-aec3-433bfe56d80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2add2672-5656-4453-9f95-33a078aebf9b",
        "cursor": {
          "ref": "b8db4972-7a81-41af-98a3-3af9c4b67c73",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "51863e0a-c6f7-4166-9417-56bd45ae229d"
        },
        "item": {
          "id": "2add2672-5656-4453-9f95-33a078aebf9b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5ced14b2-3cf2-4217-8d17-ddd0bf74858b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69863fe5-f122-4a08-9045-7087ca4e6fac",
        "cursor": {
          "ref": "f970af36-518d-47bf-a5b3-da4d1a725fd2",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9eb8c88e-19d4-47ed-a505-f65725169f0a"
        },
        "item": {
          "id": "69863fe5-f122-4a08-9045-7087ca4e6fac",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cd60c70e-2fa1-4b4b-8c7a-268be09e2950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13e1105-a3dd-4f67-aab7-f4040a989ffb",
        "cursor": {
          "ref": "436d8c51-5a2c-46df-a0a8-d041984c73f1",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "87cbb9d3-09f2-44c1-9536-4ab4528d3370"
        },
        "item": {
          "id": "f13e1105-a3dd-4f67-aab7-f4040a989ffb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a5f51e0f-84e8-424d-afca-56e01478eca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18371de2-9b1f-4d77-992f-5a6f6ee71358",
        "cursor": {
          "ref": "31e2ac37-f79f-4a02-bfb4-c4698b70bcbd",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1709ecee-801d-4667-8454-809565071572"
        },
        "item": {
          "id": "18371de2-9b1f-4d77-992f-5a6f6ee71358",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bbeffe34-ccdf-478d-ae63-ddfcd1831b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d4d76f-ee37-4563-9ff7-4191e23adc56",
        "cursor": {
          "ref": "bb03f554-25fc-4220-99eb-d51473ff4798",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9bd62b7a-db87-4a07-82f3-1b019993626a"
        },
        "item": {
          "id": "e7d4d76f-ee37-4563-9ff7-4191e23adc56",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "106b0c1b-5226-4b5d-8021-98aade641e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985785d8-3a23-432d-aa11-38e13ad047e1",
        "cursor": {
          "ref": "5cb92e14-1ee9-4d80-a783-0d1d564bdf59",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8d4ff682-ea9d-41c2-b412-3a8a1d98d9da"
        },
        "item": {
          "id": "985785d8-3a23-432d-aa11-38e13ad047e1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6fec6922-3283-4d1a-a866-2fa5ce848501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9ae0d2-19e1-45c8-b7e6-7d2db65451dc",
        "cursor": {
          "ref": "9e6ae5a6-796e-49ea-a3ee-47bdb4695eb6",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0720da11-d282-415d-be90-fb99f8c208c9"
        },
        "item": {
          "id": "eb9ae0d2-19e1-45c8-b7e6-7d2db65451dc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ee1868a8-9b5d-4756-86ee-0d8faa610a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb21653-ead1-415f-9f40-80f944a4b480",
        "cursor": {
          "ref": "27b385d3-4fe0-4154-a37d-f7390c5ef04c",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "580f0f43-9f7e-4b36-b55d-be63bb805951"
        },
        "item": {
          "id": "bcb21653-ead1-415f-9f40-80f944a4b480",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "159c35ff-6507-4dc5-a764-33c3f7071e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b6689e-fa88-4eaa-a876-8acd8a474ea6",
        "cursor": {
          "ref": "88b34f42-bf3e-4dad-8382-72db5c8e0e0b",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e6d8b4d6-7743-4c7b-a996-14b2c8d91a52"
        },
        "item": {
          "id": "b4b6689e-fa88-4eaa-a876-8acd8a474ea6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b5476b33-de8d-4b27-83b0-c16229ccc46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45308e09-91fd-4a00-96d6-c23e67df379a",
        "cursor": {
          "ref": "83c14dbf-cd15-4096-8347-c5d5309dcd98",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "03ea6599-5098-4861-bf4a-7b38bfaca781"
        },
        "item": {
          "id": "45308e09-91fd-4a00-96d6-c23e67df379a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "583158de-c674-4104-a869-a77755824785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22914d4-c0f4-4d24-b0d6-7e0c26a08f89",
        "cursor": {
          "ref": "ea4971af-c8b8-4924-b7f7-e21dab443105",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "27b16956-8e94-493e-9fb3-486b2132821b"
        },
        "item": {
          "id": "f22914d4-c0f4-4d24-b0d6-7e0c26a08f89",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6e06becc-6ca6-4256-be98-171b83f568c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b33803-4a28-4d55-85ab-50e959001c6b",
        "cursor": {
          "ref": "2c57f1ea-a20a-4d8c-b699-7b588444bf29",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "182ff064-e1f1-41ee-a830-e71311479b9a"
        },
        "item": {
          "id": "f0b33803-4a28-4d55-85ab-50e959001c6b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f656e7b1-6aee-454d-8b4d-b13bdbdedd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede54277-5d7f-4ded-b772-34510bf5dd5e",
        "cursor": {
          "ref": "f0e14f33-1e97-4b5e-abd6-55fb21fa8f2d",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b760309b-5aeb-4b82-8c0e-775af543f7ad"
        },
        "item": {
          "id": "ede54277-5d7f-4ded-b772-34510bf5dd5e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "28120dbc-5080-430d-b0be-1f55e1b19a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892201f6-27ec-41fd-9b26-57e25792b751",
        "cursor": {
          "ref": "1ea94631-e0c3-4350-8995-d6e2efadd596",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a1232aed-d2e9-4dbb-bc20-c588aa0108ea"
        },
        "item": {
          "id": "892201f6-27ec-41fd-9b26-57e25792b751",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "87d1fba6-ad8d-467c-ba84-5de10796da37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e465dddb-a77c-47b7-a391-1949cb1f0682",
        "cursor": {
          "ref": "eda42f68-27bf-4292-9292-4b05258daf9f",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8ee0f01c-816e-407f-b7c6-57eb402e0f0a"
        },
        "item": {
          "id": "e465dddb-a77c-47b7-a391-1949cb1f0682",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fe8eee74-af87-41ea-9744-12a792d51b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9add21-6467-407d-8012-35622747a557",
        "cursor": {
          "ref": "7ca80e63-ae8e-46ee-be87-93976ff611cc",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3c2ce555-1497-4056-a246-7136efb2bd2f"
        },
        "item": {
          "id": "fa9add21-6467-407d-8012-35622747a557",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ca592585-e6f9-4ed8-85c7-a0bb55cbcc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727106ab-a471-4360-81a0-0bf18c745d52",
        "cursor": {
          "ref": "d19efdc4-8153-4cbb-bafa-d188ee80175f",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e429b2fd-e95a-4281-8d0f-ad5c40579f39"
        },
        "item": {
          "id": "727106ab-a471-4360-81a0-0bf18c745d52",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e43d3340-d33a-4ac3-b249-72079ae511fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020a925a-33b8-43a8-8b68-f0744cd6640e",
        "cursor": {
          "ref": "04359a01-03a6-414e-888b-6b03dcdb7483",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6ee36f2c-e149-44be-a64a-f4eeed5335a3"
        },
        "item": {
          "id": "020a925a-33b8-43a8-8b68-f0744cd6640e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "37b471b9-d784-4106-8a22-01f0206fb5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7571497f-5df9-49e9-b4ff-6c0d6ff48bcc",
        "cursor": {
          "ref": "c9e20946-5e67-4278-85be-e8cd5f1e4104",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "36ca68d0-6cdd-4afa-a1f1-8e01148ac3b7"
        },
        "item": {
          "id": "7571497f-5df9-49e9-b4ff-6c0d6ff48bcc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8c70fd7e-aaed-4b83-9dea-7e028a97f37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e58e42-a749-4410-9a9a-6b7622652428",
        "cursor": {
          "ref": "0f8cd6ad-8a7d-42fa-a751-8fd1d1e33e51",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bb8483f1-68d2-4e85-a1ec-10fec7af9f0c"
        },
        "item": {
          "id": "76e58e42-a749-4410-9a9a-6b7622652428",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "458e7d8a-107b-4585-a0fc-864c581bd85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266f3723-2d02-40a1-85e3-b5a6235586c8",
        "cursor": {
          "ref": "e76d004f-8001-4701-a3bb-7fbe8a552c03",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "efc6ffbf-709d-44b4-9c8a-db52964ba980"
        },
        "item": {
          "id": "266f3723-2d02-40a1-85e3-b5a6235586c8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "17c975f3-6b62-42f9-9e9f-c3b58ca31cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedb501d-12d8-4a8c-9225-f974f71f781c",
        "cursor": {
          "ref": "57088eb7-d490-4a35-a5be-cc9b5a82ac72",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a8855972-812f-4c77-90f4-6b9fa2b94e8d"
        },
        "item": {
          "id": "aedb501d-12d8-4a8c-9225-f974f71f781c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8286dc21-07a1-4720-a6fa-8a3902817627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e173e02-2e1f-4dac-bf92-7f61b8941e7e",
        "cursor": {
          "ref": "90d67ecc-0d5a-4501-b07a-18bd0bddb382",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5d7f2caf-be13-49b3-9408-fab28497c835"
        },
        "item": {
          "id": "4e173e02-2e1f-4dac-bf92-7f61b8941e7e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e86efd89-c533-4e75-a473-0e9a275361e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d13f6c-4a0c-44d5-8f36-f02cf4783fbb",
        "cursor": {
          "ref": "ddcbd490-715f-4435-99a9-61cefb47461b",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b40dfdc1-1674-4403-8c88-25cf0c6f6b81"
        },
        "item": {
          "id": "28d13f6c-4a0c-44d5-8f36-f02cf4783fbb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e212eb5d-948c-4d1b-8b67-97c7de0fe7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21437426-c0c4-4fc1-8056-f4ad8990026f",
        "cursor": {
          "ref": "d67be83f-a75c-4854-af7b-4d5f462adc9e",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4d3d878d-cf0f-47fe-8dfa-55f1e19cfbe3"
        },
        "item": {
          "id": "21437426-c0c4-4fc1-8056-f4ad8990026f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "93feb0a5-7e20-43f6-92b8-f41445b8f86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cadc28-22b0-4c08-b7ba-9d3285c59567",
        "cursor": {
          "ref": "8246617c-417b-4c2e-85d5-953c1f1162b7",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d67d4a69-299d-4ba4-9239-80010f7cab02"
        },
        "item": {
          "id": "57cadc28-22b0-4c08-b7ba-9d3285c59567",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c73ed462-00b7-4e66-a3d9-e9671be2ea75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55cb9c1-b5a4-4774-a3d6-b8ebd566ef7e",
        "cursor": {
          "ref": "0f74a280-22ff-424b-b9fe-bb0b7f1ef2ef",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "03ae8608-5482-4a17-a0c1-31cb6aa6756e"
        },
        "item": {
          "id": "e55cb9c1-b5a4-4774-a3d6-b8ebd566ef7e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a007badd-f86c-4c9d-b386-e8c33587d293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5f4957-0070-477b-bf6f-a8b5a62a46a1",
        "cursor": {
          "ref": "ac2f09cb-fab2-4c01-8f9a-4d4bb7970bc3",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4ea5a152-4e61-4b69-96b4-cdfec09b8d10"
        },
        "item": {
          "id": "cc5f4957-0070-477b-bf6f-a8b5a62a46a1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b3131876-f6c8-4bb4-8397-9da1cc4fe03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9718aeda-cfa0-4727-bda8-c35f3f51504b",
        "cursor": {
          "ref": "170040af-104e-40b2-a351-492492b55f35",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e848d5e3-a4cb-430b-9da2-1a2b6e4d3f07"
        },
        "item": {
          "id": "9718aeda-cfa0-4727-bda8-c35f3f51504b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8ccd5c78-97b6-4a15-895b-f81c09707095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6662de4d-ab56-4df8-b5e7-b0ceab7b9c45",
        "cursor": {
          "ref": "c8780282-447c-43c0-a6af-6ae69ae7d24f",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1be3f671-1a36-40f4-8d02-bf47d2192765"
        },
        "item": {
          "id": "6662de4d-ab56-4df8-b5e7-b0ceab7b9c45",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "38cc9d1c-a02d-41bc-bdf8-5b1eec93b045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c27e39-e45d-4cc9-81d3-afeccbb7f581",
        "cursor": {
          "ref": "efec8afd-3fdb-4080-807e-a1190aa28994",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4f1d2981-5ba0-4126-934d-24f7d37c3f1c"
        },
        "item": {
          "id": "25c27e39-e45d-4cc9-81d3-afeccbb7f581",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "abc48e29-0f9a-482d-8ea9-e8248f852a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b297628-ddad-40a1-a139-4e7ea2f4f3d1",
        "cursor": {
          "ref": "2edf6947-9336-4f8d-af92-65757b4f61da",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8a1e6050-9f84-45e6-a241-3951e43c6d50"
        },
        "item": {
          "id": "9b297628-ddad-40a1-a139-4e7ea2f4f3d1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3e368199-249c-4a6f-95a7-8c91baf41fa5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764aa74d-e2d3-4780-a650-661abcf8e0fb",
        "cursor": {
          "ref": "f68ca97b-e987-484b-8d68-7e19a197fe66",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6a83e22b-32fc-4f97-be4d-7bedf806c261"
        },
        "item": {
          "id": "764aa74d-e2d3-4780-a650-661abcf8e0fb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0d1da63a-5b8a-4398-8de1-8427d1d16d1a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c07274-ac73-46bf-8a58-5613750d1857",
        "cursor": {
          "ref": "782b10b5-6043-4245-bde4-6757be37b294",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "89850699-1297-4b55-8192-c5b9015f2d7c"
        },
        "item": {
          "id": "36c07274-ac73-46bf-8a58-5613750d1857",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ecf05425-88db-4b89-9256-4fe7a70a7bec",
          "status": "OK",
          "code": 200,
          "responseTime": 278,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d5ec98-dd2c-44ea-bbd1-81945a80e6b8",
        "cursor": {
          "ref": "00a4f90a-c204-44e7-b0eb-aa2fda131ff2",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cc14463f-c915-43b7-855b-57d622b493d9"
        },
        "item": {
          "id": "05d5ec98-dd2c-44ea-bbd1-81945a80e6b8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ea3da144-250f-47ea-99af-7073eb490aa4",
          "status": "OK",
          "code": 200,
          "responseTime": 636,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "44513035-a83f-4ed9-b600-8d6644cea142",
        "cursor": {
          "ref": "e74ae073-db51-4a0c-bcff-b6c95fc0998e",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c25e50cd-a621-45da-a810-dd2dafbbf6bb"
        },
        "item": {
          "id": "44513035-a83f-4ed9-b600-8d6644cea142",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "38874e1d-7e93-4973-896b-711266fa589a",
          "status": "OK",
          "code": 200,
          "responseTime": 671,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07e3198-c827-4912-a727-b0d8004f1d0b",
        "cursor": {
          "ref": "0cf88ae2-70cb-492e-bda3-89d441f8ffbf",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7e6d7aac-94ab-490d-a27b-b0f4c9a69032"
        },
        "item": {
          "id": "b07e3198-c827-4912-a727-b0d8004f1d0b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b54f1680-5aa8-4d17-8a57-7b3b1734b9ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07e3198-c827-4912-a727-b0d8004f1d0b",
        "cursor": {
          "ref": "0cf88ae2-70cb-492e-bda3-89d441f8ffbf",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7e6d7aac-94ab-490d-a27b-b0f4c9a69032"
        },
        "item": {
          "id": "b07e3198-c827-4912-a727-b0d8004f1d0b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b54f1680-5aa8-4d17-8a57-7b3b1734b9ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07e3198-c827-4912-a727-b0d8004f1d0b",
        "cursor": {
          "ref": "0cf88ae2-70cb-492e-bda3-89d441f8ffbf",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7e6d7aac-94ab-490d-a27b-b0f4c9a69032"
        },
        "item": {
          "id": "b07e3198-c827-4912-a727-b0d8004f1d0b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b54f1680-5aa8-4d17-8a57-7b3b1734b9ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71645d3a-2a04-4669-8741-1f296950e7f7",
        "cursor": {
          "ref": "55c6262f-35d8-4153-8bdf-675a386bbba3",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cc11a39a-d31c-4801-8cf2-1e8dbe2edbda"
        },
        "item": {
          "id": "71645d3a-2a04-4669-8741-1f296950e7f7",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4b86c58c-1298-4051-8301-f1940aab7651",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831a3a62-cbe9-4238-812f-b369cddbe4be",
        "cursor": {
          "ref": "43f75d4a-b316-4cc3-abd8-6435b54845e6",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7d2fc0f1-fada-4335-aaef-4546a2ed9ad0"
        },
        "item": {
          "id": "831a3a62-cbe9-4238-812f-b369cddbe4be",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c366aa13-4267-4055-b7db-0619312f49b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "831a3a62-cbe9-4238-812f-b369cddbe4be",
        "cursor": {
          "ref": "43f75d4a-b316-4cc3-abd8-6435b54845e6",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7d2fc0f1-fada-4335-aaef-4546a2ed9ad0"
        },
        "item": {
          "id": "831a3a62-cbe9-4238-812f-b369cddbe4be",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c366aa13-4267-4055-b7db-0619312f49b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e576f4ff-afc6-46ec-bc51-ded1dab69729",
        "cursor": {
          "ref": "f281dd30-dc12-4d8b-a790-988ad00d83f6",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a0ca0aa4-347f-4261-9aa0-4594ad3beb3f"
        },
        "item": {
          "id": "e576f4ff-afc6-46ec-bc51-ded1dab69729",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ba428a5d-d907-424a-aecd-ab70ac8068f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "8ee9eeee-fdeb-44f5-afcf-048a7a6c1838",
        "cursor": {
          "ref": "9a3cdf20-7155-47e2-8b67-bd4d7426a847",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2186ce47-370c-420d-afd8-ea106f10306b"
        },
        "item": {
          "id": "8ee9eeee-fdeb-44f5-afcf-048a7a6c1838",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ef38c06b-23dc-47cc-85e8-30f757a9a170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "8ee9eeee-fdeb-44f5-afcf-048a7a6c1838",
        "cursor": {
          "ref": "9a3cdf20-7155-47e2-8b67-bd4d7426a847",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2186ce47-370c-420d-afd8-ea106f10306b"
        },
        "item": {
          "id": "8ee9eeee-fdeb-44f5-afcf-048a7a6c1838",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ef38c06b-23dc-47cc-85e8-30f757a9a170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f8816091-3950-414d-8d69-b1ba938c52e1",
        "cursor": {
          "ref": "6043eef0-d34c-41a1-b264-6af6529e9cde",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d77f02f9-8ada-40fa-82a5-724d4404e7cd"
        },
        "item": {
          "id": "f8816091-3950-414d-8d69-b1ba938c52e1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "b8dd684b-e923-4675-9de6-d33a972adf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}